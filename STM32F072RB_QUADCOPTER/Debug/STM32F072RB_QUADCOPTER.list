
STM32F072RB_QUADCOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c44  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08010d08  08010d08  00011d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011270  08011270  00013200  2**0
                  CONTENTS
  4 .ARM          00000000  08011270  08011270  00013200  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011270  08011270  00013200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011270  08011270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011274  08011274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08011278  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000200  08011478  00013200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  08011478  000137ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001585d  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003839  00000000  00000000  00028a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  0002d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d103  00000000  00000000  0002e457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4ee  00000000  00000000  0004b55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a159c  00000000  00000000  00065a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106fe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a90  00000000  00000000  00107028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010cec 	.word	0x08010cec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	08010cec 	.word	0x08010cec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff3f 	bl	80022c0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe7f 	bl	8002150 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff31 	bl	80022c0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff27 	bl	80022c0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fea9 	bl	80021d8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe9f 	bl	80021d8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbdb 	bl	8000c6c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb5b 	bl	8000b7c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbcd 	bl	8000c6c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbc3 	bl	8000c6c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb69 	bl	8000bcc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb5f 	bl	8000bcc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_f2uiz>:
 800051c:	219e      	movs	r1, #158	@ 0x9e
 800051e:	b510      	push	{r4, lr}
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	f7ff fff0 	bl	8000508 <__aeabi_fcmpge>
 8000528:	2800      	cmp	r0, #0
 800052a:	d103      	bne.n	8000534 <__aeabi_f2uiz+0x18>
 800052c:	1c20      	adds	r0, r4, #0
 800052e:	f000 fee3 	bl	80012f8 <__aeabi_f2iz>
 8000532:	bd10      	pop	{r4, pc}
 8000534:	219e      	movs	r1, #158	@ 0x9e
 8000536:	1c20      	adds	r0, r4, #0
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	f000 fd23 	bl	8000f84 <__aeabi_fsub>
 800053e:	f000 fedb 	bl	80012f8 <__aeabi_f2iz>
 8000542:	2380      	movs	r3, #128	@ 0x80
 8000544:	061b      	lsls	r3, r3, #24
 8000546:	469c      	mov	ip, r3
 8000548:	4460      	add	r0, ip
 800054a:	e7f2      	b.n	8000532 <__aeabi_f2uiz+0x16>

0800054c <__aeabi_d2uiz>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	2200      	movs	r2, #0
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <__aeabi_d2uiz+0x38>)
 8000552:	0004      	movs	r4, r0
 8000554:	000d      	movs	r5, r1
 8000556:	f7ff ff9d 	bl	8000494 <__aeabi_dcmpge>
 800055a:	2800      	cmp	r0, #0
 800055c:	d104      	bne.n	8000568 <__aeabi_d2uiz+0x1c>
 800055e:	0020      	movs	r0, r4
 8000560:	0029      	movs	r1, r5
 8000562:	f002 fda5 	bl	80030b0 <__aeabi_d2iz>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <__aeabi_d2uiz+0x38>)
 800056a:	2200      	movs	r2, #0
 800056c:	0020      	movs	r0, r4
 800056e:	0029      	movs	r1, r5
 8000570:	f002 f9e0 	bl	8002934 <__aeabi_dsub>
 8000574:	f002 fd9c 	bl	80030b0 <__aeabi_d2iz>
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	469c      	mov	ip, r3
 800057e:	4460      	add	r0, ip
 8000580:	e7f1      	b.n	8000566 <__aeabi_d2uiz+0x1a>
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	41e00000 	.word	0x41e00000

08000588 <__aeabi_d2lz>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	0004      	movs	r4, r0
 8000590:	000d      	movs	r5, r1
 8000592:	f7ff ff61 	bl	8000458 <__aeabi_dcmplt>
 8000596:	2800      	cmp	r0, #0
 8000598:	d108      	bne.n	80005ac <__aeabi_d2lz+0x24>
 800059a:	0020      	movs	r0, r4
 800059c:	0029      	movs	r1, r5
 800059e:	f000 f80f 	bl	80005c0 <__aeabi_d2ulz>
 80005a2:	0002      	movs	r2, r0
 80005a4:	000b      	movs	r3, r1
 80005a6:	0010      	movs	r0, r2
 80005a8:	0019      	movs	r1, r3
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	061b      	lsls	r3, r3, #24
 80005b0:	18e9      	adds	r1, r5, r3
 80005b2:	0020      	movs	r0, r4
 80005b4:	f000 f804 	bl	80005c0 <__aeabi_d2ulz>
 80005b8:	2300      	movs	r3, #0
 80005ba:	4242      	negs	r2, r0
 80005bc:	418b      	sbcs	r3, r1
 80005be:	e7f2      	b.n	80005a6 <__aeabi_d2lz+0x1e>

080005c0 <__aeabi_d2ulz>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2200      	movs	r2, #0
 80005c4:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <__aeabi_d2ulz+0x34>)
 80005c6:	000d      	movs	r5, r1
 80005c8:	0004      	movs	r4, r0
 80005ca:	f001 feeb 	bl	80023a4 <__aeabi_dmul>
 80005ce:	f7ff ffbd 	bl	800054c <__aeabi_d2uiz>
 80005d2:	0006      	movs	r6, r0
 80005d4:	f002 fdd6 	bl	8003184 <__aeabi_ui2d>
 80005d8:	2200      	movs	r2, #0
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <__aeabi_d2ulz+0x38>)
 80005dc:	f001 fee2 	bl	80023a4 <__aeabi_dmul>
 80005e0:	0002      	movs	r2, r0
 80005e2:	000b      	movs	r3, r1
 80005e4:	0020      	movs	r0, r4
 80005e6:	0029      	movs	r1, r5
 80005e8:	f002 f9a4 	bl	8002934 <__aeabi_dsub>
 80005ec:	f7ff ffae 	bl	800054c <__aeabi_d2uiz>
 80005f0:	0031      	movs	r1, r6
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	3df00000 	.word	0x3df00000
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_l2d>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0006      	movs	r6, r0
 8000600:	0008      	movs	r0, r1
 8000602:	f002 fd91 	bl	8003128 <__aeabi_i2d>
 8000606:	2200      	movs	r2, #0
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <__aeabi_l2d+0x28>)
 800060a:	f001 fecb 	bl	80023a4 <__aeabi_dmul>
 800060e:	000d      	movs	r5, r1
 8000610:	0004      	movs	r4, r0
 8000612:	0030      	movs	r0, r6
 8000614:	f002 fdb6 	bl	8003184 <__aeabi_ui2d>
 8000618:	002b      	movs	r3, r5
 800061a:	0022      	movs	r2, r4
 800061c:	f000 ff1a 	bl	8001454 <__aeabi_dadd>
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	41f00000 	.word	0x41f00000

08000628 <__aeabi_fadd>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	46ce      	mov	lr, r9
 800062c:	4647      	mov	r7, r8
 800062e:	0243      	lsls	r3, r0, #9
 8000630:	0a5a      	lsrs	r2, r3, #9
 8000632:	024e      	lsls	r6, r1, #9
 8000634:	0045      	lsls	r5, r0, #1
 8000636:	0fc4      	lsrs	r4, r0, #31
 8000638:	0048      	lsls	r0, r1, #1
 800063a:	4691      	mov	r9, r2
 800063c:	0e2d      	lsrs	r5, r5, #24
 800063e:	0a72      	lsrs	r2, r6, #9
 8000640:	0e00      	lsrs	r0, r0, #24
 8000642:	4694      	mov	ip, r2
 8000644:	b580      	push	{r7, lr}
 8000646:	099b      	lsrs	r3, r3, #6
 8000648:	0fc9      	lsrs	r1, r1, #31
 800064a:	09b6      	lsrs	r6, r6, #6
 800064c:	1a2a      	subs	r2, r5, r0
 800064e:	428c      	cmp	r4, r1
 8000650:	d021      	beq.n	8000696 <__aeabi_fadd+0x6e>
 8000652:	2a00      	cmp	r2, #0
 8000654:	dd0d      	ble.n	8000672 <__aeabi_fadd+0x4a>
 8000656:	2800      	cmp	r0, #0
 8000658:	d12d      	bne.n	80006b6 <__aeabi_fadd+0x8e>
 800065a:	2e00      	cmp	r6, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x38>
 800065e:	e08d      	b.n	800077c <__aeabi_fadd+0x154>
 8000660:	1e51      	subs	r1, r2, #1
 8000662:	2a01      	cmp	r2, #1
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x40>
 8000666:	e11d      	b.n	80008a4 <__aeabi_fadd+0x27c>
 8000668:	2aff      	cmp	r2, #255	@ 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x46>
 800066c:	e0ab      	b.n	80007c6 <__aeabi_fadd+0x19e>
 800066e:	000a      	movs	r2, r1
 8000670:	e027      	b.n	80006c2 <__aeabi_fadd+0x9a>
 8000672:	2a00      	cmp	r2, #0
 8000674:	d04d      	beq.n	8000712 <__aeabi_fadd+0xea>
 8000676:	1b42      	subs	r2, r0, r5
 8000678:	2d00      	cmp	r5, #0
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x56>
 800067c:	e0cc      	b.n	8000818 <__aeabi_fadd+0x1f0>
 800067e:	2b00      	cmp	r3, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x5c>
 8000682:	e079      	b.n	8000778 <__aeabi_fadd+0x150>
 8000684:	1e54      	subs	r4, r2, #1
 8000686:	2a01      	cmp	r2, #1
 8000688:	d100      	bne.n	800068c <__aeabi_fadd+0x64>
 800068a:	e128      	b.n	80008de <__aeabi_fadd+0x2b6>
 800068c:	2aff      	cmp	r2, #255	@ 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x6a>
 8000690:	e097      	b.n	80007c2 <__aeabi_fadd+0x19a>
 8000692:	0022      	movs	r2, r4
 8000694:	e0c5      	b.n	8000822 <__aeabi_fadd+0x1fa>
 8000696:	2a00      	cmp	r2, #0
 8000698:	dc00      	bgt.n	800069c <__aeabi_fadd+0x74>
 800069a:	e096      	b.n	80007ca <__aeabi_fadd+0x1a2>
 800069c:	2800      	cmp	r0, #0
 800069e:	d04f      	beq.n	8000740 <__aeabi_fadd+0x118>
 80006a0:	2dff      	cmp	r5, #255	@ 0xff
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x7e>
 80006a4:	e08f      	b.n	80007c6 <__aeabi_fadd+0x19e>
 80006a6:	2180      	movs	r1, #128	@ 0x80
 80006a8:	04c9      	lsls	r1, r1, #19
 80006aa:	430e      	orrs	r6, r1
 80006ac:	2a1b      	cmp	r2, #27
 80006ae:	dd51      	ble.n	8000754 <__aeabi_fadd+0x12c>
 80006b0:	002a      	movs	r2, r5
 80006b2:	3301      	adds	r3, #1
 80006b4:	e018      	b.n	80006e8 <__aeabi_fadd+0xc0>
 80006b6:	2dff      	cmp	r5, #255	@ 0xff
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x94>
 80006ba:	e084      	b.n	80007c6 <__aeabi_fadd+0x19e>
 80006bc:	2180      	movs	r1, #128	@ 0x80
 80006be:	04c9      	lsls	r1, r1, #19
 80006c0:	430e      	orrs	r6, r1
 80006c2:	2101      	movs	r1, #1
 80006c4:	2a1b      	cmp	r2, #27
 80006c6:	dc08      	bgt.n	80006da <__aeabi_fadd+0xb2>
 80006c8:	0031      	movs	r1, r6
 80006ca:	2020      	movs	r0, #32
 80006cc:	40d1      	lsrs	r1, r2
 80006ce:	1a82      	subs	r2, r0, r2
 80006d0:	4096      	lsls	r6, r2
 80006d2:	0032      	movs	r2, r6
 80006d4:	1e50      	subs	r0, r2, #1
 80006d6:	4182      	sbcs	r2, r0
 80006d8:	4311      	orrs	r1, r2
 80006da:	1a5b      	subs	r3, r3, r1
 80006dc:	015a      	lsls	r2, r3, #5
 80006de:	d459      	bmi.n	8000794 <__aeabi_fadd+0x16c>
 80006e0:	2107      	movs	r1, #7
 80006e2:	002a      	movs	r2, r5
 80006e4:	4019      	ands	r1, r3
 80006e6:	d049      	beq.n	800077c <__aeabi_fadd+0x154>
 80006e8:	210f      	movs	r1, #15
 80006ea:	4019      	ands	r1, r3
 80006ec:	2904      	cmp	r1, #4
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0xca>
 80006f0:	3304      	adds	r3, #4
 80006f2:	0159      	lsls	r1, r3, #5
 80006f4:	d542      	bpl.n	800077c <__aeabi_fadd+0x154>
 80006f6:	1c50      	adds	r0, r2, #1
 80006f8:	2afe      	cmp	r2, #254	@ 0xfe
 80006fa:	d03a      	beq.n	8000772 <__aeabi_fadd+0x14a>
 80006fc:	019b      	lsls	r3, r3, #6
 80006fe:	b2c0      	uxtb	r0, r0
 8000700:	0a5b      	lsrs	r3, r3, #9
 8000702:	05c0      	lsls	r0, r0, #23
 8000704:	4318      	orrs	r0, r3
 8000706:	07e4      	lsls	r4, r4, #31
 8000708:	4320      	orrs	r0, r4
 800070a:	bcc0      	pop	{r6, r7}
 800070c:	46b9      	mov	r9, r7
 800070e:	46b0      	mov	r8, r6
 8000710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000712:	20fe      	movs	r0, #254	@ 0xfe
 8000714:	4680      	mov	r8, r0
 8000716:	1c6f      	adds	r7, r5, #1
 8000718:	0038      	movs	r0, r7
 800071a:	4647      	mov	r7, r8
 800071c:	4207      	tst	r7, r0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xfa>
 8000720:	e08e      	b.n	8000840 <__aeabi_fadd+0x218>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x100>
 8000726:	e0b4      	b.n	8000892 <__aeabi_fadd+0x26a>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x106>
 800072c:	e0db      	b.n	80008e6 <__aeabi_fadd+0x2be>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d06c      	beq.n	800080c <__aeabi_fadd+0x1e4>
 8000732:	1b98      	subs	r0, r3, r6
 8000734:	0145      	lsls	r5, r0, #5
 8000736:	d400      	bmi.n	800073a <__aeabi_fadd+0x112>
 8000738:	e0f7      	b.n	800092a <__aeabi_fadd+0x302>
 800073a:	000c      	movs	r4, r1
 800073c:	1af3      	subs	r3, r6, r3
 800073e:	e03d      	b.n	80007bc <__aeabi_fadd+0x194>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d01b      	beq.n	800077c <__aeabi_fadd+0x154>
 8000744:	1e51      	subs	r1, r2, #1
 8000746:	2a01      	cmp	r2, #1
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x124>
 800074a:	e082      	b.n	8000852 <__aeabi_fadd+0x22a>
 800074c:	2aff      	cmp	r2, #255	@ 0xff
 800074e:	d03a      	beq.n	80007c6 <__aeabi_fadd+0x19e>
 8000750:	000a      	movs	r2, r1
 8000752:	e7ab      	b.n	80006ac <__aeabi_fadd+0x84>
 8000754:	0031      	movs	r1, r6
 8000756:	2020      	movs	r0, #32
 8000758:	40d1      	lsrs	r1, r2
 800075a:	1a82      	subs	r2, r0, r2
 800075c:	4096      	lsls	r6, r2
 800075e:	0032      	movs	r2, r6
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	430a      	orrs	r2, r1
 8000766:	189b      	adds	r3, r3, r2
 8000768:	015a      	lsls	r2, r3, #5
 800076a:	d5b9      	bpl.n	80006e0 <__aeabi_fadd+0xb8>
 800076c:	1c6a      	adds	r2, r5, #1
 800076e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000770:	d175      	bne.n	800085e <__aeabi_fadd+0x236>
 8000772:	20ff      	movs	r0, #255	@ 0xff
 8000774:	2300      	movs	r3, #0
 8000776:	e7c4      	b.n	8000702 <__aeabi_fadd+0xda>
 8000778:	000c      	movs	r4, r1
 800077a:	0033      	movs	r3, r6
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	2aff      	cmp	r2, #255	@ 0xff
 8000780:	d146      	bne.n	8000810 <__aeabi_fadd+0x1e8>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f5      	beq.n	8000772 <__aeabi_fadd+0x14a>
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	03d2      	lsls	r2, r2, #15
 800078a:	4313      	orrs	r3, r2
 800078c:	025b      	lsls	r3, r3, #9
 800078e:	20ff      	movs	r0, #255	@ 0xff
 8000790:	0a5b      	lsrs	r3, r3, #9
 8000792:	e7b6      	b.n	8000702 <__aeabi_fadd+0xda>
 8000794:	019f      	lsls	r7, r3, #6
 8000796:	09bf      	lsrs	r7, r7, #6
 8000798:	0038      	movs	r0, r7
 800079a:	f002 fde3 	bl	8003364 <__clzsi2>
 800079e:	3805      	subs	r0, #5
 80007a0:	4087      	lsls	r7, r0
 80007a2:	4285      	cmp	r5, r0
 80007a4:	dc24      	bgt.n	80007f0 <__aeabi_fadd+0x1c8>
 80007a6:	003b      	movs	r3, r7
 80007a8:	2120      	movs	r1, #32
 80007aa:	1b42      	subs	r2, r0, r5
 80007ac:	3201      	adds	r2, #1
 80007ae:	40d3      	lsrs	r3, r2
 80007b0:	1a8a      	subs	r2, r1, r2
 80007b2:	4097      	lsls	r7, r2
 80007b4:	1e7a      	subs	r2, r7, #1
 80007b6:	4197      	sbcs	r7, r2
 80007b8:	2200      	movs	r2, #0
 80007ba:	433b      	orrs	r3, r7
 80007bc:	0759      	lsls	r1, r3, #29
 80007be:	d193      	bne.n	80006e8 <__aeabi_fadd+0xc0>
 80007c0:	e797      	b.n	80006f2 <__aeabi_fadd+0xca>
 80007c2:	000c      	movs	r4, r1
 80007c4:	0033      	movs	r3, r6
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	e7db      	b.n	8000782 <__aeabi_fadd+0x15a>
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d014      	beq.n	80007f8 <__aeabi_fadd+0x1d0>
 80007ce:	1b42      	subs	r2, r0, r5
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d14b      	bne.n	800086c <__aeabi_fadd+0x244>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0d0      	beq.n	800077a <__aeabi_fadd+0x152>
 80007d8:	1e51      	subs	r1, r2, #1
 80007da:	2a01      	cmp	r2, #1
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fadd+0x1b8>
 80007de:	e09e      	b.n	800091e <__aeabi_fadd+0x2f6>
 80007e0:	2aff      	cmp	r2, #255	@ 0xff
 80007e2:	d0ef      	beq.n	80007c4 <__aeabi_fadd+0x19c>
 80007e4:	000a      	movs	r2, r1
 80007e6:	2a1b      	cmp	r2, #27
 80007e8:	dd5f      	ble.n	80008aa <__aeabi_fadd+0x282>
 80007ea:	0002      	movs	r2, r0
 80007ec:	1c73      	adds	r3, r6, #1
 80007ee:	e77b      	b.n	80006e8 <__aeabi_fadd+0xc0>
 80007f0:	4b50      	ldr	r3, [pc, #320]	@ (8000934 <__aeabi_fadd+0x30c>)
 80007f2:	1a2a      	subs	r2, r5, r0
 80007f4:	403b      	ands	r3, r7
 80007f6:	e7e1      	b.n	80007bc <__aeabi_fadd+0x194>
 80007f8:	21fe      	movs	r1, #254	@ 0xfe
 80007fa:	1c6a      	adds	r2, r5, #1
 80007fc:	4211      	tst	r1, r2
 80007fe:	d13b      	bne.n	8000878 <__aeabi_fadd+0x250>
 8000800:	2d00      	cmp	r5, #0
 8000802:	d15d      	bne.n	80008c0 <__aeabi_fadd+0x298>
 8000804:	2b00      	cmp	r3, #0
 8000806:	d07f      	beq.n	8000908 <__aeabi_fadd+0x2e0>
 8000808:	2e00      	cmp	r6, #0
 800080a:	d17f      	bne.n	800090c <__aeabi_fadd+0x2e4>
 800080c:	2200      	movs	r2, #0
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	025b      	lsls	r3, r3, #9
 8000812:	0a5b      	lsrs	r3, r3, #9
 8000814:	b2d0      	uxtb	r0, r2
 8000816:	e774      	b.n	8000702 <__aeabi_fadd+0xda>
 8000818:	28ff      	cmp	r0, #255	@ 0xff
 800081a:	d0d2      	beq.n	80007c2 <__aeabi_fadd+0x19a>
 800081c:	2480      	movs	r4, #128	@ 0x80
 800081e:	04e4      	lsls	r4, r4, #19
 8000820:	4323      	orrs	r3, r4
 8000822:	2401      	movs	r4, #1
 8000824:	2a1b      	cmp	r2, #27
 8000826:	dc07      	bgt.n	8000838 <__aeabi_fadd+0x210>
 8000828:	001c      	movs	r4, r3
 800082a:	2520      	movs	r5, #32
 800082c:	40d4      	lsrs	r4, r2
 800082e:	1aaa      	subs	r2, r5, r2
 8000830:	4093      	lsls	r3, r2
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	4193      	sbcs	r3, r2
 8000836:	431c      	orrs	r4, r3
 8000838:	1b33      	subs	r3, r6, r4
 800083a:	0005      	movs	r5, r0
 800083c:	000c      	movs	r4, r1
 800083e:	e74d      	b.n	80006dc <__aeabi_fadd+0xb4>
 8000840:	1b9f      	subs	r7, r3, r6
 8000842:	017a      	lsls	r2, r7, #5
 8000844:	d422      	bmi.n	800088c <__aeabi_fadd+0x264>
 8000846:	2f00      	cmp	r7, #0
 8000848:	d1a6      	bne.n	8000798 <__aeabi_fadd+0x170>
 800084a:	2400      	movs	r4, #0
 800084c:	2000      	movs	r0, #0
 800084e:	2300      	movs	r3, #0
 8000850:	e757      	b.n	8000702 <__aeabi_fadd+0xda>
 8000852:	199b      	adds	r3, r3, r6
 8000854:	2501      	movs	r5, #1
 8000856:	3201      	adds	r2, #1
 8000858:	0159      	lsls	r1, r3, #5
 800085a:	d400      	bmi.n	800085e <__aeabi_fadd+0x236>
 800085c:	e740      	b.n	80006e0 <__aeabi_fadd+0xb8>
 800085e:	2101      	movs	r1, #1
 8000860:	4835      	ldr	r0, [pc, #212]	@ (8000938 <__aeabi_fadd+0x310>)
 8000862:	4019      	ands	r1, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	4003      	ands	r3, r0
 8000868:	430b      	orrs	r3, r1
 800086a:	e7a7      	b.n	80007bc <__aeabi_fadd+0x194>
 800086c:	28ff      	cmp	r0, #255	@ 0xff
 800086e:	d0a9      	beq.n	80007c4 <__aeabi_fadd+0x19c>
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	04c9      	lsls	r1, r1, #19
 8000874:	430b      	orrs	r3, r1
 8000876:	e7b6      	b.n	80007e6 <__aeabi_fadd+0x1be>
 8000878:	2aff      	cmp	r2, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x256>
 800087c:	e779      	b.n	8000772 <__aeabi_fadd+0x14a>
 800087e:	199b      	adds	r3, r3, r6
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	0759      	lsls	r1, r3, #29
 8000884:	d000      	beq.n	8000888 <__aeabi_fadd+0x260>
 8000886:	e72f      	b.n	80006e8 <__aeabi_fadd+0xc0>
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	e7c1      	b.n	8000810 <__aeabi_fadd+0x1e8>
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e782      	b.n	8000798 <__aeabi_fadd+0x170>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12c      	bne.n	80008f0 <__aeabi_fadd+0x2c8>
 8000896:	2e00      	cmp	r6, #0
 8000898:	d193      	bne.n	80007c2 <__aeabi_fadd+0x19a>
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	2400      	movs	r4, #0
 800089e:	20ff      	movs	r0, #255	@ 0xff
 80008a0:	03db      	lsls	r3, r3, #15
 80008a2:	e72e      	b.n	8000702 <__aeabi_fadd+0xda>
 80008a4:	2501      	movs	r5, #1
 80008a6:	1b9b      	subs	r3, r3, r6
 80008a8:	e718      	b.n	80006dc <__aeabi_fadd+0xb4>
 80008aa:	0019      	movs	r1, r3
 80008ac:	2520      	movs	r5, #32
 80008ae:	40d1      	lsrs	r1, r2
 80008b0:	1aaa      	subs	r2, r5, r2
 80008b2:	4093      	lsls	r3, r2
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	4193      	sbcs	r3, r2
 80008b8:	430b      	orrs	r3, r1
 80008ba:	0005      	movs	r5, r0
 80008bc:	199b      	adds	r3, r3, r6
 80008be:	e753      	b.n	8000768 <__aeabi_fadd+0x140>
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x29e>
 80008c4:	e77e      	b.n	80007c4 <__aeabi_fadd+0x19c>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fadd+0x2a4>
 80008ca:	e77c      	b.n	80007c6 <__aeabi_fadd+0x19e>
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	03d2      	lsls	r2, r2, #15
 80008d0:	4591      	cmp	r9, r2
 80008d2:	d302      	bcc.n	80008da <__aeabi_fadd+0x2b2>
 80008d4:	4594      	cmp	ip, r2
 80008d6:	d200      	bcs.n	80008da <__aeabi_fadd+0x2b2>
 80008d8:	0033      	movs	r3, r6
 80008da:	08db      	lsrs	r3, r3, #3
 80008dc:	e753      	b.n	8000786 <__aeabi_fadd+0x15e>
 80008de:	000c      	movs	r4, r1
 80008e0:	1af3      	subs	r3, r6, r3
 80008e2:	3501      	adds	r5, #1
 80008e4:	e6fa      	b.n	80006dc <__aeabi_fadd+0xb4>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d0af      	beq.n	800084a <__aeabi_fadd+0x222>
 80008ea:	000c      	movs	r4, r1
 80008ec:	0033      	movs	r3, r6
 80008ee:	e78d      	b.n	800080c <__aeabi_fadd+0x1e4>
 80008f0:	2e00      	cmp	r6, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2ce>
 80008f4:	e767      	b.n	80007c6 <__aeabi_fadd+0x19e>
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	4591      	cmp	r9, r2
 80008fc:	d3ed      	bcc.n	80008da <__aeabi_fadd+0x2b2>
 80008fe:	4594      	cmp	ip, r2
 8000900:	d2eb      	bcs.n	80008da <__aeabi_fadd+0x2b2>
 8000902:	000c      	movs	r4, r1
 8000904:	0033      	movs	r3, r6
 8000906:	e7e8      	b.n	80008da <__aeabi_fadd+0x2b2>
 8000908:	0033      	movs	r3, r6
 800090a:	e77f      	b.n	800080c <__aeabi_fadd+0x1e4>
 800090c:	199b      	adds	r3, r3, r6
 800090e:	2200      	movs	r2, #0
 8000910:	0159      	lsls	r1, r3, #5
 8000912:	d5b9      	bpl.n	8000888 <__aeabi_fadd+0x260>
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <__aeabi_fadd+0x30c>)
 8000916:	4013      	ands	r3, r2
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	2201      	movs	r2, #1
 800091c:	e778      	b.n	8000810 <__aeabi_fadd+0x1e8>
 800091e:	199b      	adds	r3, r3, r6
 8000920:	3201      	adds	r2, #1
 8000922:	3501      	adds	r5, #1
 8000924:	0159      	lsls	r1, r3, #5
 8000926:	d49a      	bmi.n	800085e <__aeabi_fadd+0x236>
 8000928:	e6da      	b.n	80006e0 <__aeabi_fadd+0xb8>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d08d      	beq.n	800084a <__aeabi_fadd+0x222>
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	e76e      	b.n	8000810 <__aeabi_fadd+0x1e8>
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	fbffffff 	.word	0xfbffffff
 8000938:	7dffffff 	.word	0x7dffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0244      	lsls	r4, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0e      	adds	r6, r1, #0
 800094c:	0a64      	lsrs	r4, r4, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc5      	lsrs	r5, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d03c      	beq.n	80009d0 <__aeabi_fdiv+0x94>
 8000956:	2fff      	cmp	r7, #255	@ 0xff
 8000958:	d042      	beq.n	80009e0 <__aeabi_fdiv+0xa4>
 800095a:	2300      	movs	r3, #0
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	4699      	mov	r9, r3
 8000960:	469a      	mov	sl, r3
 8000962:	00e4      	lsls	r4, r4, #3
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4314      	orrs	r4, r2
 8000968:	3f7f      	subs	r7, #127	@ 0x7f
 800096a:	0273      	lsls	r3, r6, #9
 800096c:	0a5b      	lsrs	r3, r3, #9
 800096e:	4698      	mov	r8, r3
 8000970:	0073      	lsls	r3, r6, #1
 8000972:	0e1b      	lsrs	r3, r3, #24
 8000974:	0ff6      	lsrs	r6, r6, #31
 8000976:	2b00      	cmp	r3, #0
 8000978:	d01b      	beq.n	80009b2 <__aeabi_fdiv+0x76>
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d013      	beq.n	80009a6 <__aeabi_fdiv+0x6a>
 800097e:	4642      	mov	r2, r8
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	00d2      	lsls	r2, r2, #3
 8000984:	04c9      	lsls	r1, r1, #19
 8000986:	4311      	orrs	r1, r2
 8000988:	4688      	mov	r8, r1
 800098a:	2000      	movs	r0, #0
 800098c:	3b7f      	subs	r3, #127	@ 0x7f
 800098e:	0029      	movs	r1, r5
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	464b      	mov	r3, r9
 8000994:	4071      	eors	r1, r6
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d900      	bls.n	800099e <__aeabi_fdiv+0x62>
 800099c:	e0b5      	b.n	8000b0a <__aeabi_fdiv+0x1ce>
 800099e:	4a74      	ldr	r2, [pc, #464]	@ (8000b70 <__aeabi_fdiv+0x234>)
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	58d3      	ldr	r3, [r2, r3]
 80009a4:	469f      	mov	pc, r3
 80009a6:	4643      	mov	r3, r8
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d13f      	bne.n	8000a2c <__aeabi_fdiv+0xf0>
 80009ac:	3fff      	subs	r7, #255	@ 0xff
 80009ae:	3302      	adds	r3, #2
 80009b0:	e003      	b.n	80009ba <__aeabi_fdiv+0x7e>
 80009b2:	4643      	mov	r3, r8
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d12d      	bne.n	8000a14 <__aeabi_fdiv+0xd8>
 80009b8:	2301      	movs	r3, #1
 80009ba:	0029      	movs	r1, r5
 80009bc:	464a      	mov	r2, r9
 80009be:	4071      	eors	r1, r6
 80009c0:	b2c9      	uxtb	r1, r1
 80009c2:	431a      	orrs	r2, r3
 80009c4:	2a0e      	cmp	r2, #14
 80009c6:	d838      	bhi.n	8000a3a <__aeabi_fdiv+0xfe>
 80009c8:	486a      	ldr	r0, [pc, #424]	@ (8000b74 <__aeabi_fdiv+0x238>)
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	5882      	ldr	r2, [r0, r2]
 80009ce:	4697      	mov	pc, r2
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	d113      	bne.n	80009fc <__aeabi_fdiv+0xc0>
 80009d4:	2304      	movs	r3, #4
 80009d6:	4699      	mov	r9, r3
 80009d8:	3b03      	subs	r3, #3
 80009da:	2700      	movs	r7, #0
 80009dc:	469a      	mov	sl, r3
 80009de:	e7c4      	b.n	800096a <__aeabi_fdiv+0x2e>
 80009e0:	2c00      	cmp	r4, #0
 80009e2:	d105      	bne.n	80009f0 <__aeabi_fdiv+0xb4>
 80009e4:	2308      	movs	r3, #8
 80009e6:	4699      	mov	r9, r3
 80009e8:	3b06      	subs	r3, #6
 80009ea:	27ff      	movs	r7, #255	@ 0xff
 80009ec:	469a      	mov	sl, r3
 80009ee:	e7bc      	b.n	800096a <__aeabi_fdiv+0x2e>
 80009f0:	230c      	movs	r3, #12
 80009f2:	4699      	mov	r9, r3
 80009f4:	3b09      	subs	r3, #9
 80009f6:	27ff      	movs	r7, #255	@ 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e7b6      	b.n	800096a <__aeabi_fdiv+0x2e>
 80009fc:	0020      	movs	r0, r4
 80009fe:	f002 fcb1 	bl	8003364 <__clzsi2>
 8000a02:	2776      	movs	r7, #118	@ 0x76
 8000a04:	1f43      	subs	r3, r0, #5
 8000a06:	409c      	lsls	r4, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	427f      	negs	r7, r7
 8000a0c:	4699      	mov	r9, r3
 8000a0e:	469a      	mov	sl, r3
 8000a10:	1a3f      	subs	r7, r7, r0
 8000a12:	e7aa      	b.n	800096a <__aeabi_fdiv+0x2e>
 8000a14:	4640      	mov	r0, r8
 8000a16:	f002 fca5 	bl	8003364 <__clzsi2>
 8000a1a:	4642      	mov	r2, r8
 8000a1c:	1f43      	subs	r3, r0, #5
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	2376      	movs	r3, #118	@ 0x76
 8000a22:	425b      	negs	r3, r3
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	4690      	mov	r8, r2
 8000a28:	2000      	movs	r0, #0
 8000a2a:	e7b0      	b.n	800098e <__aeabi_fdiv+0x52>
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	464a      	mov	r2, r9
 8000a30:	431a      	orrs	r2, r3
 8000a32:	4691      	mov	r9, r2
 8000a34:	2003      	movs	r0, #3
 8000a36:	33fc      	adds	r3, #252	@ 0xfc
 8000a38:	e7a9      	b.n	800098e <__aeabi_fdiv+0x52>
 8000a3a:	000d      	movs	r5, r1
 8000a3c:	20ff      	movs	r0, #255	@ 0xff
 8000a3e:	2200      	movs	r2, #0
 8000a40:	05c0      	lsls	r0, r0, #23
 8000a42:	07ed      	lsls	r5, r5, #31
 8000a44:	4310      	orrs	r0, r2
 8000a46:	4328      	orrs	r0, r5
 8000a48:	bce0      	pop	{r5, r6, r7}
 8000a4a:	46ba      	mov	sl, r7
 8000a4c:	46b1      	mov	r9, r6
 8000a4e:	46a8      	mov	r8, r5
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a52:	000d      	movs	r5, r1
 8000a54:	2000      	movs	r0, #0
 8000a56:	2200      	movs	r2, #0
 8000a58:	e7f2      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000a5a:	4653      	mov	r3, sl
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d0ed      	beq.n	8000a3c <__aeabi_fdiv+0x100>
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d033      	beq.n	8000acc <__aeabi_fdiv+0x190>
 8000a64:	46a0      	mov	r8, r4
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d105      	bne.n	8000a76 <__aeabi_fdiv+0x13a>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	e7e7      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000a70:	0035      	movs	r5, r6
 8000a72:	2803      	cmp	r0, #3
 8000a74:	d07a      	beq.n	8000b6c <__aeabi_fdiv+0x230>
 8000a76:	003b      	movs	r3, r7
 8000a78:	337f      	adds	r3, #127	@ 0x7f
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	dd2d      	ble.n	8000ada <__aeabi_fdiv+0x19e>
 8000a7e:	4642      	mov	r2, r8
 8000a80:	0752      	lsls	r2, r2, #29
 8000a82:	d007      	beq.n	8000a94 <__aeabi_fdiv+0x158>
 8000a84:	220f      	movs	r2, #15
 8000a86:	4641      	mov	r1, r8
 8000a88:	400a      	ands	r2, r1
 8000a8a:	2a04      	cmp	r2, #4
 8000a8c:	d002      	beq.n	8000a94 <__aeabi_fdiv+0x158>
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4694      	mov	ip, r2
 8000a92:	44e0      	add	r8, ip
 8000a94:	4642      	mov	r2, r8
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	d505      	bpl.n	8000aa6 <__aeabi_fdiv+0x16a>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <__aeabi_fdiv+0x23c>)
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	3380      	adds	r3, #128	@ 0x80
 8000aa6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aa8:	dcc8      	bgt.n	8000a3c <__aeabi_fdiv+0x100>
 8000aaa:	4642      	mov	r2, r8
 8000aac:	0192      	lsls	r2, r2, #6
 8000aae:	0a52      	lsrs	r2, r2, #9
 8000ab0:	b2d8      	uxtb	r0, r3
 8000ab2:	e7c5      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	20ff      	movs	r0, #255	@ 0xff
 8000aba:	03d2      	lsls	r2, r2, #15
 8000abc:	e7c0      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	03d2      	lsls	r2, r2, #15
 8000ac2:	4214      	tst	r4, r2
 8000ac4:	d002      	beq.n	8000acc <__aeabi_fdiv+0x190>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	4213      	tst	r3, r2
 8000aca:	d049      	beq.n	8000b60 <__aeabi_fdiv+0x224>
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	03d2      	lsls	r2, r2, #15
 8000ad0:	4322      	orrs	r2, r4
 8000ad2:	0252      	lsls	r2, r2, #9
 8000ad4:	20ff      	movs	r0, #255	@ 0xff
 8000ad6:	0a52      	lsrs	r2, r2, #9
 8000ad8:	e7b2      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000ada:	2201      	movs	r2, #1
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b1b      	cmp	r3, #27
 8000ae0:	dcc3      	bgt.n	8000a6a <__aeabi_fdiv+0x12e>
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	40da      	lsrs	r2, r3
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	379e      	adds	r7, #158	@ 0x9e
 8000aea:	40bb      	lsls	r3, r7
 8000aec:	1e59      	subs	r1, r3, #1
 8000aee:	418b      	sbcs	r3, r1
 8000af0:	431a      	orrs	r2, r3
 8000af2:	0753      	lsls	r3, r2, #29
 8000af4:	d004      	beq.n	8000b00 <__aeabi_fdiv+0x1c4>
 8000af6:	230f      	movs	r3, #15
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fdiv+0x1c4>
 8000afe:	3204      	adds	r2, #4
 8000b00:	0153      	lsls	r3, r2, #5
 8000b02:	d529      	bpl.n	8000b58 <__aeabi_fdiv+0x21c>
 8000b04:	2001      	movs	r0, #1
 8000b06:	2200      	movs	r2, #0
 8000b08:	e79a      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	0163      	lsls	r3, r4, #5
 8000b0e:	0155      	lsls	r5, r2, #5
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d215      	bcs.n	8000b40 <__aeabi_fdiv+0x204>
 8000b14:	201b      	movs	r0, #27
 8000b16:	2200      	movs	r2, #0
 8000b18:	3f01      	subs	r7, #1
 8000b1a:	2601      	movs	r6, #1
 8000b1c:	001c      	movs	r4, r3
 8000b1e:	0052      	lsls	r2, r2, #1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	db01      	blt.n	8000b2a <__aeabi_fdiv+0x1ee>
 8000b26:	429d      	cmp	r5, r3
 8000b28:	d801      	bhi.n	8000b2e <__aeabi_fdiv+0x1f2>
 8000b2a:	1b5b      	subs	r3, r3, r5
 8000b2c:	4332      	orrs	r2, r6
 8000b2e:	3801      	subs	r0, #1
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1f3      	bne.n	8000b1c <__aeabi_fdiv+0x1e0>
 8000b34:	1e58      	subs	r0, r3, #1
 8000b36:	4183      	sbcs	r3, r0
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	000d      	movs	r5, r1
 8000b3e:	e79a      	b.n	8000a76 <__aeabi_fdiv+0x13a>
 8000b40:	201a      	movs	r0, #26
 8000b42:	2201      	movs	r2, #1
 8000b44:	1b5b      	subs	r3, r3, r5
 8000b46:	e7e8      	b.n	8000b1a <__aeabi_fdiv+0x1de>
 8000b48:	3b02      	subs	r3, #2
 8000b4a:	425a      	negs	r2, r3
 8000b4c:	4153      	adcs	r3, r2
 8000b4e:	425b      	negs	r3, r3
 8000b50:	0035      	movs	r5, r6
 8000b52:	2200      	movs	r2, #0
 8000b54:	b2d8      	uxtb	r0, r3
 8000b56:	e773      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000b58:	0192      	lsls	r2, r2, #6
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	0a52      	lsrs	r2, r2, #9
 8000b5e:	e76f      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000b60:	431a      	orrs	r2, r3
 8000b62:	0252      	lsls	r2, r2, #9
 8000b64:	0035      	movs	r5, r6
 8000b66:	20ff      	movs	r0, #255	@ 0xff
 8000b68:	0a52      	lsrs	r2, r2, #9
 8000b6a:	e769      	b.n	8000a40 <__aeabi_fdiv+0x104>
 8000b6c:	4644      	mov	r4, r8
 8000b6e:	e7ad      	b.n	8000acc <__aeabi_fdiv+0x190>
 8000b70:	08010d18 	.word	0x08010d18
 8000b74:	08010d58 	.word	0x08010d58
 8000b78:	f7ffffff 	.word	0xf7ffffff

08000b7c <__eqsf2>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	024e      	lsls	r6, r1, #9
 8000b82:	004c      	lsls	r4, r1, #1
 8000b84:	0245      	lsls	r5, r0, #9
 8000b86:	0a6d      	lsrs	r5, r5, #9
 8000b88:	0e12      	lsrs	r2, r2, #24
 8000b8a:	0fc3      	lsrs	r3, r0, #31
 8000b8c:	0a76      	lsrs	r6, r6, #9
 8000b8e:	0e24      	lsrs	r4, r4, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	@ 0xff
 8000b94:	d010      	beq.n	8000bb8 <__eqsf2+0x3c>
 8000b96:	2cff      	cmp	r4, #255	@ 0xff
 8000b98:	d00c      	beq.n	8000bb4 <__eqsf2+0x38>
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	42a2      	cmp	r2, r4
 8000b9e:	d10a      	bne.n	8000bb6 <__eqsf2+0x3a>
 8000ba0:	42b5      	cmp	r5, r6
 8000ba2:	d108      	bne.n	8000bb6 <__eqsf2+0x3a>
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d00f      	beq.n	8000bc8 <__eqsf2+0x4c>
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	d104      	bne.n	8000bb6 <__eqsf2+0x3a>
 8000bac:	0028      	movs	r0, r5
 8000bae:	1e43      	subs	r3, r0, #1
 8000bb0:	4198      	sbcs	r0, r3
 8000bb2:	e000      	b.n	8000bb6 <__eqsf2+0x3a>
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	2001      	movs	r0, #1
 8000bba:	2cff      	cmp	r4, #255	@ 0xff
 8000bbc:	d1fb      	bne.n	8000bb6 <__eqsf2+0x3a>
 8000bbe:	4335      	orrs	r5, r6
 8000bc0:	d1f9      	bne.n	8000bb6 <__eqsf2+0x3a>
 8000bc2:	404b      	eors	r3, r1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	e7f6      	b.n	8000bb6 <__eqsf2+0x3a>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e7f4      	b.n	8000bb6 <__eqsf2+0x3a>

08000bcc <__gesf2>:
 8000bcc:	b530      	push	{r4, r5, lr}
 8000bce:	0042      	lsls	r2, r0, #1
 8000bd0:	0244      	lsls	r4, r0, #9
 8000bd2:	024d      	lsls	r5, r1, #9
 8000bd4:	0fc3      	lsrs	r3, r0, #31
 8000bd6:	0048      	lsls	r0, r1, #1
 8000bd8:	0a64      	lsrs	r4, r4, #9
 8000bda:	0e12      	lsrs	r2, r2, #24
 8000bdc:	0a6d      	lsrs	r5, r5, #9
 8000bde:	0e00      	lsrs	r0, r0, #24
 8000be0:	0fc9      	lsrs	r1, r1, #31
 8000be2:	2aff      	cmp	r2, #255	@ 0xff
 8000be4:	d019      	beq.n	8000c1a <__gesf2+0x4e>
 8000be6:	28ff      	cmp	r0, #255	@ 0xff
 8000be8:	d00b      	beq.n	8000c02 <__gesf2+0x36>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d11e      	bne.n	8000c2c <__gesf2+0x60>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d10b      	bne.n	8000c0a <__gesf2+0x3e>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d027      	beq.n	8000c46 <__gesf2+0x7a>
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d134      	bne.n	8000c64 <__gesf2+0x98>
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d02f      	beq.n	8000c5e <__gesf2+0x92>
 8000bfe:	0008      	movs	r0, r1
 8000c00:	bd30      	pop	{r4, r5, pc}
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d128      	bne.n	8000c58 <__gesf2+0x8c>
 8000c06:	2a00      	cmp	r2, #0
 8000c08:	d101      	bne.n	8000c0e <__gesf2+0x42>
 8000c0a:	2c00      	cmp	r4, #0
 8000c0c:	d0f5      	beq.n	8000bfa <__gesf2+0x2e>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d107      	bne.n	8000c22 <__gesf2+0x56>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d023      	beq.n	8000c5e <__gesf2+0x92>
 8000c16:	0018      	movs	r0, r3
 8000c18:	e7f2      	b.n	8000c00 <__gesf2+0x34>
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d11c      	bne.n	8000c58 <__gesf2+0x8c>
 8000c1e:	28ff      	cmp	r0, #255	@ 0xff
 8000c20:	d014      	beq.n	8000c4c <__gesf2+0x80>
 8000c22:	1e58      	subs	r0, r3, #1
 8000c24:	2302      	movs	r3, #2
 8000c26:	4018      	ands	r0, r3
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e7e9      	b.n	8000c00 <__gesf2+0x34>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d0f8      	beq.n	8000c22 <__gesf2+0x56>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d1f6      	bne.n	8000c22 <__gesf2+0x56>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	dcf4      	bgt.n	8000c22 <__gesf2+0x56>
 8000c38:	dbeb      	blt.n	8000c12 <__gesf2+0x46>
 8000c3a:	42ac      	cmp	r4, r5
 8000c3c:	d8f1      	bhi.n	8000c22 <__gesf2+0x56>
 8000c3e:	2000      	movs	r0, #0
 8000c40:	42ac      	cmp	r4, r5
 8000c42:	d2dd      	bcs.n	8000c00 <__gesf2+0x34>
 8000c44:	e7e5      	b.n	8000c12 <__gesf2+0x46>
 8000c46:	2c00      	cmp	r4, #0
 8000c48:	d0da      	beq.n	8000c00 <__gesf2+0x34>
 8000c4a:	e7ea      	b.n	8000c22 <__gesf2+0x56>
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d103      	bne.n	8000c58 <__gesf2+0x8c>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d1e6      	bne.n	8000c22 <__gesf2+0x56>
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7d3      	b.n	8000c00 <__gesf2+0x34>
 8000c58:	2002      	movs	r0, #2
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	e7d0      	b.n	8000c00 <__gesf2+0x34>
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4240      	negs	r0, r0
 8000c62:	e7cd      	b.n	8000c00 <__gesf2+0x34>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d0e8      	beq.n	8000c3a <__gesf2+0x6e>
 8000c68:	e7db      	b.n	8000c22 <__gesf2+0x56>
 8000c6a:	46c0      	nop			@ (mov r8, r8)

08000c6c <__lesf2>:
 8000c6c:	b530      	push	{r4, r5, lr}
 8000c6e:	0042      	lsls	r2, r0, #1
 8000c70:	0244      	lsls	r4, r0, #9
 8000c72:	024d      	lsls	r5, r1, #9
 8000c74:	0fc3      	lsrs	r3, r0, #31
 8000c76:	0048      	lsls	r0, r1, #1
 8000c78:	0a64      	lsrs	r4, r4, #9
 8000c7a:	0e12      	lsrs	r2, r2, #24
 8000c7c:	0a6d      	lsrs	r5, r5, #9
 8000c7e:	0e00      	lsrs	r0, r0, #24
 8000c80:	0fc9      	lsrs	r1, r1, #31
 8000c82:	2aff      	cmp	r2, #255	@ 0xff
 8000c84:	d01a      	beq.n	8000cbc <__lesf2+0x50>
 8000c86:	28ff      	cmp	r0, #255	@ 0xff
 8000c88:	d00e      	beq.n	8000ca8 <__lesf2+0x3c>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d11e      	bne.n	8000ccc <__lesf2+0x60>
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d10e      	bne.n	8000cb0 <__lesf2+0x44>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d02a      	beq.n	8000cec <__lesf2+0x80>
 8000c96:	2c00      	cmp	r4, #0
 8000c98:	d00c      	beq.n	8000cb4 <__lesf2+0x48>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d01d      	beq.n	8000cda <__lesf2+0x6e>
 8000c9e:	1e58      	subs	r0, r3, #1
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	4018      	ands	r0, r3
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	e010      	b.n	8000cca <__lesf2+0x5e>
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d10d      	bne.n	8000cc8 <__lesf2+0x5c>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	d120      	bne.n	8000cf2 <__lesf2+0x86>
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d11e      	bne.n	8000cf2 <__lesf2+0x86>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d023      	beq.n	8000d00 <__lesf2+0x94>
 8000cb8:	0008      	movs	r0, r1
 8000cba:	e006      	b.n	8000cca <__lesf2+0x5e>
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d103      	bne.n	8000cc8 <__lesf2+0x5c>
 8000cc0:	28ff      	cmp	r0, #255	@ 0xff
 8000cc2:	d1ec      	bne.n	8000c9e <__lesf2+0x32>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d017      	beq.n	8000cf8 <__lesf2+0x8c>
 8000cc8:	2002      	movs	r0, #2
 8000cca:	bd30      	pop	{r4, r5, pc}
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d0e6      	beq.n	8000c9e <__lesf2+0x32>
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d1e4      	bne.n	8000c9e <__lesf2+0x32>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	dce2      	bgt.n	8000c9e <__lesf2+0x32>
 8000cd8:	db04      	blt.n	8000ce4 <__lesf2+0x78>
 8000cda:	42ac      	cmp	r4, r5
 8000cdc:	d8df      	bhi.n	8000c9e <__lesf2+0x32>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	42ac      	cmp	r4, r5
 8000ce2:	d2f2      	bcs.n	8000cca <__lesf2+0x5e>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00b      	beq.n	8000d00 <__lesf2+0x94>
 8000ce8:	0018      	movs	r0, r3
 8000cea:	e7ee      	b.n	8000cca <__lesf2+0x5e>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d0ec      	beq.n	8000cca <__lesf2+0x5e>
 8000cf0:	e7d5      	b.n	8000c9e <__lesf2+0x32>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d1d3      	bne.n	8000c9e <__lesf2+0x32>
 8000cf6:	e7f5      	b.n	8000ce4 <__lesf2+0x78>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d0e5      	beq.n	8000cca <__lesf2+0x5e>
 8000cfe:	e7ce      	b.n	8000c9e <__lesf2+0x32>
 8000d00:	2001      	movs	r0, #1
 8000d02:	4240      	negs	r0, r0
 8000d04:	e7e1      	b.n	8000cca <__lesf2+0x5e>
 8000d06:	46c0      	nop			@ (mov r8, r8)

08000d08 <__aeabi_fmul>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	464f      	mov	r7, r9
 8000d0c:	4646      	mov	r6, r8
 8000d0e:	46d6      	mov	lr, sl
 8000d10:	0243      	lsls	r3, r0, #9
 8000d12:	0a5b      	lsrs	r3, r3, #9
 8000d14:	0045      	lsls	r5, r0, #1
 8000d16:	b5c0      	push	{r6, r7, lr}
 8000d18:	4699      	mov	r9, r3
 8000d1a:	1c0f      	adds	r7, r1, #0
 8000d1c:	0e2d      	lsrs	r5, r5, #24
 8000d1e:	0fc6      	lsrs	r6, r0, #31
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fmul+0x1e>
 8000d24:	e088      	b.n	8000e38 <__aeabi_fmul+0x130>
 8000d26:	2dff      	cmp	r5, #255	@ 0xff
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fmul+0x24>
 8000d2a:	e08d      	b.n	8000e48 <__aeabi_fmul+0x140>
 8000d2c:	2280      	movs	r2, #128	@ 0x80
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	04d2      	lsls	r2, r2, #19
 8000d32:	431a      	orrs	r2, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	4691      	mov	r9, r2
 8000d38:	4698      	mov	r8, r3
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	3d7f      	subs	r5, #127	@ 0x7f
 8000d3e:	027c      	lsls	r4, r7, #9
 8000d40:	007b      	lsls	r3, r7, #1
 8000d42:	0a64      	lsrs	r4, r4, #9
 8000d44:	0e1b      	lsrs	r3, r3, #24
 8000d46:	0fff      	lsrs	r7, r7, #31
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d068      	beq.n	8000e1e <__aeabi_fmul+0x116>
 8000d4c:	2bff      	cmp	r3, #255	@ 0xff
 8000d4e:	d021      	beq.n	8000d94 <__aeabi_fmul+0x8c>
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	00e4      	lsls	r4, r4, #3
 8000d54:	04d2      	lsls	r2, r2, #19
 8000d56:	4314      	orrs	r4, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	3b7f      	subs	r3, #127	@ 0x7f
 8000d5c:	195b      	adds	r3, r3, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	1c5d      	adds	r5, r3, #1
 8000d62:	2a0a      	cmp	r2, #10
 8000d64:	dc2e      	bgt.n	8000dc4 <__aeabi_fmul+0xbc>
 8000d66:	407e      	eors	r6, r7
 8000d68:	4642      	mov	r2, r8
 8000d6a:	2a02      	cmp	r2, #2
 8000d6c:	dc23      	bgt.n	8000db6 <__aeabi_fmul+0xae>
 8000d6e:	3a01      	subs	r2, #1
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d900      	bls.n	8000d76 <__aeabi_fmul+0x6e>
 8000d74:	e0bd      	b.n	8000ef2 <__aeabi_fmul+0x1ea>
 8000d76:	2902      	cmp	r1, #2
 8000d78:	d06e      	beq.n	8000e58 <__aeabi_fmul+0x150>
 8000d7a:	2901      	cmp	r1, #1
 8000d7c:	d12c      	bne.n	8000dd8 <__aeabi_fmul+0xd0>
 8000d7e:	2000      	movs	r0, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	05c0      	lsls	r0, r0, #23
 8000d84:	07f6      	lsls	r6, r6, #31
 8000d86:	4310      	orrs	r0, r2
 8000d88:	4330      	orrs	r0, r6
 8000d8a:	bce0      	pop	{r5, r6, r7}
 8000d8c:	46ba      	mov	sl, r7
 8000d8e:	46b1      	mov	r9, r6
 8000d90:	46a8      	mov	r8, r5
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d94:	002b      	movs	r3, r5
 8000d96:	33ff      	adds	r3, #255	@ 0xff
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d065      	beq.n	8000e68 <__aeabi_fmul+0x160>
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4641      	mov	r1, r8
 8000da0:	4311      	orrs	r1, r2
 8000da2:	0032      	movs	r2, r6
 8000da4:	3501      	adds	r5, #1
 8000da6:	4688      	mov	r8, r1
 8000da8:	407a      	eors	r2, r7
 8000daa:	35ff      	adds	r5, #255	@ 0xff
 8000dac:	290a      	cmp	r1, #10
 8000dae:	dd00      	ble.n	8000db2 <__aeabi_fmul+0xaa>
 8000db0:	e0d8      	b.n	8000f64 <__aeabi_fmul+0x25c>
 8000db2:	0016      	movs	r6, r2
 8000db4:	2103      	movs	r1, #3
 8000db6:	4640      	mov	r0, r8
 8000db8:	2201      	movs	r2, #1
 8000dba:	4082      	lsls	r2, r0
 8000dbc:	20a6      	movs	r0, #166	@ 0xa6
 8000dbe:	00c0      	lsls	r0, r0, #3
 8000dc0:	4202      	tst	r2, r0
 8000dc2:	d020      	beq.n	8000e06 <__aeabi_fmul+0xfe>
 8000dc4:	4653      	mov	r3, sl
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d046      	beq.n	8000e58 <__aeabi_fmul+0x150>
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fmul+0xc8>
 8000dce:	e0bb      	b.n	8000f48 <__aeabi_fmul+0x240>
 8000dd0:	4651      	mov	r1, sl
 8000dd2:	464c      	mov	r4, r9
 8000dd4:	2901      	cmp	r1, #1
 8000dd6:	d0d2      	beq.n	8000d7e <__aeabi_fmul+0x76>
 8000dd8:	002b      	movs	r3, r5
 8000dda:	337f      	adds	r3, #127	@ 0x7f
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd70      	ble.n	8000ec2 <__aeabi_fmul+0x1ba>
 8000de0:	0762      	lsls	r2, r4, #29
 8000de2:	d004      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000de4:	220f      	movs	r2, #15
 8000de6:	4022      	ands	r2, r4
 8000de8:	2a04      	cmp	r2, #4
 8000dea:	d000      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dec:	3404      	adds	r4, #4
 8000dee:	0122      	lsls	r2, r4, #4
 8000df0:	d503      	bpl.n	8000dfa <__aeabi_fmul+0xf2>
 8000df2:	4b63      	ldr	r3, [pc, #396]	@ (8000f80 <__aeabi_fmul+0x278>)
 8000df4:	401c      	ands	r4, r3
 8000df6:	002b      	movs	r3, r5
 8000df8:	3380      	adds	r3, #128	@ 0x80
 8000dfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dfc:	dc2c      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000dfe:	01a2      	lsls	r2, r4, #6
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	b2d8      	uxtb	r0, r3
 8000e04:	e7bd      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000e06:	2090      	movs	r0, #144	@ 0x90
 8000e08:	0080      	lsls	r0, r0, #2
 8000e0a:	4202      	tst	r2, r0
 8000e0c:	d127      	bne.n	8000e5e <__aeabi_fmul+0x156>
 8000e0e:	38b9      	subs	r0, #185	@ 0xb9
 8000e10:	38ff      	subs	r0, #255	@ 0xff
 8000e12:	4210      	tst	r0, r2
 8000e14:	d06d      	beq.n	8000ef2 <__aeabi_fmul+0x1ea>
 8000e16:	003e      	movs	r6, r7
 8000e18:	46a1      	mov	r9, r4
 8000e1a:	468a      	mov	sl, r1
 8000e1c:	e7d2      	b.n	8000dc4 <__aeabi_fmul+0xbc>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d141      	bne.n	8000ea6 <__aeabi_fmul+0x19e>
 8000e22:	2301      	movs	r3, #1
 8000e24:	4642      	mov	r2, r8
 8000e26:	431a      	orrs	r2, r3
 8000e28:	4690      	mov	r8, r2
 8000e2a:	002b      	movs	r3, r5
 8000e2c:	4642      	mov	r2, r8
 8000e2e:	2101      	movs	r1, #1
 8000e30:	1c5d      	adds	r5, r3, #1
 8000e32:	2a0a      	cmp	r2, #10
 8000e34:	dd97      	ble.n	8000d66 <__aeabi_fmul+0x5e>
 8000e36:	e7c5      	b.n	8000dc4 <__aeabi_fmul+0xbc>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d126      	bne.n	8000e8a <__aeabi_fmul+0x182>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	4698      	mov	r8, r3
 8000e40:	3b03      	subs	r3, #3
 8000e42:	2500      	movs	r5, #0
 8000e44:	469a      	mov	sl, r3
 8000e46:	e77a      	b.n	8000d3e <__aeabi_fmul+0x36>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d118      	bne.n	8000e7e <__aeabi_fmul+0x176>
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	4698      	mov	r8, r3
 8000e50:	3b06      	subs	r3, #6
 8000e52:	25ff      	movs	r5, #255	@ 0xff
 8000e54:	469a      	mov	sl, r3
 8000e56:	e772      	b.n	8000d3e <__aeabi_fmul+0x36>
 8000e58:	20ff      	movs	r0, #255	@ 0xff
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	e791      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000e5e:	2280      	movs	r2, #128	@ 0x80
 8000e60:	2600      	movs	r6, #0
 8000e62:	20ff      	movs	r0, #255	@ 0xff
 8000e64:	03d2      	lsls	r2, r2, #15
 8000e66:	e78c      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000e68:	4641      	mov	r1, r8
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	3501      	adds	r5, #1
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	4688      	mov	r8, r1
 8000e72:	35ff      	adds	r5, #255	@ 0xff
 8000e74:	290a      	cmp	r1, #10
 8000e76:	dca5      	bgt.n	8000dc4 <__aeabi_fmul+0xbc>
 8000e78:	2102      	movs	r1, #2
 8000e7a:	407e      	eors	r6, r7
 8000e7c:	e774      	b.n	8000d68 <__aeabi_fmul+0x60>
 8000e7e:	230c      	movs	r3, #12
 8000e80:	4698      	mov	r8, r3
 8000e82:	3b09      	subs	r3, #9
 8000e84:	25ff      	movs	r5, #255	@ 0xff
 8000e86:	469a      	mov	sl, r3
 8000e88:	e759      	b.n	8000d3e <__aeabi_fmul+0x36>
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fa6a 	bl	8003364 <__clzsi2>
 8000e90:	464a      	mov	r2, r9
 8000e92:	1f43      	subs	r3, r0, #5
 8000e94:	2576      	movs	r5, #118	@ 0x76
 8000e96:	409a      	lsls	r2, r3
 8000e98:	2300      	movs	r3, #0
 8000e9a:	426d      	negs	r5, r5
 8000e9c:	4691      	mov	r9, r2
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e74b      	b.n	8000d3e <__aeabi_fmul+0x36>
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f002 fa5c 	bl	8003364 <__clzsi2>
 8000eac:	4642      	mov	r2, r8
 8000eae:	1f43      	subs	r3, r0, #5
 8000eb0:	409c      	lsls	r4, r3
 8000eb2:	1a2b      	subs	r3, r5, r0
 8000eb4:	3b76      	subs	r3, #118	@ 0x76
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	1c5d      	adds	r5, r3, #1
 8000eba:	2a0a      	cmp	r2, #10
 8000ebc:	dc00      	bgt.n	8000ec0 <__aeabi_fmul+0x1b8>
 8000ebe:	e752      	b.n	8000d66 <__aeabi_fmul+0x5e>
 8000ec0:	e780      	b.n	8000dc4 <__aeabi_fmul+0xbc>
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b1b      	cmp	r3, #27
 8000ec8:	dd00      	ble.n	8000ecc <__aeabi_fmul+0x1c4>
 8000eca:	e758      	b.n	8000d7e <__aeabi_fmul+0x76>
 8000ecc:	359e      	adds	r5, #158	@ 0x9e
 8000ece:	0022      	movs	r2, r4
 8000ed0:	40ac      	lsls	r4, r5
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	1e63      	subs	r3, r4, #1
 8000ed6:	419c      	sbcs	r4, r3
 8000ed8:	4322      	orrs	r2, r4
 8000eda:	0753      	lsls	r3, r2, #29
 8000edc:	d004      	beq.n	8000ee8 <__aeabi_fmul+0x1e0>
 8000ede:	230f      	movs	r3, #15
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_fmul+0x1e0>
 8000ee6:	3204      	adds	r2, #4
 8000ee8:	0153      	lsls	r3, r2, #5
 8000eea:	d537      	bpl.n	8000f5c <__aeabi_fmul+0x254>
 8000eec:	2001      	movs	r0, #1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	e747      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000ef2:	0c21      	lsrs	r1, r4, #16
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	0c24      	lsrs	r4, r4, #16
 8000efa:	0027      	movs	r7, r4
 8000efc:	0c10      	lsrs	r0, r2, #16
 8000efe:	0412      	lsls	r2, r2, #16
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	4344      	muls	r4, r0
 8000f04:	4357      	muls	r7, r2
 8000f06:	4348      	muls	r0, r1
 8000f08:	4351      	muls	r1, r2
 8000f0a:	0c3a      	lsrs	r2, r7, #16
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	1852      	adds	r2, r2, r1
 8000f10:	4294      	cmp	r4, r2
 8000f12:	d903      	bls.n	8000f1c <__aeabi_fmul+0x214>
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	0249      	lsls	r1, r1, #9
 8000f18:	468c      	mov	ip, r1
 8000f1a:	4460      	add	r0, ip
 8000f1c:	043f      	lsls	r7, r7, #16
 8000f1e:	0411      	lsls	r1, r2, #16
 8000f20:	0c3f      	lsrs	r7, r7, #16
 8000f22:	19c9      	adds	r1, r1, r7
 8000f24:	018c      	lsls	r4, r1, #6
 8000f26:	1e67      	subs	r7, r4, #1
 8000f28:	41bc      	sbcs	r4, r7
 8000f2a:	0c12      	lsrs	r2, r2, #16
 8000f2c:	0e89      	lsrs	r1, r1, #26
 8000f2e:	1812      	adds	r2, r2, r0
 8000f30:	430c      	orrs	r4, r1
 8000f32:	0192      	lsls	r2, r2, #6
 8000f34:	4314      	orrs	r4, r2
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	d50e      	bpl.n	8000f58 <__aeabi_fmul+0x250>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	0862      	lsrs	r2, r4, #1
 8000f3e:	401c      	ands	r4, r3
 8000f40:	4314      	orrs	r4, r2
 8000f42:	e749      	b.n	8000dd8 <__aeabi_fmul+0xd0>
 8000f44:	003e      	movs	r6, r7
 8000f46:	46a1      	mov	r9, r4
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	03d2      	lsls	r2, r2, #15
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	0252      	lsls	r2, r2, #9
 8000f52:	20ff      	movs	r0, #255	@ 0xff
 8000f54:	0a52      	lsrs	r2, r2, #9
 8000f56:	e714      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000f58:	001d      	movs	r5, r3
 8000f5a:	e73d      	b.n	8000dd8 <__aeabi_fmul+0xd0>
 8000f5c:	0192      	lsls	r2, r2, #6
 8000f5e:	2000      	movs	r0, #0
 8000f60:	0a52      	lsrs	r2, r2, #9
 8000f62:	e70e      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000f64:	290f      	cmp	r1, #15
 8000f66:	d1ed      	bne.n	8000f44 <__aeabi_fmul+0x23c>
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	464b      	mov	r3, r9
 8000f6c:	03d2      	lsls	r2, r2, #15
 8000f6e:	4213      	tst	r3, r2
 8000f70:	d0ea      	beq.n	8000f48 <__aeabi_fmul+0x240>
 8000f72:	4214      	tst	r4, r2
 8000f74:	d1e8      	bne.n	8000f48 <__aeabi_fmul+0x240>
 8000f76:	003e      	movs	r6, r7
 8000f78:	20ff      	movs	r0, #255	@ 0xff
 8000f7a:	4322      	orrs	r2, r4
 8000f7c:	e701      	b.n	8000d82 <__aeabi_fmul+0x7a>
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	f7ffffff 	.word	0xf7ffffff

08000f84 <__aeabi_fsub>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	4647      	mov	r7, r8
 8000f88:	46ce      	mov	lr, r9
 8000f8a:	024e      	lsls	r6, r1, #9
 8000f8c:	0243      	lsls	r3, r0, #9
 8000f8e:	0045      	lsls	r5, r0, #1
 8000f90:	0a72      	lsrs	r2, r6, #9
 8000f92:	0fc4      	lsrs	r4, r0, #31
 8000f94:	0048      	lsls	r0, r1, #1
 8000f96:	b580      	push	{r7, lr}
 8000f98:	4694      	mov	ip, r2
 8000f9a:	0a5f      	lsrs	r7, r3, #9
 8000f9c:	0e2d      	lsrs	r5, r5, #24
 8000f9e:	099b      	lsrs	r3, r3, #6
 8000fa0:	0e00      	lsrs	r0, r0, #24
 8000fa2:	0fc9      	lsrs	r1, r1, #31
 8000fa4:	09b6      	lsrs	r6, r6, #6
 8000fa6:	28ff      	cmp	r0, #255	@ 0xff
 8000fa8:	d024      	beq.n	8000ff4 <__aeabi_fsub+0x70>
 8000faa:	2201      	movs	r2, #1
 8000fac:	4051      	eors	r1, r2
 8000fae:	1a2a      	subs	r2, r5, r0
 8000fb0:	428c      	cmp	r4, r1
 8000fb2:	d00f      	beq.n	8000fd4 <__aeabi_fsub+0x50>
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_fsub+0x36>
 8000fb8:	e16a      	b.n	8001290 <__aeabi_fsub+0x30c>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d135      	bne.n	800102a <__aeabi_fsub+0xa6>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x40>
 8000fc2:	e0a2      	b.n	800110a <__aeabi_fsub+0x186>
 8000fc4:	1e51      	subs	r1, r2, #1
 8000fc6:	2a01      	cmp	r2, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x48>
 8000fca:	e124      	b.n	8001216 <__aeabi_fsub+0x292>
 8000fcc:	2aff      	cmp	r2, #255	@ 0xff
 8000fce:	d021      	beq.n	8001014 <__aeabi_fsub+0x90>
 8000fd0:	000a      	movs	r2, r1
 8000fd2:	e02f      	b.n	8001034 <__aeabi_fsub+0xb0>
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x56>
 8000fd8:	e167      	b.n	80012aa <__aeabi_fsub+0x326>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d05e      	beq.n	800109c <__aeabi_fsub+0x118>
 8000fde:	2dff      	cmp	r5, #255	@ 0xff
 8000fe0:	d018      	beq.n	8001014 <__aeabi_fsub+0x90>
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	04c9      	lsls	r1, r1, #19
 8000fe6:	430e      	orrs	r6, r1
 8000fe8:	2a1b      	cmp	r2, #27
 8000fea:	dc00      	bgt.n	8000fee <__aeabi_fsub+0x6a>
 8000fec:	e076      	b.n	80010dc <__aeabi_fsub+0x158>
 8000fee:	002a      	movs	r2, r5
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	e032      	b.n	800105a <__aeabi_fsub+0xd6>
 8000ff4:	002a      	movs	r2, r5
 8000ff6:	3aff      	subs	r2, #255	@ 0xff
 8000ff8:	4691      	mov	r9, r2
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d042      	beq.n	8001084 <__aeabi_fsub+0x100>
 8000ffe:	428c      	cmp	r4, r1
 8001000:	d055      	beq.n	80010ae <__aeabi_fsub+0x12a>
 8001002:	464a      	mov	r2, r9
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x86>
 8001008:	e09c      	b.n	8001144 <__aeabi_fsub+0x1c0>
 800100a:	2d00      	cmp	r5, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x8c>
 800100e:	e077      	b.n	8001100 <__aeabi_fsub+0x17c>
 8001010:	000c      	movs	r4, r1
 8001012:	0033      	movs	r3, r6
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0x98>
 800101a:	e06e      	b.n	80010fa <__aeabi_fsub+0x176>
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	03d2      	lsls	r2, r2, #15
 8001020:	4313      	orrs	r3, r2
 8001022:	025b      	lsls	r3, r3, #9
 8001024:	20ff      	movs	r0, #255	@ 0xff
 8001026:	0a5b      	lsrs	r3, r3, #9
 8001028:	e024      	b.n	8001074 <__aeabi_fsub+0xf0>
 800102a:	2dff      	cmp	r5, #255	@ 0xff
 800102c:	d0f2      	beq.n	8001014 <__aeabi_fsub+0x90>
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	04c9      	lsls	r1, r1, #19
 8001032:	430e      	orrs	r6, r1
 8001034:	2101      	movs	r1, #1
 8001036:	2a1b      	cmp	r2, #27
 8001038:	dc08      	bgt.n	800104c <__aeabi_fsub+0xc8>
 800103a:	0031      	movs	r1, r6
 800103c:	2020      	movs	r0, #32
 800103e:	40d1      	lsrs	r1, r2
 8001040:	1a82      	subs	r2, r0, r2
 8001042:	4096      	lsls	r6, r2
 8001044:	0032      	movs	r2, r6
 8001046:	1e50      	subs	r0, r2, #1
 8001048:	4182      	sbcs	r2, r0
 800104a:	4311      	orrs	r1, r2
 800104c:	1a5b      	subs	r3, r3, r1
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	d460      	bmi.n	8001114 <__aeabi_fsub+0x190>
 8001052:	2107      	movs	r1, #7
 8001054:	002a      	movs	r2, r5
 8001056:	4019      	ands	r1, r3
 8001058:	d057      	beq.n	800110a <__aeabi_fsub+0x186>
 800105a:	210f      	movs	r1, #15
 800105c:	4019      	ands	r1, r3
 800105e:	2904      	cmp	r1, #4
 8001060:	d000      	beq.n	8001064 <__aeabi_fsub+0xe0>
 8001062:	3304      	adds	r3, #4
 8001064:	0159      	lsls	r1, r3, #5
 8001066:	d550      	bpl.n	800110a <__aeabi_fsub+0x186>
 8001068:	1c50      	adds	r0, r2, #1
 800106a:	2afe      	cmp	r2, #254	@ 0xfe
 800106c:	d045      	beq.n	80010fa <__aeabi_fsub+0x176>
 800106e:	019b      	lsls	r3, r3, #6
 8001070:	b2c0      	uxtb	r0, r0
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	05c0      	lsls	r0, r0, #23
 8001076:	4318      	orrs	r0, r3
 8001078:	07e4      	lsls	r4, r4, #31
 800107a:	4320      	orrs	r0, r4
 800107c:	bcc0      	pop	{r6, r7}
 800107e:	46b9      	mov	r9, r7
 8001080:	46b0      	mov	r8, r6
 8001082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001084:	2201      	movs	r2, #1
 8001086:	4051      	eors	r1, r2
 8001088:	428c      	cmp	r4, r1
 800108a:	d1ba      	bne.n	8001002 <__aeabi_fsub+0x7e>
 800108c:	464a      	mov	r2, r9
 800108e:	2a00      	cmp	r2, #0
 8001090:	d010      	beq.n	80010b4 <__aeabi_fsub+0x130>
 8001092:	2d00      	cmp	r5, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x114>
 8001096:	e098      	b.n	80011ca <__aeabi_fsub+0x246>
 8001098:	2300      	movs	r3, #0
 800109a:	e7bb      	b.n	8001014 <__aeabi_fsub+0x90>
 800109c:	2e00      	cmp	r6, #0
 800109e:	d034      	beq.n	800110a <__aeabi_fsub+0x186>
 80010a0:	1e51      	subs	r1, r2, #1
 80010a2:	2a01      	cmp	r2, #1
 80010a4:	d06e      	beq.n	8001184 <__aeabi_fsub+0x200>
 80010a6:	2aff      	cmp	r2, #255	@ 0xff
 80010a8:	d0b4      	beq.n	8001014 <__aeabi_fsub+0x90>
 80010aa:	000a      	movs	r2, r1
 80010ac:	e79c      	b.n	8000fe8 <__aeabi_fsub+0x64>
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_fsub+0x130>
 80010b2:	e088      	b.n	80011c6 <__aeabi_fsub+0x242>
 80010b4:	20fe      	movs	r0, #254	@ 0xfe
 80010b6:	1c6a      	adds	r2, r5, #1
 80010b8:	4210      	tst	r0, r2
 80010ba:	d000      	beq.n	80010be <__aeabi_fsub+0x13a>
 80010bc:	e092      	b.n	80011e4 <__aeabi_fsub+0x260>
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x140>
 80010c2:	e0a4      	b.n	800120e <__aeabi_fsub+0x28a>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x146>
 80010c8:	e0cb      	b.n	8001262 <__aeabi_fsub+0x2de>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x14c>
 80010ce:	e0ca      	b.n	8001266 <__aeabi_fsub+0x2e2>
 80010d0:	2200      	movs	r2, #0
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	025b      	lsls	r3, r3, #9
 80010d6:	0a5b      	lsrs	r3, r3, #9
 80010d8:	b2d0      	uxtb	r0, r2
 80010da:	e7cb      	b.n	8001074 <__aeabi_fsub+0xf0>
 80010dc:	0031      	movs	r1, r6
 80010de:	2020      	movs	r0, #32
 80010e0:	40d1      	lsrs	r1, r2
 80010e2:	1a82      	subs	r2, r0, r2
 80010e4:	4096      	lsls	r6, r2
 80010e6:	0032      	movs	r2, r6
 80010e8:	1e50      	subs	r0, r2, #1
 80010ea:	4182      	sbcs	r2, r0
 80010ec:	430a      	orrs	r2, r1
 80010ee:	189b      	adds	r3, r3, r2
 80010f0:	015a      	lsls	r2, r3, #5
 80010f2:	d5ae      	bpl.n	8001052 <__aeabi_fsub+0xce>
 80010f4:	1c6a      	adds	r2, r5, #1
 80010f6:	2dfe      	cmp	r5, #254	@ 0xfe
 80010f8:	d14a      	bne.n	8001190 <__aeabi_fsub+0x20c>
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	2300      	movs	r3, #0
 80010fe:	e7b9      	b.n	8001074 <__aeabi_fsub+0xf0>
 8001100:	22ff      	movs	r2, #255	@ 0xff
 8001102:	2b00      	cmp	r3, #0
 8001104:	d14b      	bne.n	800119e <__aeabi_fsub+0x21a>
 8001106:	000c      	movs	r4, r1
 8001108:	0033      	movs	r3, r6
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	2aff      	cmp	r2, #255	@ 0xff
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x18e>
 8001110:	e781      	b.n	8001016 <__aeabi_fsub+0x92>
 8001112:	e7df      	b.n	80010d4 <__aeabi_fsub+0x150>
 8001114:	019f      	lsls	r7, r3, #6
 8001116:	09bf      	lsrs	r7, r7, #6
 8001118:	0038      	movs	r0, r7
 800111a:	f002 f923 	bl	8003364 <__clzsi2>
 800111e:	3805      	subs	r0, #5
 8001120:	4087      	lsls	r7, r0
 8001122:	4285      	cmp	r5, r0
 8001124:	dc21      	bgt.n	800116a <__aeabi_fsub+0x1e6>
 8001126:	003b      	movs	r3, r7
 8001128:	2120      	movs	r1, #32
 800112a:	1b42      	subs	r2, r0, r5
 800112c:	3201      	adds	r2, #1
 800112e:	40d3      	lsrs	r3, r2
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	4097      	lsls	r7, r2
 8001134:	1e7a      	subs	r2, r7, #1
 8001136:	4197      	sbcs	r7, r2
 8001138:	2200      	movs	r2, #0
 800113a:	433b      	orrs	r3, r7
 800113c:	0759      	lsls	r1, r3, #29
 800113e:	d000      	beq.n	8001142 <__aeabi_fsub+0x1be>
 8001140:	e78b      	b.n	800105a <__aeabi_fsub+0xd6>
 8001142:	e78f      	b.n	8001064 <__aeabi_fsub+0xe0>
 8001144:	20fe      	movs	r0, #254	@ 0xfe
 8001146:	1c6a      	adds	r2, r5, #1
 8001148:	4210      	tst	r0, r2
 800114a:	d112      	bne.n	8001172 <__aeabi_fsub+0x1ee>
 800114c:	2d00      	cmp	r5, #0
 800114e:	d152      	bne.n	80011f6 <__aeabi_fsub+0x272>
 8001150:	2b00      	cmp	r3, #0
 8001152:	d07c      	beq.n	800124e <__aeabi_fsub+0x2ca>
 8001154:	2e00      	cmp	r6, #0
 8001156:	d0bb      	beq.n	80010d0 <__aeabi_fsub+0x14c>
 8001158:	1b9a      	subs	r2, r3, r6
 800115a:	0150      	lsls	r0, r2, #5
 800115c:	d400      	bmi.n	8001160 <__aeabi_fsub+0x1dc>
 800115e:	e08b      	b.n	8001278 <__aeabi_fsub+0x2f4>
 8001160:	2401      	movs	r4, #1
 8001162:	2200      	movs	r2, #0
 8001164:	1af3      	subs	r3, r6, r3
 8001166:	400c      	ands	r4, r1
 8001168:	e7e8      	b.n	800113c <__aeabi_fsub+0x1b8>
 800116a:	4b56      	ldr	r3, [pc, #344]	@ (80012c4 <__aeabi_fsub+0x340>)
 800116c:	1a2a      	subs	r2, r5, r0
 800116e:	403b      	ands	r3, r7
 8001170:	e7e4      	b.n	800113c <__aeabi_fsub+0x1b8>
 8001172:	1b9f      	subs	r7, r3, r6
 8001174:	017a      	lsls	r2, r7, #5
 8001176:	d446      	bmi.n	8001206 <__aeabi_fsub+0x282>
 8001178:	2f00      	cmp	r7, #0
 800117a:	d1cd      	bne.n	8001118 <__aeabi_fsub+0x194>
 800117c:	2400      	movs	r4, #0
 800117e:	2000      	movs	r0, #0
 8001180:	2300      	movs	r3, #0
 8001182:	e777      	b.n	8001074 <__aeabi_fsub+0xf0>
 8001184:	199b      	adds	r3, r3, r6
 8001186:	2501      	movs	r5, #1
 8001188:	3201      	adds	r2, #1
 800118a:	0159      	lsls	r1, r3, #5
 800118c:	d400      	bmi.n	8001190 <__aeabi_fsub+0x20c>
 800118e:	e760      	b.n	8001052 <__aeabi_fsub+0xce>
 8001190:	2101      	movs	r1, #1
 8001192:	484d      	ldr	r0, [pc, #308]	@ (80012c8 <__aeabi_fsub+0x344>)
 8001194:	4019      	ands	r1, r3
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	4003      	ands	r3, r0
 800119a:	430b      	orrs	r3, r1
 800119c:	e7ce      	b.n	800113c <__aeabi_fsub+0x1b8>
 800119e:	1e57      	subs	r7, r2, #1
 80011a0:	2a01      	cmp	r2, #1
 80011a2:	d05a      	beq.n	800125a <__aeabi_fsub+0x2d6>
 80011a4:	000c      	movs	r4, r1
 80011a6:	2aff      	cmp	r2, #255	@ 0xff
 80011a8:	d033      	beq.n	8001212 <__aeabi_fsub+0x28e>
 80011aa:	2201      	movs	r2, #1
 80011ac:	2f1b      	cmp	r7, #27
 80011ae:	dc07      	bgt.n	80011c0 <__aeabi_fsub+0x23c>
 80011b0:	2120      	movs	r1, #32
 80011b2:	1bc9      	subs	r1, r1, r7
 80011b4:	001a      	movs	r2, r3
 80011b6:	408b      	lsls	r3, r1
 80011b8:	40fa      	lsrs	r2, r7
 80011ba:	1e59      	subs	r1, r3, #1
 80011bc:	418b      	sbcs	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	0005      	movs	r5, r0
 80011c2:	1ab3      	subs	r3, r6, r2
 80011c4:	e743      	b.n	800104e <__aeabi_fsub+0xca>
 80011c6:	2d00      	cmp	r5, #0
 80011c8:	d123      	bne.n	8001212 <__aeabi_fsub+0x28e>
 80011ca:	22ff      	movs	r2, #255	@ 0xff
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d09b      	beq.n	8001108 <__aeabi_fsub+0x184>
 80011d0:	1e51      	subs	r1, r2, #1
 80011d2:	2a01      	cmp	r2, #1
 80011d4:	d0d6      	beq.n	8001184 <__aeabi_fsub+0x200>
 80011d6:	2aff      	cmp	r2, #255	@ 0xff
 80011d8:	d01b      	beq.n	8001212 <__aeabi_fsub+0x28e>
 80011da:	291b      	cmp	r1, #27
 80011dc:	dd2c      	ble.n	8001238 <__aeabi_fsub+0x2b4>
 80011de:	0002      	movs	r2, r0
 80011e0:	1c73      	adds	r3, r6, #1
 80011e2:	e73a      	b.n	800105a <__aeabi_fsub+0xd6>
 80011e4:	2aff      	cmp	r2, #255	@ 0xff
 80011e6:	d088      	beq.n	80010fa <__aeabi_fsub+0x176>
 80011e8:	199b      	adds	r3, r3, r6
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	0759      	lsls	r1, r3, #29
 80011ee:	d000      	beq.n	80011f2 <__aeabi_fsub+0x26e>
 80011f0:	e733      	b.n	800105a <__aeabi_fsub+0xd6>
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	e76e      	b.n	80010d4 <__aeabi_fsub+0x150>
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d110      	bne.n	800121c <__aeabi_fsub+0x298>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d043      	beq.n	8001286 <__aeabi_fsub+0x302>
 80011fe:	2401      	movs	r4, #1
 8001200:	0033      	movs	r3, r6
 8001202:	400c      	ands	r4, r1
 8001204:	e706      	b.n	8001014 <__aeabi_fsub+0x90>
 8001206:	2401      	movs	r4, #1
 8001208:	1af7      	subs	r7, r6, r3
 800120a:	400c      	ands	r4, r1
 800120c:	e784      	b.n	8001118 <__aeabi_fsub+0x194>
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <__aeabi_fsub+0x298>
 8001212:	0033      	movs	r3, r6
 8001214:	e6fe      	b.n	8001014 <__aeabi_fsub+0x90>
 8001216:	2501      	movs	r5, #1
 8001218:	1b9b      	subs	r3, r3, r6
 800121a:	e718      	b.n	800104e <__aeabi_fsub+0xca>
 800121c:	2e00      	cmp	r6, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x29e>
 8001220:	e6f8      	b.n	8001014 <__aeabi_fsub+0x90>
 8001222:	2280      	movs	r2, #128	@ 0x80
 8001224:	03d2      	lsls	r2, r2, #15
 8001226:	4297      	cmp	r7, r2
 8001228:	d304      	bcc.n	8001234 <__aeabi_fsub+0x2b0>
 800122a:	4594      	cmp	ip, r2
 800122c:	d202      	bcs.n	8001234 <__aeabi_fsub+0x2b0>
 800122e:	2401      	movs	r4, #1
 8001230:	0033      	movs	r3, r6
 8001232:	400c      	ands	r4, r1
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	e6f1      	b.n	800101c <__aeabi_fsub+0x98>
 8001238:	001a      	movs	r2, r3
 800123a:	2520      	movs	r5, #32
 800123c:	40ca      	lsrs	r2, r1
 800123e:	1a69      	subs	r1, r5, r1
 8001240:	408b      	lsls	r3, r1
 8001242:	1e59      	subs	r1, r3, #1
 8001244:	418b      	sbcs	r3, r1
 8001246:	4313      	orrs	r3, r2
 8001248:	0005      	movs	r5, r0
 800124a:	199b      	adds	r3, r3, r6
 800124c:	e750      	b.n	80010f0 <__aeabi_fsub+0x16c>
 800124e:	2e00      	cmp	r6, #0
 8001250:	d094      	beq.n	800117c <__aeabi_fsub+0x1f8>
 8001252:	2401      	movs	r4, #1
 8001254:	0033      	movs	r3, r6
 8001256:	400c      	ands	r4, r1
 8001258:	e73a      	b.n	80010d0 <__aeabi_fsub+0x14c>
 800125a:	000c      	movs	r4, r1
 800125c:	2501      	movs	r5, #1
 800125e:	1af3      	subs	r3, r6, r3
 8001260:	e6f5      	b.n	800104e <__aeabi_fsub+0xca>
 8001262:	0033      	movs	r3, r6
 8001264:	e734      	b.n	80010d0 <__aeabi_fsub+0x14c>
 8001266:	199b      	adds	r3, r3, r6
 8001268:	2200      	movs	r2, #0
 800126a:	0159      	lsls	r1, r3, #5
 800126c:	d5c1      	bpl.n	80011f2 <__aeabi_fsub+0x26e>
 800126e:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <__aeabi_fsub+0x340>)
 8001270:	4013      	ands	r3, r2
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	2201      	movs	r2, #1
 8001276:	e72d      	b.n	80010d4 <__aeabi_fsub+0x150>
 8001278:	2a00      	cmp	r2, #0
 800127a:	d100      	bne.n	800127e <__aeabi_fsub+0x2fa>
 800127c:	e77e      	b.n	800117c <__aeabi_fsub+0x1f8>
 800127e:	0013      	movs	r3, r2
 8001280:	2200      	movs	r2, #0
 8001282:	08db      	lsrs	r3, r3, #3
 8001284:	e726      	b.n	80010d4 <__aeabi_fsub+0x150>
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	2400      	movs	r4, #0
 800128a:	20ff      	movs	r0, #255	@ 0xff
 800128c:	03db      	lsls	r3, r3, #15
 800128e:	e6f1      	b.n	8001074 <__aeabi_fsub+0xf0>
 8001290:	2a00      	cmp	r2, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x312>
 8001294:	e756      	b.n	8001144 <__aeabi_fsub+0x1c0>
 8001296:	1b47      	subs	r7, r0, r5
 8001298:	003a      	movs	r2, r7
 800129a:	2d00      	cmp	r5, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x31c>
 800129e:	e730      	b.n	8001102 <__aeabi_fsub+0x17e>
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	04d2      	lsls	r2, r2, #19
 80012a4:	000c      	movs	r4, r1
 80012a6:	4313      	orrs	r3, r2
 80012a8:	e77f      	b.n	80011aa <__aeabi_fsub+0x226>
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d100      	bne.n	80012b0 <__aeabi_fsub+0x32c>
 80012ae:	e701      	b.n	80010b4 <__aeabi_fsub+0x130>
 80012b0:	1b41      	subs	r1, r0, r5
 80012b2:	2d00      	cmp	r5, #0
 80012b4:	d101      	bne.n	80012ba <__aeabi_fsub+0x336>
 80012b6:	000a      	movs	r2, r1
 80012b8:	e788      	b.n	80011cc <__aeabi_fsub+0x248>
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	04d2      	lsls	r2, r2, #19
 80012be:	4313      	orrs	r3, r2
 80012c0:	e78b      	b.n	80011da <__aeabi_fsub+0x256>
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	fbffffff 	.word	0xfbffffff
 80012c8:	7dffffff 	.word	0x7dffffff

080012cc <__aeabi_fcmpun>:
 80012cc:	0243      	lsls	r3, r0, #9
 80012ce:	024a      	lsls	r2, r1, #9
 80012d0:	0040      	lsls	r0, r0, #1
 80012d2:	0049      	lsls	r1, r1, #1
 80012d4:	0a5b      	lsrs	r3, r3, #9
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	0e09      	lsrs	r1, r1, #24
 80012da:	0e00      	lsrs	r0, r0, #24
 80012dc:	28ff      	cmp	r0, #255	@ 0xff
 80012de:	d006      	beq.n	80012ee <__aeabi_fcmpun+0x22>
 80012e0:	2000      	movs	r0, #0
 80012e2:	29ff      	cmp	r1, #255	@ 0xff
 80012e4:	d102      	bne.n	80012ec <__aeabi_fcmpun+0x20>
 80012e6:	1e53      	subs	r3, r2, #1
 80012e8:	419a      	sbcs	r2, r3
 80012ea:	0010      	movs	r0, r2
 80012ec:	4770      	bx	lr
 80012ee:	38fe      	subs	r0, #254	@ 0xfe
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1fb      	bne.n	80012ec <__aeabi_fcmpun+0x20>
 80012f4:	e7f4      	b.n	80012e0 <__aeabi_fcmpun+0x14>
 80012f6:	46c0      	nop			@ (mov r8, r8)

080012f8 <__aeabi_f2iz>:
 80012f8:	0241      	lsls	r1, r0, #9
 80012fa:	0042      	lsls	r2, r0, #1
 80012fc:	0fc3      	lsrs	r3, r0, #31
 80012fe:	0a49      	lsrs	r1, r1, #9
 8001300:	2000      	movs	r0, #0
 8001302:	0e12      	lsrs	r2, r2, #24
 8001304:	2a7e      	cmp	r2, #126	@ 0x7e
 8001306:	dd03      	ble.n	8001310 <__aeabi_f2iz+0x18>
 8001308:	2a9d      	cmp	r2, #157	@ 0x9d
 800130a:	dd02      	ble.n	8001312 <__aeabi_f2iz+0x1a>
 800130c:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <__aeabi_f2iz+0x3c>)
 800130e:	1898      	adds	r0, r3, r2
 8001310:	4770      	bx	lr
 8001312:	2080      	movs	r0, #128	@ 0x80
 8001314:	0400      	lsls	r0, r0, #16
 8001316:	4301      	orrs	r1, r0
 8001318:	2a95      	cmp	r2, #149	@ 0x95
 800131a:	dc07      	bgt.n	800132c <__aeabi_f2iz+0x34>
 800131c:	2096      	movs	r0, #150	@ 0x96
 800131e:	1a82      	subs	r2, r0, r2
 8001320:	40d1      	lsrs	r1, r2
 8001322:	4248      	negs	r0, r1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f3      	bne.n	8001310 <__aeabi_f2iz+0x18>
 8001328:	0008      	movs	r0, r1
 800132a:	e7f1      	b.n	8001310 <__aeabi_f2iz+0x18>
 800132c:	3a96      	subs	r2, #150	@ 0x96
 800132e:	4091      	lsls	r1, r2
 8001330:	e7f7      	b.n	8001322 <__aeabi_f2iz+0x2a>
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	7fffffff 	.word	0x7fffffff

08001338 <__aeabi_i2f>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	2800      	cmp	r0, #0
 800133c:	d013      	beq.n	8001366 <__aeabi_i2f+0x2e>
 800133e:	17c3      	asrs	r3, r0, #31
 8001340:	18c5      	adds	r5, r0, r3
 8001342:	405d      	eors	r5, r3
 8001344:	0fc4      	lsrs	r4, r0, #31
 8001346:	0028      	movs	r0, r5
 8001348:	f002 f80c 	bl	8003364 <__clzsi2>
 800134c:	239e      	movs	r3, #158	@ 0x9e
 800134e:	0001      	movs	r1, r0
 8001350:	1a1b      	subs	r3, r3, r0
 8001352:	2b96      	cmp	r3, #150	@ 0x96
 8001354:	dc0f      	bgt.n	8001376 <__aeabi_i2f+0x3e>
 8001356:	2808      	cmp	r0, #8
 8001358:	d034      	beq.n	80013c4 <__aeabi_i2f+0x8c>
 800135a:	3908      	subs	r1, #8
 800135c:	408d      	lsls	r5, r1
 800135e:	026d      	lsls	r5, r5, #9
 8001360:	0a6d      	lsrs	r5, r5, #9
 8001362:	b2d8      	uxtb	r0, r3
 8001364:	e002      	b.n	800136c <__aeabi_i2f+0x34>
 8001366:	2400      	movs	r4, #0
 8001368:	2000      	movs	r0, #0
 800136a:	2500      	movs	r5, #0
 800136c:	05c0      	lsls	r0, r0, #23
 800136e:	4328      	orrs	r0, r5
 8001370:	07e4      	lsls	r4, r4, #31
 8001372:	4320      	orrs	r0, r4
 8001374:	bd70      	pop	{r4, r5, r6, pc}
 8001376:	2b99      	cmp	r3, #153	@ 0x99
 8001378:	dc16      	bgt.n	80013a8 <__aeabi_i2f+0x70>
 800137a:	1f42      	subs	r2, r0, #5
 800137c:	2805      	cmp	r0, #5
 800137e:	d000      	beq.n	8001382 <__aeabi_i2f+0x4a>
 8001380:	4095      	lsls	r5, r2
 8001382:	002a      	movs	r2, r5
 8001384:	4811      	ldr	r0, [pc, #68]	@ (80013cc <__aeabi_i2f+0x94>)
 8001386:	4002      	ands	r2, r0
 8001388:	076e      	lsls	r6, r5, #29
 800138a:	d009      	beq.n	80013a0 <__aeabi_i2f+0x68>
 800138c:	260f      	movs	r6, #15
 800138e:	4035      	ands	r5, r6
 8001390:	2d04      	cmp	r5, #4
 8001392:	d005      	beq.n	80013a0 <__aeabi_i2f+0x68>
 8001394:	3204      	adds	r2, #4
 8001396:	0155      	lsls	r5, r2, #5
 8001398:	d502      	bpl.n	80013a0 <__aeabi_i2f+0x68>
 800139a:	239f      	movs	r3, #159	@ 0x9f
 800139c:	4002      	ands	r2, r0
 800139e:	1a5b      	subs	r3, r3, r1
 80013a0:	0192      	lsls	r2, r2, #6
 80013a2:	0a55      	lsrs	r5, r2, #9
 80013a4:	b2d8      	uxtb	r0, r3
 80013a6:	e7e1      	b.n	800136c <__aeabi_i2f+0x34>
 80013a8:	2205      	movs	r2, #5
 80013aa:	1a12      	subs	r2, r2, r0
 80013ac:	0028      	movs	r0, r5
 80013ae:	40d0      	lsrs	r0, r2
 80013b0:	0002      	movs	r2, r0
 80013b2:	0008      	movs	r0, r1
 80013b4:	301b      	adds	r0, #27
 80013b6:	4085      	lsls	r5, r0
 80013b8:	0028      	movs	r0, r5
 80013ba:	1e45      	subs	r5, r0, #1
 80013bc:	41a8      	sbcs	r0, r5
 80013be:	4302      	orrs	r2, r0
 80013c0:	0015      	movs	r5, r2
 80013c2:	e7de      	b.n	8001382 <__aeabi_i2f+0x4a>
 80013c4:	026d      	lsls	r5, r5, #9
 80013c6:	2096      	movs	r0, #150	@ 0x96
 80013c8:	0a6d      	lsrs	r5, r5, #9
 80013ca:	e7cf      	b.n	800136c <__aeabi_i2f+0x34>
 80013cc:	fbffffff 	.word	0xfbffffff

080013d0 <__aeabi_ui2f>:
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	1e04      	subs	r4, r0, #0
 80013d4:	d00e      	beq.n	80013f4 <__aeabi_ui2f+0x24>
 80013d6:	f001 ffc5 	bl	8003364 <__clzsi2>
 80013da:	239e      	movs	r3, #158	@ 0x9e
 80013dc:	0001      	movs	r1, r0
 80013de:	1a1b      	subs	r3, r3, r0
 80013e0:	2b96      	cmp	r3, #150	@ 0x96
 80013e2:	dc0c      	bgt.n	80013fe <__aeabi_ui2f+0x2e>
 80013e4:	2808      	cmp	r0, #8
 80013e6:	d02f      	beq.n	8001448 <__aeabi_ui2f+0x78>
 80013e8:	3908      	subs	r1, #8
 80013ea:	408c      	lsls	r4, r1
 80013ec:	0264      	lsls	r4, r4, #9
 80013ee:	0a64      	lsrs	r4, r4, #9
 80013f0:	b2d8      	uxtb	r0, r3
 80013f2:	e001      	b.n	80013f8 <__aeabi_ui2f+0x28>
 80013f4:	2000      	movs	r0, #0
 80013f6:	2400      	movs	r4, #0
 80013f8:	05c0      	lsls	r0, r0, #23
 80013fa:	4320      	orrs	r0, r4
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
 80013fe:	2b99      	cmp	r3, #153	@ 0x99
 8001400:	dc16      	bgt.n	8001430 <__aeabi_ui2f+0x60>
 8001402:	1f42      	subs	r2, r0, #5
 8001404:	2805      	cmp	r0, #5
 8001406:	d000      	beq.n	800140a <__aeabi_ui2f+0x3a>
 8001408:	4094      	lsls	r4, r2
 800140a:	0022      	movs	r2, r4
 800140c:	4810      	ldr	r0, [pc, #64]	@ (8001450 <__aeabi_ui2f+0x80>)
 800140e:	4002      	ands	r2, r0
 8001410:	0765      	lsls	r5, r4, #29
 8001412:	d009      	beq.n	8001428 <__aeabi_ui2f+0x58>
 8001414:	250f      	movs	r5, #15
 8001416:	402c      	ands	r4, r5
 8001418:	2c04      	cmp	r4, #4
 800141a:	d005      	beq.n	8001428 <__aeabi_ui2f+0x58>
 800141c:	3204      	adds	r2, #4
 800141e:	0154      	lsls	r4, r2, #5
 8001420:	d502      	bpl.n	8001428 <__aeabi_ui2f+0x58>
 8001422:	239f      	movs	r3, #159	@ 0x9f
 8001424:	4002      	ands	r2, r0
 8001426:	1a5b      	subs	r3, r3, r1
 8001428:	0192      	lsls	r2, r2, #6
 800142a:	0a54      	lsrs	r4, r2, #9
 800142c:	b2d8      	uxtb	r0, r3
 800142e:	e7e3      	b.n	80013f8 <__aeabi_ui2f+0x28>
 8001430:	0002      	movs	r2, r0
 8001432:	0020      	movs	r0, r4
 8001434:	321b      	adds	r2, #27
 8001436:	4090      	lsls	r0, r2
 8001438:	0002      	movs	r2, r0
 800143a:	1e50      	subs	r0, r2, #1
 800143c:	4182      	sbcs	r2, r0
 800143e:	2005      	movs	r0, #5
 8001440:	1a40      	subs	r0, r0, r1
 8001442:	40c4      	lsrs	r4, r0
 8001444:	4314      	orrs	r4, r2
 8001446:	e7e0      	b.n	800140a <__aeabi_ui2f+0x3a>
 8001448:	0264      	lsls	r4, r4, #9
 800144a:	2096      	movs	r0, #150	@ 0x96
 800144c:	0a64      	lsrs	r4, r4, #9
 800144e:	e7d3      	b.n	80013f8 <__aeabi_ui2f+0x28>
 8001450:	fbffffff 	.word	0xfbffffff

08001454 <__aeabi_dadd>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4657      	mov	r7, sl
 8001458:	464e      	mov	r6, r9
 800145a:	4645      	mov	r5, r8
 800145c:	46de      	mov	lr, fp
 800145e:	b5e0      	push	{r5, r6, r7, lr}
 8001460:	b083      	sub	sp, #12
 8001462:	9000      	str	r0, [sp, #0]
 8001464:	9101      	str	r1, [sp, #4]
 8001466:	030c      	lsls	r4, r1, #12
 8001468:	004f      	lsls	r7, r1, #1
 800146a:	0fce      	lsrs	r6, r1, #31
 800146c:	0a61      	lsrs	r1, r4, #9
 800146e:	9c00      	ldr	r4, [sp, #0]
 8001470:	031d      	lsls	r5, r3, #12
 8001472:	0f64      	lsrs	r4, r4, #29
 8001474:	430c      	orrs	r4, r1
 8001476:	9900      	ldr	r1, [sp, #0]
 8001478:	9200      	str	r2, [sp, #0]
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	00c8      	lsls	r0, r1, #3
 800147e:	0059      	lsls	r1, r3, #1
 8001480:	0d4b      	lsrs	r3, r1, #21
 8001482:	4699      	mov	r9, r3
 8001484:	9a00      	ldr	r2, [sp, #0]
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	0fd9      	lsrs	r1, r3, #31
 800148c:	0f53      	lsrs	r3, r2, #29
 800148e:	432b      	orrs	r3, r5
 8001490:	469a      	mov	sl, r3
 8001492:	9b00      	ldr	r3, [sp, #0]
 8001494:	0d7f      	lsrs	r7, r7, #21
 8001496:	00da      	lsls	r2, r3, #3
 8001498:	4694      	mov	ip, r2
 800149a:	464a      	mov	r2, r9
 800149c:	46b0      	mov	r8, r6
 800149e:	1aba      	subs	r2, r7, r2
 80014a0:	428e      	cmp	r6, r1
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x52>
 80014a4:	e0b0      	b.n	8001608 <__aeabi_dadd+0x1b4>
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	dc00      	bgt.n	80014ac <__aeabi_dadd+0x58>
 80014aa:	e078      	b.n	800159e <__aeabi_dadd+0x14a>
 80014ac:	4649      	mov	r1, r9
 80014ae:	2900      	cmp	r1, #0
 80014b0:	d100      	bne.n	80014b4 <__aeabi_dadd+0x60>
 80014b2:	e0e9      	b.n	8001688 <__aeabi_dadd+0x234>
 80014b4:	49c9      	ldr	r1, [pc, #804]	@ (80017dc <__aeabi_dadd+0x388>)
 80014b6:	428f      	cmp	r7, r1
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x68>
 80014ba:	e195      	b.n	80017e8 <__aeabi_dadd+0x394>
 80014bc:	2501      	movs	r5, #1
 80014be:	2a38      	cmp	r2, #56	@ 0x38
 80014c0:	dc16      	bgt.n	80014f0 <__aeabi_dadd+0x9c>
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	4653      	mov	r3, sl
 80014c6:	0409      	lsls	r1, r1, #16
 80014c8:	430b      	orrs	r3, r1
 80014ca:	469a      	mov	sl, r3
 80014cc:	2a1f      	cmp	r2, #31
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dadd+0x7e>
 80014d0:	e1e7      	b.n	80018a2 <__aeabi_dadd+0x44e>
 80014d2:	2120      	movs	r1, #32
 80014d4:	4655      	mov	r5, sl
 80014d6:	1a8b      	subs	r3, r1, r2
 80014d8:	4661      	mov	r1, ip
 80014da:	409d      	lsls	r5, r3
 80014dc:	40d1      	lsrs	r1, r2
 80014de:	430d      	orrs	r5, r1
 80014e0:	4661      	mov	r1, ip
 80014e2:	4099      	lsls	r1, r3
 80014e4:	1e4b      	subs	r3, r1, #1
 80014e6:	4199      	sbcs	r1, r3
 80014e8:	4653      	mov	r3, sl
 80014ea:	40d3      	lsrs	r3, r2
 80014ec:	430d      	orrs	r5, r1
 80014ee:	1ae4      	subs	r4, r4, r3
 80014f0:	1b45      	subs	r5, r0, r5
 80014f2:	42a8      	cmp	r0, r5
 80014f4:	4180      	sbcs	r0, r0
 80014f6:	4240      	negs	r0, r0
 80014f8:	1a24      	subs	r4, r4, r0
 80014fa:	0223      	lsls	r3, r4, #8
 80014fc:	d400      	bmi.n	8001500 <__aeabi_dadd+0xac>
 80014fe:	e10f      	b.n	8001720 <__aeabi_dadd+0x2cc>
 8001500:	0264      	lsls	r4, r4, #9
 8001502:	0a64      	lsrs	r4, r4, #9
 8001504:	2c00      	cmp	r4, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0xb6>
 8001508:	e139      	b.n	800177e <__aeabi_dadd+0x32a>
 800150a:	0020      	movs	r0, r4
 800150c:	f001 ff2a 	bl	8003364 <__clzsi2>
 8001510:	0003      	movs	r3, r0
 8001512:	3b08      	subs	r3, #8
 8001514:	2120      	movs	r1, #32
 8001516:	0028      	movs	r0, r5
 8001518:	1aca      	subs	r2, r1, r3
 800151a:	40d0      	lsrs	r0, r2
 800151c:	409c      	lsls	r4, r3
 800151e:	0002      	movs	r2, r0
 8001520:	409d      	lsls	r5, r3
 8001522:	4322      	orrs	r2, r4
 8001524:	429f      	cmp	r7, r3
 8001526:	dd00      	ble.n	800152a <__aeabi_dadd+0xd6>
 8001528:	e173      	b.n	8001812 <__aeabi_dadd+0x3be>
 800152a:	1bd8      	subs	r0, r3, r7
 800152c:	3001      	adds	r0, #1
 800152e:	1a09      	subs	r1, r1, r0
 8001530:	002c      	movs	r4, r5
 8001532:	408d      	lsls	r5, r1
 8001534:	40c4      	lsrs	r4, r0
 8001536:	1e6b      	subs	r3, r5, #1
 8001538:	419d      	sbcs	r5, r3
 800153a:	0013      	movs	r3, r2
 800153c:	40c2      	lsrs	r2, r0
 800153e:	408b      	lsls	r3, r1
 8001540:	4325      	orrs	r5, r4
 8001542:	2700      	movs	r7, #0
 8001544:	0014      	movs	r4, r2
 8001546:	431d      	orrs	r5, r3
 8001548:	076b      	lsls	r3, r5, #29
 800154a:	d009      	beq.n	8001560 <__aeabi_dadd+0x10c>
 800154c:	230f      	movs	r3, #15
 800154e:	402b      	ands	r3, r5
 8001550:	2b04      	cmp	r3, #4
 8001552:	d005      	beq.n	8001560 <__aeabi_dadd+0x10c>
 8001554:	1d2b      	adds	r3, r5, #4
 8001556:	42ab      	cmp	r3, r5
 8001558:	41ad      	sbcs	r5, r5
 800155a:	426d      	negs	r5, r5
 800155c:	1964      	adds	r4, r4, r5
 800155e:	001d      	movs	r5, r3
 8001560:	0223      	lsls	r3, r4, #8
 8001562:	d400      	bmi.n	8001566 <__aeabi_dadd+0x112>
 8001564:	e12d      	b.n	80017c2 <__aeabi_dadd+0x36e>
 8001566:	4a9d      	ldr	r2, [pc, #628]	@ (80017dc <__aeabi_dadd+0x388>)
 8001568:	3701      	adds	r7, #1
 800156a:	4297      	cmp	r7, r2
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x11c>
 800156e:	e0d3      	b.n	8001718 <__aeabi_dadd+0x2c4>
 8001570:	4646      	mov	r6, r8
 8001572:	499b      	ldr	r1, [pc, #620]	@ (80017e0 <__aeabi_dadd+0x38c>)
 8001574:	08ed      	lsrs	r5, r5, #3
 8001576:	4021      	ands	r1, r4
 8001578:	074a      	lsls	r2, r1, #29
 800157a:	432a      	orrs	r2, r5
 800157c:	057c      	lsls	r4, r7, #21
 800157e:	024d      	lsls	r5, r1, #9
 8001580:	0b2d      	lsrs	r5, r5, #12
 8001582:	0d64      	lsrs	r4, r4, #21
 8001584:	0524      	lsls	r4, r4, #20
 8001586:	432c      	orrs	r4, r5
 8001588:	07f6      	lsls	r6, r6, #31
 800158a:	4334      	orrs	r4, r6
 800158c:	0010      	movs	r0, r2
 800158e:	0021      	movs	r1, r4
 8001590:	b003      	add	sp, #12
 8001592:	bcf0      	pop	{r4, r5, r6, r7}
 8001594:	46bb      	mov	fp, r7
 8001596:	46b2      	mov	sl, r6
 8001598:	46a9      	mov	r9, r5
 800159a:	46a0      	mov	r8, r4
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x150>
 80015a2:	e084      	b.n	80016ae <__aeabi_dadd+0x25a>
 80015a4:	464a      	mov	r2, r9
 80015a6:	1bd2      	subs	r2, r2, r7
 80015a8:	2f00      	cmp	r7, #0
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x15a>
 80015ac:	e16d      	b.n	800188a <__aeabi_dadd+0x436>
 80015ae:	0025      	movs	r5, r4
 80015b0:	4305      	orrs	r5, r0
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dadd+0x162>
 80015b4:	e127      	b.n	8001806 <__aeabi_dadd+0x3b2>
 80015b6:	1e56      	subs	r6, r2, #1
 80015b8:	2a01      	cmp	r2, #1
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x16a>
 80015bc:	e23b      	b.n	8001a36 <__aeabi_dadd+0x5e2>
 80015be:	4d87      	ldr	r5, [pc, #540]	@ (80017dc <__aeabi_dadd+0x388>)
 80015c0:	42aa      	cmp	r2, r5
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x172>
 80015c4:	e26a      	b.n	8001a9c <__aeabi_dadd+0x648>
 80015c6:	2501      	movs	r5, #1
 80015c8:	2e38      	cmp	r6, #56	@ 0x38
 80015ca:	dc12      	bgt.n	80015f2 <__aeabi_dadd+0x19e>
 80015cc:	0032      	movs	r2, r6
 80015ce:	2a1f      	cmp	r2, #31
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_dadd+0x180>
 80015d2:	e1f8      	b.n	80019c6 <__aeabi_dadd+0x572>
 80015d4:	2620      	movs	r6, #32
 80015d6:	0025      	movs	r5, r4
 80015d8:	1ab6      	subs	r6, r6, r2
 80015da:	0007      	movs	r7, r0
 80015dc:	4653      	mov	r3, sl
 80015de:	40b0      	lsls	r0, r6
 80015e0:	40d4      	lsrs	r4, r2
 80015e2:	40b5      	lsls	r5, r6
 80015e4:	40d7      	lsrs	r7, r2
 80015e6:	1e46      	subs	r6, r0, #1
 80015e8:	41b0      	sbcs	r0, r6
 80015ea:	1b1b      	subs	r3, r3, r4
 80015ec:	469a      	mov	sl, r3
 80015ee:	433d      	orrs	r5, r7
 80015f0:	4305      	orrs	r5, r0
 80015f2:	4662      	mov	r2, ip
 80015f4:	1b55      	subs	r5, r2, r5
 80015f6:	45ac      	cmp	ip, r5
 80015f8:	4192      	sbcs	r2, r2
 80015fa:	4653      	mov	r3, sl
 80015fc:	4252      	negs	r2, r2
 80015fe:	000e      	movs	r6, r1
 8001600:	464f      	mov	r7, r9
 8001602:	4688      	mov	r8, r1
 8001604:	1a9c      	subs	r4, r3, r2
 8001606:	e778      	b.n	80014fa <__aeabi_dadd+0xa6>
 8001608:	2a00      	cmp	r2, #0
 800160a:	dc00      	bgt.n	800160e <__aeabi_dadd+0x1ba>
 800160c:	e08e      	b.n	800172c <__aeabi_dadd+0x2d8>
 800160e:	4649      	mov	r1, r9
 8001610:	2900      	cmp	r1, #0
 8001612:	d175      	bne.n	8001700 <__aeabi_dadd+0x2ac>
 8001614:	4661      	mov	r1, ip
 8001616:	4653      	mov	r3, sl
 8001618:	4319      	orrs	r1, r3
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1ca>
 800161c:	e0f6      	b.n	800180c <__aeabi_dadd+0x3b8>
 800161e:	1e51      	subs	r1, r2, #1
 8001620:	2a01      	cmp	r2, #1
 8001622:	d100      	bne.n	8001626 <__aeabi_dadd+0x1d2>
 8001624:	e191      	b.n	800194a <__aeabi_dadd+0x4f6>
 8001626:	4d6d      	ldr	r5, [pc, #436]	@ (80017dc <__aeabi_dadd+0x388>)
 8001628:	42aa      	cmp	r2, r5
 800162a:	d100      	bne.n	800162e <__aeabi_dadd+0x1da>
 800162c:	e0dc      	b.n	80017e8 <__aeabi_dadd+0x394>
 800162e:	2501      	movs	r5, #1
 8001630:	2938      	cmp	r1, #56	@ 0x38
 8001632:	dc14      	bgt.n	800165e <__aeabi_dadd+0x20a>
 8001634:	000a      	movs	r2, r1
 8001636:	2a1f      	cmp	r2, #31
 8001638:	dd00      	ble.n	800163c <__aeabi_dadd+0x1e8>
 800163a:	e1a2      	b.n	8001982 <__aeabi_dadd+0x52e>
 800163c:	2120      	movs	r1, #32
 800163e:	4653      	mov	r3, sl
 8001640:	1a89      	subs	r1, r1, r2
 8001642:	408b      	lsls	r3, r1
 8001644:	001d      	movs	r5, r3
 8001646:	4663      	mov	r3, ip
 8001648:	40d3      	lsrs	r3, r2
 800164a:	431d      	orrs	r5, r3
 800164c:	4663      	mov	r3, ip
 800164e:	408b      	lsls	r3, r1
 8001650:	0019      	movs	r1, r3
 8001652:	1e4b      	subs	r3, r1, #1
 8001654:	4199      	sbcs	r1, r3
 8001656:	4653      	mov	r3, sl
 8001658:	40d3      	lsrs	r3, r2
 800165a:	430d      	orrs	r5, r1
 800165c:	18e4      	adds	r4, r4, r3
 800165e:	182d      	adds	r5, r5, r0
 8001660:	4285      	cmp	r5, r0
 8001662:	4180      	sbcs	r0, r0
 8001664:	4240      	negs	r0, r0
 8001666:	1824      	adds	r4, r4, r0
 8001668:	0223      	lsls	r3, r4, #8
 800166a:	d559      	bpl.n	8001720 <__aeabi_dadd+0x2cc>
 800166c:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <__aeabi_dadd+0x388>)
 800166e:	3701      	adds	r7, #1
 8001670:	429f      	cmp	r7, r3
 8001672:	d051      	beq.n	8001718 <__aeabi_dadd+0x2c4>
 8001674:	2101      	movs	r1, #1
 8001676:	4b5a      	ldr	r3, [pc, #360]	@ (80017e0 <__aeabi_dadd+0x38c>)
 8001678:	086a      	lsrs	r2, r5, #1
 800167a:	401c      	ands	r4, r3
 800167c:	4029      	ands	r1, r5
 800167e:	430a      	orrs	r2, r1
 8001680:	07e5      	lsls	r5, r4, #31
 8001682:	4315      	orrs	r5, r2
 8001684:	0864      	lsrs	r4, r4, #1
 8001686:	e75f      	b.n	8001548 <__aeabi_dadd+0xf4>
 8001688:	4661      	mov	r1, ip
 800168a:	4653      	mov	r3, sl
 800168c:	4319      	orrs	r1, r3
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x23e>
 8001690:	e0bc      	b.n	800180c <__aeabi_dadd+0x3b8>
 8001692:	1e51      	subs	r1, r2, #1
 8001694:	2a01      	cmp	r2, #1
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x246>
 8001698:	e164      	b.n	8001964 <__aeabi_dadd+0x510>
 800169a:	4d50      	ldr	r5, [pc, #320]	@ (80017dc <__aeabi_dadd+0x388>)
 800169c:	42aa      	cmp	r2, r5
 800169e:	d100      	bne.n	80016a2 <__aeabi_dadd+0x24e>
 80016a0:	e16a      	b.n	8001978 <__aeabi_dadd+0x524>
 80016a2:	2501      	movs	r5, #1
 80016a4:	2938      	cmp	r1, #56	@ 0x38
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dadd+0x256>
 80016a8:	e722      	b.n	80014f0 <__aeabi_dadd+0x9c>
 80016aa:	000a      	movs	r2, r1
 80016ac:	e70e      	b.n	80014cc <__aeabi_dadd+0x78>
 80016ae:	4a4d      	ldr	r2, [pc, #308]	@ (80017e4 <__aeabi_dadd+0x390>)
 80016b0:	1c7d      	adds	r5, r7, #1
 80016b2:	4215      	tst	r5, r2
 80016b4:	d000      	beq.n	80016b8 <__aeabi_dadd+0x264>
 80016b6:	e0d0      	b.n	800185a <__aeabi_dadd+0x406>
 80016b8:	0025      	movs	r5, r4
 80016ba:	4662      	mov	r2, ip
 80016bc:	4653      	mov	r3, sl
 80016be:	4305      	orrs	r5, r0
 80016c0:	431a      	orrs	r2, r3
 80016c2:	2f00      	cmp	r7, #0
 80016c4:	d000      	beq.n	80016c8 <__aeabi_dadd+0x274>
 80016c6:	e137      	b.n	8001938 <__aeabi_dadd+0x4e4>
 80016c8:	2d00      	cmp	r5, #0
 80016ca:	d100      	bne.n	80016ce <__aeabi_dadd+0x27a>
 80016cc:	e1a8      	b.n	8001a20 <__aeabi_dadd+0x5cc>
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x280>
 80016d2:	e16a      	b.n	80019aa <__aeabi_dadd+0x556>
 80016d4:	4663      	mov	r3, ip
 80016d6:	1ac5      	subs	r5, r0, r3
 80016d8:	4653      	mov	r3, sl
 80016da:	1ae2      	subs	r2, r4, r3
 80016dc:	42a8      	cmp	r0, r5
 80016de:	419b      	sbcs	r3, r3
 80016e0:	425b      	negs	r3, r3
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	021a      	lsls	r2, r3, #8
 80016e6:	d400      	bmi.n	80016ea <__aeabi_dadd+0x296>
 80016e8:	e203      	b.n	8001af2 <__aeabi_dadd+0x69e>
 80016ea:	4663      	mov	r3, ip
 80016ec:	1a1d      	subs	r5, r3, r0
 80016ee:	45ac      	cmp	ip, r5
 80016f0:	4192      	sbcs	r2, r2
 80016f2:	4653      	mov	r3, sl
 80016f4:	4252      	negs	r2, r2
 80016f6:	1b1c      	subs	r4, r3, r4
 80016f8:	000e      	movs	r6, r1
 80016fa:	4688      	mov	r8, r1
 80016fc:	1aa4      	subs	r4, r4, r2
 80016fe:	e723      	b.n	8001548 <__aeabi_dadd+0xf4>
 8001700:	4936      	ldr	r1, [pc, #216]	@ (80017dc <__aeabi_dadd+0x388>)
 8001702:	428f      	cmp	r7, r1
 8001704:	d070      	beq.n	80017e8 <__aeabi_dadd+0x394>
 8001706:	2501      	movs	r5, #1
 8001708:	2a38      	cmp	r2, #56	@ 0x38
 800170a:	dca8      	bgt.n	800165e <__aeabi_dadd+0x20a>
 800170c:	2180      	movs	r1, #128	@ 0x80
 800170e:	4653      	mov	r3, sl
 8001710:	0409      	lsls	r1, r1, #16
 8001712:	430b      	orrs	r3, r1
 8001714:	469a      	mov	sl, r3
 8001716:	e78e      	b.n	8001636 <__aeabi_dadd+0x1e2>
 8001718:	003c      	movs	r4, r7
 800171a:	2500      	movs	r5, #0
 800171c:	2200      	movs	r2, #0
 800171e:	e731      	b.n	8001584 <__aeabi_dadd+0x130>
 8001720:	2307      	movs	r3, #7
 8001722:	402b      	ands	r3, r5
 8001724:	2b00      	cmp	r3, #0
 8001726:	d000      	beq.n	800172a <__aeabi_dadd+0x2d6>
 8001728:	e710      	b.n	800154c <__aeabi_dadd+0xf8>
 800172a:	e093      	b.n	8001854 <__aeabi_dadd+0x400>
 800172c:	2a00      	cmp	r2, #0
 800172e:	d074      	beq.n	800181a <__aeabi_dadd+0x3c6>
 8001730:	464a      	mov	r2, r9
 8001732:	1bd2      	subs	r2, r2, r7
 8001734:	2f00      	cmp	r7, #0
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x2e6>
 8001738:	e0c7      	b.n	80018ca <__aeabi_dadd+0x476>
 800173a:	4928      	ldr	r1, [pc, #160]	@ (80017dc <__aeabi_dadd+0x388>)
 800173c:	4589      	cmp	r9, r1
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x2ee>
 8001740:	e185      	b.n	8001a4e <__aeabi_dadd+0x5fa>
 8001742:	2501      	movs	r5, #1
 8001744:	2a38      	cmp	r2, #56	@ 0x38
 8001746:	dc12      	bgt.n	800176e <__aeabi_dadd+0x31a>
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	0409      	lsls	r1, r1, #16
 800174c:	430c      	orrs	r4, r1
 800174e:	2a1f      	cmp	r2, #31
 8001750:	dd00      	ble.n	8001754 <__aeabi_dadd+0x300>
 8001752:	e1ab      	b.n	8001aac <__aeabi_dadd+0x658>
 8001754:	2120      	movs	r1, #32
 8001756:	0025      	movs	r5, r4
 8001758:	1a89      	subs	r1, r1, r2
 800175a:	0007      	movs	r7, r0
 800175c:	4088      	lsls	r0, r1
 800175e:	408d      	lsls	r5, r1
 8001760:	40d7      	lsrs	r7, r2
 8001762:	1e41      	subs	r1, r0, #1
 8001764:	4188      	sbcs	r0, r1
 8001766:	40d4      	lsrs	r4, r2
 8001768:	433d      	orrs	r5, r7
 800176a:	4305      	orrs	r5, r0
 800176c:	44a2      	add	sl, r4
 800176e:	4465      	add	r5, ip
 8001770:	4565      	cmp	r5, ip
 8001772:	4192      	sbcs	r2, r2
 8001774:	4252      	negs	r2, r2
 8001776:	4452      	add	r2, sl
 8001778:	0014      	movs	r4, r2
 800177a:	464f      	mov	r7, r9
 800177c:	e774      	b.n	8001668 <__aeabi_dadd+0x214>
 800177e:	0028      	movs	r0, r5
 8001780:	f001 fdf0 	bl	8003364 <__clzsi2>
 8001784:	0003      	movs	r3, r0
 8001786:	3318      	adds	r3, #24
 8001788:	2b1f      	cmp	r3, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dadd+0x33a>
 800178c:	e6c2      	b.n	8001514 <__aeabi_dadd+0xc0>
 800178e:	002a      	movs	r2, r5
 8001790:	3808      	subs	r0, #8
 8001792:	4082      	lsls	r2, r0
 8001794:	429f      	cmp	r7, r3
 8001796:	dd00      	ble.n	800179a <__aeabi_dadd+0x346>
 8001798:	e0a9      	b.n	80018ee <__aeabi_dadd+0x49a>
 800179a:	1bdb      	subs	r3, r3, r7
 800179c:	1c58      	adds	r0, r3, #1
 800179e:	281f      	cmp	r0, #31
 80017a0:	dc00      	bgt.n	80017a4 <__aeabi_dadd+0x350>
 80017a2:	e1ac      	b.n	8001afe <__aeabi_dadd+0x6aa>
 80017a4:	0015      	movs	r5, r2
 80017a6:	3b1f      	subs	r3, #31
 80017a8:	40dd      	lsrs	r5, r3
 80017aa:	2820      	cmp	r0, #32
 80017ac:	d005      	beq.n	80017ba <__aeabi_dadd+0x366>
 80017ae:	2340      	movs	r3, #64	@ 0x40
 80017b0:	1a1b      	subs	r3, r3, r0
 80017b2:	409a      	lsls	r2, r3
 80017b4:	1e53      	subs	r3, r2, #1
 80017b6:	419a      	sbcs	r2, r3
 80017b8:	4315      	orrs	r5, r2
 80017ba:	2307      	movs	r3, #7
 80017bc:	2700      	movs	r7, #0
 80017be:	402b      	ands	r3, r5
 80017c0:	e7b0      	b.n	8001724 <__aeabi_dadd+0x2d0>
 80017c2:	08ed      	lsrs	r5, r5, #3
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <__aeabi_dadd+0x388>)
 80017c6:	0762      	lsls	r2, r4, #29
 80017c8:	432a      	orrs	r2, r5
 80017ca:	08e4      	lsrs	r4, r4, #3
 80017cc:	429f      	cmp	r7, r3
 80017ce:	d00f      	beq.n	80017f0 <__aeabi_dadd+0x39c>
 80017d0:	0324      	lsls	r4, r4, #12
 80017d2:	0b25      	lsrs	r5, r4, #12
 80017d4:	057c      	lsls	r4, r7, #21
 80017d6:	0d64      	lsrs	r4, r4, #21
 80017d8:	e6d4      	b.n	8001584 <__aeabi_dadd+0x130>
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	000007ff 	.word	0x000007ff
 80017e0:	ff7fffff 	.word	0xff7fffff
 80017e4:	000007fe 	.word	0x000007fe
 80017e8:	08c0      	lsrs	r0, r0, #3
 80017ea:	0762      	lsls	r2, r4, #29
 80017ec:	4302      	orrs	r2, r0
 80017ee:	08e4      	lsrs	r4, r4, #3
 80017f0:	0013      	movs	r3, r2
 80017f2:	4323      	orrs	r3, r4
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dadd+0x3a4>
 80017f6:	e186      	b.n	8001b06 <__aeabi_dadd+0x6b2>
 80017f8:	2580      	movs	r5, #128	@ 0x80
 80017fa:	032d      	lsls	r5, r5, #12
 80017fc:	4325      	orrs	r5, r4
 80017fe:	032d      	lsls	r5, r5, #12
 8001800:	4cc3      	ldr	r4, [pc, #780]	@ (8001b10 <__aeabi_dadd+0x6bc>)
 8001802:	0b2d      	lsrs	r5, r5, #12
 8001804:	e6be      	b.n	8001584 <__aeabi_dadd+0x130>
 8001806:	4660      	mov	r0, ip
 8001808:	4654      	mov	r4, sl
 800180a:	000e      	movs	r6, r1
 800180c:	0017      	movs	r7, r2
 800180e:	08c5      	lsrs	r5, r0, #3
 8001810:	e7d8      	b.n	80017c4 <__aeabi_dadd+0x370>
 8001812:	4cc0      	ldr	r4, [pc, #768]	@ (8001b14 <__aeabi_dadd+0x6c0>)
 8001814:	1aff      	subs	r7, r7, r3
 8001816:	4014      	ands	r4, r2
 8001818:	e696      	b.n	8001548 <__aeabi_dadd+0xf4>
 800181a:	4abf      	ldr	r2, [pc, #764]	@ (8001b18 <__aeabi_dadd+0x6c4>)
 800181c:	1c79      	adds	r1, r7, #1
 800181e:	4211      	tst	r1, r2
 8001820:	d16b      	bne.n	80018fa <__aeabi_dadd+0x4a6>
 8001822:	0022      	movs	r2, r4
 8001824:	4302      	orrs	r2, r0
 8001826:	2f00      	cmp	r7, #0
 8001828:	d000      	beq.n	800182c <__aeabi_dadd+0x3d8>
 800182a:	e0db      	b.n	80019e4 <__aeabi_dadd+0x590>
 800182c:	2a00      	cmp	r2, #0
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x3de>
 8001830:	e12d      	b.n	8001a8e <__aeabi_dadd+0x63a>
 8001832:	4662      	mov	r2, ip
 8001834:	4653      	mov	r3, sl
 8001836:	431a      	orrs	r2, r3
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x3e8>
 800183a:	e0b6      	b.n	80019aa <__aeabi_dadd+0x556>
 800183c:	4663      	mov	r3, ip
 800183e:	18c5      	adds	r5, r0, r3
 8001840:	4285      	cmp	r5, r0
 8001842:	4180      	sbcs	r0, r0
 8001844:	4454      	add	r4, sl
 8001846:	4240      	negs	r0, r0
 8001848:	1824      	adds	r4, r4, r0
 800184a:	0223      	lsls	r3, r4, #8
 800184c:	d502      	bpl.n	8001854 <__aeabi_dadd+0x400>
 800184e:	000f      	movs	r7, r1
 8001850:	4bb0      	ldr	r3, [pc, #704]	@ (8001b14 <__aeabi_dadd+0x6c0>)
 8001852:	401c      	ands	r4, r3
 8001854:	003a      	movs	r2, r7
 8001856:	0028      	movs	r0, r5
 8001858:	e7d8      	b.n	800180c <__aeabi_dadd+0x3b8>
 800185a:	4662      	mov	r2, ip
 800185c:	1a85      	subs	r5, r0, r2
 800185e:	42a8      	cmp	r0, r5
 8001860:	4192      	sbcs	r2, r2
 8001862:	4653      	mov	r3, sl
 8001864:	4252      	negs	r2, r2
 8001866:	4691      	mov	r9, r2
 8001868:	1ae3      	subs	r3, r4, r3
 800186a:	001a      	movs	r2, r3
 800186c:	464b      	mov	r3, r9
 800186e:	1ad2      	subs	r2, r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	4691      	mov	r9, r2
 8001874:	021a      	lsls	r2, r3, #8
 8001876:	d454      	bmi.n	8001922 <__aeabi_dadd+0x4ce>
 8001878:	464a      	mov	r2, r9
 800187a:	464c      	mov	r4, r9
 800187c:	432a      	orrs	r2, r5
 800187e:	d000      	beq.n	8001882 <__aeabi_dadd+0x42e>
 8001880:	e640      	b.n	8001504 <__aeabi_dadd+0xb0>
 8001882:	2600      	movs	r6, #0
 8001884:	2400      	movs	r4, #0
 8001886:	2500      	movs	r5, #0
 8001888:	e67c      	b.n	8001584 <__aeabi_dadd+0x130>
 800188a:	4da1      	ldr	r5, [pc, #644]	@ (8001b10 <__aeabi_dadd+0x6bc>)
 800188c:	45a9      	cmp	r9, r5
 800188e:	d100      	bne.n	8001892 <__aeabi_dadd+0x43e>
 8001890:	e090      	b.n	80019b4 <__aeabi_dadd+0x560>
 8001892:	2501      	movs	r5, #1
 8001894:	2a38      	cmp	r2, #56	@ 0x38
 8001896:	dd00      	ble.n	800189a <__aeabi_dadd+0x446>
 8001898:	e6ab      	b.n	80015f2 <__aeabi_dadd+0x19e>
 800189a:	2580      	movs	r5, #128	@ 0x80
 800189c:	042d      	lsls	r5, r5, #16
 800189e:	432c      	orrs	r4, r5
 80018a0:	e695      	b.n	80015ce <__aeabi_dadd+0x17a>
 80018a2:	0011      	movs	r1, r2
 80018a4:	4655      	mov	r5, sl
 80018a6:	3920      	subs	r1, #32
 80018a8:	40cd      	lsrs	r5, r1
 80018aa:	46a9      	mov	r9, r5
 80018ac:	2a20      	cmp	r2, #32
 80018ae:	d006      	beq.n	80018be <__aeabi_dadd+0x46a>
 80018b0:	2140      	movs	r1, #64	@ 0x40
 80018b2:	4653      	mov	r3, sl
 80018b4:	1a8a      	subs	r2, r1, r2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	4662      	mov	r2, ip
 80018ba:	431a      	orrs	r2, r3
 80018bc:	4694      	mov	ip, r2
 80018be:	4665      	mov	r5, ip
 80018c0:	1e6b      	subs	r3, r5, #1
 80018c2:	419d      	sbcs	r5, r3
 80018c4:	464b      	mov	r3, r9
 80018c6:	431d      	orrs	r5, r3
 80018c8:	e612      	b.n	80014f0 <__aeabi_dadd+0x9c>
 80018ca:	0021      	movs	r1, r4
 80018cc:	4301      	orrs	r1, r0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x47e>
 80018d0:	e0c4      	b.n	8001a5c <__aeabi_dadd+0x608>
 80018d2:	1e51      	subs	r1, r2, #1
 80018d4:	2a01      	cmp	r2, #1
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x486>
 80018d8:	e0fb      	b.n	8001ad2 <__aeabi_dadd+0x67e>
 80018da:	4d8d      	ldr	r5, [pc, #564]	@ (8001b10 <__aeabi_dadd+0x6bc>)
 80018dc:	42aa      	cmp	r2, r5
 80018de:	d100      	bne.n	80018e2 <__aeabi_dadd+0x48e>
 80018e0:	e0b5      	b.n	8001a4e <__aeabi_dadd+0x5fa>
 80018e2:	2501      	movs	r5, #1
 80018e4:	2938      	cmp	r1, #56	@ 0x38
 80018e6:	dd00      	ble.n	80018ea <__aeabi_dadd+0x496>
 80018e8:	e741      	b.n	800176e <__aeabi_dadd+0x31a>
 80018ea:	000a      	movs	r2, r1
 80018ec:	e72f      	b.n	800174e <__aeabi_dadd+0x2fa>
 80018ee:	4c89      	ldr	r4, [pc, #548]	@ (8001b14 <__aeabi_dadd+0x6c0>)
 80018f0:	1aff      	subs	r7, r7, r3
 80018f2:	4014      	ands	r4, r2
 80018f4:	0762      	lsls	r2, r4, #29
 80018f6:	08e4      	lsrs	r4, r4, #3
 80018f8:	e76a      	b.n	80017d0 <__aeabi_dadd+0x37c>
 80018fa:	4a85      	ldr	r2, [pc, #532]	@ (8001b10 <__aeabi_dadd+0x6bc>)
 80018fc:	4291      	cmp	r1, r2
 80018fe:	d100      	bne.n	8001902 <__aeabi_dadd+0x4ae>
 8001900:	e0e3      	b.n	8001aca <__aeabi_dadd+0x676>
 8001902:	4663      	mov	r3, ip
 8001904:	18c2      	adds	r2, r0, r3
 8001906:	4282      	cmp	r2, r0
 8001908:	4180      	sbcs	r0, r0
 800190a:	0023      	movs	r3, r4
 800190c:	4240      	negs	r0, r0
 800190e:	4453      	add	r3, sl
 8001910:	181b      	adds	r3, r3, r0
 8001912:	07dd      	lsls	r5, r3, #31
 8001914:	085c      	lsrs	r4, r3, #1
 8001916:	2307      	movs	r3, #7
 8001918:	0852      	lsrs	r2, r2, #1
 800191a:	4315      	orrs	r5, r2
 800191c:	000f      	movs	r7, r1
 800191e:	402b      	ands	r3, r5
 8001920:	e700      	b.n	8001724 <__aeabi_dadd+0x2d0>
 8001922:	4663      	mov	r3, ip
 8001924:	1a1d      	subs	r5, r3, r0
 8001926:	45ac      	cmp	ip, r5
 8001928:	4192      	sbcs	r2, r2
 800192a:	4653      	mov	r3, sl
 800192c:	4252      	negs	r2, r2
 800192e:	1b1c      	subs	r4, r3, r4
 8001930:	000e      	movs	r6, r1
 8001932:	4688      	mov	r8, r1
 8001934:	1aa4      	subs	r4, r4, r2
 8001936:	e5e5      	b.n	8001504 <__aeabi_dadd+0xb0>
 8001938:	2d00      	cmp	r5, #0
 800193a:	d000      	beq.n	800193e <__aeabi_dadd+0x4ea>
 800193c:	e091      	b.n	8001a62 <__aeabi_dadd+0x60e>
 800193e:	2a00      	cmp	r2, #0
 8001940:	d138      	bne.n	80019b4 <__aeabi_dadd+0x560>
 8001942:	2480      	movs	r4, #128	@ 0x80
 8001944:	2600      	movs	r6, #0
 8001946:	0324      	lsls	r4, r4, #12
 8001948:	e756      	b.n	80017f8 <__aeabi_dadd+0x3a4>
 800194a:	4663      	mov	r3, ip
 800194c:	18c5      	adds	r5, r0, r3
 800194e:	4285      	cmp	r5, r0
 8001950:	4180      	sbcs	r0, r0
 8001952:	4454      	add	r4, sl
 8001954:	4240      	negs	r0, r0
 8001956:	1824      	adds	r4, r4, r0
 8001958:	2701      	movs	r7, #1
 800195a:	0223      	lsls	r3, r4, #8
 800195c:	d400      	bmi.n	8001960 <__aeabi_dadd+0x50c>
 800195e:	e6df      	b.n	8001720 <__aeabi_dadd+0x2cc>
 8001960:	2702      	movs	r7, #2
 8001962:	e687      	b.n	8001674 <__aeabi_dadd+0x220>
 8001964:	4663      	mov	r3, ip
 8001966:	1ac5      	subs	r5, r0, r3
 8001968:	42a8      	cmp	r0, r5
 800196a:	4180      	sbcs	r0, r0
 800196c:	4653      	mov	r3, sl
 800196e:	4240      	negs	r0, r0
 8001970:	1ae4      	subs	r4, r4, r3
 8001972:	2701      	movs	r7, #1
 8001974:	1a24      	subs	r4, r4, r0
 8001976:	e5c0      	b.n	80014fa <__aeabi_dadd+0xa6>
 8001978:	0762      	lsls	r2, r4, #29
 800197a:	08c0      	lsrs	r0, r0, #3
 800197c:	4302      	orrs	r2, r0
 800197e:	08e4      	lsrs	r4, r4, #3
 8001980:	e736      	b.n	80017f0 <__aeabi_dadd+0x39c>
 8001982:	0011      	movs	r1, r2
 8001984:	4653      	mov	r3, sl
 8001986:	3920      	subs	r1, #32
 8001988:	40cb      	lsrs	r3, r1
 800198a:	4699      	mov	r9, r3
 800198c:	2a20      	cmp	r2, #32
 800198e:	d006      	beq.n	800199e <__aeabi_dadd+0x54a>
 8001990:	2140      	movs	r1, #64	@ 0x40
 8001992:	4653      	mov	r3, sl
 8001994:	1a8a      	subs	r2, r1, r2
 8001996:	4093      	lsls	r3, r2
 8001998:	4662      	mov	r2, ip
 800199a:	431a      	orrs	r2, r3
 800199c:	4694      	mov	ip, r2
 800199e:	4665      	mov	r5, ip
 80019a0:	1e6b      	subs	r3, r5, #1
 80019a2:	419d      	sbcs	r5, r3
 80019a4:	464b      	mov	r3, r9
 80019a6:	431d      	orrs	r5, r3
 80019a8:	e659      	b.n	800165e <__aeabi_dadd+0x20a>
 80019aa:	0762      	lsls	r2, r4, #29
 80019ac:	08c0      	lsrs	r0, r0, #3
 80019ae:	4302      	orrs	r2, r0
 80019b0:	08e4      	lsrs	r4, r4, #3
 80019b2:	e70d      	b.n	80017d0 <__aeabi_dadd+0x37c>
 80019b4:	4653      	mov	r3, sl
 80019b6:	075a      	lsls	r2, r3, #29
 80019b8:	4663      	mov	r3, ip
 80019ba:	08d8      	lsrs	r0, r3, #3
 80019bc:	4653      	mov	r3, sl
 80019be:	000e      	movs	r6, r1
 80019c0:	4302      	orrs	r2, r0
 80019c2:	08dc      	lsrs	r4, r3, #3
 80019c4:	e714      	b.n	80017f0 <__aeabi_dadd+0x39c>
 80019c6:	0015      	movs	r5, r2
 80019c8:	0026      	movs	r6, r4
 80019ca:	3d20      	subs	r5, #32
 80019cc:	40ee      	lsrs	r6, r5
 80019ce:	2a20      	cmp	r2, #32
 80019d0:	d003      	beq.n	80019da <__aeabi_dadd+0x586>
 80019d2:	2540      	movs	r5, #64	@ 0x40
 80019d4:	1aaa      	subs	r2, r5, r2
 80019d6:	4094      	lsls	r4, r2
 80019d8:	4320      	orrs	r0, r4
 80019da:	1e42      	subs	r2, r0, #1
 80019dc:	4190      	sbcs	r0, r2
 80019de:	0005      	movs	r5, r0
 80019e0:	4335      	orrs	r5, r6
 80019e2:	e606      	b.n	80015f2 <__aeabi_dadd+0x19e>
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	d07c      	beq.n	8001ae2 <__aeabi_dadd+0x68e>
 80019e8:	4662      	mov	r2, ip
 80019ea:	4653      	mov	r3, sl
 80019ec:	08c0      	lsrs	r0, r0, #3
 80019ee:	431a      	orrs	r2, r3
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dadd+0x5a0>
 80019f2:	e6fa      	b.n	80017ea <__aeabi_dadd+0x396>
 80019f4:	0762      	lsls	r2, r4, #29
 80019f6:	4310      	orrs	r0, r2
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	08e4      	lsrs	r4, r4, #3
 80019fc:	0312      	lsls	r2, r2, #12
 80019fe:	4214      	tst	r4, r2
 8001a00:	d008      	beq.n	8001a14 <__aeabi_dadd+0x5c0>
 8001a02:	08d9      	lsrs	r1, r3, #3
 8001a04:	4211      	tst	r1, r2
 8001a06:	d105      	bne.n	8001a14 <__aeabi_dadd+0x5c0>
 8001a08:	4663      	mov	r3, ip
 8001a0a:	08d8      	lsrs	r0, r3, #3
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	000c      	movs	r4, r1
 8001a10:	075b      	lsls	r3, r3, #29
 8001a12:	4318      	orrs	r0, r3
 8001a14:	0f42      	lsrs	r2, r0, #29
 8001a16:	00c0      	lsls	r0, r0, #3
 8001a18:	08c0      	lsrs	r0, r0, #3
 8001a1a:	0752      	lsls	r2, r2, #29
 8001a1c:	4302      	orrs	r2, r0
 8001a1e:	e6e7      	b.n	80017f0 <__aeabi_dadd+0x39c>
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x5d2>
 8001a24:	e72d      	b.n	8001882 <__aeabi_dadd+0x42e>
 8001a26:	4663      	mov	r3, ip
 8001a28:	08d8      	lsrs	r0, r3, #3
 8001a2a:	4653      	mov	r3, sl
 8001a2c:	075a      	lsls	r2, r3, #29
 8001a2e:	000e      	movs	r6, r1
 8001a30:	4302      	orrs	r2, r0
 8001a32:	08dc      	lsrs	r4, r3, #3
 8001a34:	e6cc      	b.n	80017d0 <__aeabi_dadd+0x37c>
 8001a36:	4663      	mov	r3, ip
 8001a38:	1a1d      	subs	r5, r3, r0
 8001a3a:	45ac      	cmp	ip, r5
 8001a3c:	4192      	sbcs	r2, r2
 8001a3e:	4653      	mov	r3, sl
 8001a40:	4252      	negs	r2, r2
 8001a42:	1b1c      	subs	r4, r3, r4
 8001a44:	000e      	movs	r6, r1
 8001a46:	4688      	mov	r8, r1
 8001a48:	1aa4      	subs	r4, r4, r2
 8001a4a:	3701      	adds	r7, #1
 8001a4c:	e555      	b.n	80014fa <__aeabi_dadd+0xa6>
 8001a4e:	4663      	mov	r3, ip
 8001a50:	08d9      	lsrs	r1, r3, #3
 8001a52:	4653      	mov	r3, sl
 8001a54:	075a      	lsls	r2, r3, #29
 8001a56:	430a      	orrs	r2, r1
 8001a58:	08dc      	lsrs	r4, r3, #3
 8001a5a:	e6c9      	b.n	80017f0 <__aeabi_dadd+0x39c>
 8001a5c:	4660      	mov	r0, ip
 8001a5e:	4654      	mov	r4, sl
 8001a60:	e6d4      	b.n	800180c <__aeabi_dadd+0x3b8>
 8001a62:	08c0      	lsrs	r0, r0, #3
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x616>
 8001a68:	e6bf      	b.n	80017ea <__aeabi_dadd+0x396>
 8001a6a:	0762      	lsls	r2, r4, #29
 8001a6c:	4310      	orrs	r0, r2
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	08e4      	lsrs	r4, r4, #3
 8001a72:	0312      	lsls	r2, r2, #12
 8001a74:	4214      	tst	r4, r2
 8001a76:	d0cd      	beq.n	8001a14 <__aeabi_dadd+0x5c0>
 8001a78:	08dd      	lsrs	r5, r3, #3
 8001a7a:	4215      	tst	r5, r2
 8001a7c:	d1ca      	bne.n	8001a14 <__aeabi_dadd+0x5c0>
 8001a7e:	4663      	mov	r3, ip
 8001a80:	08d8      	lsrs	r0, r3, #3
 8001a82:	4653      	mov	r3, sl
 8001a84:	075b      	lsls	r3, r3, #29
 8001a86:	000e      	movs	r6, r1
 8001a88:	002c      	movs	r4, r5
 8001a8a:	4318      	orrs	r0, r3
 8001a8c:	e7c2      	b.n	8001a14 <__aeabi_dadd+0x5c0>
 8001a8e:	4663      	mov	r3, ip
 8001a90:	08d9      	lsrs	r1, r3, #3
 8001a92:	4653      	mov	r3, sl
 8001a94:	075a      	lsls	r2, r3, #29
 8001a96:	430a      	orrs	r2, r1
 8001a98:	08dc      	lsrs	r4, r3, #3
 8001a9a:	e699      	b.n	80017d0 <__aeabi_dadd+0x37c>
 8001a9c:	4663      	mov	r3, ip
 8001a9e:	08d8      	lsrs	r0, r3, #3
 8001aa0:	4653      	mov	r3, sl
 8001aa2:	075a      	lsls	r2, r3, #29
 8001aa4:	000e      	movs	r6, r1
 8001aa6:	4302      	orrs	r2, r0
 8001aa8:	08dc      	lsrs	r4, r3, #3
 8001aaa:	e6a1      	b.n	80017f0 <__aeabi_dadd+0x39c>
 8001aac:	0011      	movs	r1, r2
 8001aae:	0027      	movs	r7, r4
 8001ab0:	3920      	subs	r1, #32
 8001ab2:	40cf      	lsrs	r7, r1
 8001ab4:	2a20      	cmp	r2, #32
 8001ab6:	d003      	beq.n	8001ac0 <__aeabi_dadd+0x66c>
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	1a8a      	subs	r2, r1, r2
 8001abc:	4094      	lsls	r4, r2
 8001abe:	4320      	orrs	r0, r4
 8001ac0:	1e42      	subs	r2, r0, #1
 8001ac2:	4190      	sbcs	r0, r2
 8001ac4:	0005      	movs	r5, r0
 8001ac6:	433d      	orrs	r5, r7
 8001ac8:	e651      	b.n	800176e <__aeabi_dadd+0x31a>
 8001aca:	000c      	movs	r4, r1
 8001acc:	2500      	movs	r5, #0
 8001ace:	2200      	movs	r2, #0
 8001ad0:	e558      	b.n	8001584 <__aeabi_dadd+0x130>
 8001ad2:	4460      	add	r0, ip
 8001ad4:	4560      	cmp	r0, ip
 8001ad6:	4192      	sbcs	r2, r2
 8001ad8:	4454      	add	r4, sl
 8001ada:	4252      	negs	r2, r2
 8001adc:	0005      	movs	r5, r0
 8001ade:	18a4      	adds	r4, r4, r2
 8001ae0:	e73a      	b.n	8001958 <__aeabi_dadd+0x504>
 8001ae2:	4653      	mov	r3, sl
 8001ae4:	075a      	lsls	r2, r3, #29
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	08d9      	lsrs	r1, r3, #3
 8001aea:	4653      	mov	r3, sl
 8001aec:	430a      	orrs	r2, r1
 8001aee:	08dc      	lsrs	r4, r3, #3
 8001af0:	e67e      	b.n	80017f0 <__aeabi_dadd+0x39c>
 8001af2:	001a      	movs	r2, r3
 8001af4:	001c      	movs	r4, r3
 8001af6:	432a      	orrs	r2, r5
 8001af8:	d000      	beq.n	8001afc <__aeabi_dadd+0x6a8>
 8001afa:	e6ab      	b.n	8001854 <__aeabi_dadd+0x400>
 8001afc:	e6c1      	b.n	8001882 <__aeabi_dadd+0x42e>
 8001afe:	2120      	movs	r1, #32
 8001b00:	2500      	movs	r5, #0
 8001b02:	1a09      	subs	r1, r1, r0
 8001b04:	e519      	b.n	800153a <__aeabi_dadd+0xe6>
 8001b06:	2200      	movs	r2, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	4c01      	ldr	r4, [pc, #4]	@ (8001b10 <__aeabi_dadd+0x6bc>)
 8001b0c:	e53a      	b.n	8001584 <__aeabi_dadd+0x130>
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	000007ff 	.word	0x000007ff
 8001b14:	ff7fffff 	.word	0xff7fffff
 8001b18:	000007fe 	.word	0x000007fe

08001b1c <__aeabi_ddiv>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	46de      	mov	lr, fp
 8001b20:	4645      	mov	r5, r8
 8001b22:	4657      	mov	r7, sl
 8001b24:	464e      	mov	r6, r9
 8001b26:	b5e0      	push	{r5, r6, r7, lr}
 8001b28:	b087      	sub	sp, #28
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	030b      	lsls	r3, r1, #12
 8001b30:	0b1b      	lsrs	r3, r3, #12
 8001b32:	469b      	mov	fp, r3
 8001b34:	0fca      	lsrs	r2, r1, #31
 8001b36:	004b      	lsls	r3, r1, #1
 8001b38:	0004      	movs	r4, r0
 8001b3a:	4680      	mov	r8, r0
 8001b3c:	0d5b      	lsrs	r3, r3, #21
 8001b3e:	9202      	str	r2, [sp, #8]
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x28>
 8001b42:	e16a      	b.n	8001e1a <__aeabi_ddiv+0x2fe>
 8001b44:	4ad4      	ldr	r2, [pc, #848]	@ (8001e98 <__aeabi_ddiv+0x37c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d100      	bne.n	8001b4c <__aeabi_ddiv+0x30>
 8001b4a:	e18c      	b.n	8001e66 <__aeabi_ddiv+0x34a>
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	0f42      	lsrs	r2, r0, #29
 8001b50:	00c9      	lsls	r1, r1, #3
 8001b52:	430a      	orrs	r2, r1
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	0409      	lsls	r1, r1, #16
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	00c2      	lsls	r2, r0, #3
 8001b5c:	4690      	mov	r8, r2
 8001b5e:	4acf      	ldr	r2, [pc, #828]	@ (8001e9c <__aeabi_ddiv+0x380>)
 8001b60:	4689      	mov	r9, r1
 8001b62:	4692      	mov	sl, r2
 8001b64:	449a      	add	sl, r3
 8001b66:	2300      	movs	r3, #0
 8001b68:	2400      	movs	r4, #0
 8001b6a:	9303      	str	r3, [sp, #12]
 8001b6c:	9e00      	ldr	r6, [sp, #0]
 8001b6e:	9f01      	ldr	r7, [sp, #4]
 8001b70:	033b      	lsls	r3, r7, #12
 8001b72:	0b1b      	lsrs	r3, r3, #12
 8001b74:	469b      	mov	fp, r3
 8001b76:	007b      	lsls	r3, r7, #1
 8001b78:	0030      	movs	r0, r6
 8001b7a:	0d5b      	lsrs	r3, r3, #21
 8001b7c:	0ffd      	lsrs	r5, r7, #31
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d100      	bne.n	8001b84 <__aeabi_ddiv+0x68>
 8001b82:	e128      	b.n	8001dd6 <__aeabi_ddiv+0x2ba>
 8001b84:	4ac4      	ldr	r2, [pc, #784]	@ (8001e98 <__aeabi_ddiv+0x37c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d100      	bne.n	8001b8c <__aeabi_ddiv+0x70>
 8001b8a:	e177      	b.n	8001e7c <__aeabi_ddiv+0x360>
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	0f72      	lsrs	r2, r6, #29
 8001b90:	00c9      	lsls	r1, r1, #3
 8001b92:	430a      	orrs	r2, r1
 8001b94:	2180      	movs	r1, #128	@ 0x80
 8001b96:	0409      	lsls	r1, r1, #16
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	468b      	mov	fp, r1
 8001b9c:	49bf      	ldr	r1, [pc, #764]	@ (8001e9c <__aeabi_ddiv+0x380>)
 8001b9e:	00f2      	lsls	r2, r6, #3
 8001ba0:	468c      	mov	ip, r1
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	4463      	add	r3, ip
 8001ba6:	1acb      	subs	r3, r1, r3
 8001ba8:	469a      	mov	sl, r3
 8001baa:	2300      	movs	r3, #0
 8001bac:	9e02      	ldr	r6, [sp, #8]
 8001bae:	406e      	eors	r6, r5
 8001bb0:	2c0f      	cmp	r4, #15
 8001bb2:	d827      	bhi.n	8001c04 <__aeabi_ddiv+0xe8>
 8001bb4:	49ba      	ldr	r1, [pc, #744]	@ (8001ea0 <__aeabi_ddiv+0x384>)
 8001bb6:	00a4      	lsls	r4, r4, #2
 8001bb8:	5909      	ldr	r1, [r1, r4]
 8001bba:	468f      	mov	pc, r1
 8001bbc:	46cb      	mov	fp, r9
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	9e02      	ldr	r6, [sp, #8]
 8001bc2:	9b03      	ldr	r3, [sp, #12]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d016      	beq.n	8001bf6 <__aeabi_ddiv+0xda>
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d100      	bne.n	8001bce <__aeabi_ddiv+0xb2>
 8001bcc:	e2a6      	b.n	800211c <__aeabi_ddiv+0x600>
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_ddiv+0xb8>
 8001bd2:	e0df      	b.n	8001d94 <__aeabi_ddiv+0x278>
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2400      	movs	r4, #0
 8001bda:	4690      	mov	r8, r2
 8001bdc:	051b      	lsls	r3, r3, #20
 8001bde:	4323      	orrs	r3, r4
 8001be0:	07f6      	lsls	r6, r6, #31
 8001be2:	4333      	orrs	r3, r6
 8001be4:	4640      	mov	r0, r8
 8001be6:	0019      	movs	r1, r3
 8001be8:	b007      	add	sp, #28
 8001bea:	bcf0      	pop	{r4, r5, r6, r7}
 8001bec:	46bb      	mov	fp, r7
 8001bee:	46b2      	mov	sl, r6
 8001bf0:	46a9      	mov	r9, r5
 8001bf2:	46a0      	mov	r8, r4
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	4ba6      	ldr	r3, [pc, #664]	@ (8001e98 <__aeabi_ddiv+0x37c>)
 8001bfe:	e7ed      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 8001c00:	002e      	movs	r6, r5
 8001c02:	e7df      	b.n	8001bc4 <__aeabi_ddiv+0xa8>
 8001c04:	45cb      	cmp	fp, r9
 8001c06:	d200      	bcs.n	8001c0a <__aeabi_ddiv+0xee>
 8001c08:	e1d4      	b.n	8001fb4 <__aeabi_ddiv+0x498>
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_ddiv+0xf2>
 8001c0c:	e1cf      	b.n	8001fae <__aeabi_ddiv+0x492>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	425b      	negs	r3, r3
 8001c12:	469c      	mov	ip, r3
 8001c14:	4644      	mov	r4, r8
 8001c16:	4648      	mov	r0, r9
 8001c18:	2700      	movs	r7, #0
 8001c1a:	44e2      	add	sl, ip
 8001c1c:	465b      	mov	r3, fp
 8001c1e:	0e15      	lsrs	r5, r2, #24
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	431d      	orrs	r5, r3
 8001c24:	0c19      	lsrs	r1, r3, #16
 8001c26:	042b      	lsls	r3, r5, #16
 8001c28:	0212      	lsls	r2, r2, #8
 8001c2a:	9500      	str	r5, [sp, #0]
 8001c2c:	0c1d      	lsrs	r5, r3, #16
 8001c2e:	4691      	mov	r9, r2
 8001c30:	9102      	str	r1, [sp, #8]
 8001c32:	9503      	str	r5, [sp, #12]
 8001c34:	f7fe fb0a 	bl	800024c <__aeabi_uidivmod>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	436a      	muls	r2, r5
 8001c3c:	040b      	lsls	r3, r1, #16
 8001c3e:	0c21      	lsrs	r1, r4, #16
 8001c40:	4680      	mov	r8, r0
 8001c42:	4319      	orrs	r1, r3
 8001c44:	428a      	cmp	r2, r1
 8001c46:	d909      	bls.n	8001c5c <__aeabi_ddiv+0x140>
 8001c48:	9d00      	ldr	r5, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	46ac      	mov	ip, r5
 8001c4e:	425b      	negs	r3, r3
 8001c50:	4461      	add	r1, ip
 8001c52:	469c      	mov	ip, r3
 8001c54:	44e0      	add	r8, ip
 8001c56:	428d      	cmp	r5, r1
 8001c58:	d800      	bhi.n	8001c5c <__aeabi_ddiv+0x140>
 8001c5a:	e1fb      	b.n	8002054 <__aeabi_ddiv+0x538>
 8001c5c:	1a88      	subs	r0, r1, r2
 8001c5e:	9902      	ldr	r1, [sp, #8]
 8001c60:	f7fe faf4 	bl	800024c <__aeabi_uidivmod>
 8001c64:	9a03      	ldr	r2, [sp, #12]
 8001c66:	0424      	lsls	r4, r4, #16
 8001c68:	4342      	muls	r2, r0
 8001c6a:	0409      	lsls	r1, r1, #16
 8001c6c:	0c24      	lsrs	r4, r4, #16
 8001c6e:	0003      	movs	r3, r0
 8001c70:	430c      	orrs	r4, r1
 8001c72:	42a2      	cmp	r2, r4
 8001c74:	d906      	bls.n	8001c84 <__aeabi_ddiv+0x168>
 8001c76:	9900      	ldr	r1, [sp, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	468c      	mov	ip, r1
 8001c7c:	4464      	add	r4, ip
 8001c7e:	42a1      	cmp	r1, r4
 8001c80:	d800      	bhi.n	8001c84 <__aeabi_ddiv+0x168>
 8001c82:	e1e1      	b.n	8002048 <__aeabi_ddiv+0x52c>
 8001c84:	1aa0      	subs	r0, r4, r2
 8001c86:	4642      	mov	r2, r8
 8001c88:	0412      	lsls	r2, r2, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	4693      	mov	fp, r2
 8001c8e:	464b      	mov	r3, r9
 8001c90:	4659      	mov	r1, fp
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	001d      	movs	r5, r3
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	040b      	lsls	r3, r1, #16
 8001c9a:	4649      	mov	r1, r9
 8001c9c:	0409      	lsls	r1, r1, #16
 8001c9e:	0c09      	lsrs	r1, r1, #16
 8001ca0:	000c      	movs	r4, r1
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	435c      	muls	r4, r3
 8001ca6:	0c12      	lsrs	r2, r2, #16
 8001ca8:	436b      	muls	r3, r5
 8001caa:	4688      	mov	r8, r1
 8001cac:	4351      	muls	r1, r2
 8001cae:	436a      	muls	r2, r5
 8001cb0:	0c25      	lsrs	r5, r4, #16
 8001cb2:	46ac      	mov	ip, r5
 8001cb4:	185b      	adds	r3, r3, r1
 8001cb6:	4463      	add	r3, ip
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	d903      	bls.n	8001cc4 <__aeabi_ddiv+0x1a8>
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0249      	lsls	r1, r1, #9
 8001cc0:	468c      	mov	ip, r1
 8001cc2:	4462      	add	r2, ip
 8001cc4:	0c19      	lsrs	r1, r3, #16
 8001cc6:	0424      	lsls	r4, r4, #16
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	0c24      	lsrs	r4, r4, #16
 8001ccc:	188a      	adds	r2, r1, r2
 8001cce:	191c      	adds	r4, r3, r4
 8001cd0:	4290      	cmp	r0, r2
 8001cd2:	d302      	bcc.n	8001cda <__aeabi_ddiv+0x1be>
 8001cd4:	d116      	bne.n	8001d04 <__aeabi_ddiv+0x1e8>
 8001cd6:	42a7      	cmp	r7, r4
 8001cd8:	d214      	bcs.n	8001d04 <__aeabi_ddiv+0x1e8>
 8001cda:	465b      	mov	r3, fp
 8001cdc:	9d00      	ldr	r5, [sp, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	444f      	add	r7, r9
 8001ce2:	9305      	str	r3, [sp, #20]
 8001ce4:	454f      	cmp	r7, r9
 8001ce6:	419b      	sbcs	r3, r3
 8001ce8:	46ac      	mov	ip, r5
 8001cea:	425b      	negs	r3, r3
 8001cec:	4463      	add	r3, ip
 8001cee:	18c0      	adds	r0, r0, r3
 8001cf0:	4285      	cmp	r5, r0
 8001cf2:	d300      	bcc.n	8001cf6 <__aeabi_ddiv+0x1da>
 8001cf4:	e1a1      	b.n	800203a <__aeabi_ddiv+0x51e>
 8001cf6:	4282      	cmp	r2, r0
 8001cf8:	d900      	bls.n	8001cfc <__aeabi_ddiv+0x1e0>
 8001cfa:	e1f6      	b.n	80020ea <__aeabi_ddiv+0x5ce>
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_ddiv+0x1e4>
 8001cfe:	e1f1      	b.n	80020e4 <__aeabi_ddiv+0x5c8>
 8001d00:	9b05      	ldr	r3, [sp, #20]
 8001d02:	469b      	mov	fp, r3
 8001d04:	1b3c      	subs	r4, r7, r4
 8001d06:	42a7      	cmp	r7, r4
 8001d08:	41bf      	sbcs	r7, r7
 8001d0a:	9d00      	ldr	r5, [sp, #0]
 8001d0c:	1a80      	subs	r0, r0, r2
 8001d0e:	427f      	negs	r7, r7
 8001d10:	1bc0      	subs	r0, r0, r7
 8001d12:	4285      	cmp	r5, r0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x1fc>
 8001d16:	e1d0      	b.n	80020ba <__aeabi_ddiv+0x59e>
 8001d18:	9902      	ldr	r1, [sp, #8]
 8001d1a:	f7fe fa97 	bl	800024c <__aeabi_uidivmod>
 8001d1e:	9a03      	ldr	r2, [sp, #12]
 8001d20:	040b      	lsls	r3, r1, #16
 8001d22:	4342      	muls	r2, r0
 8001d24:	0c21      	lsrs	r1, r4, #16
 8001d26:	0007      	movs	r7, r0
 8001d28:	4319      	orrs	r1, r3
 8001d2a:	428a      	cmp	r2, r1
 8001d2c:	d900      	bls.n	8001d30 <__aeabi_ddiv+0x214>
 8001d2e:	e178      	b.n	8002022 <__aeabi_ddiv+0x506>
 8001d30:	1a88      	subs	r0, r1, r2
 8001d32:	9902      	ldr	r1, [sp, #8]
 8001d34:	f7fe fa8a 	bl	800024c <__aeabi_uidivmod>
 8001d38:	9a03      	ldr	r2, [sp, #12]
 8001d3a:	0424      	lsls	r4, r4, #16
 8001d3c:	4342      	muls	r2, r0
 8001d3e:	0409      	lsls	r1, r1, #16
 8001d40:	0c24      	lsrs	r4, r4, #16
 8001d42:	0003      	movs	r3, r0
 8001d44:	430c      	orrs	r4, r1
 8001d46:	42a2      	cmp	r2, r4
 8001d48:	d900      	bls.n	8001d4c <__aeabi_ddiv+0x230>
 8001d4a:	e15d      	b.n	8002008 <__aeabi_ddiv+0x4ec>
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	1aa4      	subs	r4, r4, r2
 8001d50:	043a      	lsls	r2, r7, #16
 8001d52:	431a      	orrs	r2, r3
 8001d54:	9d04      	ldr	r5, [sp, #16]
 8001d56:	0413      	lsls	r3, r2, #16
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	4359      	muls	r1, r3
 8001d5c:	4647      	mov	r7, r8
 8001d5e:	436b      	muls	r3, r5
 8001d60:	469c      	mov	ip, r3
 8001d62:	0c10      	lsrs	r0, r2, #16
 8001d64:	4347      	muls	r7, r0
 8001d66:	0c0b      	lsrs	r3, r1, #16
 8001d68:	44bc      	add	ip, r7
 8001d6a:	4463      	add	r3, ip
 8001d6c:	4368      	muls	r0, r5
 8001d6e:	429f      	cmp	r7, r3
 8001d70:	d903      	bls.n	8001d7a <__aeabi_ddiv+0x25e>
 8001d72:	2580      	movs	r5, #128	@ 0x80
 8001d74:	026d      	lsls	r5, r5, #9
 8001d76:	46ac      	mov	ip, r5
 8001d78:	4460      	add	r0, ip
 8001d7a:	0c1f      	lsrs	r7, r3, #16
 8001d7c:	0409      	lsls	r1, r1, #16
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	0c09      	lsrs	r1, r1, #16
 8001d82:	183f      	adds	r7, r7, r0
 8001d84:	185b      	adds	r3, r3, r1
 8001d86:	42bc      	cmp	r4, r7
 8001d88:	d200      	bcs.n	8001d8c <__aeabi_ddiv+0x270>
 8001d8a:	e102      	b.n	8001f92 <__aeabi_ddiv+0x476>
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x274>
 8001d8e:	e0fd      	b.n	8001f8c <__aeabi_ddiv+0x470>
 8001d90:	2301      	movs	r3, #1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <__aeabi_ddiv+0x388>)
 8001d96:	4453      	add	r3, sl
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_ddiv+0x282>
 8001d9c:	e0ae      	b.n	8001efc <__aeabi_ddiv+0x3e0>
 8001d9e:	0751      	lsls	r1, r2, #29
 8001da0:	d000      	beq.n	8001da4 <__aeabi_ddiv+0x288>
 8001da2:	e198      	b.n	80020d6 <__aeabi_ddiv+0x5ba>
 8001da4:	4659      	mov	r1, fp
 8001da6:	01c9      	lsls	r1, r1, #7
 8001da8:	d506      	bpl.n	8001db8 <__aeabi_ddiv+0x29c>
 8001daa:	4659      	mov	r1, fp
 8001dac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <__aeabi_ddiv+0x38c>)
 8001dae:	4019      	ands	r1, r3
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	468b      	mov	fp, r1
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4453      	add	r3, sl
 8001db8:	493c      	ldr	r1, [pc, #240]	@ (8001eac <__aeabi_ddiv+0x390>)
 8001dba:	428b      	cmp	r3, r1
 8001dbc:	dd00      	ble.n	8001dc0 <__aeabi_ddiv+0x2a4>
 8001dbe:	e71a      	b.n	8001bf6 <__aeabi_ddiv+0xda>
 8001dc0:	4659      	mov	r1, fp
 8001dc2:	08d2      	lsrs	r2, r2, #3
 8001dc4:	0749      	lsls	r1, r1, #29
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	465a      	mov	r2, fp
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	0254      	lsls	r4, r2, #9
 8001dce:	4688      	mov	r8, r1
 8001dd0:	0b24      	lsrs	r4, r4, #12
 8001dd2:	0d5b      	lsrs	r3, r3, #21
 8001dd4:	e702      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 8001dd6:	465a      	mov	r2, fp
 8001dd8:	9b00      	ldr	r3, [sp, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_ddiv+0x2c4>
 8001dde:	e07e      	b.n	8001ede <__aeabi_ddiv+0x3c2>
 8001de0:	465b      	mov	r3, fp
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d100      	bne.n	8001de8 <__aeabi_ddiv+0x2cc>
 8001de6:	e100      	b.n	8001fea <__aeabi_ddiv+0x4ce>
 8001de8:	4658      	mov	r0, fp
 8001dea:	f001 fabb 	bl	8003364 <__clzsi2>
 8001dee:	0002      	movs	r2, r0
 8001df0:	0003      	movs	r3, r0
 8001df2:	3a0b      	subs	r2, #11
 8001df4:	271d      	movs	r7, #29
 8001df6:	9e00      	ldr	r6, [sp, #0]
 8001df8:	1aba      	subs	r2, r7, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	4658      	mov	r0, fp
 8001dfe:	40d6      	lsrs	r6, r2
 8001e00:	3908      	subs	r1, #8
 8001e02:	4088      	lsls	r0, r1
 8001e04:	0032      	movs	r2, r6
 8001e06:	4302      	orrs	r2, r0
 8001e08:	4693      	mov	fp, r2
 8001e0a:	9a00      	ldr	r2, [sp, #0]
 8001e0c:	408a      	lsls	r2, r1
 8001e0e:	4928      	ldr	r1, [pc, #160]	@ (8001eb0 <__aeabi_ddiv+0x394>)
 8001e10:	4453      	add	r3, sl
 8001e12:	468a      	mov	sl, r1
 8001e14:	449a      	add	sl, r3
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6c8      	b.n	8001bac <__aeabi_ddiv+0x90>
 8001e1a:	465b      	mov	r3, fp
 8001e1c:	4303      	orrs	r3, r0
 8001e1e:	4699      	mov	r9, r3
 8001e20:	d056      	beq.n	8001ed0 <__aeabi_ddiv+0x3b4>
 8001e22:	465b      	mov	r3, fp
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_ddiv+0x30e>
 8001e28:	e0cd      	b.n	8001fc6 <__aeabi_ddiv+0x4aa>
 8001e2a:	4658      	mov	r0, fp
 8001e2c:	f001 fa9a 	bl	8003364 <__clzsi2>
 8001e30:	230b      	movs	r3, #11
 8001e32:	425b      	negs	r3, r3
 8001e34:	469c      	mov	ip, r3
 8001e36:	0002      	movs	r2, r0
 8001e38:	4484      	add	ip, r0
 8001e3a:	4666      	mov	r6, ip
 8001e3c:	231d      	movs	r3, #29
 8001e3e:	1b9b      	subs	r3, r3, r6
 8001e40:	0026      	movs	r6, r4
 8001e42:	0011      	movs	r1, r2
 8001e44:	4658      	mov	r0, fp
 8001e46:	40de      	lsrs	r6, r3
 8001e48:	3908      	subs	r1, #8
 8001e4a:	4088      	lsls	r0, r1
 8001e4c:	0033      	movs	r3, r6
 8001e4e:	4303      	orrs	r3, r0
 8001e50:	4699      	mov	r9, r3
 8001e52:	0023      	movs	r3, r4
 8001e54:	408b      	lsls	r3, r1
 8001e56:	4698      	mov	r8, r3
 8001e58:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <__aeabi_ddiv+0x398>)
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	469a      	mov	sl, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9303      	str	r3, [sp, #12]
 8001e64:	e682      	b.n	8001b6c <__aeabi_ddiv+0x50>
 8001e66:	465a      	mov	r2, fp
 8001e68:	4302      	orrs	r2, r0
 8001e6a:	4691      	mov	r9, r2
 8001e6c:	d12a      	bne.n	8001ec4 <__aeabi_ddiv+0x3a8>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	469a      	mov	sl, r3
 8001e72:	2302      	movs	r3, #2
 8001e74:	4690      	mov	r8, r2
 8001e76:	2408      	movs	r4, #8
 8001e78:	9303      	str	r3, [sp, #12]
 8001e7a:	e677      	b.n	8001b6c <__aeabi_ddiv+0x50>
 8001e7c:	465a      	mov	r2, fp
 8001e7e:	9b00      	ldr	r3, [sp, #0]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <__aeabi_ddiv+0x39c>)
 8001e84:	469c      	mov	ip, r3
 8001e86:	44e2      	add	sl, ip
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d117      	bne.n	8001ebc <__aeabi_ddiv+0x3a0>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	431c      	orrs	r4, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	469b      	mov	fp, r3
 8001e94:	3302      	adds	r3, #2
 8001e96:	e689      	b.n	8001bac <__aeabi_ddiv+0x90>
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	fffffc01 	.word	0xfffffc01
 8001ea0:	08010d94 	.word	0x08010d94
 8001ea4:	000003ff 	.word	0x000003ff
 8001ea8:	feffffff 	.word	0xfeffffff
 8001eac:	000007fe 	.word	0x000007fe
 8001eb0:	000003f3 	.word	0x000003f3
 8001eb4:	fffffc0d 	.word	0xfffffc0d
 8001eb8:	fffff801 	.word	0xfffff801
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	0032      	movs	r2, r6
 8001ec0:	431c      	orrs	r4, r3
 8001ec2:	e673      	b.n	8001bac <__aeabi_ddiv+0x90>
 8001ec4:	469a      	mov	sl, r3
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	46d9      	mov	r9, fp
 8001eca:	240c      	movs	r4, #12
 8001ecc:	9303      	str	r3, [sp, #12]
 8001ece:	e64d      	b.n	8001b6c <__aeabi_ddiv+0x50>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	469a      	mov	sl, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	2404      	movs	r4, #4
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	e646      	b.n	8001b6c <__aeabi_ddiv+0x50>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	431c      	orrs	r4, r3
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	e660      	b.n	8001bac <__aeabi_ddiv+0x90>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2480      	movs	r4, #128	@ 0x80
 8001eee:	4698      	mov	r8, r3
 8001ef0:	2600      	movs	r6, #0
 8001ef2:	4b92      	ldr	r3, [pc, #584]	@ (800213c <__aeabi_ddiv+0x620>)
 8001ef4:	0324      	lsls	r4, r4, #12
 8001ef6:	e671      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4252      	negs	r2, r2
 8001efc:	2101      	movs	r1, #1
 8001efe:	1ac9      	subs	r1, r1, r3
 8001f00:	2938      	cmp	r1, #56	@ 0x38
 8001f02:	dd00      	ble.n	8001f06 <__aeabi_ddiv+0x3ea>
 8001f04:	e666      	b.n	8001bd4 <__aeabi_ddiv+0xb8>
 8001f06:	291f      	cmp	r1, #31
 8001f08:	dc00      	bgt.n	8001f0c <__aeabi_ddiv+0x3f0>
 8001f0a:	e0ab      	b.n	8002064 <__aeabi_ddiv+0x548>
 8001f0c:	201f      	movs	r0, #31
 8001f0e:	4240      	negs	r0, r0
 8001f10:	1ac3      	subs	r3, r0, r3
 8001f12:	4658      	mov	r0, fp
 8001f14:	40d8      	lsrs	r0, r3
 8001f16:	0003      	movs	r3, r0
 8001f18:	2920      	cmp	r1, #32
 8001f1a:	d004      	beq.n	8001f26 <__aeabi_ddiv+0x40a>
 8001f1c:	4658      	mov	r0, fp
 8001f1e:	4988      	ldr	r1, [pc, #544]	@ (8002140 <__aeabi_ddiv+0x624>)
 8001f20:	4451      	add	r1, sl
 8001f22:	4088      	lsls	r0, r1
 8001f24:	4302      	orrs	r2, r0
 8001f26:	1e51      	subs	r1, r2, #1
 8001f28:	418a      	sbcs	r2, r1
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	0019      	movs	r1, r3
 8001f30:	2400      	movs	r4, #0
 8001f32:	4011      	ands	r1, r2
 8001f34:	4213      	tst	r3, r2
 8001f36:	d00c      	beq.n	8001f52 <__aeabi_ddiv+0x436>
 8001f38:	230f      	movs	r3, #15
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x426>
 8001f40:	e0f9      	b.n	8002136 <__aeabi_ddiv+0x61a>
 8001f42:	1d11      	adds	r1, r2, #4
 8001f44:	4291      	cmp	r1, r2
 8001f46:	419b      	sbcs	r3, r3
 8001f48:	000a      	movs	r2, r1
 8001f4a:	425b      	negs	r3, r3
 8001f4c:	0759      	lsls	r1, r3, #29
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	0b1c      	lsrs	r4, r3, #12
 8001f52:	08d2      	lsrs	r2, r2, #3
 8001f54:	430a      	orrs	r2, r1
 8001f56:	4690      	mov	r8, r2
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e63f      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 8001f5c:	2480      	movs	r4, #128	@ 0x80
 8001f5e:	464b      	mov	r3, r9
 8001f60:	0324      	lsls	r4, r4, #12
 8001f62:	4223      	tst	r3, r4
 8001f64:	d009      	beq.n	8001f7a <__aeabi_ddiv+0x45e>
 8001f66:	465b      	mov	r3, fp
 8001f68:	4223      	tst	r3, r4
 8001f6a:	d106      	bne.n	8001f7a <__aeabi_ddiv+0x45e>
 8001f6c:	431c      	orrs	r4, r3
 8001f6e:	0324      	lsls	r4, r4, #12
 8001f70:	002e      	movs	r6, r5
 8001f72:	4690      	mov	r8, r2
 8001f74:	4b71      	ldr	r3, [pc, #452]	@ (800213c <__aeabi_ddiv+0x620>)
 8001f76:	0b24      	lsrs	r4, r4, #12
 8001f78:	e630      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 8001f7a:	2480      	movs	r4, #128	@ 0x80
 8001f7c:	464b      	mov	r3, r9
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	431c      	orrs	r4, r3
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	9e02      	ldr	r6, [sp, #8]
 8001f86:	4b6d      	ldr	r3, [pc, #436]	@ (800213c <__aeabi_ddiv+0x620>)
 8001f88:	0b24      	lsrs	r4, r4, #12
 8001f8a:	e627      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_ddiv+0x476>
 8001f90:	e700      	b.n	8001d94 <__aeabi_ddiv+0x278>
 8001f92:	9800      	ldr	r0, [sp, #0]
 8001f94:	1e51      	subs	r1, r2, #1
 8001f96:	4684      	mov	ip, r0
 8001f98:	4464      	add	r4, ip
 8001f9a:	4284      	cmp	r4, r0
 8001f9c:	d200      	bcs.n	8001fa0 <__aeabi_ddiv+0x484>
 8001f9e:	e084      	b.n	80020aa <__aeabi_ddiv+0x58e>
 8001fa0:	42bc      	cmp	r4, r7
 8001fa2:	d200      	bcs.n	8001fa6 <__aeabi_ddiv+0x48a>
 8001fa4:	e0ae      	b.n	8002104 <__aeabi_ddiv+0x5e8>
 8001fa6:	d100      	bne.n	8001faa <__aeabi_ddiv+0x48e>
 8001fa8:	e0c1      	b.n	800212e <__aeabi_ddiv+0x612>
 8001faa:	000a      	movs	r2, r1
 8001fac:	e6f0      	b.n	8001d90 <__aeabi_ddiv+0x274>
 8001fae:	4542      	cmp	r2, r8
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x498>
 8001fb2:	e62c      	b.n	8001c0e <__aeabi_ddiv+0xf2>
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	07dc      	lsls	r4, r3, #31
 8001fb8:	0858      	lsrs	r0, r3, #1
 8001fba:	4643      	mov	r3, r8
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	431c      	orrs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	07df      	lsls	r7, r3, #31
 8001fc4:	e62a      	b.n	8001c1c <__aeabi_ddiv+0x100>
 8001fc6:	f001 f9cd 	bl	8003364 <__clzsi2>
 8001fca:	2315      	movs	r3, #21
 8001fcc:	469c      	mov	ip, r3
 8001fce:	4484      	add	ip, r0
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	3220      	adds	r2, #32
 8001fd6:	2b1c      	cmp	r3, #28
 8001fd8:	dc00      	bgt.n	8001fdc <__aeabi_ddiv+0x4c0>
 8001fda:	e72e      	b.n	8001e3a <__aeabi_ddiv+0x31e>
 8001fdc:	0023      	movs	r3, r4
 8001fde:	3808      	subs	r0, #8
 8001fe0:	4083      	lsls	r3, r0
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4698      	mov	r8, r3
 8001fe8:	e736      	b.n	8001e58 <__aeabi_ddiv+0x33c>
 8001fea:	f001 f9bb 	bl	8003364 <__clzsi2>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	3215      	adds	r2, #21
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	2a1c      	cmp	r2, #28
 8001ff8:	dc00      	bgt.n	8001ffc <__aeabi_ddiv+0x4e0>
 8001ffa:	e6fb      	b.n	8001df4 <__aeabi_ddiv+0x2d8>
 8001ffc:	9900      	ldr	r1, [sp, #0]
 8001ffe:	3808      	subs	r0, #8
 8002000:	4081      	lsls	r1, r0
 8002002:	2200      	movs	r2, #0
 8002004:	468b      	mov	fp, r1
 8002006:	e702      	b.n	8001e0e <__aeabi_ddiv+0x2f2>
 8002008:	9900      	ldr	r1, [sp, #0]
 800200a:	3b01      	subs	r3, #1
 800200c:	468c      	mov	ip, r1
 800200e:	4464      	add	r4, ip
 8002010:	42a1      	cmp	r1, r4
 8002012:	d900      	bls.n	8002016 <__aeabi_ddiv+0x4fa>
 8002014:	e69a      	b.n	8001d4c <__aeabi_ddiv+0x230>
 8002016:	42a2      	cmp	r2, r4
 8002018:	d800      	bhi.n	800201c <__aeabi_ddiv+0x500>
 800201a:	e697      	b.n	8001d4c <__aeabi_ddiv+0x230>
 800201c:	1e83      	subs	r3, r0, #2
 800201e:	4464      	add	r4, ip
 8002020:	e694      	b.n	8001d4c <__aeabi_ddiv+0x230>
 8002022:	46ac      	mov	ip, r5
 8002024:	4461      	add	r1, ip
 8002026:	3f01      	subs	r7, #1
 8002028:	428d      	cmp	r5, r1
 800202a:	d900      	bls.n	800202e <__aeabi_ddiv+0x512>
 800202c:	e680      	b.n	8001d30 <__aeabi_ddiv+0x214>
 800202e:	428a      	cmp	r2, r1
 8002030:	d800      	bhi.n	8002034 <__aeabi_ddiv+0x518>
 8002032:	e67d      	b.n	8001d30 <__aeabi_ddiv+0x214>
 8002034:	1e87      	subs	r7, r0, #2
 8002036:	4461      	add	r1, ip
 8002038:	e67a      	b.n	8001d30 <__aeabi_ddiv+0x214>
 800203a:	4285      	cmp	r5, r0
 800203c:	d000      	beq.n	8002040 <__aeabi_ddiv+0x524>
 800203e:	e65f      	b.n	8001d00 <__aeabi_ddiv+0x1e4>
 8002040:	45b9      	cmp	r9, r7
 8002042:	d900      	bls.n	8002046 <__aeabi_ddiv+0x52a>
 8002044:	e65c      	b.n	8001d00 <__aeabi_ddiv+0x1e4>
 8002046:	e656      	b.n	8001cf6 <__aeabi_ddiv+0x1da>
 8002048:	42a2      	cmp	r2, r4
 800204a:	d800      	bhi.n	800204e <__aeabi_ddiv+0x532>
 800204c:	e61a      	b.n	8001c84 <__aeabi_ddiv+0x168>
 800204e:	1e83      	subs	r3, r0, #2
 8002050:	4464      	add	r4, ip
 8002052:	e617      	b.n	8001c84 <__aeabi_ddiv+0x168>
 8002054:	428a      	cmp	r2, r1
 8002056:	d800      	bhi.n	800205a <__aeabi_ddiv+0x53e>
 8002058:	e600      	b.n	8001c5c <__aeabi_ddiv+0x140>
 800205a:	46ac      	mov	ip, r5
 800205c:	1e83      	subs	r3, r0, #2
 800205e:	4698      	mov	r8, r3
 8002060:	4461      	add	r1, ip
 8002062:	e5fb      	b.n	8001c5c <__aeabi_ddiv+0x140>
 8002064:	4837      	ldr	r0, [pc, #220]	@ (8002144 <__aeabi_ddiv+0x628>)
 8002066:	0014      	movs	r4, r2
 8002068:	4450      	add	r0, sl
 800206a:	4082      	lsls	r2, r0
 800206c:	465b      	mov	r3, fp
 800206e:	0017      	movs	r7, r2
 8002070:	4083      	lsls	r3, r0
 8002072:	40cc      	lsrs	r4, r1
 8002074:	1e7a      	subs	r2, r7, #1
 8002076:	4197      	sbcs	r7, r2
 8002078:	4323      	orrs	r3, r4
 800207a:	433b      	orrs	r3, r7
 800207c:	001a      	movs	r2, r3
 800207e:	465b      	mov	r3, fp
 8002080:	40cb      	lsrs	r3, r1
 8002082:	0751      	lsls	r1, r2, #29
 8002084:	d009      	beq.n	800209a <__aeabi_ddiv+0x57e>
 8002086:	210f      	movs	r1, #15
 8002088:	4011      	ands	r1, r2
 800208a:	2904      	cmp	r1, #4
 800208c:	d005      	beq.n	800209a <__aeabi_ddiv+0x57e>
 800208e:	1d11      	adds	r1, r2, #4
 8002090:	4291      	cmp	r1, r2
 8002092:	4192      	sbcs	r2, r2
 8002094:	4252      	negs	r2, r2
 8002096:	189b      	adds	r3, r3, r2
 8002098:	000a      	movs	r2, r1
 800209a:	0219      	lsls	r1, r3, #8
 800209c:	d400      	bmi.n	80020a0 <__aeabi_ddiv+0x584>
 800209e:	e755      	b.n	8001f4c <__aeabi_ddiv+0x430>
 80020a0:	2200      	movs	r2, #0
 80020a2:	2301      	movs	r3, #1
 80020a4:	2400      	movs	r4, #0
 80020a6:	4690      	mov	r8, r2
 80020a8:	e598      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 80020aa:	000a      	movs	r2, r1
 80020ac:	42bc      	cmp	r4, r7
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0x596>
 80020b0:	e66e      	b.n	8001d90 <__aeabi_ddiv+0x274>
 80020b2:	454b      	cmp	r3, r9
 80020b4:	d000      	beq.n	80020b8 <__aeabi_ddiv+0x59c>
 80020b6:	e66b      	b.n	8001d90 <__aeabi_ddiv+0x274>
 80020b8:	e66c      	b.n	8001d94 <__aeabi_ddiv+0x278>
 80020ba:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <__aeabi_ddiv+0x62c>)
 80020bc:	4a23      	ldr	r2, [pc, #140]	@ (800214c <__aeabi_ddiv+0x630>)
 80020be:	4453      	add	r3, sl
 80020c0:	4592      	cmp	sl, r2
 80020c2:	da00      	bge.n	80020c6 <__aeabi_ddiv+0x5aa>
 80020c4:	e718      	b.n	8001ef8 <__aeabi_ddiv+0x3dc>
 80020c6:	2101      	movs	r1, #1
 80020c8:	4249      	negs	r1, r1
 80020ca:	1d0a      	adds	r2, r1, #4
 80020cc:	428a      	cmp	r2, r1
 80020ce:	4189      	sbcs	r1, r1
 80020d0:	4249      	negs	r1, r1
 80020d2:	448b      	add	fp, r1
 80020d4:	e666      	b.n	8001da4 <__aeabi_ddiv+0x288>
 80020d6:	210f      	movs	r1, #15
 80020d8:	4011      	ands	r1, r2
 80020da:	2904      	cmp	r1, #4
 80020dc:	d100      	bne.n	80020e0 <__aeabi_ddiv+0x5c4>
 80020de:	e661      	b.n	8001da4 <__aeabi_ddiv+0x288>
 80020e0:	0011      	movs	r1, r2
 80020e2:	e7f2      	b.n	80020ca <__aeabi_ddiv+0x5ae>
 80020e4:	42bc      	cmp	r4, r7
 80020e6:	d800      	bhi.n	80020ea <__aeabi_ddiv+0x5ce>
 80020e8:	e60a      	b.n	8001d00 <__aeabi_ddiv+0x1e4>
 80020ea:	2302      	movs	r3, #2
 80020ec:	425b      	negs	r3, r3
 80020ee:	469c      	mov	ip, r3
 80020f0:	9900      	ldr	r1, [sp, #0]
 80020f2:	444f      	add	r7, r9
 80020f4:	454f      	cmp	r7, r9
 80020f6:	419b      	sbcs	r3, r3
 80020f8:	44e3      	add	fp, ip
 80020fa:	468c      	mov	ip, r1
 80020fc:	425b      	negs	r3, r3
 80020fe:	4463      	add	r3, ip
 8002100:	18c0      	adds	r0, r0, r3
 8002102:	e5ff      	b.n	8001d04 <__aeabi_ddiv+0x1e8>
 8002104:	4649      	mov	r1, r9
 8002106:	9d00      	ldr	r5, [sp, #0]
 8002108:	0048      	lsls	r0, r1, #1
 800210a:	4548      	cmp	r0, r9
 800210c:	4189      	sbcs	r1, r1
 800210e:	46ac      	mov	ip, r5
 8002110:	4249      	negs	r1, r1
 8002112:	4461      	add	r1, ip
 8002114:	4681      	mov	r9, r0
 8002116:	3a02      	subs	r2, #2
 8002118:	1864      	adds	r4, r4, r1
 800211a:	e7c7      	b.n	80020ac <__aeabi_ddiv+0x590>
 800211c:	2480      	movs	r4, #128	@ 0x80
 800211e:	465b      	mov	r3, fp
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	431c      	orrs	r4, r3
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	4690      	mov	r8, r2
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <__aeabi_ddiv+0x620>)
 800212a:	0b24      	lsrs	r4, r4, #12
 800212c:	e556      	b.n	8001bdc <__aeabi_ddiv+0xc0>
 800212e:	4599      	cmp	r9, r3
 8002130:	d3e8      	bcc.n	8002104 <__aeabi_ddiv+0x5e8>
 8002132:	000a      	movs	r2, r1
 8002134:	e7bd      	b.n	80020b2 <__aeabi_ddiv+0x596>
 8002136:	2300      	movs	r3, #0
 8002138:	e708      	b.n	8001f4c <__aeabi_ddiv+0x430>
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff
 8002140:	0000043e 	.word	0x0000043e
 8002144:	0000041e 	.word	0x0000041e
 8002148:	000003ff 	.word	0x000003ff
 800214c:	fffffc02 	.word	0xfffffc02

08002150 <__eqdf2>:
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	4657      	mov	r7, sl
 8002154:	46de      	mov	lr, fp
 8002156:	464e      	mov	r6, r9
 8002158:	4645      	mov	r5, r8
 800215a:	b5e0      	push	{r5, r6, r7, lr}
 800215c:	000d      	movs	r5, r1
 800215e:	0004      	movs	r4, r0
 8002160:	0fe8      	lsrs	r0, r5, #31
 8002162:	4683      	mov	fp, r0
 8002164:	0309      	lsls	r1, r1, #12
 8002166:	0fd8      	lsrs	r0, r3, #31
 8002168:	0b09      	lsrs	r1, r1, #12
 800216a:	4682      	mov	sl, r0
 800216c:	4819      	ldr	r0, [pc, #100]	@ (80021d4 <__eqdf2+0x84>)
 800216e:	468c      	mov	ip, r1
 8002170:	031f      	lsls	r7, r3, #12
 8002172:	0069      	lsls	r1, r5, #1
 8002174:	005e      	lsls	r6, r3, #1
 8002176:	0d49      	lsrs	r1, r1, #21
 8002178:	0b3f      	lsrs	r7, r7, #12
 800217a:	0d76      	lsrs	r6, r6, #21
 800217c:	4281      	cmp	r1, r0
 800217e:	d018      	beq.n	80021b2 <__eqdf2+0x62>
 8002180:	4286      	cmp	r6, r0
 8002182:	d00f      	beq.n	80021a4 <__eqdf2+0x54>
 8002184:	2001      	movs	r0, #1
 8002186:	42b1      	cmp	r1, r6
 8002188:	d10d      	bne.n	80021a6 <__eqdf2+0x56>
 800218a:	45bc      	cmp	ip, r7
 800218c:	d10b      	bne.n	80021a6 <__eqdf2+0x56>
 800218e:	4294      	cmp	r4, r2
 8002190:	d109      	bne.n	80021a6 <__eqdf2+0x56>
 8002192:	45d3      	cmp	fp, sl
 8002194:	d01c      	beq.n	80021d0 <__eqdf2+0x80>
 8002196:	2900      	cmp	r1, #0
 8002198:	d105      	bne.n	80021a6 <__eqdf2+0x56>
 800219a:	4660      	mov	r0, ip
 800219c:	4320      	orrs	r0, r4
 800219e:	1e43      	subs	r3, r0, #1
 80021a0:	4198      	sbcs	r0, r3
 80021a2:	e000      	b.n	80021a6 <__eqdf2+0x56>
 80021a4:	2001      	movs	r0, #1
 80021a6:	bcf0      	pop	{r4, r5, r6, r7}
 80021a8:	46bb      	mov	fp, r7
 80021aa:	46b2      	mov	sl, r6
 80021ac:	46a9      	mov	r9, r5
 80021ae:	46a0      	mov	r8, r4
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b2:	2001      	movs	r0, #1
 80021b4:	428e      	cmp	r6, r1
 80021b6:	d1f6      	bne.n	80021a6 <__eqdf2+0x56>
 80021b8:	4661      	mov	r1, ip
 80021ba:	4339      	orrs	r1, r7
 80021bc:	000f      	movs	r7, r1
 80021be:	4317      	orrs	r7, r2
 80021c0:	4327      	orrs	r7, r4
 80021c2:	d1f0      	bne.n	80021a6 <__eqdf2+0x56>
 80021c4:	465b      	mov	r3, fp
 80021c6:	4652      	mov	r2, sl
 80021c8:	1a98      	subs	r0, r3, r2
 80021ca:	1e43      	subs	r3, r0, #1
 80021cc:	4198      	sbcs	r0, r3
 80021ce:	e7ea      	b.n	80021a6 <__eqdf2+0x56>
 80021d0:	2000      	movs	r0, #0
 80021d2:	e7e8      	b.n	80021a6 <__eqdf2+0x56>
 80021d4:	000007ff 	.word	0x000007ff

080021d8 <__gedf2>:
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	4657      	mov	r7, sl
 80021dc:	464e      	mov	r6, r9
 80021de:	4645      	mov	r5, r8
 80021e0:	46de      	mov	lr, fp
 80021e2:	b5e0      	push	{r5, r6, r7, lr}
 80021e4:	000d      	movs	r5, r1
 80021e6:	030f      	lsls	r7, r1, #12
 80021e8:	0b39      	lsrs	r1, r7, #12
 80021ea:	b083      	sub	sp, #12
 80021ec:	0004      	movs	r4, r0
 80021ee:	4680      	mov	r8, r0
 80021f0:	9101      	str	r1, [sp, #4]
 80021f2:	0058      	lsls	r0, r3, #1
 80021f4:	0fe9      	lsrs	r1, r5, #31
 80021f6:	4f31      	ldr	r7, [pc, #196]	@ (80022bc <__gedf2+0xe4>)
 80021f8:	0d40      	lsrs	r0, r0, #21
 80021fa:	468c      	mov	ip, r1
 80021fc:	006e      	lsls	r6, r5, #1
 80021fe:	0319      	lsls	r1, r3, #12
 8002200:	4682      	mov	sl, r0
 8002202:	4691      	mov	r9, r2
 8002204:	0d76      	lsrs	r6, r6, #21
 8002206:	0b09      	lsrs	r1, r1, #12
 8002208:	0fd8      	lsrs	r0, r3, #31
 800220a:	42be      	cmp	r6, r7
 800220c:	d01f      	beq.n	800224e <__gedf2+0x76>
 800220e:	45ba      	cmp	sl, r7
 8002210:	d00f      	beq.n	8002232 <__gedf2+0x5a>
 8002212:	2e00      	cmp	r6, #0
 8002214:	d12f      	bne.n	8002276 <__gedf2+0x9e>
 8002216:	4655      	mov	r5, sl
 8002218:	9e01      	ldr	r6, [sp, #4]
 800221a:	4334      	orrs	r4, r6
 800221c:	2d00      	cmp	r5, #0
 800221e:	d127      	bne.n	8002270 <__gedf2+0x98>
 8002220:	430a      	orrs	r2, r1
 8002222:	d03a      	beq.n	800229a <__gedf2+0xc2>
 8002224:	2c00      	cmp	r4, #0
 8002226:	d145      	bne.n	80022b4 <__gedf2+0xdc>
 8002228:	2800      	cmp	r0, #0
 800222a:	d11a      	bne.n	8002262 <__gedf2+0x8a>
 800222c:	2001      	movs	r0, #1
 800222e:	4240      	negs	r0, r0
 8002230:	e017      	b.n	8002262 <__gedf2+0x8a>
 8002232:	4311      	orrs	r1, r2
 8002234:	d13b      	bne.n	80022ae <__gedf2+0xd6>
 8002236:	2e00      	cmp	r6, #0
 8002238:	d102      	bne.n	8002240 <__gedf2+0x68>
 800223a:	9f01      	ldr	r7, [sp, #4]
 800223c:	4327      	orrs	r7, r4
 800223e:	d0f3      	beq.n	8002228 <__gedf2+0x50>
 8002240:	4584      	cmp	ip, r0
 8002242:	d109      	bne.n	8002258 <__gedf2+0x80>
 8002244:	4663      	mov	r3, ip
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <__gedf2+0x54>
 800224a:	4660      	mov	r0, ip
 800224c:	e009      	b.n	8002262 <__gedf2+0x8a>
 800224e:	9f01      	ldr	r7, [sp, #4]
 8002250:	4327      	orrs	r7, r4
 8002252:	d12c      	bne.n	80022ae <__gedf2+0xd6>
 8002254:	45b2      	cmp	sl, r6
 8002256:	d024      	beq.n	80022a2 <__gedf2+0xca>
 8002258:	4663      	mov	r3, ip
 800225a:	2002      	movs	r0, #2
 800225c:	3b01      	subs	r3, #1
 800225e:	4018      	ands	r0, r3
 8002260:	3801      	subs	r0, #1
 8002262:	b003      	add	sp, #12
 8002264:	bcf0      	pop	{r4, r5, r6, r7}
 8002266:	46bb      	mov	fp, r7
 8002268:	46b2      	mov	sl, r6
 800226a:	46a9      	mov	r9, r5
 800226c:	46a0      	mov	r8, r4
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002270:	2c00      	cmp	r4, #0
 8002272:	d0d9      	beq.n	8002228 <__gedf2+0x50>
 8002274:	e7e4      	b.n	8002240 <__gedf2+0x68>
 8002276:	4654      	mov	r4, sl
 8002278:	2c00      	cmp	r4, #0
 800227a:	d0ed      	beq.n	8002258 <__gedf2+0x80>
 800227c:	4584      	cmp	ip, r0
 800227e:	d1eb      	bne.n	8002258 <__gedf2+0x80>
 8002280:	4556      	cmp	r6, sl
 8002282:	dce9      	bgt.n	8002258 <__gedf2+0x80>
 8002284:	dbde      	blt.n	8002244 <__gedf2+0x6c>
 8002286:	9b01      	ldr	r3, [sp, #4]
 8002288:	428b      	cmp	r3, r1
 800228a:	d8e5      	bhi.n	8002258 <__gedf2+0x80>
 800228c:	d1da      	bne.n	8002244 <__gedf2+0x6c>
 800228e:	45c8      	cmp	r8, r9
 8002290:	d8e2      	bhi.n	8002258 <__gedf2+0x80>
 8002292:	2000      	movs	r0, #0
 8002294:	45c8      	cmp	r8, r9
 8002296:	d2e4      	bcs.n	8002262 <__gedf2+0x8a>
 8002298:	e7d4      	b.n	8002244 <__gedf2+0x6c>
 800229a:	2000      	movs	r0, #0
 800229c:	2c00      	cmp	r4, #0
 800229e:	d0e0      	beq.n	8002262 <__gedf2+0x8a>
 80022a0:	e7da      	b.n	8002258 <__gedf2+0x80>
 80022a2:	4311      	orrs	r1, r2
 80022a4:	d103      	bne.n	80022ae <__gedf2+0xd6>
 80022a6:	4584      	cmp	ip, r0
 80022a8:	d1d6      	bne.n	8002258 <__gedf2+0x80>
 80022aa:	2000      	movs	r0, #0
 80022ac:	e7d9      	b.n	8002262 <__gedf2+0x8a>
 80022ae:	2002      	movs	r0, #2
 80022b0:	4240      	negs	r0, r0
 80022b2:	e7d6      	b.n	8002262 <__gedf2+0x8a>
 80022b4:	4584      	cmp	ip, r0
 80022b6:	d0e6      	beq.n	8002286 <__gedf2+0xae>
 80022b8:	e7ce      	b.n	8002258 <__gedf2+0x80>
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	000007ff 	.word	0x000007ff

080022c0 <__ledf2>:
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	4657      	mov	r7, sl
 80022c4:	464e      	mov	r6, r9
 80022c6:	4645      	mov	r5, r8
 80022c8:	46de      	mov	lr, fp
 80022ca:	b5e0      	push	{r5, r6, r7, lr}
 80022cc:	000d      	movs	r5, r1
 80022ce:	030f      	lsls	r7, r1, #12
 80022d0:	0004      	movs	r4, r0
 80022d2:	4680      	mov	r8, r0
 80022d4:	0fe8      	lsrs	r0, r5, #31
 80022d6:	0b39      	lsrs	r1, r7, #12
 80022d8:	4684      	mov	ip, r0
 80022da:	b083      	sub	sp, #12
 80022dc:	0058      	lsls	r0, r3, #1
 80022de:	4f30      	ldr	r7, [pc, #192]	@ (80023a0 <__ledf2+0xe0>)
 80022e0:	0d40      	lsrs	r0, r0, #21
 80022e2:	9101      	str	r1, [sp, #4]
 80022e4:	031e      	lsls	r6, r3, #12
 80022e6:	0069      	lsls	r1, r5, #1
 80022e8:	4682      	mov	sl, r0
 80022ea:	4691      	mov	r9, r2
 80022ec:	0d49      	lsrs	r1, r1, #21
 80022ee:	0b36      	lsrs	r6, r6, #12
 80022f0:	0fd8      	lsrs	r0, r3, #31
 80022f2:	42b9      	cmp	r1, r7
 80022f4:	d020      	beq.n	8002338 <__ledf2+0x78>
 80022f6:	45ba      	cmp	sl, r7
 80022f8:	d00f      	beq.n	800231a <__ledf2+0x5a>
 80022fa:	2900      	cmp	r1, #0
 80022fc:	d12b      	bne.n	8002356 <__ledf2+0x96>
 80022fe:	9901      	ldr	r1, [sp, #4]
 8002300:	430c      	orrs	r4, r1
 8002302:	4651      	mov	r1, sl
 8002304:	2900      	cmp	r1, #0
 8002306:	d137      	bne.n	8002378 <__ledf2+0xb8>
 8002308:	4332      	orrs	r2, r6
 800230a:	d038      	beq.n	800237e <__ledf2+0xbe>
 800230c:	2c00      	cmp	r4, #0
 800230e:	d144      	bne.n	800239a <__ledf2+0xda>
 8002310:	2800      	cmp	r0, #0
 8002312:	d119      	bne.n	8002348 <__ledf2+0x88>
 8002314:	2001      	movs	r0, #1
 8002316:	4240      	negs	r0, r0
 8002318:	e016      	b.n	8002348 <__ledf2+0x88>
 800231a:	4316      	orrs	r6, r2
 800231c:	d113      	bne.n	8002346 <__ledf2+0x86>
 800231e:	2900      	cmp	r1, #0
 8002320:	d102      	bne.n	8002328 <__ledf2+0x68>
 8002322:	9f01      	ldr	r7, [sp, #4]
 8002324:	4327      	orrs	r7, r4
 8002326:	d0f3      	beq.n	8002310 <__ledf2+0x50>
 8002328:	4584      	cmp	ip, r0
 800232a:	d020      	beq.n	800236e <__ledf2+0xae>
 800232c:	4663      	mov	r3, ip
 800232e:	2002      	movs	r0, #2
 8002330:	3b01      	subs	r3, #1
 8002332:	4018      	ands	r0, r3
 8002334:	3801      	subs	r0, #1
 8002336:	e007      	b.n	8002348 <__ledf2+0x88>
 8002338:	9f01      	ldr	r7, [sp, #4]
 800233a:	4327      	orrs	r7, r4
 800233c:	d103      	bne.n	8002346 <__ledf2+0x86>
 800233e:	458a      	cmp	sl, r1
 8002340:	d1f4      	bne.n	800232c <__ledf2+0x6c>
 8002342:	4316      	orrs	r6, r2
 8002344:	d01f      	beq.n	8002386 <__ledf2+0xc6>
 8002346:	2002      	movs	r0, #2
 8002348:	b003      	add	sp, #12
 800234a:	bcf0      	pop	{r4, r5, r6, r7}
 800234c:	46bb      	mov	fp, r7
 800234e:	46b2      	mov	sl, r6
 8002350:	46a9      	mov	r9, r5
 8002352:	46a0      	mov	r8, r4
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002356:	4654      	mov	r4, sl
 8002358:	2c00      	cmp	r4, #0
 800235a:	d0e7      	beq.n	800232c <__ledf2+0x6c>
 800235c:	4584      	cmp	ip, r0
 800235e:	d1e5      	bne.n	800232c <__ledf2+0x6c>
 8002360:	4551      	cmp	r1, sl
 8002362:	dce3      	bgt.n	800232c <__ledf2+0x6c>
 8002364:	db03      	blt.n	800236e <__ledf2+0xae>
 8002366:	9b01      	ldr	r3, [sp, #4]
 8002368:	42b3      	cmp	r3, r6
 800236a:	d8df      	bhi.n	800232c <__ledf2+0x6c>
 800236c:	d00f      	beq.n	800238e <__ledf2+0xce>
 800236e:	4663      	mov	r3, ip
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0cf      	beq.n	8002314 <__ledf2+0x54>
 8002374:	4660      	mov	r0, ip
 8002376:	e7e7      	b.n	8002348 <__ledf2+0x88>
 8002378:	2c00      	cmp	r4, #0
 800237a:	d0c9      	beq.n	8002310 <__ledf2+0x50>
 800237c:	e7d4      	b.n	8002328 <__ledf2+0x68>
 800237e:	2000      	movs	r0, #0
 8002380:	2c00      	cmp	r4, #0
 8002382:	d0e1      	beq.n	8002348 <__ledf2+0x88>
 8002384:	e7d2      	b.n	800232c <__ledf2+0x6c>
 8002386:	4584      	cmp	ip, r0
 8002388:	d1d0      	bne.n	800232c <__ledf2+0x6c>
 800238a:	2000      	movs	r0, #0
 800238c:	e7dc      	b.n	8002348 <__ledf2+0x88>
 800238e:	45c8      	cmp	r8, r9
 8002390:	d8cc      	bhi.n	800232c <__ledf2+0x6c>
 8002392:	2000      	movs	r0, #0
 8002394:	45c8      	cmp	r8, r9
 8002396:	d2d7      	bcs.n	8002348 <__ledf2+0x88>
 8002398:	e7e9      	b.n	800236e <__ledf2+0xae>
 800239a:	4584      	cmp	ip, r0
 800239c:	d0e3      	beq.n	8002366 <__ledf2+0xa6>
 800239e:	e7c5      	b.n	800232c <__ledf2+0x6c>
 80023a0:	000007ff 	.word	0x000007ff

080023a4 <__aeabi_dmul>:
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	4657      	mov	r7, sl
 80023a8:	46de      	mov	lr, fp
 80023aa:	464e      	mov	r6, r9
 80023ac:	4645      	mov	r5, r8
 80023ae:	b5e0      	push	{r5, r6, r7, lr}
 80023b0:	001f      	movs	r7, r3
 80023b2:	030b      	lsls	r3, r1, #12
 80023b4:	0b1b      	lsrs	r3, r3, #12
 80023b6:	0016      	movs	r6, r2
 80023b8:	469a      	mov	sl, r3
 80023ba:	0fca      	lsrs	r2, r1, #31
 80023bc:	004b      	lsls	r3, r1, #1
 80023be:	0004      	movs	r4, r0
 80023c0:	4693      	mov	fp, r2
 80023c2:	b087      	sub	sp, #28
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	d100      	bne.n	80023ca <__aeabi_dmul+0x26>
 80023c8:	e0d5      	b.n	8002576 <__aeabi_dmul+0x1d2>
 80023ca:	4abb      	ldr	r2, [pc, #748]	@ (80026b8 <__aeabi_dmul+0x314>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dmul+0x2e>
 80023d0:	e0f8      	b.n	80025c4 <__aeabi_dmul+0x220>
 80023d2:	4651      	mov	r1, sl
 80023d4:	0f42      	lsrs	r2, r0, #29
 80023d6:	00c9      	lsls	r1, r1, #3
 80023d8:	430a      	orrs	r2, r1
 80023da:	2180      	movs	r1, #128	@ 0x80
 80023dc:	0409      	lsls	r1, r1, #16
 80023de:	4311      	orrs	r1, r2
 80023e0:	00c2      	lsls	r2, r0, #3
 80023e2:	4691      	mov	r9, r2
 80023e4:	4ab5      	ldr	r2, [pc, #724]	@ (80026bc <__aeabi_dmul+0x318>)
 80023e6:	468a      	mov	sl, r1
 80023e8:	189d      	adds	r5, r3, r2
 80023ea:	2300      	movs	r3, #0
 80023ec:	4698      	mov	r8, r3
 80023ee:	9302      	str	r3, [sp, #8]
 80023f0:	033c      	lsls	r4, r7, #12
 80023f2:	007b      	lsls	r3, r7, #1
 80023f4:	0ffa      	lsrs	r2, r7, #31
 80023f6:	0030      	movs	r0, r6
 80023f8:	0b24      	lsrs	r4, r4, #12
 80023fa:	0d5b      	lsrs	r3, r3, #21
 80023fc:	9200      	str	r2, [sp, #0]
 80023fe:	d100      	bne.n	8002402 <__aeabi_dmul+0x5e>
 8002400:	e096      	b.n	8002530 <__aeabi_dmul+0x18c>
 8002402:	4aad      	ldr	r2, [pc, #692]	@ (80026b8 <__aeabi_dmul+0x314>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d031      	beq.n	800246c <__aeabi_dmul+0xc8>
 8002408:	0f72      	lsrs	r2, r6, #29
 800240a:	00e4      	lsls	r4, r4, #3
 800240c:	4322      	orrs	r2, r4
 800240e:	2480      	movs	r4, #128	@ 0x80
 8002410:	0424      	lsls	r4, r4, #16
 8002412:	4314      	orrs	r4, r2
 8002414:	4aa9      	ldr	r2, [pc, #676]	@ (80026bc <__aeabi_dmul+0x318>)
 8002416:	00f0      	lsls	r0, r6, #3
 8002418:	4694      	mov	ip, r2
 800241a:	4463      	add	r3, ip
 800241c:	195b      	adds	r3, r3, r5
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	9201      	str	r2, [sp, #4]
 8002422:	4642      	mov	r2, r8
 8002424:	2600      	movs	r6, #0
 8002426:	2a0a      	cmp	r2, #10
 8002428:	dc42      	bgt.n	80024b0 <__aeabi_dmul+0x10c>
 800242a:	465a      	mov	r2, fp
 800242c:	9900      	ldr	r1, [sp, #0]
 800242e:	404a      	eors	r2, r1
 8002430:	4693      	mov	fp, r2
 8002432:	4642      	mov	r2, r8
 8002434:	2a02      	cmp	r2, #2
 8002436:	dc32      	bgt.n	800249e <__aeabi_dmul+0xfa>
 8002438:	3a01      	subs	r2, #1
 800243a:	2a01      	cmp	r2, #1
 800243c:	d900      	bls.n	8002440 <__aeabi_dmul+0x9c>
 800243e:	e149      	b.n	80026d4 <__aeabi_dmul+0x330>
 8002440:	2e02      	cmp	r6, #2
 8002442:	d100      	bne.n	8002446 <__aeabi_dmul+0xa2>
 8002444:	e0ca      	b.n	80025dc <__aeabi_dmul+0x238>
 8002446:	2e01      	cmp	r6, #1
 8002448:	d13d      	bne.n	80024c6 <__aeabi_dmul+0x122>
 800244a:	2300      	movs	r3, #0
 800244c:	2400      	movs	r4, #0
 800244e:	2200      	movs	r2, #0
 8002450:	0010      	movs	r0, r2
 8002452:	465a      	mov	r2, fp
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4323      	orrs	r3, r4
 8002458:	07d2      	lsls	r2, r2, #31
 800245a:	4313      	orrs	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	b007      	add	sp, #28
 8002460:	bcf0      	pop	{r4, r5, r6, r7}
 8002462:	46bb      	mov	fp, r7
 8002464:	46b2      	mov	sl, r6
 8002466:	46a9      	mov	r9, r5
 8002468:	46a0      	mov	r8, r4
 800246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246c:	4b92      	ldr	r3, [pc, #584]	@ (80026b8 <__aeabi_dmul+0x314>)
 800246e:	4326      	orrs	r6, r4
 8002470:	18eb      	adds	r3, r5, r3
 8002472:	2e00      	cmp	r6, #0
 8002474:	d100      	bne.n	8002478 <__aeabi_dmul+0xd4>
 8002476:	e0bb      	b.n	80025f0 <__aeabi_dmul+0x24c>
 8002478:	2203      	movs	r2, #3
 800247a:	4641      	mov	r1, r8
 800247c:	4311      	orrs	r1, r2
 800247e:	465a      	mov	r2, fp
 8002480:	4688      	mov	r8, r1
 8002482:	9900      	ldr	r1, [sp, #0]
 8002484:	404a      	eors	r2, r1
 8002486:	2180      	movs	r1, #128	@ 0x80
 8002488:	0109      	lsls	r1, r1, #4
 800248a:	468c      	mov	ip, r1
 800248c:	0029      	movs	r1, r5
 800248e:	4461      	add	r1, ip
 8002490:	9101      	str	r1, [sp, #4]
 8002492:	4641      	mov	r1, r8
 8002494:	290a      	cmp	r1, #10
 8002496:	dd00      	ble.n	800249a <__aeabi_dmul+0xf6>
 8002498:	e233      	b.n	8002902 <__aeabi_dmul+0x55e>
 800249a:	4693      	mov	fp, r2
 800249c:	2603      	movs	r6, #3
 800249e:	4642      	mov	r2, r8
 80024a0:	2701      	movs	r7, #1
 80024a2:	4097      	lsls	r7, r2
 80024a4:	21a6      	movs	r1, #166	@ 0xa6
 80024a6:	003a      	movs	r2, r7
 80024a8:	00c9      	lsls	r1, r1, #3
 80024aa:	400a      	ands	r2, r1
 80024ac:	420f      	tst	r7, r1
 80024ae:	d031      	beq.n	8002514 <__aeabi_dmul+0x170>
 80024b0:	9e02      	ldr	r6, [sp, #8]
 80024b2:	2e02      	cmp	r6, #2
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dmul+0x114>
 80024b6:	e235      	b.n	8002924 <__aeabi_dmul+0x580>
 80024b8:	2e03      	cmp	r6, #3
 80024ba:	d100      	bne.n	80024be <__aeabi_dmul+0x11a>
 80024bc:	e1d2      	b.n	8002864 <__aeabi_dmul+0x4c0>
 80024be:	4654      	mov	r4, sl
 80024c0:	4648      	mov	r0, r9
 80024c2:	2e01      	cmp	r6, #1
 80024c4:	d0c1      	beq.n	800244a <__aeabi_dmul+0xa6>
 80024c6:	9a01      	ldr	r2, [sp, #4]
 80024c8:	4b7d      	ldr	r3, [pc, #500]	@ (80026c0 <__aeabi_dmul+0x31c>)
 80024ca:	4694      	mov	ip, r2
 80024cc:	4463      	add	r3, ip
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	dc00      	bgt.n	80024d4 <__aeabi_dmul+0x130>
 80024d2:	e0c0      	b.n	8002656 <__aeabi_dmul+0x2b2>
 80024d4:	0742      	lsls	r2, r0, #29
 80024d6:	d009      	beq.n	80024ec <__aeabi_dmul+0x148>
 80024d8:	220f      	movs	r2, #15
 80024da:	4002      	ands	r2, r0
 80024dc:	2a04      	cmp	r2, #4
 80024de:	d005      	beq.n	80024ec <__aeabi_dmul+0x148>
 80024e0:	1d02      	adds	r2, r0, #4
 80024e2:	4282      	cmp	r2, r0
 80024e4:	4180      	sbcs	r0, r0
 80024e6:	4240      	negs	r0, r0
 80024e8:	1824      	adds	r4, r4, r0
 80024ea:	0010      	movs	r0, r2
 80024ec:	01e2      	lsls	r2, r4, #7
 80024ee:	d506      	bpl.n	80024fe <__aeabi_dmul+0x15a>
 80024f0:	4b74      	ldr	r3, [pc, #464]	@ (80026c4 <__aeabi_dmul+0x320>)
 80024f2:	9a01      	ldr	r2, [sp, #4]
 80024f4:	401c      	ands	r4, r3
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	4694      	mov	ip, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4463      	add	r3, ip
 80024fe:	4a72      	ldr	r2, [pc, #456]	@ (80026c8 <__aeabi_dmul+0x324>)
 8002500:	4293      	cmp	r3, r2
 8002502:	dc6b      	bgt.n	80025dc <__aeabi_dmul+0x238>
 8002504:	0762      	lsls	r2, r4, #29
 8002506:	08c0      	lsrs	r0, r0, #3
 8002508:	0264      	lsls	r4, r4, #9
 800250a:	055b      	lsls	r3, r3, #21
 800250c:	4302      	orrs	r2, r0
 800250e:	0b24      	lsrs	r4, r4, #12
 8002510:	0d5b      	lsrs	r3, r3, #21
 8002512:	e79d      	b.n	8002450 <__aeabi_dmul+0xac>
 8002514:	2190      	movs	r1, #144	@ 0x90
 8002516:	0089      	lsls	r1, r1, #2
 8002518:	420f      	tst	r7, r1
 800251a:	d163      	bne.n	80025e4 <__aeabi_dmul+0x240>
 800251c:	2288      	movs	r2, #136	@ 0x88
 800251e:	423a      	tst	r2, r7
 8002520:	d100      	bne.n	8002524 <__aeabi_dmul+0x180>
 8002522:	e0d7      	b.n	80026d4 <__aeabi_dmul+0x330>
 8002524:	9b00      	ldr	r3, [sp, #0]
 8002526:	46a2      	mov	sl, r4
 8002528:	469b      	mov	fp, r3
 800252a:	4681      	mov	r9, r0
 800252c:	9602      	str	r6, [sp, #8]
 800252e:	e7bf      	b.n	80024b0 <__aeabi_dmul+0x10c>
 8002530:	0023      	movs	r3, r4
 8002532:	4333      	orrs	r3, r6
 8002534:	d100      	bne.n	8002538 <__aeabi_dmul+0x194>
 8002536:	e07f      	b.n	8002638 <__aeabi_dmul+0x294>
 8002538:	2c00      	cmp	r4, #0
 800253a:	d100      	bne.n	800253e <__aeabi_dmul+0x19a>
 800253c:	e1ad      	b.n	800289a <__aeabi_dmul+0x4f6>
 800253e:	0020      	movs	r0, r4
 8002540:	f000 ff10 	bl	8003364 <__clzsi2>
 8002544:	0002      	movs	r2, r0
 8002546:	0003      	movs	r3, r0
 8002548:	3a0b      	subs	r2, #11
 800254a:	201d      	movs	r0, #29
 800254c:	0019      	movs	r1, r3
 800254e:	1a82      	subs	r2, r0, r2
 8002550:	0030      	movs	r0, r6
 8002552:	3908      	subs	r1, #8
 8002554:	40d0      	lsrs	r0, r2
 8002556:	408c      	lsls	r4, r1
 8002558:	4304      	orrs	r4, r0
 800255a:	0030      	movs	r0, r6
 800255c:	4088      	lsls	r0, r1
 800255e:	4a5b      	ldr	r2, [pc, #364]	@ (80026cc <__aeabi_dmul+0x328>)
 8002560:	1aeb      	subs	r3, r5, r3
 8002562:	4694      	mov	ip, r2
 8002564:	4463      	add	r3, ip
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	9201      	str	r2, [sp, #4]
 800256a:	4642      	mov	r2, r8
 800256c:	2600      	movs	r6, #0
 800256e:	2a0a      	cmp	r2, #10
 8002570:	dc00      	bgt.n	8002574 <__aeabi_dmul+0x1d0>
 8002572:	e75a      	b.n	800242a <__aeabi_dmul+0x86>
 8002574:	e79c      	b.n	80024b0 <__aeabi_dmul+0x10c>
 8002576:	4653      	mov	r3, sl
 8002578:	4303      	orrs	r3, r0
 800257a:	4699      	mov	r9, r3
 800257c:	d054      	beq.n	8002628 <__aeabi_dmul+0x284>
 800257e:	4653      	mov	r3, sl
 8002580:	2b00      	cmp	r3, #0
 8002582:	d100      	bne.n	8002586 <__aeabi_dmul+0x1e2>
 8002584:	e177      	b.n	8002876 <__aeabi_dmul+0x4d2>
 8002586:	4650      	mov	r0, sl
 8002588:	f000 feec 	bl	8003364 <__clzsi2>
 800258c:	230b      	movs	r3, #11
 800258e:	425b      	negs	r3, r3
 8002590:	469c      	mov	ip, r3
 8002592:	0002      	movs	r2, r0
 8002594:	4484      	add	ip, r0
 8002596:	0011      	movs	r1, r2
 8002598:	4650      	mov	r0, sl
 800259a:	3908      	subs	r1, #8
 800259c:	4088      	lsls	r0, r1
 800259e:	231d      	movs	r3, #29
 80025a0:	4680      	mov	r8, r0
 80025a2:	4660      	mov	r0, ip
 80025a4:	1a1b      	subs	r3, r3, r0
 80025a6:	0020      	movs	r0, r4
 80025a8:	40d8      	lsrs	r0, r3
 80025aa:	0003      	movs	r3, r0
 80025ac:	4640      	mov	r0, r8
 80025ae:	4303      	orrs	r3, r0
 80025b0:	469a      	mov	sl, r3
 80025b2:	0023      	movs	r3, r4
 80025b4:	408b      	lsls	r3, r1
 80025b6:	4699      	mov	r9, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	4d44      	ldr	r5, [pc, #272]	@ (80026cc <__aeabi_dmul+0x328>)
 80025bc:	4698      	mov	r8, r3
 80025be:	1aad      	subs	r5, r5, r2
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	e715      	b.n	80023f0 <__aeabi_dmul+0x4c>
 80025c4:	4652      	mov	r2, sl
 80025c6:	4302      	orrs	r2, r0
 80025c8:	4691      	mov	r9, r2
 80025ca:	d126      	bne.n	800261a <__aeabi_dmul+0x276>
 80025cc:	2200      	movs	r2, #0
 80025ce:	001d      	movs	r5, r3
 80025d0:	2302      	movs	r3, #2
 80025d2:	4692      	mov	sl, r2
 80025d4:	3208      	adds	r2, #8
 80025d6:	4690      	mov	r8, r2
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	e709      	b.n	80023f0 <__aeabi_dmul+0x4c>
 80025dc:	2400      	movs	r4, #0
 80025de:	2200      	movs	r2, #0
 80025e0:	4b35      	ldr	r3, [pc, #212]	@ (80026b8 <__aeabi_dmul+0x314>)
 80025e2:	e735      	b.n	8002450 <__aeabi_dmul+0xac>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2480      	movs	r4, #128	@ 0x80
 80025e8:	469b      	mov	fp, r3
 80025ea:	0324      	lsls	r4, r4, #12
 80025ec:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <__aeabi_dmul+0x314>)
 80025ee:	e72f      	b.n	8002450 <__aeabi_dmul+0xac>
 80025f0:	2202      	movs	r2, #2
 80025f2:	4641      	mov	r1, r8
 80025f4:	4311      	orrs	r1, r2
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	4694      	mov	ip, r2
 80025fc:	002a      	movs	r2, r5
 80025fe:	4462      	add	r2, ip
 8002600:	4688      	mov	r8, r1
 8002602:	9201      	str	r2, [sp, #4]
 8002604:	290a      	cmp	r1, #10
 8002606:	dd00      	ble.n	800260a <__aeabi_dmul+0x266>
 8002608:	e752      	b.n	80024b0 <__aeabi_dmul+0x10c>
 800260a:	465a      	mov	r2, fp
 800260c:	2000      	movs	r0, #0
 800260e:	9900      	ldr	r1, [sp, #0]
 8002610:	0004      	movs	r4, r0
 8002612:	404a      	eors	r2, r1
 8002614:	4693      	mov	fp, r2
 8002616:	2602      	movs	r6, #2
 8002618:	e70b      	b.n	8002432 <__aeabi_dmul+0x8e>
 800261a:	220c      	movs	r2, #12
 800261c:	001d      	movs	r5, r3
 800261e:	2303      	movs	r3, #3
 8002620:	4681      	mov	r9, r0
 8002622:	4690      	mov	r8, r2
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	e6e3      	b.n	80023f0 <__aeabi_dmul+0x4c>
 8002628:	2300      	movs	r3, #0
 800262a:	469a      	mov	sl, r3
 800262c:	3304      	adds	r3, #4
 800262e:	4698      	mov	r8, r3
 8002630:	3b03      	subs	r3, #3
 8002632:	2500      	movs	r5, #0
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	e6db      	b.n	80023f0 <__aeabi_dmul+0x4c>
 8002638:	4642      	mov	r2, r8
 800263a:	3301      	adds	r3, #1
 800263c:	431a      	orrs	r2, r3
 800263e:	002b      	movs	r3, r5
 8002640:	4690      	mov	r8, r2
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	9201      	str	r2, [sp, #4]
 8002646:	4642      	mov	r2, r8
 8002648:	2400      	movs	r4, #0
 800264a:	2000      	movs	r0, #0
 800264c:	2601      	movs	r6, #1
 800264e:	2a0a      	cmp	r2, #10
 8002650:	dc00      	bgt.n	8002654 <__aeabi_dmul+0x2b0>
 8002652:	e6ea      	b.n	800242a <__aeabi_dmul+0x86>
 8002654:	e72c      	b.n	80024b0 <__aeabi_dmul+0x10c>
 8002656:	2201      	movs	r2, #1
 8002658:	1ad2      	subs	r2, r2, r3
 800265a:	2a38      	cmp	r2, #56	@ 0x38
 800265c:	dd00      	ble.n	8002660 <__aeabi_dmul+0x2bc>
 800265e:	e6f4      	b.n	800244a <__aeabi_dmul+0xa6>
 8002660:	2a1f      	cmp	r2, #31
 8002662:	dc00      	bgt.n	8002666 <__aeabi_dmul+0x2c2>
 8002664:	e12a      	b.n	80028bc <__aeabi_dmul+0x518>
 8002666:	211f      	movs	r1, #31
 8002668:	4249      	negs	r1, r1
 800266a:	1acb      	subs	r3, r1, r3
 800266c:	0021      	movs	r1, r4
 800266e:	40d9      	lsrs	r1, r3
 8002670:	000b      	movs	r3, r1
 8002672:	2a20      	cmp	r2, #32
 8002674:	d005      	beq.n	8002682 <__aeabi_dmul+0x2de>
 8002676:	4a16      	ldr	r2, [pc, #88]	@ (80026d0 <__aeabi_dmul+0x32c>)
 8002678:	9d01      	ldr	r5, [sp, #4]
 800267a:	4694      	mov	ip, r2
 800267c:	4465      	add	r5, ip
 800267e:	40ac      	lsls	r4, r5
 8002680:	4320      	orrs	r0, r4
 8002682:	1e42      	subs	r2, r0, #1
 8002684:	4190      	sbcs	r0, r2
 8002686:	4318      	orrs	r0, r3
 8002688:	2307      	movs	r3, #7
 800268a:	0019      	movs	r1, r3
 800268c:	2400      	movs	r4, #0
 800268e:	4001      	ands	r1, r0
 8002690:	4203      	tst	r3, r0
 8002692:	d00c      	beq.n	80026ae <__aeabi_dmul+0x30a>
 8002694:	230f      	movs	r3, #15
 8002696:	4003      	ands	r3, r0
 8002698:	2b04      	cmp	r3, #4
 800269a:	d100      	bne.n	800269e <__aeabi_dmul+0x2fa>
 800269c:	e140      	b.n	8002920 <__aeabi_dmul+0x57c>
 800269e:	1d03      	adds	r3, r0, #4
 80026a0:	4283      	cmp	r3, r0
 80026a2:	41a4      	sbcs	r4, r4
 80026a4:	0018      	movs	r0, r3
 80026a6:	4264      	negs	r4, r4
 80026a8:	0761      	lsls	r1, r4, #29
 80026aa:	0264      	lsls	r4, r4, #9
 80026ac:	0b24      	lsrs	r4, r4, #12
 80026ae:	08c2      	lsrs	r2, r0, #3
 80026b0:	2300      	movs	r3, #0
 80026b2:	430a      	orrs	r2, r1
 80026b4:	e6cc      	b.n	8002450 <__aeabi_dmul+0xac>
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	000007ff 	.word	0x000007ff
 80026bc:	fffffc01 	.word	0xfffffc01
 80026c0:	000003ff 	.word	0x000003ff
 80026c4:	feffffff 	.word	0xfeffffff
 80026c8:	000007fe 	.word	0x000007fe
 80026cc:	fffffc0d 	.word	0xfffffc0d
 80026d0:	0000043e 	.word	0x0000043e
 80026d4:	4649      	mov	r1, r9
 80026d6:	464a      	mov	r2, r9
 80026d8:	0409      	lsls	r1, r1, #16
 80026da:	0c09      	lsrs	r1, r1, #16
 80026dc:	000d      	movs	r5, r1
 80026de:	0c16      	lsrs	r6, r2, #16
 80026e0:	0c02      	lsrs	r2, r0, #16
 80026e2:	0400      	lsls	r0, r0, #16
 80026e4:	0c00      	lsrs	r0, r0, #16
 80026e6:	4345      	muls	r5, r0
 80026e8:	46ac      	mov	ip, r5
 80026ea:	0005      	movs	r5, r0
 80026ec:	4375      	muls	r5, r6
 80026ee:	46a8      	mov	r8, r5
 80026f0:	0015      	movs	r5, r2
 80026f2:	000f      	movs	r7, r1
 80026f4:	4375      	muls	r5, r6
 80026f6:	9200      	str	r2, [sp, #0]
 80026f8:	9502      	str	r5, [sp, #8]
 80026fa:	002a      	movs	r2, r5
 80026fc:	9d00      	ldr	r5, [sp, #0]
 80026fe:	436f      	muls	r7, r5
 8002700:	4665      	mov	r5, ip
 8002702:	0c2d      	lsrs	r5, r5, #16
 8002704:	46a9      	mov	r9, r5
 8002706:	4447      	add	r7, r8
 8002708:	444f      	add	r7, r9
 800270a:	45b8      	cmp	r8, r7
 800270c:	d905      	bls.n	800271a <__aeabi_dmul+0x376>
 800270e:	0015      	movs	r5, r2
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0252      	lsls	r2, r2, #9
 8002714:	4690      	mov	r8, r2
 8002716:	4445      	add	r5, r8
 8002718:	9502      	str	r5, [sp, #8]
 800271a:	0c3d      	lsrs	r5, r7, #16
 800271c:	9503      	str	r5, [sp, #12]
 800271e:	4665      	mov	r5, ip
 8002720:	042d      	lsls	r5, r5, #16
 8002722:	043f      	lsls	r7, r7, #16
 8002724:	0c2d      	lsrs	r5, r5, #16
 8002726:	46ac      	mov	ip, r5
 8002728:	003d      	movs	r5, r7
 800272a:	4465      	add	r5, ip
 800272c:	9504      	str	r5, [sp, #16]
 800272e:	0c25      	lsrs	r5, r4, #16
 8002730:	0424      	lsls	r4, r4, #16
 8002732:	0c24      	lsrs	r4, r4, #16
 8002734:	46ac      	mov	ip, r5
 8002736:	0025      	movs	r5, r4
 8002738:	4375      	muls	r5, r6
 800273a:	46a8      	mov	r8, r5
 800273c:	4665      	mov	r5, ip
 800273e:	000f      	movs	r7, r1
 8002740:	4369      	muls	r1, r5
 8002742:	4441      	add	r1, r8
 8002744:	4689      	mov	r9, r1
 8002746:	4367      	muls	r7, r4
 8002748:	0c39      	lsrs	r1, r7, #16
 800274a:	4449      	add	r1, r9
 800274c:	436e      	muls	r6, r5
 800274e:	4588      	cmp	r8, r1
 8002750:	d903      	bls.n	800275a <__aeabi_dmul+0x3b6>
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	0252      	lsls	r2, r2, #9
 8002756:	4690      	mov	r8, r2
 8002758:	4446      	add	r6, r8
 800275a:	0c0d      	lsrs	r5, r1, #16
 800275c:	46a8      	mov	r8, r5
 800275e:	0035      	movs	r5, r6
 8002760:	4445      	add	r5, r8
 8002762:	9505      	str	r5, [sp, #20]
 8002764:	9d03      	ldr	r5, [sp, #12]
 8002766:	043f      	lsls	r7, r7, #16
 8002768:	46a8      	mov	r8, r5
 800276a:	0c3f      	lsrs	r7, r7, #16
 800276c:	0409      	lsls	r1, r1, #16
 800276e:	19c9      	adds	r1, r1, r7
 8002770:	4488      	add	r8, r1
 8002772:	4645      	mov	r5, r8
 8002774:	9503      	str	r5, [sp, #12]
 8002776:	4655      	mov	r5, sl
 8002778:	042e      	lsls	r6, r5, #16
 800277a:	0c36      	lsrs	r6, r6, #16
 800277c:	0c2f      	lsrs	r7, r5, #16
 800277e:	0035      	movs	r5, r6
 8002780:	4345      	muls	r5, r0
 8002782:	4378      	muls	r0, r7
 8002784:	4681      	mov	r9, r0
 8002786:	0038      	movs	r0, r7
 8002788:	46a8      	mov	r8, r5
 800278a:	0c2d      	lsrs	r5, r5, #16
 800278c:	46aa      	mov	sl, r5
 800278e:	9a00      	ldr	r2, [sp, #0]
 8002790:	4350      	muls	r0, r2
 8002792:	4372      	muls	r2, r6
 8002794:	444a      	add	r2, r9
 8002796:	4452      	add	r2, sl
 8002798:	4591      	cmp	r9, r2
 800279a:	d903      	bls.n	80027a4 <__aeabi_dmul+0x400>
 800279c:	2580      	movs	r5, #128	@ 0x80
 800279e:	026d      	lsls	r5, r5, #9
 80027a0:	46a9      	mov	r9, r5
 80027a2:	4448      	add	r0, r9
 80027a4:	0c15      	lsrs	r5, r2, #16
 80027a6:	46a9      	mov	r9, r5
 80027a8:	4645      	mov	r5, r8
 80027aa:	042d      	lsls	r5, r5, #16
 80027ac:	0c2d      	lsrs	r5, r5, #16
 80027ae:	46a8      	mov	r8, r5
 80027b0:	4665      	mov	r5, ip
 80027b2:	437d      	muls	r5, r7
 80027b4:	0412      	lsls	r2, r2, #16
 80027b6:	4448      	add	r0, r9
 80027b8:	4490      	add	r8, r2
 80027ba:	46a9      	mov	r9, r5
 80027bc:	0032      	movs	r2, r6
 80027be:	4665      	mov	r5, ip
 80027c0:	4362      	muls	r2, r4
 80027c2:	436e      	muls	r6, r5
 80027c4:	437c      	muls	r4, r7
 80027c6:	0c17      	lsrs	r7, r2, #16
 80027c8:	1936      	adds	r6, r6, r4
 80027ca:	19bf      	adds	r7, r7, r6
 80027cc:	42bc      	cmp	r4, r7
 80027ce:	d903      	bls.n	80027d8 <__aeabi_dmul+0x434>
 80027d0:	2480      	movs	r4, #128	@ 0x80
 80027d2:	0264      	lsls	r4, r4, #9
 80027d4:	46a4      	mov	ip, r4
 80027d6:	44e1      	add	r9, ip
 80027d8:	9c02      	ldr	r4, [sp, #8]
 80027da:	9e03      	ldr	r6, [sp, #12]
 80027dc:	46a4      	mov	ip, r4
 80027de:	9d05      	ldr	r5, [sp, #20]
 80027e0:	4466      	add	r6, ip
 80027e2:	428e      	cmp	r6, r1
 80027e4:	4189      	sbcs	r1, r1
 80027e6:	46ac      	mov	ip, r5
 80027e8:	0412      	lsls	r2, r2, #16
 80027ea:	043c      	lsls	r4, r7, #16
 80027ec:	0c12      	lsrs	r2, r2, #16
 80027ee:	18a2      	adds	r2, r4, r2
 80027f0:	4462      	add	r2, ip
 80027f2:	4249      	negs	r1, r1
 80027f4:	1854      	adds	r4, r2, r1
 80027f6:	4446      	add	r6, r8
 80027f8:	46a4      	mov	ip, r4
 80027fa:	4546      	cmp	r6, r8
 80027fc:	41a4      	sbcs	r4, r4
 80027fe:	4682      	mov	sl, r0
 8002800:	4264      	negs	r4, r4
 8002802:	46a0      	mov	r8, r4
 8002804:	42aa      	cmp	r2, r5
 8002806:	4192      	sbcs	r2, r2
 8002808:	458c      	cmp	ip, r1
 800280a:	4189      	sbcs	r1, r1
 800280c:	44e2      	add	sl, ip
 800280e:	44d0      	add	r8, sl
 8002810:	4249      	negs	r1, r1
 8002812:	4252      	negs	r2, r2
 8002814:	430a      	orrs	r2, r1
 8002816:	45a0      	cmp	r8, r4
 8002818:	41a4      	sbcs	r4, r4
 800281a:	4582      	cmp	sl, r0
 800281c:	4189      	sbcs	r1, r1
 800281e:	4264      	negs	r4, r4
 8002820:	4249      	negs	r1, r1
 8002822:	430c      	orrs	r4, r1
 8002824:	4641      	mov	r1, r8
 8002826:	0c3f      	lsrs	r7, r7, #16
 8002828:	19d2      	adds	r2, r2, r7
 800282a:	1912      	adds	r2, r2, r4
 800282c:	0dcc      	lsrs	r4, r1, #23
 800282e:	9904      	ldr	r1, [sp, #16]
 8002830:	0270      	lsls	r0, r6, #9
 8002832:	4308      	orrs	r0, r1
 8002834:	1e41      	subs	r1, r0, #1
 8002836:	4188      	sbcs	r0, r1
 8002838:	4641      	mov	r1, r8
 800283a:	444a      	add	r2, r9
 800283c:	0df6      	lsrs	r6, r6, #23
 800283e:	0252      	lsls	r2, r2, #9
 8002840:	4330      	orrs	r0, r6
 8002842:	0249      	lsls	r1, r1, #9
 8002844:	4314      	orrs	r4, r2
 8002846:	4308      	orrs	r0, r1
 8002848:	01d2      	lsls	r2, r2, #7
 800284a:	d535      	bpl.n	80028b8 <__aeabi_dmul+0x514>
 800284c:	2201      	movs	r2, #1
 800284e:	0843      	lsrs	r3, r0, #1
 8002850:	4002      	ands	r2, r0
 8002852:	4313      	orrs	r3, r2
 8002854:	07e0      	lsls	r0, r4, #31
 8002856:	4318      	orrs	r0, r3
 8002858:	0864      	lsrs	r4, r4, #1
 800285a:	e634      	b.n	80024c6 <__aeabi_dmul+0x122>
 800285c:	9b00      	ldr	r3, [sp, #0]
 800285e:	46a2      	mov	sl, r4
 8002860:	469b      	mov	fp, r3
 8002862:	4681      	mov	r9, r0
 8002864:	2480      	movs	r4, #128	@ 0x80
 8002866:	4653      	mov	r3, sl
 8002868:	0324      	lsls	r4, r4, #12
 800286a:	431c      	orrs	r4, r3
 800286c:	0324      	lsls	r4, r4, #12
 800286e:	464a      	mov	r2, r9
 8002870:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <__aeabi_dmul+0x588>)
 8002872:	0b24      	lsrs	r4, r4, #12
 8002874:	e5ec      	b.n	8002450 <__aeabi_dmul+0xac>
 8002876:	f000 fd75 	bl	8003364 <__clzsi2>
 800287a:	2315      	movs	r3, #21
 800287c:	469c      	mov	ip, r3
 800287e:	4484      	add	ip, r0
 8002880:	0002      	movs	r2, r0
 8002882:	4663      	mov	r3, ip
 8002884:	3220      	adds	r2, #32
 8002886:	2b1c      	cmp	r3, #28
 8002888:	dc00      	bgt.n	800288c <__aeabi_dmul+0x4e8>
 800288a:	e684      	b.n	8002596 <__aeabi_dmul+0x1f2>
 800288c:	2300      	movs	r3, #0
 800288e:	4699      	mov	r9, r3
 8002890:	0023      	movs	r3, r4
 8002892:	3808      	subs	r0, #8
 8002894:	4083      	lsls	r3, r0
 8002896:	469a      	mov	sl, r3
 8002898:	e68e      	b.n	80025b8 <__aeabi_dmul+0x214>
 800289a:	f000 fd63 	bl	8003364 <__clzsi2>
 800289e:	0002      	movs	r2, r0
 80028a0:	0003      	movs	r3, r0
 80028a2:	3215      	adds	r2, #21
 80028a4:	3320      	adds	r3, #32
 80028a6:	2a1c      	cmp	r2, #28
 80028a8:	dc00      	bgt.n	80028ac <__aeabi_dmul+0x508>
 80028aa:	e64e      	b.n	800254a <__aeabi_dmul+0x1a6>
 80028ac:	0002      	movs	r2, r0
 80028ae:	0034      	movs	r4, r6
 80028b0:	3a08      	subs	r2, #8
 80028b2:	2000      	movs	r0, #0
 80028b4:	4094      	lsls	r4, r2
 80028b6:	e652      	b.n	800255e <__aeabi_dmul+0x1ba>
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	e604      	b.n	80024c6 <__aeabi_dmul+0x122>
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <__aeabi_dmul+0x58c>)
 80028be:	0021      	movs	r1, r4
 80028c0:	469c      	mov	ip, r3
 80028c2:	0003      	movs	r3, r0
 80028c4:	9d01      	ldr	r5, [sp, #4]
 80028c6:	40d3      	lsrs	r3, r2
 80028c8:	4465      	add	r5, ip
 80028ca:	40a9      	lsls	r1, r5
 80028cc:	4319      	orrs	r1, r3
 80028ce:	0003      	movs	r3, r0
 80028d0:	40ab      	lsls	r3, r5
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	4183      	sbcs	r3, r0
 80028d6:	4319      	orrs	r1, r3
 80028d8:	0008      	movs	r0, r1
 80028da:	40d4      	lsrs	r4, r2
 80028dc:	074b      	lsls	r3, r1, #29
 80028de:	d009      	beq.n	80028f4 <__aeabi_dmul+0x550>
 80028e0:	230f      	movs	r3, #15
 80028e2:	400b      	ands	r3, r1
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d005      	beq.n	80028f4 <__aeabi_dmul+0x550>
 80028e8:	1d0b      	adds	r3, r1, #4
 80028ea:	428b      	cmp	r3, r1
 80028ec:	4180      	sbcs	r0, r0
 80028ee:	4240      	negs	r0, r0
 80028f0:	1824      	adds	r4, r4, r0
 80028f2:	0018      	movs	r0, r3
 80028f4:	0223      	lsls	r3, r4, #8
 80028f6:	d400      	bmi.n	80028fa <__aeabi_dmul+0x556>
 80028f8:	e6d6      	b.n	80026a8 <__aeabi_dmul+0x304>
 80028fa:	2301      	movs	r3, #1
 80028fc:	2400      	movs	r4, #0
 80028fe:	2200      	movs	r2, #0
 8002900:	e5a6      	b.n	8002450 <__aeabi_dmul+0xac>
 8002902:	290f      	cmp	r1, #15
 8002904:	d1aa      	bne.n	800285c <__aeabi_dmul+0x4b8>
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	4652      	mov	r2, sl
 800290a:	031b      	lsls	r3, r3, #12
 800290c:	421a      	tst	r2, r3
 800290e:	d0a9      	beq.n	8002864 <__aeabi_dmul+0x4c0>
 8002910:	421c      	tst	r4, r3
 8002912:	d1a7      	bne.n	8002864 <__aeabi_dmul+0x4c0>
 8002914:	431c      	orrs	r4, r3
 8002916:	9b00      	ldr	r3, [sp, #0]
 8002918:	0002      	movs	r2, r0
 800291a:	469b      	mov	fp, r3
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <__aeabi_dmul+0x588>)
 800291e:	e597      	b.n	8002450 <__aeabi_dmul+0xac>
 8002920:	2400      	movs	r4, #0
 8002922:	e6c1      	b.n	80026a8 <__aeabi_dmul+0x304>
 8002924:	2400      	movs	r4, #0
 8002926:	4b01      	ldr	r3, [pc, #4]	@ (800292c <__aeabi_dmul+0x588>)
 8002928:	0022      	movs	r2, r4
 800292a:	e591      	b.n	8002450 <__aeabi_dmul+0xac>
 800292c:	000007ff 	.word	0x000007ff
 8002930:	0000041e 	.word	0x0000041e

08002934 <__aeabi_dsub>:
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	464e      	mov	r6, r9
 8002938:	4645      	mov	r5, r8
 800293a:	46de      	mov	lr, fp
 800293c:	4657      	mov	r7, sl
 800293e:	b5e0      	push	{r5, r6, r7, lr}
 8002940:	b085      	sub	sp, #20
 8002942:	9000      	str	r0, [sp, #0]
 8002944:	9101      	str	r1, [sp, #4]
 8002946:	030c      	lsls	r4, r1, #12
 8002948:	004f      	lsls	r7, r1, #1
 800294a:	0fce      	lsrs	r6, r1, #31
 800294c:	0a61      	lsrs	r1, r4, #9
 800294e:	9c00      	ldr	r4, [sp, #0]
 8002950:	46b0      	mov	r8, r6
 8002952:	0f64      	lsrs	r4, r4, #29
 8002954:	430c      	orrs	r4, r1
 8002956:	9900      	ldr	r1, [sp, #0]
 8002958:	0d7f      	lsrs	r7, r7, #21
 800295a:	00c8      	lsls	r0, r1, #3
 800295c:	0011      	movs	r1, r2
 800295e:	001a      	movs	r2, r3
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	469c      	mov	ip, r3
 8002964:	9100      	str	r1, [sp, #0]
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	0051      	lsls	r1, r2, #1
 800296a:	0d4b      	lsrs	r3, r1, #21
 800296c:	4699      	mov	r9, r3
 800296e:	9b01      	ldr	r3, [sp, #4]
 8002970:	9d00      	ldr	r5, [sp, #0]
 8002972:	0fd9      	lsrs	r1, r3, #31
 8002974:	4663      	mov	r3, ip
 8002976:	0f6a      	lsrs	r2, r5, #29
 8002978:	0a5b      	lsrs	r3, r3, #9
 800297a:	4313      	orrs	r3, r2
 800297c:	00ea      	lsls	r2, r5, #3
 800297e:	4694      	mov	ip, r2
 8002980:	4693      	mov	fp, r2
 8002982:	4ac1      	ldr	r2, [pc, #772]	@ (8002c88 <__aeabi_dsub+0x354>)
 8002984:	9003      	str	r0, [sp, #12]
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	4591      	cmp	r9, r2
 800298a:	d100      	bne.n	800298e <__aeabi_dsub+0x5a>
 800298c:	e0cd      	b.n	8002b2a <__aeabi_dsub+0x1f6>
 800298e:	2501      	movs	r5, #1
 8002990:	4069      	eors	r1, r5
 8002992:	464d      	mov	r5, r9
 8002994:	1b7d      	subs	r5, r7, r5
 8002996:	46aa      	mov	sl, r5
 8002998:	428e      	cmp	r6, r1
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x6a>
 800299c:	e080      	b.n	8002aa0 <__aeabi_dsub+0x16c>
 800299e:	2d00      	cmp	r5, #0
 80029a0:	dc00      	bgt.n	80029a4 <__aeabi_dsub+0x70>
 80029a2:	e335      	b.n	8003010 <__aeabi_dsub+0x6dc>
 80029a4:	4649      	mov	r1, r9
 80029a6:	2900      	cmp	r1, #0
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x78>
 80029aa:	e0df      	b.n	8002b6c <__aeabi_dsub+0x238>
 80029ac:	4297      	cmp	r7, r2
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dsub+0x7e>
 80029b0:	e194      	b.n	8002cdc <__aeabi_dsub+0x3a8>
 80029b2:	4652      	mov	r2, sl
 80029b4:	2501      	movs	r5, #1
 80029b6:	2a38      	cmp	r2, #56	@ 0x38
 80029b8:	dc19      	bgt.n	80029ee <__aeabi_dsub+0xba>
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	9b02      	ldr	r3, [sp, #8]
 80029be:	0412      	lsls	r2, r2, #16
 80029c0:	4313      	orrs	r3, r2
 80029c2:	9302      	str	r3, [sp, #8]
 80029c4:	4652      	mov	r2, sl
 80029c6:	2a1f      	cmp	r2, #31
 80029c8:	dd00      	ble.n	80029cc <__aeabi_dsub+0x98>
 80029ca:	e1e3      	b.n	8002d94 <__aeabi_dsub+0x460>
 80029cc:	4653      	mov	r3, sl
 80029ce:	2220      	movs	r2, #32
 80029d0:	4661      	mov	r1, ip
 80029d2:	9d02      	ldr	r5, [sp, #8]
 80029d4:	1ad2      	subs	r2, r2, r3
 80029d6:	4095      	lsls	r5, r2
 80029d8:	40d9      	lsrs	r1, r3
 80029da:	430d      	orrs	r5, r1
 80029dc:	4661      	mov	r1, ip
 80029de:	4091      	lsls	r1, r2
 80029e0:	000a      	movs	r2, r1
 80029e2:	1e51      	subs	r1, r2, #1
 80029e4:	418a      	sbcs	r2, r1
 80029e6:	4315      	orrs	r5, r2
 80029e8:	9a02      	ldr	r2, [sp, #8]
 80029ea:	40da      	lsrs	r2, r3
 80029ec:	1aa4      	subs	r4, r4, r2
 80029ee:	1b45      	subs	r5, r0, r5
 80029f0:	42a8      	cmp	r0, r5
 80029f2:	4180      	sbcs	r0, r0
 80029f4:	4240      	negs	r0, r0
 80029f6:	1a24      	subs	r4, r4, r0
 80029f8:	0223      	lsls	r3, r4, #8
 80029fa:	d400      	bmi.n	80029fe <__aeabi_dsub+0xca>
 80029fc:	e13d      	b.n	8002c7a <__aeabi_dsub+0x346>
 80029fe:	0264      	lsls	r4, r4, #9
 8002a00:	0a64      	lsrs	r4, r4, #9
 8002a02:	2c00      	cmp	r4, #0
 8002a04:	d100      	bne.n	8002a08 <__aeabi_dsub+0xd4>
 8002a06:	e147      	b.n	8002c98 <__aeabi_dsub+0x364>
 8002a08:	0020      	movs	r0, r4
 8002a0a:	f000 fcab 	bl	8003364 <__clzsi2>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	3b08      	subs	r3, #8
 8002a12:	2120      	movs	r1, #32
 8002a14:	0028      	movs	r0, r5
 8002a16:	1aca      	subs	r2, r1, r3
 8002a18:	40d0      	lsrs	r0, r2
 8002a1a:	409c      	lsls	r4, r3
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	409d      	lsls	r5, r3
 8002a20:	4322      	orrs	r2, r4
 8002a22:	429f      	cmp	r7, r3
 8002a24:	dd00      	ble.n	8002a28 <__aeabi_dsub+0xf4>
 8002a26:	e177      	b.n	8002d18 <__aeabi_dsub+0x3e4>
 8002a28:	1bd8      	subs	r0, r3, r7
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	1a09      	subs	r1, r1, r0
 8002a2e:	002c      	movs	r4, r5
 8002a30:	408d      	lsls	r5, r1
 8002a32:	40c4      	lsrs	r4, r0
 8002a34:	1e6b      	subs	r3, r5, #1
 8002a36:	419d      	sbcs	r5, r3
 8002a38:	0013      	movs	r3, r2
 8002a3a:	40c2      	lsrs	r2, r0
 8002a3c:	408b      	lsls	r3, r1
 8002a3e:	4325      	orrs	r5, r4
 8002a40:	2700      	movs	r7, #0
 8002a42:	0014      	movs	r4, r2
 8002a44:	431d      	orrs	r5, r3
 8002a46:	076b      	lsls	r3, r5, #29
 8002a48:	d009      	beq.n	8002a5e <__aeabi_dsub+0x12a>
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	402b      	ands	r3, r5
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d005      	beq.n	8002a5e <__aeabi_dsub+0x12a>
 8002a52:	1d2b      	adds	r3, r5, #4
 8002a54:	42ab      	cmp	r3, r5
 8002a56:	41ad      	sbcs	r5, r5
 8002a58:	426d      	negs	r5, r5
 8002a5a:	1964      	adds	r4, r4, r5
 8002a5c:	001d      	movs	r5, r3
 8002a5e:	0223      	lsls	r3, r4, #8
 8002a60:	d400      	bmi.n	8002a64 <__aeabi_dsub+0x130>
 8002a62:	e140      	b.n	8002ce6 <__aeabi_dsub+0x3b2>
 8002a64:	4a88      	ldr	r2, [pc, #544]	@ (8002c88 <__aeabi_dsub+0x354>)
 8002a66:	3701      	adds	r7, #1
 8002a68:	4297      	cmp	r7, r2
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x13a>
 8002a6c:	e101      	b.n	8002c72 <__aeabi_dsub+0x33e>
 8002a6e:	2601      	movs	r6, #1
 8002a70:	4643      	mov	r3, r8
 8002a72:	4986      	ldr	r1, [pc, #536]	@ (8002c8c <__aeabi_dsub+0x358>)
 8002a74:	08ed      	lsrs	r5, r5, #3
 8002a76:	4021      	ands	r1, r4
 8002a78:	074a      	lsls	r2, r1, #29
 8002a7a:	432a      	orrs	r2, r5
 8002a7c:	057c      	lsls	r4, r7, #21
 8002a7e:	024d      	lsls	r5, r1, #9
 8002a80:	0b2d      	lsrs	r5, r5, #12
 8002a82:	0d64      	lsrs	r4, r4, #21
 8002a84:	401e      	ands	r6, r3
 8002a86:	0524      	lsls	r4, r4, #20
 8002a88:	432c      	orrs	r4, r5
 8002a8a:	07f6      	lsls	r6, r6, #31
 8002a8c:	4334      	orrs	r4, r6
 8002a8e:	0010      	movs	r0, r2
 8002a90:	0021      	movs	r1, r4
 8002a92:	b005      	add	sp, #20
 8002a94:	bcf0      	pop	{r4, r5, r6, r7}
 8002a96:	46bb      	mov	fp, r7
 8002a98:	46b2      	mov	sl, r6
 8002a9a:	46a9      	mov	r9, r5
 8002a9c:	46a0      	mov	r8, r4
 8002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	dc00      	bgt.n	8002aa6 <__aeabi_dsub+0x172>
 8002aa4:	e2d0      	b.n	8003048 <__aeabi_dsub+0x714>
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d000      	beq.n	8002aae <__aeabi_dsub+0x17a>
 8002aac:	e0d4      	b.n	8002c58 <__aeabi_dsub+0x324>
 8002aae:	4661      	mov	r1, ip
 8002ab0:	9b02      	ldr	r3, [sp, #8]
 8002ab2:	4319      	orrs	r1, r3
 8002ab4:	d100      	bne.n	8002ab8 <__aeabi_dsub+0x184>
 8002ab6:	e12b      	b.n	8002d10 <__aeabi_dsub+0x3dc>
 8002ab8:	1e69      	subs	r1, r5, #1
 8002aba:	2d01      	cmp	r5, #1
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x18c>
 8002abe:	e1d9      	b.n	8002e74 <__aeabi_dsub+0x540>
 8002ac0:	4295      	cmp	r5, r2
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x192>
 8002ac4:	e10a      	b.n	8002cdc <__aeabi_dsub+0x3a8>
 8002ac6:	2501      	movs	r5, #1
 8002ac8:	2938      	cmp	r1, #56	@ 0x38
 8002aca:	dc17      	bgt.n	8002afc <__aeabi_dsub+0x1c8>
 8002acc:	468a      	mov	sl, r1
 8002ace:	4653      	mov	r3, sl
 8002ad0:	2b1f      	cmp	r3, #31
 8002ad2:	dd00      	ble.n	8002ad6 <__aeabi_dsub+0x1a2>
 8002ad4:	e1e7      	b.n	8002ea6 <__aeabi_dsub+0x572>
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	9b02      	ldr	r3, [sp, #8]
 8002adc:	4661      	mov	r1, ip
 8002ade:	4093      	lsls	r3, r2
 8002ae0:	001d      	movs	r5, r3
 8002ae2:	4653      	mov	r3, sl
 8002ae4:	40d9      	lsrs	r1, r3
 8002ae6:	4663      	mov	r3, ip
 8002ae8:	4093      	lsls	r3, r2
 8002aea:	001a      	movs	r2, r3
 8002aec:	430d      	orrs	r5, r1
 8002aee:	1e51      	subs	r1, r2, #1
 8002af0:	418a      	sbcs	r2, r1
 8002af2:	4653      	mov	r3, sl
 8002af4:	4315      	orrs	r5, r2
 8002af6:	9a02      	ldr	r2, [sp, #8]
 8002af8:	40da      	lsrs	r2, r3
 8002afa:	18a4      	adds	r4, r4, r2
 8002afc:	182d      	adds	r5, r5, r0
 8002afe:	4285      	cmp	r5, r0
 8002b00:	4180      	sbcs	r0, r0
 8002b02:	4240      	negs	r0, r0
 8002b04:	1824      	adds	r4, r4, r0
 8002b06:	0223      	lsls	r3, r4, #8
 8002b08:	d400      	bmi.n	8002b0c <__aeabi_dsub+0x1d8>
 8002b0a:	e0b6      	b.n	8002c7a <__aeabi_dsub+0x346>
 8002b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c88 <__aeabi_dsub+0x354>)
 8002b0e:	3701      	adds	r7, #1
 8002b10:	429f      	cmp	r7, r3
 8002b12:	d100      	bne.n	8002b16 <__aeabi_dsub+0x1e2>
 8002b14:	e0ad      	b.n	8002c72 <__aeabi_dsub+0x33e>
 8002b16:	2101      	movs	r1, #1
 8002b18:	4b5c      	ldr	r3, [pc, #368]	@ (8002c8c <__aeabi_dsub+0x358>)
 8002b1a:	086a      	lsrs	r2, r5, #1
 8002b1c:	401c      	ands	r4, r3
 8002b1e:	4029      	ands	r1, r5
 8002b20:	430a      	orrs	r2, r1
 8002b22:	07e5      	lsls	r5, r4, #31
 8002b24:	4315      	orrs	r5, r2
 8002b26:	0864      	lsrs	r4, r4, #1
 8002b28:	e78d      	b.n	8002a46 <__aeabi_dsub+0x112>
 8002b2a:	4a59      	ldr	r2, [pc, #356]	@ (8002c90 <__aeabi_dsub+0x35c>)
 8002b2c:	9b02      	ldr	r3, [sp, #8]
 8002b2e:	4692      	mov	sl, r2
 8002b30:	4662      	mov	r2, ip
 8002b32:	44ba      	add	sl, r7
 8002b34:	431a      	orrs	r2, r3
 8002b36:	d02c      	beq.n	8002b92 <__aeabi_dsub+0x25e>
 8002b38:	428e      	cmp	r6, r1
 8002b3a:	d02e      	beq.n	8002b9a <__aeabi_dsub+0x266>
 8002b3c:	4652      	mov	r2, sl
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d060      	beq.n	8002c04 <__aeabi_dsub+0x2d0>
 8002b42:	2f00      	cmp	r7, #0
 8002b44:	d100      	bne.n	8002b48 <__aeabi_dsub+0x214>
 8002b46:	e0db      	b.n	8002d00 <__aeabi_dsub+0x3cc>
 8002b48:	4663      	mov	r3, ip
 8002b4a:	000e      	movs	r6, r1
 8002b4c:	9c02      	ldr	r4, [sp, #8]
 8002b4e:	08d8      	lsrs	r0, r3, #3
 8002b50:	0762      	lsls	r2, r4, #29
 8002b52:	4302      	orrs	r2, r0
 8002b54:	08e4      	lsrs	r4, r4, #3
 8002b56:	0013      	movs	r3, r2
 8002b58:	4323      	orrs	r3, r4
 8002b5a:	d100      	bne.n	8002b5e <__aeabi_dsub+0x22a>
 8002b5c:	e254      	b.n	8003008 <__aeabi_dsub+0x6d4>
 8002b5e:	2580      	movs	r5, #128	@ 0x80
 8002b60:	032d      	lsls	r5, r5, #12
 8002b62:	4325      	orrs	r5, r4
 8002b64:	032d      	lsls	r5, r5, #12
 8002b66:	4c48      	ldr	r4, [pc, #288]	@ (8002c88 <__aeabi_dsub+0x354>)
 8002b68:	0b2d      	lsrs	r5, r5, #12
 8002b6a:	e78c      	b.n	8002a86 <__aeabi_dsub+0x152>
 8002b6c:	4661      	mov	r1, ip
 8002b6e:	9b02      	ldr	r3, [sp, #8]
 8002b70:	4319      	orrs	r1, r3
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x242>
 8002b74:	e0cc      	b.n	8002d10 <__aeabi_dsub+0x3dc>
 8002b76:	0029      	movs	r1, r5
 8002b78:	3901      	subs	r1, #1
 8002b7a:	2d01      	cmp	r5, #1
 8002b7c:	d100      	bne.n	8002b80 <__aeabi_dsub+0x24c>
 8002b7e:	e188      	b.n	8002e92 <__aeabi_dsub+0x55e>
 8002b80:	4295      	cmp	r5, r2
 8002b82:	d100      	bne.n	8002b86 <__aeabi_dsub+0x252>
 8002b84:	e0aa      	b.n	8002cdc <__aeabi_dsub+0x3a8>
 8002b86:	2501      	movs	r5, #1
 8002b88:	2938      	cmp	r1, #56	@ 0x38
 8002b8a:	dd00      	ble.n	8002b8e <__aeabi_dsub+0x25a>
 8002b8c:	e72f      	b.n	80029ee <__aeabi_dsub+0xba>
 8002b8e:	468a      	mov	sl, r1
 8002b90:	e718      	b.n	80029c4 <__aeabi_dsub+0x90>
 8002b92:	2201      	movs	r2, #1
 8002b94:	4051      	eors	r1, r2
 8002b96:	428e      	cmp	r6, r1
 8002b98:	d1d0      	bne.n	8002b3c <__aeabi_dsub+0x208>
 8002b9a:	4653      	mov	r3, sl
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x26e>
 8002ba0:	e0be      	b.n	8002d20 <__aeabi_dsub+0x3ec>
 8002ba2:	2f00      	cmp	r7, #0
 8002ba4:	d000      	beq.n	8002ba8 <__aeabi_dsub+0x274>
 8002ba6:	e138      	b.n	8002e1a <__aeabi_dsub+0x4e6>
 8002ba8:	46ca      	mov	sl, r9
 8002baa:	0022      	movs	r2, r4
 8002bac:	4302      	orrs	r2, r0
 8002bae:	d100      	bne.n	8002bb2 <__aeabi_dsub+0x27e>
 8002bb0:	e1e2      	b.n	8002f78 <__aeabi_dsub+0x644>
 8002bb2:	4653      	mov	r3, sl
 8002bb4:	1e59      	subs	r1, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x288>
 8002bba:	e20d      	b.n	8002fd8 <__aeabi_dsub+0x6a4>
 8002bbc:	4a32      	ldr	r2, [pc, #200]	@ (8002c88 <__aeabi_dsub+0x354>)
 8002bbe:	4592      	cmp	sl, r2
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x290>
 8002bc2:	e1d2      	b.n	8002f6a <__aeabi_dsub+0x636>
 8002bc4:	2701      	movs	r7, #1
 8002bc6:	2938      	cmp	r1, #56	@ 0x38
 8002bc8:	dc13      	bgt.n	8002bf2 <__aeabi_dsub+0x2be>
 8002bca:	291f      	cmp	r1, #31
 8002bcc:	dd00      	ble.n	8002bd0 <__aeabi_dsub+0x29c>
 8002bce:	e1ee      	b.n	8002fae <__aeabi_dsub+0x67a>
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	9b02      	ldr	r3, [sp, #8]
 8002bd4:	1a52      	subs	r2, r2, r1
 8002bd6:	0025      	movs	r5, r4
 8002bd8:	0007      	movs	r7, r0
 8002bda:	469a      	mov	sl, r3
 8002bdc:	40cc      	lsrs	r4, r1
 8002bde:	4090      	lsls	r0, r2
 8002be0:	4095      	lsls	r5, r2
 8002be2:	40cf      	lsrs	r7, r1
 8002be4:	44a2      	add	sl, r4
 8002be6:	1e42      	subs	r2, r0, #1
 8002be8:	4190      	sbcs	r0, r2
 8002bea:	4653      	mov	r3, sl
 8002bec:	432f      	orrs	r7, r5
 8002bee:	4307      	orrs	r7, r0
 8002bf0:	9302      	str	r3, [sp, #8]
 8002bf2:	003d      	movs	r5, r7
 8002bf4:	4465      	add	r5, ip
 8002bf6:	4565      	cmp	r5, ip
 8002bf8:	4192      	sbcs	r2, r2
 8002bfa:	9b02      	ldr	r3, [sp, #8]
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	464f      	mov	r7, r9
 8002c00:	18d4      	adds	r4, r2, r3
 8002c02:	e780      	b.n	8002b06 <__aeabi_dsub+0x1d2>
 8002c04:	4a23      	ldr	r2, [pc, #140]	@ (8002c94 <__aeabi_dsub+0x360>)
 8002c06:	1c7d      	adds	r5, r7, #1
 8002c08:	4215      	tst	r5, r2
 8002c0a:	d000      	beq.n	8002c0e <__aeabi_dsub+0x2da>
 8002c0c:	e0aa      	b.n	8002d64 <__aeabi_dsub+0x430>
 8002c0e:	4662      	mov	r2, ip
 8002c10:	0025      	movs	r5, r4
 8002c12:	9b02      	ldr	r3, [sp, #8]
 8002c14:	4305      	orrs	r5, r0
 8002c16:	431a      	orrs	r2, r3
 8002c18:	2f00      	cmp	r7, #0
 8002c1a:	d000      	beq.n	8002c1e <__aeabi_dsub+0x2ea>
 8002c1c:	e0f5      	b.n	8002e0a <__aeabi_dsub+0x4d6>
 8002c1e:	2d00      	cmp	r5, #0
 8002c20:	d100      	bne.n	8002c24 <__aeabi_dsub+0x2f0>
 8002c22:	e16b      	b.n	8002efc <__aeabi_dsub+0x5c8>
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d100      	bne.n	8002c2a <__aeabi_dsub+0x2f6>
 8002c28:	e152      	b.n	8002ed0 <__aeabi_dsub+0x59c>
 8002c2a:	4663      	mov	r3, ip
 8002c2c:	1ac5      	subs	r5, r0, r3
 8002c2e:	9b02      	ldr	r3, [sp, #8]
 8002c30:	1ae2      	subs	r2, r4, r3
 8002c32:	42a8      	cmp	r0, r5
 8002c34:	419b      	sbcs	r3, r3
 8002c36:	425b      	negs	r3, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	d400      	bmi.n	8002c40 <__aeabi_dsub+0x30c>
 8002c3e:	e1d5      	b.n	8002fec <__aeabi_dsub+0x6b8>
 8002c40:	4663      	mov	r3, ip
 8002c42:	1a1d      	subs	r5, r3, r0
 8002c44:	45ac      	cmp	ip, r5
 8002c46:	4192      	sbcs	r2, r2
 8002c48:	2601      	movs	r6, #1
 8002c4a:	9b02      	ldr	r3, [sp, #8]
 8002c4c:	4252      	negs	r2, r2
 8002c4e:	1b1c      	subs	r4, r3, r4
 8002c50:	4688      	mov	r8, r1
 8002c52:	1aa4      	subs	r4, r4, r2
 8002c54:	400e      	ands	r6, r1
 8002c56:	e6f6      	b.n	8002a46 <__aeabi_dsub+0x112>
 8002c58:	4297      	cmp	r7, r2
 8002c5a:	d03f      	beq.n	8002cdc <__aeabi_dsub+0x3a8>
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2501      	movs	r5, #1
 8002c60:	2a38      	cmp	r2, #56	@ 0x38
 8002c62:	dd00      	ble.n	8002c66 <__aeabi_dsub+0x332>
 8002c64:	e74a      	b.n	8002afc <__aeabi_dsub+0x1c8>
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	9b02      	ldr	r3, [sp, #8]
 8002c6a:	0412      	lsls	r2, r2, #16
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	e72d      	b.n	8002ace <__aeabi_dsub+0x19a>
 8002c72:	003c      	movs	r4, r7
 8002c74:	2500      	movs	r5, #0
 8002c76:	2200      	movs	r2, #0
 8002c78:	e705      	b.n	8002a86 <__aeabi_dsub+0x152>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	402b      	ands	r3, r5
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d000      	beq.n	8002c84 <__aeabi_dsub+0x350>
 8002c82:	e6e2      	b.n	8002a4a <__aeabi_dsub+0x116>
 8002c84:	e06b      	b.n	8002d5e <__aeabi_dsub+0x42a>
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	000007ff 	.word	0x000007ff
 8002c8c:	ff7fffff 	.word	0xff7fffff
 8002c90:	fffff801 	.word	0xfffff801
 8002c94:	000007fe 	.word	0x000007fe
 8002c98:	0028      	movs	r0, r5
 8002c9a:	f000 fb63 	bl	8003364 <__clzsi2>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	3318      	adds	r3, #24
 8002ca2:	2b1f      	cmp	r3, #31
 8002ca4:	dc00      	bgt.n	8002ca8 <__aeabi_dsub+0x374>
 8002ca6:	e6b4      	b.n	8002a12 <__aeabi_dsub+0xde>
 8002ca8:	002a      	movs	r2, r5
 8002caa:	3808      	subs	r0, #8
 8002cac:	4082      	lsls	r2, r0
 8002cae:	429f      	cmp	r7, r3
 8002cb0:	dd00      	ble.n	8002cb4 <__aeabi_dsub+0x380>
 8002cb2:	e0b9      	b.n	8002e28 <__aeabi_dsub+0x4f4>
 8002cb4:	1bdb      	subs	r3, r3, r7
 8002cb6:	1c58      	adds	r0, r3, #1
 8002cb8:	281f      	cmp	r0, #31
 8002cba:	dc00      	bgt.n	8002cbe <__aeabi_dsub+0x38a>
 8002cbc:	e1a0      	b.n	8003000 <__aeabi_dsub+0x6cc>
 8002cbe:	0015      	movs	r5, r2
 8002cc0:	3b1f      	subs	r3, #31
 8002cc2:	40dd      	lsrs	r5, r3
 8002cc4:	2820      	cmp	r0, #32
 8002cc6:	d005      	beq.n	8002cd4 <__aeabi_dsub+0x3a0>
 8002cc8:	2340      	movs	r3, #64	@ 0x40
 8002cca:	1a1b      	subs	r3, r3, r0
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	1e53      	subs	r3, r2, #1
 8002cd0:	419a      	sbcs	r2, r3
 8002cd2:	4315      	orrs	r5, r2
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	2700      	movs	r7, #0
 8002cd8:	402b      	ands	r3, r5
 8002cda:	e7d0      	b.n	8002c7e <__aeabi_dsub+0x34a>
 8002cdc:	08c0      	lsrs	r0, r0, #3
 8002cde:	0762      	lsls	r2, r4, #29
 8002ce0:	4302      	orrs	r2, r0
 8002ce2:	08e4      	lsrs	r4, r4, #3
 8002ce4:	e737      	b.n	8002b56 <__aeabi_dsub+0x222>
 8002ce6:	08ea      	lsrs	r2, r5, #3
 8002ce8:	0763      	lsls	r3, r4, #29
 8002cea:	431a      	orrs	r2, r3
 8002cec:	4bd3      	ldr	r3, [pc, #844]	@ (800303c <__aeabi_dsub+0x708>)
 8002cee:	08e4      	lsrs	r4, r4, #3
 8002cf0:	429f      	cmp	r7, r3
 8002cf2:	d100      	bne.n	8002cf6 <__aeabi_dsub+0x3c2>
 8002cf4:	e72f      	b.n	8002b56 <__aeabi_dsub+0x222>
 8002cf6:	0324      	lsls	r4, r4, #12
 8002cf8:	0b25      	lsrs	r5, r4, #12
 8002cfa:	057c      	lsls	r4, r7, #21
 8002cfc:	0d64      	lsrs	r4, r4, #21
 8002cfe:	e6c2      	b.n	8002a86 <__aeabi_dsub+0x152>
 8002d00:	46ca      	mov	sl, r9
 8002d02:	0022      	movs	r2, r4
 8002d04:	4302      	orrs	r2, r0
 8002d06:	d158      	bne.n	8002dba <__aeabi_dsub+0x486>
 8002d08:	4663      	mov	r3, ip
 8002d0a:	000e      	movs	r6, r1
 8002d0c:	9c02      	ldr	r4, [sp, #8]
 8002d0e:	9303      	str	r3, [sp, #12]
 8002d10:	9b03      	ldr	r3, [sp, #12]
 8002d12:	4657      	mov	r7, sl
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	e7e7      	b.n	8002ce8 <__aeabi_dsub+0x3b4>
 8002d18:	4cc9      	ldr	r4, [pc, #804]	@ (8003040 <__aeabi_dsub+0x70c>)
 8002d1a:	1aff      	subs	r7, r7, r3
 8002d1c:	4014      	ands	r4, r2
 8002d1e:	e692      	b.n	8002a46 <__aeabi_dsub+0x112>
 8002d20:	4dc8      	ldr	r5, [pc, #800]	@ (8003044 <__aeabi_dsub+0x710>)
 8002d22:	1c7a      	adds	r2, r7, #1
 8002d24:	422a      	tst	r2, r5
 8002d26:	d000      	beq.n	8002d2a <__aeabi_dsub+0x3f6>
 8002d28:	e084      	b.n	8002e34 <__aeabi_dsub+0x500>
 8002d2a:	0022      	movs	r2, r4
 8002d2c:	4302      	orrs	r2, r0
 8002d2e:	2f00      	cmp	r7, #0
 8002d30:	d000      	beq.n	8002d34 <__aeabi_dsub+0x400>
 8002d32:	e0ef      	b.n	8002f14 <__aeabi_dsub+0x5e0>
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	d100      	bne.n	8002d3a <__aeabi_dsub+0x406>
 8002d38:	e0e5      	b.n	8002f06 <__aeabi_dsub+0x5d2>
 8002d3a:	4662      	mov	r2, ip
 8002d3c:	9902      	ldr	r1, [sp, #8]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	d100      	bne.n	8002d44 <__aeabi_dsub+0x410>
 8002d42:	e0c5      	b.n	8002ed0 <__aeabi_dsub+0x59c>
 8002d44:	4663      	mov	r3, ip
 8002d46:	18c5      	adds	r5, r0, r3
 8002d48:	468c      	mov	ip, r1
 8002d4a:	4285      	cmp	r5, r0
 8002d4c:	4180      	sbcs	r0, r0
 8002d4e:	4464      	add	r4, ip
 8002d50:	4240      	negs	r0, r0
 8002d52:	1824      	adds	r4, r4, r0
 8002d54:	0223      	lsls	r3, r4, #8
 8002d56:	d502      	bpl.n	8002d5e <__aeabi_dsub+0x42a>
 8002d58:	4bb9      	ldr	r3, [pc, #740]	@ (8003040 <__aeabi_dsub+0x70c>)
 8002d5a:	3701      	adds	r7, #1
 8002d5c:	401c      	ands	r4, r3
 8002d5e:	46ba      	mov	sl, r7
 8002d60:	9503      	str	r5, [sp, #12]
 8002d62:	e7d5      	b.n	8002d10 <__aeabi_dsub+0x3dc>
 8002d64:	4662      	mov	r2, ip
 8002d66:	1a85      	subs	r5, r0, r2
 8002d68:	42a8      	cmp	r0, r5
 8002d6a:	4192      	sbcs	r2, r2
 8002d6c:	4252      	negs	r2, r2
 8002d6e:	4691      	mov	r9, r2
 8002d70:	9b02      	ldr	r3, [sp, #8]
 8002d72:	1ae3      	subs	r3, r4, r3
 8002d74:	001a      	movs	r2, r3
 8002d76:	464b      	mov	r3, r9
 8002d78:	1ad2      	subs	r2, r2, r3
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	4691      	mov	r9, r2
 8002d7e:	021a      	lsls	r2, r3, #8
 8002d80:	d46c      	bmi.n	8002e5c <__aeabi_dsub+0x528>
 8002d82:	464a      	mov	r2, r9
 8002d84:	464c      	mov	r4, r9
 8002d86:	432a      	orrs	r2, r5
 8002d88:	d000      	beq.n	8002d8c <__aeabi_dsub+0x458>
 8002d8a:	e63a      	b.n	8002a02 <__aeabi_dsub+0xce>
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	2400      	movs	r4, #0
 8002d90:	2500      	movs	r5, #0
 8002d92:	e678      	b.n	8002a86 <__aeabi_dsub+0x152>
 8002d94:	9902      	ldr	r1, [sp, #8]
 8002d96:	4653      	mov	r3, sl
 8002d98:	000d      	movs	r5, r1
 8002d9a:	3a20      	subs	r2, #32
 8002d9c:	40d5      	lsrs	r5, r2
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d006      	beq.n	8002db0 <__aeabi_dsub+0x47c>
 8002da2:	2240      	movs	r2, #64	@ 0x40
 8002da4:	1ad2      	subs	r2, r2, r3
 8002da6:	000b      	movs	r3, r1
 8002da8:	4093      	lsls	r3, r2
 8002daa:	4662      	mov	r2, ip
 8002dac:	431a      	orrs	r2, r3
 8002dae:	4693      	mov	fp, r2
 8002db0:	465b      	mov	r3, fp
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	4193      	sbcs	r3, r2
 8002db6:	431d      	orrs	r5, r3
 8002db8:	e619      	b.n	80029ee <__aeabi_dsub+0xba>
 8002dba:	4653      	mov	r3, sl
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d100      	bne.n	8002dc4 <__aeabi_dsub+0x490>
 8002dc2:	e0c6      	b.n	8002f52 <__aeabi_dsub+0x61e>
 8002dc4:	4e9d      	ldr	r6, [pc, #628]	@ (800303c <__aeabi_dsub+0x708>)
 8002dc6:	45b2      	cmp	sl, r6
 8002dc8:	d100      	bne.n	8002dcc <__aeabi_dsub+0x498>
 8002dca:	e6bd      	b.n	8002b48 <__aeabi_dsub+0x214>
 8002dcc:	4688      	mov	r8, r1
 8002dce:	000e      	movs	r6, r1
 8002dd0:	2501      	movs	r5, #1
 8002dd2:	2a38      	cmp	r2, #56	@ 0x38
 8002dd4:	dc10      	bgt.n	8002df8 <__aeabi_dsub+0x4c4>
 8002dd6:	2a1f      	cmp	r2, #31
 8002dd8:	dc7f      	bgt.n	8002eda <__aeabi_dsub+0x5a6>
 8002dda:	2120      	movs	r1, #32
 8002ddc:	0025      	movs	r5, r4
 8002dde:	1a89      	subs	r1, r1, r2
 8002de0:	0007      	movs	r7, r0
 8002de2:	4088      	lsls	r0, r1
 8002de4:	408d      	lsls	r5, r1
 8002de6:	40d7      	lsrs	r7, r2
 8002de8:	40d4      	lsrs	r4, r2
 8002dea:	1e41      	subs	r1, r0, #1
 8002dec:	4188      	sbcs	r0, r1
 8002dee:	9b02      	ldr	r3, [sp, #8]
 8002df0:	433d      	orrs	r5, r7
 8002df2:	1b1b      	subs	r3, r3, r4
 8002df4:	4305      	orrs	r5, r0
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	4662      	mov	r2, ip
 8002dfa:	1b55      	subs	r5, r2, r5
 8002dfc:	45ac      	cmp	ip, r5
 8002dfe:	4192      	sbcs	r2, r2
 8002e00:	9b02      	ldr	r3, [sp, #8]
 8002e02:	4252      	negs	r2, r2
 8002e04:	464f      	mov	r7, r9
 8002e06:	1a9c      	subs	r4, r3, r2
 8002e08:	e5f6      	b.n	80029f8 <__aeabi_dsub+0xc4>
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d000      	beq.n	8002e10 <__aeabi_dsub+0x4dc>
 8002e0e:	e0b7      	b.n	8002f80 <__aeabi_dsub+0x64c>
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	d100      	bne.n	8002e16 <__aeabi_dsub+0x4e2>
 8002e14:	e0f0      	b.n	8002ff8 <__aeabi_dsub+0x6c4>
 8002e16:	2601      	movs	r6, #1
 8002e18:	400e      	ands	r6, r1
 8002e1a:	4663      	mov	r3, ip
 8002e1c:	9802      	ldr	r0, [sp, #8]
 8002e1e:	08d9      	lsrs	r1, r3, #3
 8002e20:	0742      	lsls	r2, r0, #29
 8002e22:	430a      	orrs	r2, r1
 8002e24:	08c4      	lsrs	r4, r0, #3
 8002e26:	e696      	b.n	8002b56 <__aeabi_dsub+0x222>
 8002e28:	4c85      	ldr	r4, [pc, #532]	@ (8003040 <__aeabi_dsub+0x70c>)
 8002e2a:	1aff      	subs	r7, r7, r3
 8002e2c:	4014      	ands	r4, r2
 8002e2e:	0762      	lsls	r2, r4, #29
 8002e30:	08e4      	lsrs	r4, r4, #3
 8002e32:	e760      	b.n	8002cf6 <__aeabi_dsub+0x3c2>
 8002e34:	4981      	ldr	r1, [pc, #516]	@ (800303c <__aeabi_dsub+0x708>)
 8002e36:	428a      	cmp	r2, r1
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x508>
 8002e3a:	e0c9      	b.n	8002fd0 <__aeabi_dsub+0x69c>
 8002e3c:	4663      	mov	r3, ip
 8002e3e:	18c1      	adds	r1, r0, r3
 8002e40:	4281      	cmp	r1, r0
 8002e42:	4180      	sbcs	r0, r0
 8002e44:	9b02      	ldr	r3, [sp, #8]
 8002e46:	4240      	negs	r0, r0
 8002e48:	18e3      	adds	r3, r4, r3
 8002e4a:	181b      	adds	r3, r3, r0
 8002e4c:	07dd      	lsls	r5, r3, #31
 8002e4e:	085c      	lsrs	r4, r3, #1
 8002e50:	2307      	movs	r3, #7
 8002e52:	0849      	lsrs	r1, r1, #1
 8002e54:	430d      	orrs	r5, r1
 8002e56:	0017      	movs	r7, r2
 8002e58:	402b      	ands	r3, r5
 8002e5a:	e710      	b.n	8002c7e <__aeabi_dsub+0x34a>
 8002e5c:	4663      	mov	r3, ip
 8002e5e:	1a1d      	subs	r5, r3, r0
 8002e60:	45ac      	cmp	ip, r5
 8002e62:	4192      	sbcs	r2, r2
 8002e64:	2601      	movs	r6, #1
 8002e66:	9b02      	ldr	r3, [sp, #8]
 8002e68:	4252      	negs	r2, r2
 8002e6a:	1b1c      	subs	r4, r3, r4
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	1aa4      	subs	r4, r4, r2
 8002e70:	400e      	ands	r6, r1
 8002e72:	e5c6      	b.n	8002a02 <__aeabi_dsub+0xce>
 8002e74:	4663      	mov	r3, ip
 8002e76:	18c5      	adds	r5, r0, r3
 8002e78:	9b02      	ldr	r3, [sp, #8]
 8002e7a:	4285      	cmp	r5, r0
 8002e7c:	4180      	sbcs	r0, r0
 8002e7e:	469c      	mov	ip, r3
 8002e80:	4240      	negs	r0, r0
 8002e82:	4464      	add	r4, ip
 8002e84:	1824      	adds	r4, r4, r0
 8002e86:	2701      	movs	r7, #1
 8002e88:	0223      	lsls	r3, r4, #8
 8002e8a:	d400      	bmi.n	8002e8e <__aeabi_dsub+0x55a>
 8002e8c:	e6f5      	b.n	8002c7a <__aeabi_dsub+0x346>
 8002e8e:	2702      	movs	r7, #2
 8002e90:	e641      	b.n	8002b16 <__aeabi_dsub+0x1e2>
 8002e92:	4663      	mov	r3, ip
 8002e94:	1ac5      	subs	r5, r0, r3
 8002e96:	42a8      	cmp	r0, r5
 8002e98:	4180      	sbcs	r0, r0
 8002e9a:	9b02      	ldr	r3, [sp, #8]
 8002e9c:	4240      	negs	r0, r0
 8002e9e:	1ae4      	subs	r4, r4, r3
 8002ea0:	2701      	movs	r7, #1
 8002ea2:	1a24      	subs	r4, r4, r0
 8002ea4:	e5a8      	b.n	80029f8 <__aeabi_dsub+0xc4>
 8002ea6:	9d02      	ldr	r5, [sp, #8]
 8002ea8:	4652      	mov	r2, sl
 8002eaa:	002b      	movs	r3, r5
 8002eac:	3a20      	subs	r2, #32
 8002eae:	40d3      	lsrs	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	4653      	mov	r3, sl
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d006      	beq.n	8002ec6 <__aeabi_dsub+0x592>
 8002eb8:	2240      	movs	r2, #64	@ 0x40
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	002b      	movs	r3, r5
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	4662      	mov	r2, ip
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4693      	mov	fp, r2
 8002ec6:	465d      	mov	r5, fp
 8002ec8:	1e6b      	subs	r3, r5, #1
 8002eca:	419d      	sbcs	r5, r3
 8002ecc:	430d      	orrs	r5, r1
 8002ece:	e615      	b.n	8002afc <__aeabi_dsub+0x1c8>
 8002ed0:	0762      	lsls	r2, r4, #29
 8002ed2:	08c0      	lsrs	r0, r0, #3
 8002ed4:	4302      	orrs	r2, r0
 8002ed6:	08e4      	lsrs	r4, r4, #3
 8002ed8:	e70d      	b.n	8002cf6 <__aeabi_dsub+0x3c2>
 8002eda:	0011      	movs	r1, r2
 8002edc:	0027      	movs	r7, r4
 8002ede:	3920      	subs	r1, #32
 8002ee0:	40cf      	lsrs	r7, r1
 8002ee2:	2a20      	cmp	r2, #32
 8002ee4:	d005      	beq.n	8002ef2 <__aeabi_dsub+0x5be>
 8002ee6:	2140      	movs	r1, #64	@ 0x40
 8002ee8:	1a8a      	subs	r2, r1, r2
 8002eea:	4094      	lsls	r4, r2
 8002eec:	0025      	movs	r5, r4
 8002eee:	4305      	orrs	r5, r0
 8002ef0:	9503      	str	r5, [sp, #12]
 8002ef2:	9d03      	ldr	r5, [sp, #12]
 8002ef4:	1e6a      	subs	r2, r5, #1
 8002ef6:	4195      	sbcs	r5, r2
 8002ef8:	433d      	orrs	r5, r7
 8002efa:	e77d      	b.n	8002df8 <__aeabi_dsub+0x4c4>
 8002efc:	2a00      	cmp	r2, #0
 8002efe:	d100      	bne.n	8002f02 <__aeabi_dsub+0x5ce>
 8002f00:	e744      	b.n	8002d8c <__aeabi_dsub+0x458>
 8002f02:	2601      	movs	r6, #1
 8002f04:	400e      	ands	r6, r1
 8002f06:	4663      	mov	r3, ip
 8002f08:	08d9      	lsrs	r1, r3, #3
 8002f0a:	9b02      	ldr	r3, [sp, #8]
 8002f0c:	075a      	lsls	r2, r3, #29
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	08dc      	lsrs	r4, r3, #3
 8002f12:	e6f0      	b.n	8002cf6 <__aeabi_dsub+0x3c2>
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d028      	beq.n	8002f6a <__aeabi_dsub+0x636>
 8002f18:	4662      	mov	r2, ip
 8002f1a:	9f02      	ldr	r7, [sp, #8]
 8002f1c:	08c0      	lsrs	r0, r0, #3
 8002f1e:	433a      	orrs	r2, r7
 8002f20:	d100      	bne.n	8002f24 <__aeabi_dsub+0x5f0>
 8002f22:	e6dc      	b.n	8002cde <__aeabi_dsub+0x3aa>
 8002f24:	0762      	lsls	r2, r4, #29
 8002f26:	4310      	orrs	r0, r2
 8002f28:	2280      	movs	r2, #128	@ 0x80
 8002f2a:	08e4      	lsrs	r4, r4, #3
 8002f2c:	0312      	lsls	r2, r2, #12
 8002f2e:	4214      	tst	r4, r2
 8002f30:	d009      	beq.n	8002f46 <__aeabi_dsub+0x612>
 8002f32:	08fd      	lsrs	r5, r7, #3
 8002f34:	4215      	tst	r5, r2
 8002f36:	d106      	bne.n	8002f46 <__aeabi_dsub+0x612>
 8002f38:	4663      	mov	r3, ip
 8002f3a:	2601      	movs	r6, #1
 8002f3c:	002c      	movs	r4, r5
 8002f3e:	08d8      	lsrs	r0, r3, #3
 8002f40:	077b      	lsls	r3, r7, #29
 8002f42:	4318      	orrs	r0, r3
 8002f44:	400e      	ands	r6, r1
 8002f46:	0f42      	lsrs	r2, r0, #29
 8002f48:	00c0      	lsls	r0, r0, #3
 8002f4a:	08c0      	lsrs	r0, r0, #3
 8002f4c:	0752      	lsls	r2, r2, #29
 8002f4e:	4302      	orrs	r2, r0
 8002f50:	e601      	b.n	8002b56 <__aeabi_dsub+0x222>
 8002f52:	4663      	mov	r3, ip
 8002f54:	1a1d      	subs	r5, r3, r0
 8002f56:	45ac      	cmp	ip, r5
 8002f58:	4192      	sbcs	r2, r2
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	4252      	negs	r2, r2
 8002f5e:	1b1c      	subs	r4, r3, r4
 8002f60:	000e      	movs	r6, r1
 8002f62:	4688      	mov	r8, r1
 8002f64:	2701      	movs	r7, #1
 8002f66:	1aa4      	subs	r4, r4, r2
 8002f68:	e546      	b.n	80029f8 <__aeabi_dsub+0xc4>
 8002f6a:	4663      	mov	r3, ip
 8002f6c:	08d9      	lsrs	r1, r3, #3
 8002f6e:	9b02      	ldr	r3, [sp, #8]
 8002f70:	075a      	lsls	r2, r3, #29
 8002f72:	430a      	orrs	r2, r1
 8002f74:	08dc      	lsrs	r4, r3, #3
 8002f76:	e5ee      	b.n	8002b56 <__aeabi_dsub+0x222>
 8002f78:	4663      	mov	r3, ip
 8002f7a:	9c02      	ldr	r4, [sp, #8]
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	e6c7      	b.n	8002d10 <__aeabi_dsub+0x3dc>
 8002f80:	08c0      	lsrs	r0, r0, #3
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d100      	bne.n	8002f88 <__aeabi_dsub+0x654>
 8002f86:	e6aa      	b.n	8002cde <__aeabi_dsub+0x3aa>
 8002f88:	0762      	lsls	r2, r4, #29
 8002f8a:	4310      	orrs	r0, r2
 8002f8c:	2280      	movs	r2, #128	@ 0x80
 8002f8e:	08e4      	lsrs	r4, r4, #3
 8002f90:	0312      	lsls	r2, r2, #12
 8002f92:	4214      	tst	r4, r2
 8002f94:	d0d7      	beq.n	8002f46 <__aeabi_dsub+0x612>
 8002f96:	9f02      	ldr	r7, [sp, #8]
 8002f98:	08fd      	lsrs	r5, r7, #3
 8002f9a:	4215      	tst	r5, r2
 8002f9c:	d1d3      	bne.n	8002f46 <__aeabi_dsub+0x612>
 8002f9e:	4663      	mov	r3, ip
 8002fa0:	2601      	movs	r6, #1
 8002fa2:	08d8      	lsrs	r0, r3, #3
 8002fa4:	077b      	lsls	r3, r7, #29
 8002fa6:	002c      	movs	r4, r5
 8002fa8:	4318      	orrs	r0, r3
 8002faa:	400e      	ands	r6, r1
 8002fac:	e7cb      	b.n	8002f46 <__aeabi_dsub+0x612>
 8002fae:	000a      	movs	r2, r1
 8002fb0:	0027      	movs	r7, r4
 8002fb2:	3a20      	subs	r2, #32
 8002fb4:	40d7      	lsrs	r7, r2
 8002fb6:	2920      	cmp	r1, #32
 8002fb8:	d005      	beq.n	8002fc6 <__aeabi_dsub+0x692>
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	1a52      	subs	r2, r2, r1
 8002fbe:	4094      	lsls	r4, r2
 8002fc0:	0025      	movs	r5, r4
 8002fc2:	4305      	orrs	r5, r0
 8002fc4:	9503      	str	r5, [sp, #12]
 8002fc6:	9d03      	ldr	r5, [sp, #12]
 8002fc8:	1e6a      	subs	r2, r5, #1
 8002fca:	4195      	sbcs	r5, r2
 8002fcc:	432f      	orrs	r7, r5
 8002fce:	e610      	b.n	8002bf2 <__aeabi_dsub+0x2be>
 8002fd0:	0014      	movs	r4, r2
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	e556      	b.n	8002a86 <__aeabi_dsub+0x152>
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4460      	add	r0, ip
 8002fdc:	4699      	mov	r9, r3
 8002fde:	4560      	cmp	r0, ip
 8002fe0:	4192      	sbcs	r2, r2
 8002fe2:	444c      	add	r4, r9
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	18a4      	adds	r4, r4, r2
 8002fea:	e74c      	b.n	8002e86 <__aeabi_dsub+0x552>
 8002fec:	001a      	movs	r2, r3
 8002fee:	001c      	movs	r4, r3
 8002ff0:	432a      	orrs	r2, r5
 8002ff2:	d000      	beq.n	8002ff6 <__aeabi_dsub+0x6c2>
 8002ff4:	e6b3      	b.n	8002d5e <__aeabi_dsub+0x42a>
 8002ff6:	e6c9      	b.n	8002d8c <__aeabi_dsub+0x458>
 8002ff8:	2480      	movs	r4, #128	@ 0x80
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	0324      	lsls	r4, r4, #12
 8002ffe:	e5ae      	b.n	8002b5e <__aeabi_dsub+0x22a>
 8003000:	2120      	movs	r1, #32
 8003002:	2500      	movs	r5, #0
 8003004:	1a09      	subs	r1, r1, r0
 8003006:	e517      	b.n	8002a38 <__aeabi_dsub+0x104>
 8003008:	2200      	movs	r2, #0
 800300a:	2500      	movs	r5, #0
 800300c:	4c0b      	ldr	r4, [pc, #44]	@ (800303c <__aeabi_dsub+0x708>)
 800300e:	e53a      	b.n	8002a86 <__aeabi_dsub+0x152>
 8003010:	2d00      	cmp	r5, #0
 8003012:	d100      	bne.n	8003016 <__aeabi_dsub+0x6e2>
 8003014:	e5f6      	b.n	8002c04 <__aeabi_dsub+0x2d0>
 8003016:	464b      	mov	r3, r9
 8003018:	1bda      	subs	r2, r3, r7
 800301a:	4692      	mov	sl, r2
 800301c:	2f00      	cmp	r7, #0
 800301e:	d100      	bne.n	8003022 <__aeabi_dsub+0x6ee>
 8003020:	e66f      	b.n	8002d02 <__aeabi_dsub+0x3ce>
 8003022:	2a38      	cmp	r2, #56	@ 0x38
 8003024:	dc05      	bgt.n	8003032 <__aeabi_dsub+0x6fe>
 8003026:	2680      	movs	r6, #128	@ 0x80
 8003028:	0436      	lsls	r6, r6, #16
 800302a:	4334      	orrs	r4, r6
 800302c:	4688      	mov	r8, r1
 800302e:	000e      	movs	r6, r1
 8003030:	e6d1      	b.n	8002dd6 <__aeabi_dsub+0x4a2>
 8003032:	4688      	mov	r8, r1
 8003034:	000e      	movs	r6, r1
 8003036:	2501      	movs	r5, #1
 8003038:	e6de      	b.n	8002df8 <__aeabi_dsub+0x4c4>
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	000007ff 	.word	0x000007ff
 8003040:	ff7fffff 	.word	0xff7fffff
 8003044:	000007fe 	.word	0x000007fe
 8003048:	2d00      	cmp	r5, #0
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x71a>
 800304c:	e668      	b.n	8002d20 <__aeabi_dsub+0x3ec>
 800304e:	464b      	mov	r3, r9
 8003050:	1bd9      	subs	r1, r3, r7
 8003052:	2f00      	cmp	r7, #0
 8003054:	d101      	bne.n	800305a <__aeabi_dsub+0x726>
 8003056:	468a      	mov	sl, r1
 8003058:	e5a7      	b.n	8002baa <__aeabi_dsub+0x276>
 800305a:	2701      	movs	r7, #1
 800305c:	2938      	cmp	r1, #56	@ 0x38
 800305e:	dd00      	ble.n	8003062 <__aeabi_dsub+0x72e>
 8003060:	e5c7      	b.n	8002bf2 <__aeabi_dsub+0x2be>
 8003062:	2280      	movs	r2, #128	@ 0x80
 8003064:	0412      	lsls	r2, r2, #16
 8003066:	4314      	orrs	r4, r2
 8003068:	e5af      	b.n	8002bca <__aeabi_dsub+0x296>
 800306a:	46c0      	nop			@ (mov r8, r8)

0800306c <__aeabi_dcmpun>:
 800306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306e:	46c6      	mov	lr, r8
 8003070:	031e      	lsls	r6, r3, #12
 8003072:	0b36      	lsrs	r6, r6, #12
 8003074:	46b0      	mov	r8, r6
 8003076:	4e0d      	ldr	r6, [pc, #52]	@ (80030ac <__aeabi_dcmpun+0x40>)
 8003078:	030c      	lsls	r4, r1, #12
 800307a:	004d      	lsls	r5, r1, #1
 800307c:	005f      	lsls	r7, r3, #1
 800307e:	b500      	push	{lr}
 8003080:	0b24      	lsrs	r4, r4, #12
 8003082:	0d6d      	lsrs	r5, r5, #21
 8003084:	0d7f      	lsrs	r7, r7, #21
 8003086:	42b5      	cmp	r5, r6
 8003088:	d00b      	beq.n	80030a2 <__aeabi_dcmpun+0x36>
 800308a:	4908      	ldr	r1, [pc, #32]	@ (80030ac <__aeabi_dcmpun+0x40>)
 800308c:	2000      	movs	r0, #0
 800308e:	428f      	cmp	r7, r1
 8003090:	d104      	bne.n	800309c <__aeabi_dcmpun+0x30>
 8003092:	4646      	mov	r6, r8
 8003094:	4316      	orrs	r6, r2
 8003096:	0030      	movs	r0, r6
 8003098:	1e43      	subs	r3, r0, #1
 800309a:	4198      	sbcs	r0, r3
 800309c:	bc80      	pop	{r7}
 800309e:	46b8      	mov	r8, r7
 80030a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a2:	4304      	orrs	r4, r0
 80030a4:	2001      	movs	r0, #1
 80030a6:	2c00      	cmp	r4, #0
 80030a8:	d1f8      	bne.n	800309c <__aeabi_dcmpun+0x30>
 80030aa:	e7ee      	b.n	800308a <__aeabi_dcmpun+0x1e>
 80030ac:	000007ff 	.word	0x000007ff

080030b0 <__aeabi_d2iz>:
 80030b0:	000b      	movs	r3, r1
 80030b2:	0002      	movs	r2, r0
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4d16      	ldr	r5, [pc, #88]	@ (8003110 <__aeabi_d2iz+0x60>)
 80030b8:	030c      	lsls	r4, r1, #12
 80030ba:	b082      	sub	sp, #8
 80030bc:	0049      	lsls	r1, r1, #1
 80030be:	2000      	movs	r0, #0
 80030c0:	9200      	str	r2, [sp, #0]
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	0b24      	lsrs	r4, r4, #12
 80030c6:	0d49      	lsrs	r1, r1, #21
 80030c8:	0fde      	lsrs	r6, r3, #31
 80030ca:	42a9      	cmp	r1, r5
 80030cc:	dd04      	ble.n	80030d8 <__aeabi_d2iz+0x28>
 80030ce:	4811      	ldr	r0, [pc, #68]	@ (8003114 <__aeabi_d2iz+0x64>)
 80030d0:	4281      	cmp	r1, r0
 80030d2:	dd03      	ble.n	80030dc <__aeabi_d2iz+0x2c>
 80030d4:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <__aeabi_d2iz+0x68>)
 80030d6:	18f0      	adds	r0, r6, r3
 80030d8:	b002      	add	sp, #8
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	2080      	movs	r0, #128	@ 0x80
 80030de:	0340      	lsls	r0, r0, #13
 80030e0:	4320      	orrs	r0, r4
 80030e2:	4c0e      	ldr	r4, [pc, #56]	@ (800311c <__aeabi_d2iz+0x6c>)
 80030e4:	1a64      	subs	r4, r4, r1
 80030e6:	2c1f      	cmp	r4, #31
 80030e8:	dd08      	ble.n	80030fc <__aeabi_d2iz+0x4c>
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <__aeabi_d2iz+0x70>)
 80030ec:	1a5b      	subs	r3, r3, r1
 80030ee:	40d8      	lsrs	r0, r3
 80030f0:	0003      	movs	r3, r0
 80030f2:	4258      	negs	r0, r3
 80030f4:	2e00      	cmp	r6, #0
 80030f6:	d1ef      	bne.n	80030d8 <__aeabi_d2iz+0x28>
 80030f8:	0018      	movs	r0, r3
 80030fa:	e7ed      	b.n	80030d8 <__aeabi_d2iz+0x28>
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <__aeabi_d2iz+0x74>)
 80030fe:	9a00      	ldr	r2, [sp, #0]
 8003100:	469c      	mov	ip, r3
 8003102:	0003      	movs	r3, r0
 8003104:	4461      	add	r1, ip
 8003106:	408b      	lsls	r3, r1
 8003108:	40e2      	lsrs	r2, r4
 800310a:	4313      	orrs	r3, r2
 800310c:	e7f1      	b.n	80030f2 <__aeabi_d2iz+0x42>
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	000003fe 	.word	0x000003fe
 8003114:	0000041d 	.word	0x0000041d
 8003118:	7fffffff 	.word	0x7fffffff
 800311c:	00000433 	.word	0x00000433
 8003120:	00000413 	.word	0x00000413
 8003124:	fffffbed 	.word	0xfffffbed

08003128 <__aeabi_i2d>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	2800      	cmp	r0, #0
 800312c:	d016      	beq.n	800315c <__aeabi_i2d+0x34>
 800312e:	17c3      	asrs	r3, r0, #31
 8003130:	18c5      	adds	r5, r0, r3
 8003132:	405d      	eors	r5, r3
 8003134:	0fc4      	lsrs	r4, r0, #31
 8003136:	0028      	movs	r0, r5
 8003138:	f000 f914 	bl	8003364 <__clzsi2>
 800313c:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <__aeabi_i2d+0x58>)
 800313e:	1a1b      	subs	r3, r3, r0
 8003140:	055b      	lsls	r3, r3, #21
 8003142:	0d5b      	lsrs	r3, r3, #21
 8003144:	280a      	cmp	r0, #10
 8003146:	dc14      	bgt.n	8003172 <__aeabi_i2d+0x4a>
 8003148:	0002      	movs	r2, r0
 800314a:	002e      	movs	r6, r5
 800314c:	3215      	adds	r2, #21
 800314e:	4096      	lsls	r6, r2
 8003150:	220b      	movs	r2, #11
 8003152:	1a12      	subs	r2, r2, r0
 8003154:	40d5      	lsrs	r5, r2
 8003156:	032d      	lsls	r5, r5, #12
 8003158:	0b2d      	lsrs	r5, r5, #12
 800315a:	e003      	b.n	8003164 <__aeabi_i2d+0x3c>
 800315c:	2400      	movs	r4, #0
 800315e:	2300      	movs	r3, #0
 8003160:	2500      	movs	r5, #0
 8003162:	2600      	movs	r6, #0
 8003164:	051b      	lsls	r3, r3, #20
 8003166:	432b      	orrs	r3, r5
 8003168:	07e4      	lsls	r4, r4, #31
 800316a:	4323      	orrs	r3, r4
 800316c:	0030      	movs	r0, r6
 800316e:	0019      	movs	r1, r3
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	380b      	subs	r0, #11
 8003174:	4085      	lsls	r5, r0
 8003176:	032d      	lsls	r5, r5, #12
 8003178:	2600      	movs	r6, #0
 800317a:	0b2d      	lsrs	r5, r5, #12
 800317c:	e7f2      	b.n	8003164 <__aeabi_i2d+0x3c>
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	0000041e 	.word	0x0000041e

08003184 <__aeabi_ui2d>:
 8003184:	b510      	push	{r4, lr}
 8003186:	1e04      	subs	r4, r0, #0
 8003188:	d010      	beq.n	80031ac <__aeabi_ui2d+0x28>
 800318a:	f000 f8eb 	bl	8003364 <__clzsi2>
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <__aeabi_ui2d+0x44>)
 8003190:	1a1b      	subs	r3, r3, r0
 8003192:	055b      	lsls	r3, r3, #21
 8003194:	0d5b      	lsrs	r3, r3, #21
 8003196:	280a      	cmp	r0, #10
 8003198:	dc0f      	bgt.n	80031ba <__aeabi_ui2d+0x36>
 800319a:	220b      	movs	r2, #11
 800319c:	0021      	movs	r1, r4
 800319e:	1a12      	subs	r2, r2, r0
 80031a0:	40d1      	lsrs	r1, r2
 80031a2:	3015      	adds	r0, #21
 80031a4:	030a      	lsls	r2, r1, #12
 80031a6:	4084      	lsls	r4, r0
 80031a8:	0b12      	lsrs	r2, r2, #12
 80031aa:	e001      	b.n	80031b0 <__aeabi_ui2d+0x2c>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2200      	movs	r2, #0
 80031b0:	051b      	lsls	r3, r3, #20
 80031b2:	4313      	orrs	r3, r2
 80031b4:	0020      	movs	r0, r4
 80031b6:	0019      	movs	r1, r3
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	0022      	movs	r2, r4
 80031bc:	380b      	subs	r0, #11
 80031be:	4082      	lsls	r2, r0
 80031c0:	0312      	lsls	r2, r2, #12
 80031c2:	2400      	movs	r4, #0
 80031c4:	0b12      	lsrs	r2, r2, #12
 80031c6:	e7f3      	b.n	80031b0 <__aeabi_ui2d+0x2c>
 80031c8:	0000041e 	.word	0x0000041e

080031cc <__aeabi_f2d>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	0242      	lsls	r2, r0, #9
 80031d0:	0043      	lsls	r3, r0, #1
 80031d2:	0fc4      	lsrs	r4, r0, #31
 80031d4:	20fe      	movs	r0, #254	@ 0xfe
 80031d6:	0e1b      	lsrs	r3, r3, #24
 80031d8:	1c59      	adds	r1, r3, #1
 80031da:	0a55      	lsrs	r5, r2, #9
 80031dc:	4208      	tst	r0, r1
 80031de:	d00c      	beq.n	80031fa <__aeabi_f2d+0x2e>
 80031e0:	21e0      	movs	r1, #224	@ 0xe0
 80031e2:	0089      	lsls	r1, r1, #2
 80031e4:	468c      	mov	ip, r1
 80031e6:	076d      	lsls	r5, r5, #29
 80031e8:	0b12      	lsrs	r2, r2, #12
 80031ea:	4463      	add	r3, ip
 80031ec:	051b      	lsls	r3, r3, #20
 80031ee:	4313      	orrs	r3, r2
 80031f0:	07e4      	lsls	r4, r4, #31
 80031f2:	4323      	orrs	r3, r4
 80031f4:	0028      	movs	r0, r5
 80031f6:	0019      	movs	r1, r3
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <__aeabi_f2d+0x5c>
 80031fe:	2d00      	cmp	r5, #0
 8003200:	d01b      	beq.n	800323a <__aeabi_f2d+0x6e>
 8003202:	0028      	movs	r0, r5
 8003204:	f000 f8ae 	bl	8003364 <__clzsi2>
 8003208:	280a      	cmp	r0, #10
 800320a:	dc1c      	bgt.n	8003246 <__aeabi_f2d+0x7a>
 800320c:	230b      	movs	r3, #11
 800320e:	002a      	movs	r2, r5
 8003210:	1a1b      	subs	r3, r3, r0
 8003212:	40da      	lsrs	r2, r3
 8003214:	0003      	movs	r3, r0
 8003216:	3315      	adds	r3, #21
 8003218:	409d      	lsls	r5, r3
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <__aeabi_f2d+0x88>)
 800321c:	0312      	lsls	r2, r2, #12
 800321e:	1a1b      	subs	r3, r3, r0
 8003220:	055b      	lsls	r3, r3, #21
 8003222:	0b12      	lsrs	r2, r2, #12
 8003224:	0d5b      	lsrs	r3, r3, #21
 8003226:	e7e1      	b.n	80031ec <__aeabi_f2d+0x20>
 8003228:	2d00      	cmp	r5, #0
 800322a:	d009      	beq.n	8003240 <__aeabi_f2d+0x74>
 800322c:	0b13      	lsrs	r3, r2, #12
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	0312      	lsls	r2, r2, #12
 8003232:	431a      	orrs	r2, r3
 8003234:	076d      	lsls	r5, r5, #29
 8003236:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <__aeabi_f2d+0x8c>)
 8003238:	e7d8      	b.n	80031ec <__aeabi_f2d+0x20>
 800323a:	2300      	movs	r3, #0
 800323c:	2200      	movs	r2, #0
 800323e:	e7d5      	b.n	80031ec <__aeabi_f2d+0x20>
 8003240:	2200      	movs	r2, #0
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <__aeabi_f2d+0x8c>)
 8003244:	e7d2      	b.n	80031ec <__aeabi_f2d+0x20>
 8003246:	0003      	movs	r3, r0
 8003248:	002a      	movs	r2, r5
 800324a:	3b0b      	subs	r3, #11
 800324c:	409a      	lsls	r2, r3
 800324e:	2500      	movs	r5, #0
 8003250:	e7e3      	b.n	800321a <__aeabi_f2d+0x4e>
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	00000389 	.word	0x00000389
 8003258:	000007ff 	.word	0x000007ff

0800325c <__aeabi_d2f>:
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	004b      	lsls	r3, r1, #1
 8003260:	030f      	lsls	r7, r1, #12
 8003262:	0d5b      	lsrs	r3, r3, #21
 8003264:	4c3b      	ldr	r4, [pc, #236]	@ (8003354 <__aeabi_d2f+0xf8>)
 8003266:	0f45      	lsrs	r5, r0, #29
 8003268:	b083      	sub	sp, #12
 800326a:	0a7f      	lsrs	r7, r7, #9
 800326c:	1c5e      	adds	r6, r3, #1
 800326e:	432f      	orrs	r7, r5
 8003270:	9000      	str	r0, [sp, #0]
 8003272:	9101      	str	r1, [sp, #4]
 8003274:	0fca      	lsrs	r2, r1, #31
 8003276:	00c5      	lsls	r5, r0, #3
 8003278:	4226      	tst	r6, r4
 800327a:	d00b      	beq.n	8003294 <__aeabi_d2f+0x38>
 800327c:	4936      	ldr	r1, [pc, #216]	@ (8003358 <__aeabi_d2f+0xfc>)
 800327e:	185c      	adds	r4, r3, r1
 8003280:	2cfe      	cmp	r4, #254	@ 0xfe
 8003282:	dd13      	ble.n	80032ac <__aeabi_d2f+0x50>
 8003284:	20ff      	movs	r0, #255	@ 0xff
 8003286:	2300      	movs	r3, #0
 8003288:	05c0      	lsls	r0, r0, #23
 800328a:	4318      	orrs	r0, r3
 800328c:	07d2      	lsls	r2, r2, #31
 800328e:	4310      	orrs	r0, r2
 8003290:	b003      	add	sp, #12
 8003292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <__aeabi_d2f+0x42>
 8003298:	2000      	movs	r0, #0
 800329a:	2300      	movs	r3, #0
 800329c:	e7f4      	b.n	8003288 <__aeabi_d2f+0x2c>
 800329e:	433d      	orrs	r5, r7
 80032a0:	d0f0      	beq.n	8003284 <__aeabi_d2f+0x28>
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	03db      	lsls	r3, r3, #15
 80032a6:	20ff      	movs	r0, #255	@ 0xff
 80032a8:	433b      	orrs	r3, r7
 80032aa:	e7ed      	b.n	8003288 <__aeabi_d2f+0x2c>
 80032ac:	2c00      	cmp	r4, #0
 80032ae:	dd14      	ble.n	80032da <__aeabi_d2f+0x7e>
 80032b0:	9b00      	ldr	r3, [sp, #0]
 80032b2:	00ff      	lsls	r7, r7, #3
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	1e58      	subs	r0, r3, #1
 80032b8:	4183      	sbcs	r3, r0
 80032ba:	0f69      	lsrs	r1, r5, #29
 80032bc:	433b      	orrs	r3, r7
 80032be:	430b      	orrs	r3, r1
 80032c0:	0759      	lsls	r1, r3, #29
 80032c2:	d041      	beq.n	8003348 <__aeabi_d2f+0xec>
 80032c4:	210f      	movs	r1, #15
 80032c6:	4019      	ands	r1, r3
 80032c8:	2904      	cmp	r1, #4
 80032ca:	d028      	beq.n	800331e <__aeabi_d2f+0xc2>
 80032cc:	3304      	adds	r3, #4
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	d525      	bpl.n	800331e <__aeabi_d2f+0xc2>
 80032d2:	3401      	adds	r4, #1
 80032d4:	2300      	movs	r3, #0
 80032d6:	b2e0      	uxtb	r0, r4
 80032d8:	e7d6      	b.n	8003288 <__aeabi_d2f+0x2c>
 80032da:	0021      	movs	r1, r4
 80032dc:	3117      	adds	r1, #23
 80032de:	dbdb      	blt.n	8003298 <__aeabi_d2f+0x3c>
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	201e      	movs	r0, #30
 80032e4:	0409      	lsls	r1, r1, #16
 80032e6:	4339      	orrs	r1, r7
 80032e8:	1b00      	subs	r0, r0, r4
 80032ea:	281f      	cmp	r0, #31
 80032ec:	dd1b      	ble.n	8003326 <__aeabi_d2f+0xca>
 80032ee:	2602      	movs	r6, #2
 80032f0:	4276      	negs	r6, r6
 80032f2:	1b34      	subs	r4, r6, r4
 80032f4:	000e      	movs	r6, r1
 80032f6:	40e6      	lsrs	r6, r4
 80032f8:	0034      	movs	r4, r6
 80032fa:	2820      	cmp	r0, #32
 80032fc:	d004      	beq.n	8003308 <__aeabi_d2f+0xac>
 80032fe:	4817      	ldr	r0, [pc, #92]	@ (800335c <__aeabi_d2f+0x100>)
 8003300:	4684      	mov	ip, r0
 8003302:	4463      	add	r3, ip
 8003304:	4099      	lsls	r1, r3
 8003306:	430d      	orrs	r5, r1
 8003308:	002b      	movs	r3, r5
 800330a:	1e59      	subs	r1, r3, #1
 800330c:	418b      	sbcs	r3, r1
 800330e:	4323      	orrs	r3, r4
 8003310:	0759      	lsls	r1, r3, #29
 8003312:	d015      	beq.n	8003340 <__aeabi_d2f+0xe4>
 8003314:	210f      	movs	r1, #15
 8003316:	2400      	movs	r4, #0
 8003318:	4019      	ands	r1, r3
 800331a:	2904      	cmp	r1, #4
 800331c:	d117      	bne.n	800334e <__aeabi_d2f+0xf2>
 800331e:	019b      	lsls	r3, r3, #6
 8003320:	0a5b      	lsrs	r3, r3, #9
 8003322:	b2e0      	uxtb	r0, r4
 8003324:	e7b0      	b.n	8003288 <__aeabi_d2f+0x2c>
 8003326:	4c0e      	ldr	r4, [pc, #56]	@ (8003360 <__aeabi_d2f+0x104>)
 8003328:	191c      	adds	r4, r3, r4
 800332a:	002b      	movs	r3, r5
 800332c:	40a5      	lsls	r5, r4
 800332e:	40c3      	lsrs	r3, r0
 8003330:	40a1      	lsls	r1, r4
 8003332:	1e68      	subs	r0, r5, #1
 8003334:	4185      	sbcs	r5, r0
 8003336:	4329      	orrs	r1, r5
 8003338:	430b      	orrs	r3, r1
 800333a:	2400      	movs	r4, #0
 800333c:	0759      	lsls	r1, r3, #29
 800333e:	d1c1      	bne.n	80032c4 <__aeabi_d2f+0x68>
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	2000      	movs	r0, #0
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	e79f      	b.n	8003288 <__aeabi_d2f+0x2c>
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	b2e0      	uxtb	r0, r4
 800334c:	e79c      	b.n	8003288 <__aeabi_d2f+0x2c>
 800334e:	3304      	adds	r3, #4
 8003350:	e7e5      	b.n	800331e <__aeabi_d2f+0xc2>
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	000007fe 	.word	0x000007fe
 8003358:	fffffc80 	.word	0xfffffc80
 800335c:	fffffca2 	.word	0xfffffca2
 8003360:	fffffc82 	.word	0xfffffc82

08003364 <__clzsi2>:
 8003364:	211c      	movs	r1, #28
 8003366:	2301      	movs	r3, #1
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	4298      	cmp	r0, r3
 800336c:	d301      	bcc.n	8003372 <__clzsi2+0xe>
 800336e:	0c00      	lsrs	r0, r0, #16
 8003370:	3910      	subs	r1, #16
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	4298      	cmp	r0, r3
 8003376:	d301      	bcc.n	800337c <__clzsi2+0x18>
 8003378:	0a00      	lsrs	r0, r0, #8
 800337a:	3908      	subs	r1, #8
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	4298      	cmp	r0, r3
 8003380:	d301      	bcc.n	8003386 <__clzsi2+0x22>
 8003382:	0900      	lsrs	r0, r0, #4
 8003384:	3904      	subs	r1, #4
 8003386:	a202      	add	r2, pc, #8	@ (adr r2, 8003390 <__clzsi2+0x2c>)
 8003388:	5c10      	ldrb	r0, [r2, r0]
 800338a:	1840      	adds	r0, r0, r1
 800338c:	4770      	bx	lr
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	02020304 	.word	0x02020304
 8003394:	01010101 	.word	0x01010101
	...

080033a0 <IbusData>:
{
	return iBus->FailSafe != 0;
}

void IbusData(uint16_t* ibus_data, int IBUS_USER_CHANNELS, uint8_t* rxBuf)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
	int ch_index,bf_index;
	for(ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	2302      	movs	r3, #2
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e019      	b.n	80033ea <IbusData+0x4a>
		ibus_data[ch_index] = rxBuf[bf_index + 1] << 8 | rxBuf[bf_index];
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	3301      	adds	r3, #1
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	18d3      	adds	r3, r2, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	b21a      	sxth	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	18cb      	adds	r3, r1, r3
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b219      	sxth	r1, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	18d3      	adds	r3, r2, r3
 80033da:	b28a      	uxth	r2, r1
 80033dc:	801a      	strh	r2, [r3, #0]
	for(ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	3302      	adds	r3, #2
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dbe1      	blt.n	80033b6 <IbusData+0x16>
}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b006      	add	sp, #24
 80033fa:	bd80      	pop	{r7, pc}

080033fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	0018      	movs	r0, r3
 8003406:	230c      	movs	r3, #12
 8003408:	001a      	movs	r2, r3
 800340a:	2100      	movs	r1, #0
 800340c:	f009 fc32 	bl	800cc74 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003410:	4b25      	ldr	r3, [pc, #148]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003412:	4a26      	ldr	r2, [pc, #152]	@ (80034ac <MX_ADC_Init+0xb0>)
 8003414:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003416:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003418:	2200      	movs	r2, #0
 800341a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800341c:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <MX_ADC_Init+0xac>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003422:	4b21      	ldr	r3, [pc, #132]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003424:	2200      	movs	r2, #0
 8003426:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003428:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <MX_ADC_Init+0xac>)
 800342a:	2201      	movs	r2, #1
 800342c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800342e:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003430:	2204      	movs	r2, #4
 8003432:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003434:	4b1c      	ldr	r3, [pc, #112]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003436:	2200      	movs	r2, #0
 8003438:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800343a:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <MX_ADC_Init+0xac>)
 800343c:	2200      	movs	r2, #0
 800343e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003442:	2200      	movs	r2, #0
 8003444:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003446:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003448:	2200      	movs	r2, #0
 800344a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800344c:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <MX_ADC_Init+0xac>)
 800344e:	22c2      	movs	r2, #194	@ 0xc2
 8003450:	32ff      	adds	r2, #255	@ 0xff
 8003452:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003456:	2200      	movs	r2, #0
 8003458:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800345a:	4b13      	ldr	r3, [pc, #76]	@ (80034a8 <MX_ADC_Init+0xac>)
 800345c:	2224      	movs	r2, #36	@ 0x24
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003464:	2201      	movs	r2, #1
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <MX_ADC_Init+0xac>)
 800346a:	0018      	movs	r0, r3
 800346c:	f003 fa9a 	bl	80069a4 <HAL_ADC_Init>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d001      	beq.n	8003478 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003474:	f002 fdf2 	bl	800605c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	2280      	movs	r2, #128	@ 0x80
 8003482:	0152      	lsls	r2, r2, #5
 8003484:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	2207      	movs	r2, #7
 800348a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800348c:	1d3a      	adds	r2, r7, #4
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <MX_ADC_Init+0xac>)
 8003490:	0011      	movs	r1, r2
 8003492:	0018      	movs	r0, r3
 8003494:	f003 fcfe 	bl	8006e94 <HAL_ADC_ConfigChannel>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800349c:	f002 fdde 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	2000021c 	.word	0x2000021c
 80034ac:	40012400 	.word	0x40012400

080034b0 <MX_GPIO_Init>:
#include "stm32f0xx_hal.h"

#include "gpio.h"

void MX_GPIO_Init(void)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b08b      	sub	sp, #44	@ 0x2c
 80034b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b6:	2414      	movs	r4, #20
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	0018      	movs	r0, r3
 80034bc:	2314      	movs	r3, #20
 80034be:	001a      	movs	r2, r3
 80034c0:	2100      	movs	r1, #0
 80034c2:	f009 fbd7 	bl	800cc74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034c6:	4b37      	ldr	r3, [pc, #220]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 80034cc:	2180      	movs	r1, #128	@ 0x80
 80034ce:	03c9      	lsls	r1, r1, #15
 80034d0:	430a      	orrs	r2, r1
 80034d2:	615a      	str	r2, [r3, #20]
 80034d4:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	03db      	lsls	r3, r3, #15
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e2:	4b30      	ldr	r3, [pc, #192]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	4b2f      	ldr	r3, [pc, #188]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 80034e8:	2180      	movs	r1, #128	@ 0x80
 80034ea:	0289      	lsls	r1, r1, #10
 80034ec:	430a      	orrs	r2, r1
 80034ee:	615a      	str	r2, [r3, #20]
 80034f0:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	029b      	lsls	r3, r3, #10
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fe:	4b29      	ldr	r3, [pc, #164]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 8003504:	2180      	movs	r1, #128	@ 0x80
 8003506:	0309      	lsls	r1, r1, #12
 8003508:	430a      	orrs	r2, r1
 800350a:	615a      	str	r2, [r3, #20]
 800350c:	4b25      	ldr	r3, [pc, #148]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	031b      	lsls	r3, r3, #12
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	4b21      	ldr	r3, [pc, #132]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	02c9      	lsls	r1, r1, #11
 8003524:	430a      	orrs	r2, r1
 8003526:	615a      	str	r2, [r3, #20]
 8003528:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <MX_GPIO_Init+0xf4>)
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	02db      	lsls	r3, r3, #11
 8003530:	4013      	ands	r3, r2
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003536:	2390      	movs	r3, #144	@ 0x90
 8003538:	05db      	lsls	r3, r3, #23
 800353a:	2200      	movs	r2, #0
 800353c:	2120      	movs	r1, #32
 800353e:	0018      	movs	r0, r3
 8003540:	f004 f9cc 	bl	80078dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <MX_GPIO_Init+0xf8>)
 8003546:	2200      	movs	r2, #0
 8003548:	2110      	movs	r1, #16
 800354a:	0018      	movs	r0, r3
 800354c:	f004 f9c6 	bl	80078dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003550:	193b      	adds	r3, r7, r4
 8003552:	2220      	movs	r2, #32
 8003554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003556:	193b      	adds	r3, r7, r4
 8003558:	2201      	movs	r2, #1
 800355a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	193b      	adds	r3, r7, r4
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	193b      	adds	r3, r7, r4
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	193a      	adds	r2, r7, r4
 800356a:	2390      	movs	r3, #144	@ 0x90
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	0011      	movs	r1, r2
 8003570:	0018      	movs	r0, r3
 8003572:	f004 f83b 	bl	80075ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003576:	0021      	movs	r1, r4
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2210      	movs	r2, #16
 800357c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2201      	movs	r2, #1
 8003582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	187b      	adds	r3, r7, r1
 800358c:	2200      	movs	r2, #0
 800358e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003590:	187b      	adds	r3, r7, r1
 8003592:	4a05      	ldr	r2, [pc, #20]	@ (80035a8 <MX_GPIO_Init+0xf8>)
 8003594:	0019      	movs	r1, r3
 8003596:	0010      	movs	r0, r2
 8003598:	f004 f828 	bl	80075ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b00b      	add	sp, #44	@ 0x2c
 80035a2:	bd90      	pop	{r4, r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	48000800 	.word	0x48000800

080035ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;


void MX_SPI1_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003624 <MX_SPI1_Init+0x78>)
 80035b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035b8:	2282      	movs	r2, #130	@ 0x82
 80035ba:	0052      	lsls	r2, r2, #1
 80035bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035c4:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035c6:	22e0      	movs	r2, #224	@ 0xe0
 80035c8:	00d2      	lsls	r2, r2, #3
 80035ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035cc:	4b14      	ldr	r3, [pc, #80]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035ce:	2202      	movs	r2, #2
 80035d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035d2:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035da:	2280      	movs	r2, #128	@ 0x80
 80035dc:	0092      	lsls	r2, r2, #2
 80035de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035e2:	2220      	movs	r2, #32
 80035e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <MX_SPI1_Init+0x74>)
 80035fa:	2207      	movs	r2, #7
 80035fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035fe:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <MX_SPI1_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <MX_SPI1_Init+0x74>)
 8003606:	2200      	movs	r2, #0
 8003608:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800360a:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <MX_SPI1_Init+0x74>)
 800360c:	0018      	movs	r0, r3
 800360e:	f004 ff73 	bl	80084f8 <HAL_SPI_Init>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003616:	f002 fd21 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	2000025c 	.word	0x2000025c
 8003624:	40013000 	.word	0x40013000

08003628 <SystemClock_Config>:
#include "system_clock_config.h"



void SystemClock_Config(void)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b099      	sub	sp, #100	@ 0x64
 800362c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800362e:	242c      	movs	r4, #44	@ 0x2c
 8003630:	193b      	adds	r3, r7, r4
 8003632:	0018      	movs	r0, r3
 8003634:	2334      	movs	r3, #52	@ 0x34
 8003636:	001a      	movs	r2, r3
 8003638:	2100      	movs	r1, #0
 800363a:	f009 fb1b 	bl	800cc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800363e:	231c      	movs	r3, #28
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	0018      	movs	r0, r3
 8003644:	2310      	movs	r3, #16
 8003646:	001a      	movs	r2, r3
 8003648:	2100      	movs	r1, #0
 800364a:	f009 fb13 	bl	800cc74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800364e:	003b      	movs	r3, r7
 8003650:	0018      	movs	r0, r3
 8003652:	231c      	movs	r3, #28
 8003654:	001a      	movs	r2, r3
 8003656:	2100      	movs	r1, #0
 8003658:	f009 fb0c 	bl	800cc74 <memset>


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800365c:	0021      	movs	r1, r4
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2230      	movs	r2, #48	@ 0x30
 8003662:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2201      	movs	r2, #1
 8003668:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800366a:	187b      	adds	r3, r7, r1
 800366c:	2201      	movs	r2, #1
 800366e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2210      	movs	r2, #16
 8003674:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003676:	187b      	adds	r3, r7, r1
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800367c:	187b      	adds	r3, r7, r1
 800367e:	0018      	movs	r0, r3
 8003680:	f004 f94a 	bl	8007918 <HAL_RCC_OscConfig>
 8003684:	1e03      	subs	r3, r0, #0
 8003686:	d001      	beq.n	800368c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003688:	f002 fce8 	bl	800605c <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800368c:	211c      	movs	r1, #28
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2203      	movs	r2, #3
 8003698:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2101      	movs	r1, #1
 80036aa:	0018      	movs	r0, r3
 80036ac:	f004 fcba 	bl	8008024 <HAL_RCC_ClockConfig>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d001      	beq.n	80036b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80036b4:	f002 fcd2 	bl	800605c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036b8:	003b      	movs	r3, r7
 80036ba:	2202      	movs	r2, #2
 80036bc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036be:	003b      	movs	r3, r7
 80036c0:	2200      	movs	r2, #0
 80036c2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c4:	003b      	movs	r3, r7
 80036c6:	0018      	movs	r0, r3
 80036c8:	f004 fe18 	bl	80082fc <HAL_RCCEx_PeriphCLKConfig>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80036d0:	f002 fcc4 	bl	800605c <Error_Handler>
  }
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b019      	add	sp, #100	@ 0x64
 80036da:	bd90      	pop	{r4, r7, pc}

080036dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

void MX_TIM1_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b092      	sub	sp, #72	@ 0x48
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e2:	2340      	movs	r3, #64	@ 0x40
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	0018      	movs	r0, r3
 80036e8:	2308      	movs	r3, #8
 80036ea:	001a      	movs	r2, r3
 80036ec:	2100      	movs	r1, #0
 80036ee:	f009 fac1 	bl	800cc74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f2:	2324      	movs	r3, #36	@ 0x24
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	0018      	movs	r0, r3
 80036f8:	231c      	movs	r3, #28
 80036fa:	001a      	movs	r2, r3
 80036fc:	2100      	movs	r1, #0
 80036fe:	f009 fab9 	bl	800cc74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	0018      	movs	r0, r3
 8003706:	2320      	movs	r3, #32
 8003708:	001a      	movs	r2, r3
 800370a:	2100      	movs	r1, #0
 800370c:	f009 fab2 	bl	800cc74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003710:	4b4b      	ldr	r3, [pc, #300]	@ (8003840 <MX_TIM1_Init+0x164>)
 8003712:	4a4c      	ldr	r2, [pc, #304]	@ (8003844 <MX_TIM1_Init+0x168>)
 8003714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8003716:	4b4a      	ldr	r3, [pc, #296]	@ (8003840 <MX_TIM1_Init+0x164>)
 8003718:	222f      	movs	r2, #47	@ 0x2f
 800371a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371c:	4b48      	ldr	r3, [pc, #288]	@ (8003840 <MX_TIM1_Init+0x164>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003722:	4b47      	ldr	r3, [pc, #284]	@ (8003840 <MX_TIM1_Init+0x164>)
 8003724:	4a48      	ldr	r2, [pc, #288]	@ (8003848 <MX_TIM1_Init+0x16c>)
 8003726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003728:	4b45      	ldr	r3, [pc, #276]	@ (8003840 <MX_TIM1_Init+0x164>)
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800372e:	4b44      	ldr	r3, [pc, #272]	@ (8003840 <MX_TIM1_Init+0x164>)
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003734:	4b42      	ldr	r3, [pc, #264]	@ (8003840 <MX_TIM1_Init+0x164>)
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800373a:	4b41      	ldr	r3, [pc, #260]	@ (8003840 <MX_TIM1_Init+0x164>)
 800373c:	0018      	movs	r0, r3
 800373e:	f005 fe4b 	bl	80093d8 <HAL_TIM_PWM_Init>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003746:	f002 fc89 	bl	800605c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374a:	2140      	movs	r1, #64	@ 0x40
 800374c:	187b      	adds	r3, r7, r1
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003758:	187a      	adds	r2, r7, r1
 800375a:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <MX_TIM1_Init+0x164>)
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f006 ff52 	bl	800a608 <HAL_TIMEx_MasterConfigSynchronization>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d001      	beq.n	800376c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003768:	f002 fc78 	bl	800605c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800376c:	2124      	movs	r1, #36	@ 0x24
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2260      	movs	r2, #96	@ 0x60
 8003772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003798:	1879      	adds	r1, r7, r1
 800379a:	4b29      	ldr	r3, [pc, #164]	@ (8003840 <MX_TIM1_Init+0x164>)
 800379c:	2200      	movs	r2, #0
 800379e:	0018      	movs	r0, r3
 80037a0:	f006 f90c 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80037a8:	f002 fc58 	bl	800605c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037ac:	2324      	movs	r3, #36	@ 0x24
 80037ae:	18f9      	adds	r1, r7, r3
 80037b0:	4b23      	ldr	r3, [pc, #140]	@ (8003840 <MX_TIM1_Init+0x164>)
 80037b2:	2204      	movs	r2, #4
 80037b4:	0018      	movs	r0, r3
 80037b6:	f006 f901 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 80037be:	f002 fc4d 	bl	800605c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037c2:	2324      	movs	r3, #36	@ 0x24
 80037c4:	18f9      	adds	r1, r7, r3
 80037c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <MX_TIM1_Init+0x164>)
 80037c8:	2208      	movs	r2, #8
 80037ca:	0018      	movs	r0, r3
 80037cc:	f006 f8f6 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80037d0:	1e03      	subs	r3, r0, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80037d4:	f002 fc42 	bl	800605c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037d8:	2324      	movs	r3, #36	@ 0x24
 80037da:	18f9      	adds	r1, r7, r3
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <MX_TIM1_Init+0x164>)
 80037de:	220c      	movs	r2, #12
 80037e0:	0018      	movs	r0, r3
 80037e2:	f006 f8eb 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80037ea:	f002 fc37 	bl	800605c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037fa:	1d3b      	adds	r3, r7, #4
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	0192      	lsls	r2, r2, #6
 8003812:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800381a:	1d3a      	adds	r2, r7, #4
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <MX_TIM1_Init+0x164>)
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f006 ff4f 	bl	800a6c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d001      	beq.n	800382e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800382a:	f002 fc17 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800382e:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <MX_TIM1_Init+0x164>)
 8003830:	0018      	movs	r0, r3
 8003832:	f002 fe2b 	bl	800648c <HAL_TIM_MspPostInit>

}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b012      	add	sp, #72	@ 0x48
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	200002c0 	.word	0x200002c0
 8003844:	40012c00 	.word	0x40012c00
 8003848:	00004e1f 	.word	0x00004e1f

0800384c <MX_TIM3_Init>:

}


void MX_TIM3_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	@ 0x28
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003852:	2318      	movs	r3, #24
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	0018      	movs	r0, r3
 8003858:	2310      	movs	r3, #16
 800385a:	001a      	movs	r2, r3
 800385c:	2100      	movs	r1, #0
 800385e:	f009 fa09 	bl	800cc74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003862:	2310      	movs	r3, #16
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	0018      	movs	r0, r3
 8003868:	2308      	movs	r3, #8
 800386a:	001a      	movs	r2, r3
 800386c:	2100      	movs	r1, #0
 800386e:	f009 fa01 	bl	800cc74 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003872:	003b      	movs	r3, r7
 8003874:	0018      	movs	r0, r3
 8003876:	2310      	movs	r3, #16
 8003878:	001a      	movs	r2, r3
 800387a:	2100      	movs	r1, #0
 800387c:	f009 f9fa 	bl	800cc74 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <MX_TIM3_Init+0xec>)
 8003882:	4a2e      	ldr	r2, [pc, #184]	@ (800393c <MX_TIM3_Init+0xf0>)
 8003884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8003886:	4b2c      	ldr	r3, [pc, #176]	@ (8003938 <MX_TIM3_Init+0xec>)
 8003888:	2253      	movs	r2, #83	@ 0x53
 800388a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <MX_TIM3_Init+0xec>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000000-1;
 8003892:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <MX_TIM3_Init+0xec>)
 8003894:	4a2a      	ldr	r2, [pc, #168]	@ (8003940 <MX_TIM3_Init+0xf4>)
 8003896:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003898:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <MX_TIM3_Init+0xec>)
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389e:	4b26      	ldr	r3, [pc, #152]	@ (8003938 <MX_TIM3_Init+0xec>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038a4:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <MX_TIM3_Init+0xec>)
 80038a6:	0018      	movs	r0, r3
 80038a8:	f005 fd46 	bl	8009338 <HAL_TIM_Base_Init>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80038b0:	f002 fbd4 	bl	800605c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b4:	2118      	movs	r1, #24
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2280      	movs	r2, #128	@ 0x80
 80038ba:	0152      	lsls	r2, r2, #5
 80038bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038be:	187a      	adds	r2, r7, r1
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <MX_TIM3_Init+0xec>)
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f006 f93f 	bl	8009b48 <HAL_TIM_ConfigClockSource>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80038ce:	f002 fbc5 	bl	800605c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <MX_TIM3_Init+0xec>)
 80038d4:	0018      	movs	r0, r3
 80038d6:	f005 fe87 	bl	80095e8 <HAL_TIM_IC_Init>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80038de:	f002 fbbd 	bl	800605c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e2:	2110      	movs	r1, #16
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	2200      	movs	r2, #0
 80038ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038f0:	187a      	adds	r2, r7, r1
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <MX_TIM3_Init+0xec>)
 80038f4:	0011      	movs	r1, r2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f006 fe86 	bl	800a608 <HAL_TIMEx_MasterConfigSynchronization>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003900:	f002 fbac 	bl	800605c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003904:	003b      	movs	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800390a:	003b      	movs	r3, r7
 800390c:	2201      	movs	r2, #1
 800390e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003910:	003b      	movs	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 5;
 8003916:	003b      	movs	r3, r7
 8003918:	2205      	movs	r2, #5
 800391a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800391c:	0039      	movs	r1, r7
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <MX_TIM3_Init+0xec>)
 8003920:	2200      	movs	r2, #0
 8003922:	0018      	movs	r0, r3
 8003924:	f005 ffa6 	bl	8009874 <HAL_TIM_IC_ConfigChannel>
 8003928:	1e03      	subs	r3, r0, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800392c:	f002 fb96 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003930:	46c0      	nop			@ (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b00a      	add	sp, #40	@ 0x28
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000350 	.word	0x20000350
 800393c:	40000400 	.word	0x40000400
 8003940:	0098967f 	.word	0x0098967f

08003944 <MX_USART1_UART_Init>:

#include "usart.h"
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
void MX_USART1_UART_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <MX_USART1_UART_Init+0x5c>)
 800394c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800394e:	4b13      	ldr	r3, [pc, #76]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003950:	22e1      	movs	r2, #225	@ 0xe1
 8003952:	0252      	lsls	r2, r2, #9
 8003954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b11      	ldr	r3, [pc, #68]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800397c:	2200      	movs	r2, #0
 800397e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003980:	4b06      	ldr	r3, [pc, #24]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003982:	2200      	movs	r2, #0
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003988:	0018      	movs	r0, r3
 800398a:	f006 ff09 	bl	800a7a0 <HAL_UART_Init>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d001      	beq.n	8003996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003992:	f002 fb63 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000398 	.word	0x20000398
 80039a0:	40013800 	.word	0x40013800

080039a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039a8:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039aa:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <MX_USART2_UART_Init+0x5c>)
 80039ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039ae:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039b0:	22e1      	movs	r2, #225	@ 0xe1
 80039b2:	0252      	lsls	r2, r2, #9
 80039b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039b6:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039c2:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039ca:	220c      	movs	r2, #12
 80039cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d4:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <MX_USART2_UART_Init+0x58>)
 80039e8:	0018      	movs	r0, r3
 80039ea:	f006 fed9 	bl	800a7a0 <HAL_UART_Init>
 80039ee:	1e03      	subs	r3, r0, #0
 80039f0:	d001      	beq.n	80039f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039f2:	f002 fb33 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000420 	.word	0x20000420
 8003a00:	40004400 	.word	0x40004400

08003a04 <Mahony_update>:
{
	invSampleFreq = 1.0f / sampleFrequency;
}

void Mahony_update(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	b0a3      	sub	sp, #140	@ 0x8c
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid
	// (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8003a12:	2100      	movs	r1, #0
 8003a14:	2398      	movs	r3, #152	@ 0x98
 8003a16:	2508      	movs	r5, #8
 8003a18:	195b      	adds	r3, r3, r5
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f7fc fd4f 	bl	80004c0 <__aeabi_fcmpeq>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d024      	beq.n	8003a70 <Mahony_update+0x6c>
 8003a26:	2100      	movs	r1, #0
 8003a28:	239c      	movs	r3, #156	@ 0x9c
 8003a2a:	195b      	adds	r3, r3, r5
 8003a2c:	19db      	adds	r3, r3, r7
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f7fc fd46 	bl	80004c0 <__aeabi_fcmpeq>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d01b      	beq.n	8003a70 <Mahony_update+0x6c>
 8003a38:	2100      	movs	r1, #0
 8003a3a:	23a0      	movs	r3, #160	@ 0xa0
 8003a3c:	195b      	adds	r3, r3, r5
 8003a3e:	19db      	adds	r3, r3, r7
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f7fc fd3d 	bl	80004c0 <__aeabi_fcmpeq>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d012      	beq.n	8003a70 <Mahony_update+0x6c>
		Mahony_updateIMU(gx, gy, gz, ax, ay, az);
 8003a4a:	683c      	ldr	r4, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	2394      	movs	r3, #148	@ 0x94
 8003a54:	195b      	adds	r3, r3, r5
 8003a56:	19db      	adds	r3, r3, r7
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2390      	movs	r3, #144	@ 0x90
 8003a5e:	195b      	adds	r3, r3, r5
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	1c23      	adds	r3, r4, #0
 8003a68:	f000 fd0e 	bl	8004488 <Mahony_updateIMU>
		return;
 8003a6c:	f000 fcf3 	bl	8004456 <Mahony_update+0xa52>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8003a70:	49fa      	ldr	r1, [pc, #1000]	@ (8003e5c <Mahony_update+0x458>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7fd f948 	bl	8000d08 <__aeabi_fmul>
 8003a78:	1c03      	adds	r3, r0, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 8003a7c:	49f7      	ldr	r1, [pc, #988]	@ (8003e5c <Mahony_update+0x458>)
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f7fd f942 	bl	8000d08 <__aeabi_fmul>
 8003a84:	1c03      	adds	r3, r0, #0
 8003a86:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 8003a88:	49f4      	ldr	r1, [pc, #976]	@ (8003e5c <Mahony_update+0x458>)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd f93c 	bl	8000d08 <__aeabi_fmul>
 8003a90:	1c03      	adds	r3, r0, #0
 8003a92:	607b      	str	r3, [r7, #4]

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003a94:	2100      	movs	r1, #0
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	f7fc fd12 	bl	80004c0 <__aeabi_fcmpeq>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d013      	beq.n	8003ac8 <Mahony_update+0xc4>
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2390      	movs	r3, #144	@ 0x90
 8003aa4:	2408      	movs	r4, #8
 8003aa6:	191b      	adds	r3, r3, r4
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	f7fc fd08 	bl	80004c0 <__aeabi_fcmpeq>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d009      	beq.n	8003ac8 <Mahony_update+0xc4>
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	2394      	movs	r3, #148	@ 0x94
 8003ab8:	191b      	adds	r3, r3, r4
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f7fc fcff 	bl	80004c0 <__aeabi_fcmpeq>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d000      	beq.n	8003ac8 <Mahony_update+0xc4>
 8003ac6:	e38b      	b.n	80041e0 <Mahony_update+0x7dc>

		// Normalise accelerometer measurement
		recipNorm = Mahony_invSqrt(ax * ax + ay * ay + az * az);
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f7fd f91c 	bl	8000d08 <__aeabi_fmul>
 8003ad0:	1c03      	adds	r3, r0, #0
 8003ad2:	1c1c      	adds	r4, r3, #0
 8003ad4:	2590      	movs	r5, #144	@ 0x90
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	18ab      	adds	r3, r5, r2
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	18ab      	adds	r3, r5, r2
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	f7fd f910 	bl	8000d08 <__aeabi_fmul>
 8003ae8:	1c03      	adds	r3, r0, #0
 8003aea:	1c19      	adds	r1, r3, #0
 8003aec:	1c20      	adds	r0, r4, #0
 8003aee:	f7fc fd9b 	bl	8000628 <__aeabi_fadd>
 8003af2:	1c03      	adds	r3, r0, #0
 8003af4:	1c1c      	adds	r4, r3, #0
 8003af6:	2694      	movs	r6, #148	@ 0x94
 8003af8:	2208      	movs	r2, #8
 8003afa:	18b3      	adds	r3, r6, r2
 8003afc:	19db      	adds	r3, r3, r7
 8003afe:	6819      	ldr	r1, [r3, #0]
 8003b00:	18b3      	adds	r3, r6, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f7fd f8ff 	bl	8000d08 <__aeabi_fmul>
 8003b0a:	1c03      	adds	r3, r0, #0
 8003b0c:	1c19      	adds	r1, r3, #0
 8003b0e:	1c20      	adds	r0, r4, #0
 8003b10:	f7fc fd8a 	bl	8000628 <__aeabi_fadd>
 8003b14:	1c03      	adds	r3, r0, #0
 8003b16:	1c18      	adds	r0, r3, #0
 8003b18:	f000 ffa0 	bl	8004a5c <Mahony_invSqrt>
 8003b1c:	1c03      	adds	r3, r0, #0
 8003b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		ax *= recipNorm;
 8003b20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	f7fd f8f0 	bl	8000d08 <__aeabi_fmul>
 8003b28:	1c03      	adds	r3, r0, #0
 8003b2a:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8003b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b2e:	2408      	movs	r4, #8
 8003b30:	192b      	adds	r3, r5, r4
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	f7fd f8e7 	bl	8000d08 <__aeabi_fmul>
 8003b3a:	1c03      	adds	r3, r0, #0
 8003b3c:	192a      	adds	r2, r5, r4
 8003b3e:	19d2      	adds	r2, r2, r7
 8003b40:	6013      	str	r3, [r2, #0]
		az *= recipNorm;
 8003b42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b44:	1933      	adds	r3, r6, r4
 8003b46:	19da      	adds	r2, r3, r7
 8003b48:	6810      	ldr	r0, [r2, #0]
 8003b4a:	f7fd f8dd 	bl	8000d08 <__aeabi_fmul>
 8003b4e:	1c03      	adds	r3, r0, #0
 8003b50:	0020      	movs	r0, r4
 8003b52:	1832      	adds	r2, r6, r0
 8003b54:	19d2      	adds	r2, r2, r7
 8003b56:	6013      	str	r3, [r2, #0]

		// Normalise magnetometer measurement
		recipNorm = Mahony_invSqrt(mx * mx + my * my + mz * mz);
 8003b58:	2698      	movs	r6, #152	@ 0x98
 8003b5a:	1833      	adds	r3, r6, r0
 8003b5c:	19da      	adds	r2, r3, r7
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	1833      	adds	r3, r6, r0
 8003b62:	19da      	adds	r2, r3, r7
 8003b64:	6810      	ldr	r0, [r2, #0]
 8003b66:	f7fd f8cf 	bl	8000d08 <__aeabi_fmul>
 8003b6a:	1c03      	adds	r3, r0, #0
 8003b6c:	1c1c      	adds	r4, r3, #0
 8003b6e:	259c      	movs	r5, #156	@ 0x9c
 8003b70:	2008      	movs	r0, #8
 8003b72:	182b      	adds	r3, r5, r0
 8003b74:	19da      	adds	r2, r3, r7
 8003b76:	6811      	ldr	r1, [r2, #0]
 8003b78:	182b      	adds	r3, r5, r0
 8003b7a:	19da      	adds	r2, r3, r7
 8003b7c:	6810      	ldr	r0, [r2, #0]
 8003b7e:	f7fd f8c3 	bl	8000d08 <__aeabi_fmul>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	1c19      	adds	r1, r3, #0
 8003b86:	1c20      	adds	r0, r4, #0
 8003b88:	f7fc fd4e 	bl	8000628 <__aeabi_fadd>
 8003b8c:	1c03      	adds	r3, r0, #0
 8003b8e:	1c1c      	adds	r4, r3, #0
 8003b90:	23a0      	movs	r3, #160	@ 0xa0
 8003b92:	2008      	movs	r0, #8
 8003b94:	181a      	adds	r2, r3, r0
 8003b96:	19d2      	adds	r2, r2, r7
 8003b98:	6811      	ldr	r1, [r2, #0]
 8003b9a:	181b      	adds	r3, r3, r0
 8003b9c:	19da      	adds	r2, r3, r7
 8003b9e:	6810      	ldr	r0, [r2, #0]
 8003ba0:	f7fd f8b2 	bl	8000d08 <__aeabi_fmul>
 8003ba4:	1c03      	adds	r3, r0, #0
 8003ba6:	1c19      	adds	r1, r3, #0
 8003ba8:	1c20      	adds	r0, r4, #0
 8003baa:	f7fc fd3d 	bl	8000628 <__aeabi_fadd>
 8003bae:	1c03      	adds	r3, r0, #0
 8003bb0:	1c18      	adds	r0, r3, #0
 8003bb2:	f000 ff53 	bl	8004a5c <Mahony_invSqrt>
 8003bb6:	1c03      	adds	r3, r0, #0
 8003bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
		mx *= recipNorm;
 8003bba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bbc:	2408      	movs	r4, #8
 8003bbe:	1933      	adds	r3, r6, r4
 8003bc0:	19da      	adds	r2, r3, r7
 8003bc2:	6810      	ldr	r0, [r2, #0]
 8003bc4:	f7fd f8a0 	bl	8000d08 <__aeabi_fmul>
 8003bc8:	1c03      	adds	r3, r0, #0
 8003bca:	1932      	adds	r2, r6, r4
 8003bcc:	19d2      	adds	r2, r2, r7
 8003bce:	6013      	str	r3, [r2, #0]
		my *= recipNorm;
 8003bd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bd2:	192b      	adds	r3, r5, r4
 8003bd4:	19da      	adds	r2, r3, r7
 8003bd6:	6810      	ldr	r0, [r2, #0]
 8003bd8:	f7fd f896 	bl	8000d08 <__aeabi_fmul>
 8003bdc:	1c03      	adds	r3, r0, #0
 8003bde:	0020      	movs	r0, r4
 8003be0:	182a      	adds	r2, r5, r0
 8003be2:	19d2      	adds	r2, r2, r7
 8003be4:	6013      	str	r3, [r2, #0]
		mz *= recipNorm;
 8003be6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003be8:	24a0      	movs	r4, #160	@ 0xa0
 8003bea:	1823      	adds	r3, r4, r0
 8003bec:	19da      	adds	r2, r3, r7
 8003bee:	6810      	ldr	r0, [r2, #0]
 8003bf0:	f7fd f88a 	bl	8000d08 <__aeabi_fmul>
 8003bf4:	1c03      	adds	r3, r0, #0
 8003bf6:	2108      	movs	r1, #8
 8003bf8:	1862      	adds	r2, r4, r1
 8003bfa:	19d1      	adds	r1, r2, r7
 8003bfc:	600b      	str	r3, [r1, #0]

		// Auxiliary variables to avoid repeated arithmetic
		q0q0 = q0 * q0;
 8003bfe:	4b98      	ldr	r3, [pc, #608]	@ (8003e60 <Mahony_update+0x45c>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b97      	ldr	r3, [pc, #604]	@ (8003e60 <Mahony_update+0x45c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	1c19      	adds	r1, r3, #0
 8003c08:	1c10      	adds	r0, r2, #0
 8003c0a:	f7fd f87d 	bl	8000d08 <__aeabi_fmul>
 8003c0e:	1c03      	adds	r3, r0, #0
 8003c10:	67bb      	str	r3, [r7, #120]	@ 0x78
		q0q1 = q0 * q1;
 8003c12:	4b93      	ldr	r3, [pc, #588]	@ (8003e60 <Mahony_update+0x45c>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b93      	ldr	r3, [pc, #588]	@ (8003e64 <Mahony_update+0x460>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1c19      	adds	r1, r3, #0
 8003c1c:	1c10      	adds	r0, r2, #0
 8003c1e:	f7fd f873 	bl	8000d08 <__aeabi_fmul>
 8003c22:	1c03      	adds	r3, r0, #0
 8003c24:	677b      	str	r3, [r7, #116]	@ 0x74
		q0q2 = q0 * q2;
 8003c26:	4b8e      	ldr	r3, [pc, #568]	@ (8003e60 <Mahony_update+0x45c>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8003e68 <Mahony_update+0x464>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1c19      	adds	r1, r3, #0
 8003c30:	1c10      	adds	r0, r2, #0
 8003c32:	f7fd f869 	bl	8000d08 <__aeabi_fmul>
 8003c36:	1c03      	adds	r3, r0, #0
 8003c38:	673b      	str	r3, [r7, #112]	@ 0x70
		q0q3 = q0 * q3;
 8003c3a:	4b89      	ldr	r3, [pc, #548]	@ (8003e60 <Mahony_update+0x45c>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e6c <Mahony_update+0x468>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1c19      	adds	r1, r3, #0
 8003c44:	1c10      	adds	r0, r2, #0
 8003c46:	f7fd f85f 	bl	8000d08 <__aeabi_fmul>
 8003c4a:	1c03      	adds	r3, r0, #0
 8003c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
		q1q1 = q1 * q1;
 8003c4e:	4b85      	ldr	r3, [pc, #532]	@ (8003e64 <Mahony_update+0x460>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b84      	ldr	r3, [pc, #528]	@ (8003e64 <Mahony_update+0x460>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1c19      	adds	r1, r3, #0
 8003c58:	1c10      	adds	r0, r2, #0
 8003c5a:	f7fd f855 	bl	8000d08 <__aeabi_fmul>
 8003c5e:	1c03      	adds	r3, r0, #0
 8003c60:	66bb      	str	r3, [r7, #104]	@ 0x68
		q1q2 = q1 * q2;
 8003c62:	4b80      	ldr	r3, [pc, #512]	@ (8003e64 <Mahony_update+0x460>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b80      	ldr	r3, [pc, #512]	@ (8003e68 <Mahony_update+0x464>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1c19      	adds	r1, r3, #0
 8003c6c:	1c10      	adds	r0, r2, #0
 8003c6e:	f7fd f84b 	bl	8000d08 <__aeabi_fmul>
 8003c72:	1c03      	adds	r3, r0, #0
 8003c74:	667b      	str	r3, [r7, #100]	@ 0x64
		q1q3 = q1 * q3;
 8003c76:	4b7b      	ldr	r3, [pc, #492]	@ (8003e64 <Mahony_update+0x460>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e6c <Mahony_update+0x468>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	1c19      	adds	r1, r3, #0
 8003c80:	1c10      	adds	r0, r2, #0
 8003c82:	f7fd f841 	bl	8000d08 <__aeabi_fmul>
 8003c86:	1c03      	adds	r3, r0, #0
 8003c88:	663b      	str	r3, [r7, #96]	@ 0x60
		q2q2 = q2 * q2;
 8003c8a:	4b77      	ldr	r3, [pc, #476]	@ (8003e68 <Mahony_update+0x464>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <Mahony_update+0x464>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c19      	adds	r1, r3, #0
 8003c94:	1c10      	adds	r0, r2, #0
 8003c96:	f7fd f837 	bl	8000d08 <__aeabi_fmul>
 8003c9a:	1c03      	adds	r3, r0, #0
 8003c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		q2q3 = q2 * q3;
 8003c9e:	4b72      	ldr	r3, [pc, #456]	@ (8003e68 <Mahony_update+0x464>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b72      	ldr	r3, [pc, #456]	@ (8003e6c <Mahony_update+0x468>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1c19      	adds	r1, r3, #0
 8003ca8:	1c10      	adds	r0, r2, #0
 8003caa:	f7fd f82d 	bl	8000d08 <__aeabi_fmul>
 8003cae:	1c03      	adds	r3, r0, #0
 8003cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
		q3q3 = q3 * q3;
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e6c <Mahony_update+0x468>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e6c <Mahony_update+0x468>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	1c19      	adds	r1, r3, #0
 8003cbc:	1c10      	adds	r0, r2, #0
 8003cbe:	f7fd f823 	bl	8000d08 <__aeabi_fmul>
 8003cc2:	1c03      	adds	r3, r0, #0
 8003cc4:	657b      	str	r3, [r7, #84]	@ 0x54

		// Reference direction of Earth's magnetic field
		hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 8003cc6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003cc8:	20fc      	movs	r0, #252	@ 0xfc
 8003cca:	0580      	lsls	r0, r0, #22
 8003ccc:	f7fd f95a 	bl	8000f84 <__aeabi_fsub>
 8003cd0:	1c03      	adds	r3, r0, #0
 8003cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cd4:	1c18      	adds	r0, r3, #0
 8003cd6:	f7fd f955 	bl	8000f84 <__aeabi_fsub>
 8003cda:	1c03      	adds	r3, r0, #0
 8003cdc:	2108      	movs	r1, #8
 8003cde:	1872      	adds	r2, r6, r1
 8003ce0:	19d1      	adds	r1, r2, r7
 8003ce2:	6809      	ldr	r1, [r1, #0]
 8003ce4:	1c18      	adds	r0, r3, #0
 8003ce6:	f7fd f80f 	bl	8000d08 <__aeabi_fmul>
 8003cea:	1c03      	adds	r3, r0, #0
 8003cec:	1c1c      	adds	r4, r3, #0
 8003cee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003cf0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003cf2:	f7fd f947 	bl	8000f84 <__aeabi_fsub>
 8003cf6:	1c03      	adds	r3, r0, #0
 8003cf8:	2108      	movs	r1, #8
 8003cfa:	186a      	adds	r2, r5, r1
 8003cfc:	19d1      	adds	r1, r2, r7
 8003cfe:	6809      	ldr	r1, [r1, #0]
 8003d00:	1c18      	adds	r0, r3, #0
 8003d02:	f7fd f801 	bl	8000d08 <__aeabi_fmul>
 8003d06:	1c03      	adds	r3, r0, #0
 8003d08:	1c19      	adds	r1, r3, #0
 8003d0a:	1c20      	adds	r0, r4, #0
 8003d0c:	f7fc fc8c 	bl	8000628 <__aeabi_fadd>
 8003d10:	1c03      	adds	r3, r0, #0
 8003d12:	1c1c      	adds	r4, r3, #0
 8003d14:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003d16:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003d18:	f7fc fc86 	bl	8000628 <__aeabi_fadd>
 8003d1c:	1c03      	adds	r3, r0, #0
 8003d1e:	22a0      	movs	r2, #160	@ 0xa0
 8003d20:	2108      	movs	r1, #8
 8003d22:	1852      	adds	r2, r2, r1
 8003d24:	19d1      	adds	r1, r2, r7
 8003d26:	6809      	ldr	r1, [r1, #0]
 8003d28:	1c18      	adds	r0, r3, #0
 8003d2a:	f7fc ffed 	bl	8000d08 <__aeabi_fmul>
 8003d2e:	1c03      	adds	r3, r0, #0
 8003d30:	1c19      	adds	r1, r3, #0
 8003d32:	1c20      	adds	r0, r4, #0
 8003d34:	f7fc fc78 	bl	8000628 <__aeabi_fadd>
 8003d38:	1c03      	adds	r3, r0, #0
 8003d3a:	1c19      	adds	r1, r3, #0
 8003d3c:	1c18      	adds	r0, r3, #0
 8003d3e:	f7fc fc73 	bl	8000628 <__aeabi_fadd>
 8003d42:	1c03      	adds	r3, r0, #0
 8003d44:	653b      	str	r3, [r7, #80]	@ 0x50
		hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 8003d46:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003d48:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d4a:	f7fc fc6d 	bl	8000628 <__aeabi_fadd>
 8003d4e:	1c03      	adds	r3, r0, #0
 8003d50:	2108      	movs	r1, #8
 8003d52:	1872      	adds	r2, r6, r1
 8003d54:	19d1      	adds	r1, r2, r7
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	1c18      	adds	r0, r3, #0
 8003d5a:	f7fc ffd5 	bl	8000d08 <__aeabi_fmul>
 8003d5e:	1c03      	adds	r3, r0, #0
 8003d60:	1c1c      	adds	r4, r3, #0
 8003d62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d64:	20fc      	movs	r0, #252	@ 0xfc
 8003d66:	0580      	lsls	r0, r0, #22
 8003d68:	f7fd f90c 	bl	8000f84 <__aeabi_fsub>
 8003d6c:	1c03      	adds	r3, r0, #0
 8003d6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d70:	1c18      	adds	r0, r3, #0
 8003d72:	f7fd f907 	bl	8000f84 <__aeabi_fsub>
 8003d76:	1c03      	adds	r3, r0, #0
 8003d78:	2108      	movs	r1, #8
 8003d7a:	186a      	adds	r2, r5, r1
 8003d7c:	19d1      	adds	r1, r2, r7
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	1c18      	adds	r0, r3, #0
 8003d82:	f7fc ffc1 	bl	8000d08 <__aeabi_fmul>
 8003d86:	1c03      	adds	r3, r0, #0
 8003d88:	1c19      	adds	r1, r3, #0
 8003d8a:	1c20      	adds	r0, r4, #0
 8003d8c:	f7fc fc4c 	bl	8000628 <__aeabi_fadd>
 8003d90:	1c03      	adds	r3, r0, #0
 8003d92:	1c1c      	adds	r4, r3, #0
 8003d94:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003d96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003d98:	f7fd f8f4 	bl	8000f84 <__aeabi_fsub>
 8003d9c:	1c03      	adds	r3, r0, #0
 8003d9e:	22a0      	movs	r2, #160	@ 0xa0
 8003da0:	2108      	movs	r1, #8
 8003da2:	1852      	adds	r2, r2, r1
 8003da4:	19d1      	adds	r1, r2, r7
 8003da6:	6809      	ldr	r1, [r1, #0]
 8003da8:	1c18      	adds	r0, r3, #0
 8003daa:	f7fc ffad 	bl	8000d08 <__aeabi_fmul>
 8003dae:	1c03      	adds	r3, r0, #0
 8003db0:	1c19      	adds	r1, r3, #0
 8003db2:	1c20      	adds	r0, r4, #0
 8003db4:	f7fc fc38 	bl	8000628 <__aeabi_fadd>
 8003db8:	1c03      	adds	r3, r0, #0
 8003dba:	1c19      	adds	r1, r3, #0
 8003dbc:	1c18      	adds	r0, r3, #0
 8003dbe:	f7fc fc33 	bl	8000628 <__aeabi_fadd>
 8003dc2:	1c03      	adds	r3, r0, #0
 8003dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		bx = sqrtf(hx * hx + hy * hy);
 8003dc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003dc8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003dca:	f7fc ff9d 	bl	8000d08 <__aeabi_fmul>
 8003dce:	1c03      	adds	r3, r0, #0
 8003dd0:	1c1c      	adds	r4, r3, #0
 8003dd2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003dd4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003dd6:	f7fc ff97 	bl	8000d08 <__aeabi_fmul>
 8003dda:	1c03      	adds	r3, r0, #0
 8003ddc:	1c19      	adds	r1, r3, #0
 8003dde:	1c20      	adds	r0, r4, #0
 8003de0:	f7fc fc22 	bl	8000628 <__aeabi_fadd>
 8003de4:	1c03      	adds	r3, r0, #0
 8003de6:	1c18      	adds	r0, r3, #0
 8003de8:	f00c fc16 	bl	8010618 <sqrtf>
 8003dec:	1c03      	adds	r3, r0, #0
 8003dee:	64bb      	str	r3, [r7, #72]	@ 0x48
		bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 8003df0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003df2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003df4:	f7fd f8c6 	bl	8000f84 <__aeabi_fsub>
 8003df8:	1c03      	adds	r3, r0, #0
 8003dfa:	2108      	movs	r1, #8
 8003dfc:	1870      	adds	r0, r6, r1
 8003dfe:	19c1      	adds	r1, r0, r7
 8003e00:	6809      	ldr	r1, [r1, #0]
 8003e02:	1c18      	adds	r0, r3, #0
 8003e04:	f7fc ff80 	bl	8000d08 <__aeabi_fmul>
 8003e08:	1c03      	adds	r3, r0, #0
 8003e0a:	1c1c      	adds	r4, r3, #0
 8003e0c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003e10:	f7fc fc0a 	bl	8000628 <__aeabi_fadd>
 8003e14:	1c03      	adds	r3, r0, #0
 8003e16:	2108      	movs	r1, #8
 8003e18:	1868      	adds	r0, r5, r1
 8003e1a:	19c1      	adds	r1, r0, r7
 8003e1c:	6809      	ldr	r1, [r1, #0]
 8003e1e:	1c18      	adds	r0, r3, #0
 8003e20:	f7fc ff72 	bl	8000d08 <__aeabi_fmul>
 8003e24:	1c03      	adds	r3, r0, #0
 8003e26:	1c19      	adds	r1, r3, #0
 8003e28:	1c20      	adds	r0, r4, #0
 8003e2a:	f7fc fbfd 	bl	8000628 <__aeabi_fadd>
 8003e2e:	1c03      	adds	r3, r0, #0
 8003e30:	1c1c      	adds	r4, r3, #0
 8003e32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e34:	20fc      	movs	r0, #252	@ 0xfc
 8003e36:	0580      	lsls	r0, r0, #22
 8003e38:	f7fd f8a4 	bl	8000f84 <__aeabi_fsub>
 8003e3c:	1c03      	adds	r3, r0, #0
 8003e3e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003e40:	1c18      	adds	r0, r3, #0
 8003e42:	f7fd f89f 	bl	8000f84 <__aeabi_fsub>
 8003e46:	1c03      	adds	r3, r0, #0
 8003e48:	22a0      	movs	r2, #160	@ 0xa0
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	1850      	adds	r0, r2, r1
 8003e4e:	19c1      	adds	r1, r0, r7
 8003e50:	6809      	ldr	r1, [r1, #0]
 8003e52:	1c18      	adds	r0, r3, #0
 8003e54:	f7fc ff58 	bl	8000d08 <__aeabi_fmul>
 8003e58:	e00a      	b.n	8003e70 <Mahony_update+0x46c>
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	3c8efa39 	.word	0x3c8efa39
 8003e60:	20000004 	.word	0x20000004
 8003e64:	200004ac 	.word	0x200004ac
 8003e68:	200004b0 	.word	0x200004b0
 8003e6c:	200004b4 	.word	0x200004b4
 8003e70:	1c03      	adds	r3, r0, #0
 8003e72:	1c19      	adds	r1, r3, #0
 8003e74:	1c20      	adds	r0, r4, #0
 8003e76:	f7fc fbd7 	bl	8000628 <__aeabi_fadd>
 8003e7a:	1c03      	adds	r3, r0, #0
 8003e7c:	1c19      	adds	r1, r3, #0
 8003e7e:	1c18      	adds	r0, r3, #0
 8003e80:	f7fc fbd2 	bl	8000628 <__aeabi_fadd>
 8003e84:	1c03      	adds	r3, r0, #0
 8003e86:	647b      	str	r3, [r7, #68]	@ 0x44

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 8003e88:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003e8a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003e8c:	f7fd f87a 	bl	8000f84 <__aeabi_fsub>
 8003e90:	1c03      	adds	r3, r0, #0
 8003e92:	643b      	str	r3, [r7, #64]	@ 0x40
		halfvy = q0q1 + q2q3;
 8003e94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003e96:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003e98:	f7fc fbc6 	bl	8000628 <__aeabi_fadd>
 8003e9c:	1c03      	adds	r3, r0, #0
 8003e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		halfvz = q0q0 - 0.5f + q3q3;
 8003ea0:	21fc      	movs	r1, #252	@ 0xfc
 8003ea2:	0589      	lsls	r1, r1, #22
 8003ea4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003ea6:	f7fd f86d 	bl	8000f84 <__aeabi_fsub>
 8003eaa:	1c03      	adds	r3, r0, #0
 8003eac:	1c19      	adds	r1, r3, #0
 8003eae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003eb0:	f7fc fbba 	bl	8000628 <__aeabi_fadd>
 8003eb4:	1c03      	adds	r3, r0, #0
 8003eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
		halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8003eb8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003eba:	20fc      	movs	r0, #252	@ 0xfc
 8003ebc:	0580      	lsls	r0, r0, #22
 8003ebe:	f7fd f861 	bl	8000f84 <__aeabi_fsub>
 8003ec2:	1c03      	adds	r3, r0, #0
 8003ec4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ec6:	1c18      	adds	r0, r3, #0
 8003ec8:	f7fd f85c 	bl	8000f84 <__aeabi_fsub>
 8003ecc:	1c03      	adds	r3, r0, #0
 8003ece:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003ed0:	1c18      	adds	r0, r3, #0
 8003ed2:	f7fc ff19 	bl	8000d08 <__aeabi_fmul>
 8003ed6:	1c03      	adds	r3, r0, #0
 8003ed8:	1c1c      	adds	r4, r3, #0
 8003eda:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003edc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003ede:	f7fd f851 	bl	8000f84 <__aeabi_fsub>
 8003ee2:	1c03      	adds	r3, r0, #0
 8003ee4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ee6:	1c18      	adds	r0, r3, #0
 8003ee8:	f7fc ff0e 	bl	8000d08 <__aeabi_fmul>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	1c19      	adds	r1, r3, #0
 8003ef0:	1c20      	adds	r0, r4, #0
 8003ef2:	f7fc fb99 	bl	8000628 <__aeabi_fadd>
 8003ef6:	1c03      	adds	r3, r0, #0
 8003ef8:	637b      	str	r3, [r7, #52]	@ 0x34
		halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 8003efa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003efc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003efe:	f7fd f841 	bl	8000f84 <__aeabi_fsub>
 8003f02:	1c03      	adds	r3, r0, #0
 8003f04:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f06:	1c18      	adds	r0, r3, #0
 8003f08:	f7fc fefe 	bl	8000d08 <__aeabi_fmul>
 8003f0c:	1c03      	adds	r3, r0, #0
 8003f0e:	1c1c      	adds	r4, r3, #0
 8003f10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003f12:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003f14:	f7fc fb88 	bl	8000628 <__aeabi_fadd>
 8003f18:	1c03      	adds	r3, r0, #0
 8003f1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f1c:	1c18      	adds	r0, r3, #0
 8003f1e:	f7fc fef3 	bl	8000d08 <__aeabi_fmul>
 8003f22:	1c03      	adds	r3, r0, #0
 8003f24:	1c19      	adds	r1, r3, #0
 8003f26:	1c20      	adds	r0, r4, #0
 8003f28:	f7fc fb7e 	bl	8000628 <__aeabi_fadd>
 8003f2c:	1c03      	adds	r3, r0, #0
 8003f2e:	633b      	str	r3, [r7, #48]	@ 0x30
		halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 8003f30:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003f32:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003f34:	f7fc fb78 	bl	8000628 <__aeabi_fadd>
 8003f38:	1c03      	adds	r3, r0, #0
 8003f3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f3c:	1c18      	adds	r0, r3, #0
 8003f3e:	f7fc fee3 	bl	8000d08 <__aeabi_fmul>
 8003f42:	1c03      	adds	r3, r0, #0
 8003f44:	1c1c      	adds	r4, r3, #0
 8003f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f48:	20fc      	movs	r0, #252	@ 0xfc
 8003f4a:	0580      	lsls	r0, r0, #22
 8003f4c:	f7fd f81a 	bl	8000f84 <__aeabi_fsub>
 8003f50:	1c03      	adds	r3, r0, #0
 8003f52:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003f54:	1c18      	adds	r0, r3, #0
 8003f56:	f7fd f815 	bl	8000f84 <__aeabi_fsub>
 8003f5a:	1c03      	adds	r3, r0, #0
 8003f5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f5e:	1c18      	adds	r0, r3, #0
 8003f60:	f7fc fed2 	bl	8000d08 <__aeabi_fmul>
 8003f64:	1c03      	adds	r3, r0, #0
 8003f66:	1c19      	adds	r1, r3, #0
 8003f68:	1c20      	adds	r0, r4, #0
 8003f6a:	f7fc fb5d 	bl	8000628 <__aeabi_fadd>
 8003f6e:	1c03      	adds	r3, r0, #0
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		// Error is sum of cross product between estimated direction
		// and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 8003f72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f74:	2390      	movs	r3, #144	@ 0x90
 8003f76:	2208      	movs	r2, #8
 8003f78:	1898      	adds	r0, r3, r2
 8003f7a:	19c4      	adds	r4, r0, r7
 8003f7c:	6820      	ldr	r0, [r4, #0]
 8003f7e:	f7fc fec3 	bl	8000d08 <__aeabi_fmul>
 8003f82:	1c03      	adds	r3, r0, #0
 8003f84:	1c1c      	adds	r4, r3, #0
 8003f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f88:	2094      	movs	r0, #148	@ 0x94
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	18c2      	adds	r2, r0, r3
 8003f8e:	19d3      	adds	r3, r2, r7
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f7fc feb9 	bl	8000d08 <__aeabi_fmul>
 8003f96:	1c03      	adds	r3, r0, #0
 8003f98:	1c19      	adds	r1, r3, #0
 8003f9a:	1c20      	adds	r0, r4, #0
 8003f9c:	f7fc fff2 	bl	8000f84 <__aeabi_fsub>
 8003fa0:	1c03      	adds	r3, r0, #0
 8003fa2:	1c1c      	adds	r4, r3, #0
 8003fa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	18ea      	adds	r2, r5, r3
 8003faa:	19d5      	adds	r5, r2, r7
 8003fac:	6828      	ldr	r0, [r5, #0]
 8003fae:	f7fc feab 	bl	8000d08 <__aeabi_fmul>
 8003fb2:	1c03      	adds	r3, r0, #0
 8003fb4:	1c1d      	adds	r5, r3, #0
 8003fb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fb8:	22a0      	movs	r2, #160	@ 0xa0
 8003fba:	2308      	movs	r3, #8
 8003fbc:	18d2      	adds	r2, r2, r3
 8003fbe:	19d3      	adds	r3, r2, r7
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	f7fc fea1 	bl	8000d08 <__aeabi_fmul>
 8003fc6:	1c03      	adds	r3, r0, #0
 8003fc8:	1c19      	adds	r1, r3, #0
 8003fca:	1c28      	adds	r0, r5, #0
 8003fcc:	f7fc ffda 	bl	8000f84 <__aeabi_fsub>
 8003fd0:	1c03      	adds	r3, r0, #0
 8003fd2:	1c19      	adds	r1, r3, #0
 8003fd4:	1c20      	adds	r0, r4, #0
 8003fd6:	f7fc fb27 	bl	8000628 <__aeabi_fadd>
 8003fda:	1c03      	adds	r3, r0, #0
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 8003fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fe0:	2094      	movs	r0, #148	@ 0x94
 8003fe2:	2508      	movs	r5, #8
 8003fe4:	1943      	adds	r3, r0, r5
 8003fe6:	19d8      	adds	r0, r3, r7
 8003fe8:	6800      	ldr	r0, [r0, #0]
 8003fea:	f7fc fe8d 	bl	8000d08 <__aeabi_fmul>
 8003fee:	1c03      	adds	r3, r0, #0
 8003ff0:	1c1c      	adds	r4, r3, #0
 8003ff2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ff4:	6838      	ldr	r0, [r7, #0]
 8003ff6:	f7fc fe87 	bl	8000d08 <__aeabi_fmul>
 8003ffa:	1c03      	adds	r3, r0, #0
 8003ffc:	1c19      	adds	r1, r3, #0
 8003ffe:	1c20      	adds	r0, r4, #0
 8004000:	f7fc ffc0 	bl	8000f84 <__aeabi_fsub>
 8004004:	1c03      	adds	r3, r0, #0
 8004006:	1c1c      	adds	r4, r3, #0
 8004008:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800400a:	22a0      	movs	r2, #160	@ 0xa0
 800400c:	1952      	adds	r2, r2, r5
 800400e:	19d0      	adds	r0, r2, r7
 8004010:	6800      	ldr	r0, [r0, #0]
 8004012:	f7fc fe79 	bl	8000d08 <__aeabi_fmul>
 8004016:	1c03      	adds	r3, r0, #0
 8004018:	1c1d      	adds	r5, r3, #0
 800401a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800401c:	2308      	movs	r3, #8
 800401e:	18f2      	adds	r2, r6, r3
 8004020:	19d0      	adds	r0, r2, r7
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	f7fc fe70 	bl	8000d08 <__aeabi_fmul>
 8004028:	1c03      	adds	r3, r0, #0
 800402a:	1c19      	adds	r1, r3, #0
 800402c:	1c28      	adds	r0, r5, #0
 800402e:	f7fc ffa9 	bl	8000f84 <__aeabi_fsub>
 8004032:	1c03      	adds	r3, r0, #0
 8004034:	1c19      	adds	r1, r3, #0
 8004036:	1c20      	adds	r0, r4, #0
 8004038:	f7fc faf6 	bl	8000628 <__aeabi_fadd>
 800403c:	1c03      	adds	r3, r0, #0
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 8004040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004042:	6838      	ldr	r0, [r7, #0]
 8004044:	f7fc fe60 	bl	8000d08 <__aeabi_fmul>
 8004048:	1c03      	adds	r3, r0, #0
 800404a:	1c1c      	adds	r4, r3, #0
 800404c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800404e:	2290      	movs	r2, #144	@ 0x90
 8004050:	2508      	movs	r5, #8
 8004052:	1953      	adds	r3, r2, r5
 8004054:	19da      	adds	r2, r3, r7
 8004056:	6810      	ldr	r0, [r2, #0]
 8004058:	f7fc fe56 	bl	8000d08 <__aeabi_fmul>
 800405c:	1c03      	adds	r3, r0, #0
 800405e:	1c19      	adds	r1, r3, #0
 8004060:	1c20      	adds	r0, r4, #0
 8004062:	f7fc ff8f 	bl	8000f84 <__aeabi_fsub>
 8004066:	1c03      	adds	r3, r0, #0
 8004068:	1c1c      	adds	r4, r3, #0
 800406a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800406c:	1973      	adds	r3, r6, r5
 800406e:	19da      	adds	r2, r3, r7
 8004070:	6810      	ldr	r0, [r2, #0]
 8004072:	f7fc fe49 	bl	8000d08 <__aeabi_fmul>
 8004076:	1c03      	adds	r3, r0, #0
 8004078:	1c1d      	adds	r5, r3, #0
 800407a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800407c:	239c      	movs	r3, #156	@ 0x9c
 800407e:	2208      	movs	r2, #8
 8004080:	189b      	adds	r3, r3, r2
 8004082:	19db      	adds	r3, r3, r7
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	f7fc fe3f 	bl	8000d08 <__aeabi_fmul>
 800408a:	1c03      	adds	r3, r0, #0
 800408c:	1c19      	adds	r1, r3, #0
 800408e:	1c28      	adds	r0, r5, #0
 8004090:	f7fc ff78 	bl	8000f84 <__aeabi_fsub>
 8004094:	1c03      	adds	r3, r0, #0
 8004096:	1c19      	adds	r1, r3, #0
 8004098:	1c20      	adds	r0, r4, #0
 800409a:	f7fc fac5 	bl	8000628 <__aeabi_fadd>
 800409e:	1c03      	adds	r3, r0, #0
 80040a0:	623b      	str	r3, [r7, #32]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 80040a2:	4bee      	ldr	r3, [pc, #952]	@ (800445c <Mahony_update+0xa58>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2100      	movs	r1, #0
 80040a8:	1c18      	adds	r0, r3, #0
 80040aa:	f7fc fa23 	bl	80004f4 <__aeabi_fcmpgt>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d066      	beq.n	8004180 <Mahony_update+0x77c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 80040b2:	4bea      	ldr	r3, [pc, #936]	@ (800445c <Mahony_update+0xa58>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040b8:	1c18      	adds	r0, r3, #0
 80040ba:	f7fc fe25 	bl	8000d08 <__aeabi_fmul>
 80040be:	1c03      	adds	r3, r0, #0
 80040c0:	1c1a      	adds	r2, r3, #0
 80040c2:	4be7      	ldr	r3, [pc, #924]	@ (8004460 <Mahony_update+0xa5c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	1c19      	adds	r1, r3, #0
 80040c8:	1c10      	adds	r0, r2, #0
 80040ca:	f7fc fe1d 	bl	8000d08 <__aeabi_fmul>
 80040ce:	1c03      	adds	r3, r0, #0
 80040d0:	1c1a      	adds	r2, r3, #0
 80040d2:	4be4      	ldr	r3, [pc, #912]	@ (8004464 <Mahony_update+0xa60>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	1c19      	adds	r1, r3, #0
 80040d8:	1c10      	adds	r0, r2, #0
 80040da:	f7fc faa5 	bl	8000628 <__aeabi_fadd>
 80040de:	1c03      	adds	r3, r0, #0
 80040e0:	1c1a      	adds	r2, r3, #0
 80040e2:	4be0      	ldr	r3, [pc, #896]	@ (8004464 <Mahony_update+0xa60>)
 80040e4:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * invSampleFreq;
 80040e6:	4bdd      	ldr	r3, [pc, #884]	@ (800445c <Mahony_update+0xa58>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ec:	1c18      	adds	r0, r3, #0
 80040ee:	f7fc fe0b 	bl	8000d08 <__aeabi_fmul>
 80040f2:	1c03      	adds	r3, r0, #0
 80040f4:	1c1a      	adds	r2, r3, #0
 80040f6:	4bda      	ldr	r3, [pc, #872]	@ (8004460 <Mahony_update+0xa5c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1c19      	adds	r1, r3, #0
 80040fc:	1c10      	adds	r0, r2, #0
 80040fe:	f7fc fe03 	bl	8000d08 <__aeabi_fmul>
 8004102:	1c03      	adds	r3, r0, #0
 8004104:	1c1a      	adds	r2, r3, #0
 8004106:	4bd8      	ldr	r3, [pc, #864]	@ (8004468 <Mahony_update+0xa64>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	1c19      	adds	r1, r3, #0
 800410c:	1c10      	adds	r0, r2, #0
 800410e:	f7fc fa8b 	bl	8000628 <__aeabi_fadd>
 8004112:	1c03      	adds	r3, r0, #0
 8004114:	1c1a      	adds	r2, r3, #0
 8004116:	4bd4      	ldr	r3, [pc, #848]	@ (8004468 <Mahony_update+0xa64>)
 8004118:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * invSampleFreq;
 800411a:	4bd0      	ldr	r3, [pc, #832]	@ (800445c <Mahony_update+0xa58>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a39      	ldr	r1, [r7, #32]
 8004120:	1c18      	adds	r0, r3, #0
 8004122:	f7fc fdf1 	bl	8000d08 <__aeabi_fmul>
 8004126:	1c03      	adds	r3, r0, #0
 8004128:	1c1a      	adds	r2, r3, #0
 800412a:	4bcd      	ldr	r3, [pc, #820]	@ (8004460 <Mahony_update+0xa5c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1c19      	adds	r1, r3, #0
 8004130:	1c10      	adds	r0, r2, #0
 8004132:	f7fc fde9 	bl	8000d08 <__aeabi_fmul>
 8004136:	1c03      	adds	r3, r0, #0
 8004138:	1c1a      	adds	r2, r3, #0
 800413a:	4bcc      	ldr	r3, [pc, #816]	@ (800446c <Mahony_update+0xa68>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1c19      	adds	r1, r3, #0
 8004140:	1c10      	adds	r0, r2, #0
 8004142:	f7fc fa71 	bl	8000628 <__aeabi_fadd>
 8004146:	1c03      	adds	r3, r0, #0
 8004148:	1c1a      	adds	r2, r3, #0
 800414a:	4bc8      	ldr	r3, [pc, #800]	@ (800446c <Mahony_update+0xa68>)
 800414c:	601a      	str	r2, [r3, #0]
			gx += integralFBx;	// apply integral feedback
 800414e:	4bc5      	ldr	r3, [pc, #788]	@ (8004464 <Mahony_update+0xa60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	1c19      	adds	r1, r3, #0
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7fc fa67 	bl	8000628 <__aeabi_fadd>
 800415a:	1c03      	adds	r3, r0, #0
 800415c:	60fb      	str	r3, [r7, #12]
			gy += integralFBy;
 800415e:	4bc2      	ldr	r3, [pc, #776]	@ (8004468 <Mahony_update+0xa64>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	1c19      	adds	r1, r3, #0
 8004164:	68b8      	ldr	r0, [r7, #8]
 8004166:	f7fc fa5f 	bl	8000628 <__aeabi_fadd>
 800416a:	1c03      	adds	r3, r0, #0
 800416c:	60bb      	str	r3, [r7, #8]
			gz += integralFBz;
 800416e:	4bbf      	ldr	r3, [pc, #764]	@ (800446c <Mahony_update+0xa68>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	1c19      	adds	r1, r3, #0
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fc fa57 	bl	8000628 <__aeabi_fadd>
 800417a:	1c03      	adds	r3, r0, #0
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e008      	b.n	8004192 <Mahony_update+0x78e>
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 8004180:	4bb8      	ldr	r3, [pc, #736]	@ (8004464 <Mahony_update+0xa60>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8004186:	4bb8      	ldr	r3, [pc, #736]	@ (8004468 <Mahony_update+0xa64>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 800418c:	4bb7      	ldr	r3, [pc, #732]	@ (800446c <Mahony_update+0xa68>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004192:	4bb7      	ldr	r3, [pc, #732]	@ (8004470 <Mahony_update+0xa6c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004198:	1c18      	adds	r0, r3, #0
 800419a:	f7fc fdb5 	bl	8000d08 <__aeabi_fmul>
 800419e:	1c03      	adds	r3, r0, #0
 80041a0:	1c19      	adds	r1, r3, #0
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fc fa40 	bl	8000628 <__aeabi_fadd>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	60fb      	str	r3, [r7, #12]
		gy += twoKp * halfey;
 80041ac:	4bb0      	ldr	r3, [pc, #704]	@ (8004470 <Mahony_update+0xa6c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041b2:	1c18      	adds	r0, r3, #0
 80041b4:	f7fc fda8 	bl	8000d08 <__aeabi_fmul>
 80041b8:	1c03      	adds	r3, r0, #0
 80041ba:	1c19      	adds	r1, r3, #0
 80041bc:	68b8      	ldr	r0, [r7, #8]
 80041be:	f7fc fa33 	bl	8000628 <__aeabi_fadd>
 80041c2:	1c03      	adds	r3, r0, #0
 80041c4:	60bb      	str	r3, [r7, #8]
		gz += twoKp * halfez;
 80041c6:	4baa      	ldr	r3, [pc, #680]	@ (8004470 <Mahony_update+0xa6c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a39      	ldr	r1, [r7, #32]
 80041cc:	1c18      	adds	r0, r3, #0
 80041ce:	f7fc fd9b 	bl	8000d08 <__aeabi_fmul>
 80041d2:	1c03      	adds	r3, r0, #0
 80041d4:	1c19      	adds	r1, r3, #0
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc fa26 	bl	8000628 <__aeabi_fadd>
 80041dc:	1c03      	adds	r3, r0, #0
 80041de:	607b      	str	r3, [r7, #4]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 80041e0:	4b9f      	ldr	r3, [pc, #636]	@ (8004460 <Mahony_update+0xa5c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	21fc      	movs	r1, #252	@ 0xfc
 80041e6:	0589      	lsls	r1, r1, #22
 80041e8:	1c18      	adds	r0, r3, #0
 80041ea:	f7fc fd8d 	bl	8000d08 <__aeabi_fmul>
 80041ee:	1c03      	adds	r3, r0, #0
 80041f0:	1c19      	adds	r1, r3, #0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7fc fd88 	bl	8000d08 <__aeabi_fmul>
 80041f8:	1c03      	adds	r3, r0, #0
 80041fa:	60fb      	str	r3, [r7, #12]
	gy *= (0.5f * invSampleFreq);
 80041fc:	4b98      	ldr	r3, [pc, #608]	@ (8004460 <Mahony_update+0xa5c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	21fc      	movs	r1, #252	@ 0xfc
 8004202:	0589      	lsls	r1, r1, #22
 8004204:	1c18      	adds	r0, r3, #0
 8004206:	f7fc fd7f 	bl	8000d08 <__aeabi_fmul>
 800420a:	1c03      	adds	r3, r0, #0
 800420c:	1c19      	adds	r1, r3, #0
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f7fc fd7a 	bl	8000d08 <__aeabi_fmul>
 8004214:	1c03      	adds	r3, r0, #0
 8004216:	60bb      	str	r3, [r7, #8]
	gz *= (0.5f * invSampleFreq);
 8004218:	4b91      	ldr	r3, [pc, #580]	@ (8004460 <Mahony_update+0xa5c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	21fc      	movs	r1, #252	@ 0xfc
 800421e:	0589      	lsls	r1, r1, #22
 8004220:	1c18      	adds	r0, r3, #0
 8004222:	f7fc fd71 	bl	8000d08 <__aeabi_fmul>
 8004226:	1c03      	adds	r3, r0, #0
 8004228:	1c19      	adds	r1, r3, #0
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fd6c 	bl	8000d08 <__aeabi_fmul>
 8004230:	1c03      	adds	r3, r0, #0
 8004232:	607b      	str	r3, [r7, #4]
	qa = q0;
 8004234:	4b8f      	ldr	r3, [pc, #572]	@ (8004474 <Mahony_update+0xa70>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	61fb      	str	r3, [r7, #28]
	qb = q1;
 800423a:	4b8f      	ldr	r3, [pc, #572]	@ (8004478 <Mahony_update+0xa74>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
	qc = q2;
 8004240:	4b8e      	ldr	r3, [pc, #568]	@ (800447c <Mahony_update+0xa78>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	617b      	str	r3, [r7, #20]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2280      	movs	r2, #128	@ 0x80
 800424a:	0612      	lsls	r2, r2, #24
 800424c:	4053      	eors	r3, r2
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	1c18      	adds	r0, r3, #0
 8004252:	f7fc fd59 	bl	8000d08 <__aeabi_fmul>
 8004256:	1c03      	adds	r3, r0, #0
 8004258:	1c1c      	adds	r4, r3, #0
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f7fc fd53 	bl	8000d08 <__aeabi_fmul>
 8004262:	1c03      	adds	r3, r0, #0
 8004264:	1c19      	adds	r1, r3, #0
 8004266:	1c20      	adds	r0, r4, #0
 8004268:	f7fc fe8c 	bl	8000f84 <__aeabi_fsub>
 800426c:	1c03      	adds	r3, r0, #0
 800426e:	1c1c      	adds	r4, r3, #0
 8004270:	4b83      	ldr	r3, [pc, #524]	@ (8004480 <Mahony_update+0xa7c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	1c18      	adds	r0, r3, #0
 8004278:	f7fc fd46 	bl	8000d08 <__aeabi_fmul>
 800427c:	1c03      	adds	r3, r0, #0
 800427e:	1c19      	adds	r1, r3, #0
 8004280:	1c20      	adds	r0, r4, #0
 8004282:	f7fc fe7f 	bl	8000f84 <__aeabi_fsub>
 8004286:	1c03      	adds	r3, r0, #0
 8004288:	1c1a      	adds	r2, r3, #0
 800428a:	4b7a      	ldr	r3, [pc, #488]	@ (8004474 <Mahony_update+0xa70>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c19      	adds	r1, r3, #0
 8004290:	1c10      	adds	r0, r2, #0
 8004292:	f7fc f9c9 	bl	8000628 <__aeabi_fadd>
 8004296:	1c03      	adds	r3, r0, #0
 8004298:	1c1a      	adds	r2, r3, #0
 800429a:	4b76      	ldr	r3, [pc, #472]	@ (8004474 <Mahony_update+0xa70>)
 800429c:	601a      	str	r2, [r3, #0]
	q1 += (qa * gx + qc * gz - q3 * gy);
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	69f8      	ldr	r0, [r7, #28]
 80042a2:	f7fc fd31 	bl	8000d08 <__aeabi_fmul>
 80042a6:	1c03      	adds	r3, r0, #0
 80042a8:	1c1c      	adds	r4, r3, #0
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	6978      	ldr	r0, [r7, #20]
 80042ae:	f7fc fd2b 	bl	8000d08 <__aeabi_fmul>
 80042b2:	1c03      	adds	r3, r0, #0
 80042b4:	1c19      	adds	r1, r3, #0
 80042b6:	1c20      	adds	r0, r4, #0
 80042b8:	f7fc f9b6 	bl	8000628 <__aeabi_fadd>
 80042bc:	1c03      	adds	r3, r0, #0
 80042be:	1c1c      	adds	r4, r3, #0
 80042c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004480 <Mahony_update+0xa7c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	1c18      	adds	r0, r3, #0
 80042c8:	f7fc fd1e 	bl	8000d08 <__aeabi_fmul>
 80042cc:	1c03      	adds	r3, r0, #0
 80042ce:	1c19      	adds	r1, r3, #0
 80042d0:	1c20      	adds	r0, r4, #0
 80042d2:	f7fc fe57 	bl	8000f84 <__aeabi_fsub>
 80042d6:	1c03      	adds	r3, r0, #0
 80042d8:	1c1a      	adds	r2, r3, #0
 80042da:	4b67      	ldr	r3, [pc, #412]	@ (8004478 <Mahony_update+0xa74>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	1c19      	adds	r1, r3, #0
 80042e0:	1c10      	adds	r0, r2, #0
 80042e2:	f7fc f9a1 	bl	8000628 <__aeabi_fadd>
 80042e6:	1c03      	adds	r3, r0, #0
 80042e8:	1c1a      	adds	r2, r3, #0
 80042ea:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <Mahony_update+0xa74>)
 80042ec:	601a      	str	r2, [r3, #0]
	q2 += (qa * gy - qb * gz + q3 * gx);
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	69f8      	ldr	r0, [r7, #28]
 80042f2:	f7fc fd09 	bl	8000d08 <__aeabi_fmul>
 80042f6:	1c03      	adds	r3, r0, #0
 80042f8:	1c1c      	adds	r4, r3, #0
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	69b8      	ldr	r0, [r7, #24]
 80042fe:	f7fc fd03 	bl	8000d08 <__aeabi_fmul>
 8004302:	1c03      	adds	r3, r0, #0
 8004304:	1c19      	adds	r1, r3, #0
 8004306:	1c20      	adds	r0, r4, #0
 8004308:	f7fc fe3c 	bl	8000f84 <__aeabi_fsub>
 800430c:	1c03      	adds	r3, r0, #0
 800430e:	1c1c      	adds	r4, r3, #0
 8004310:	4b5b      	ldr	r3, [pc, #364]	@ (8004480 <Mahony_update+0xa7c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	1c18      	adds	r0, r3, #0
 8004318:	f7fc fcf6 	bl	8000d08 <__aeabi_fmul>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	1c19      	adds	r1, r3, #0
 8004320:	1c20      	adds	r0, r4, #0
 8004322:	f7fc f981 	bl	8000628 <__aeabi_fadd>
 8004326:	1c03      	adds	r3, r0, #0
 8004328:	1c1a      	adds	r2, r3, #0
 800432a:	4b54      	ldr	r3, [pc, #336]	@ (800447c <Mahony_update+0xa78>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1c19      	adds	r1, r3, #0
 8004330:	1c10      	adds	r0, r2, #0
 8004332:	f7fc f979 	bl	8000628 <__aeabi_fadd>
 8004336:	1c03      	adds	r3, r0, #0
 8004338:	1c1a      	adds	r2, r3, #0
 800433a:	4b50      	ldr	r3, [pc, #320]	@ (800447c <Mahony_update+0xa78>)
 800433c:	601a      	str	r2, [r3, #0]
	q3 += (qa * gz + qb * gy - qc * gx);
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	69f8      	ldr	r0, [r7, #28]
 8004342:	f7fc fce1 	bl	8000d08 <__aeabi_fmul>
 8004346:	1c03      	adds	r3, r0, #0
 8004348:	1c1c      	adds	r4, r3, #0
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	69b8      	ldr	r0, [r7, #24]
 800434e:	f7fc fcdb 	bl	8000d08 <__aeabi_fmul>
 8004352:	1c03      	adds	r3, r0, #0
 8004354:	1c19      	adds	r1, r3, #0
 8004356:	1c20      	adds	r0, r4, #0
 8004358:	f7fc f966 	bl	8000628 <__aeabi_fadd>
 800435c:	1c03      	adds	r3, r0, #0
 800435e:	1c1c      	adds	r4, r3, #0
 8004360:	68f9      	ldr	r1, [r7, #12]
 8004362:	6978      	ldr	r0, [r7, #20]
 8004364:	f7fc fcd0 	bl	8000d08 <__aeabi_fmul>
 8004368:	1c03      	adds	r3, r0, #0
 800436a:	1c19      	adds	r1, r3, #0
 800436c:	1c20      	adds	r0, r4, #0
 800436e:	f7fc fe09 	bl	8000f84 <__aeabi_fsub>
 8004372:	1c03      	adds	r3, r0, #0
 8004374:	1c1a      	adds	r2, r3, #0
 8004376:	4b42      	ldr	r3, [pc, #264]	@ (8004480 <Mahony_update+0xa7c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c19      	adds	r1, r3, #0
 800437c:	1c10      	adds	r0, r2, #0
 800437e:	f7fc f953 	bl	8000628 <__aeabi_fadd>
 8004382:	1c03      	adds	r3, r0, #0
 8004384:	1c1a      	adds	r2, r3, #0
 8004386:	4b3e      	ldr	r3, [pc, #248]	@ (8004480 <Mahony_update+0xa7c>)
 8004388:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = Mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800438a:	4b3a      	ldr	r3, [pc, #232]	@ (8004474 <Mahony_update+0xa70>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <Mahony_update+0xa70>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	1c19      	adds	r1, r3, #0
 8004394:	1c10      	adds	r0, r2, #0
 8004396:	f7fc fcb7 	bl	8000d08 <__aeabi_fmul>
 800439a:	1c03      	adds	r3, r0, #0
 800439c:	1c1c      	adds	r4, r3, #0
 800439e:	4b36      	ldr	r3, [pc, #216]	@ (8004478 <Mahony_update+0xa74>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <Mahony_update+0xa74>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1c19      	adds	r1, r3, #0
 80043a8:	1c10      	adds	r0, r2, #0
 80043aa:	f7fc fcad 	bl	8000d08 <__aeabi_fmul>
 80043ae:	1c03      	adds	r3, r0, #0
 80043b0:	1c19      	adds	r1, r3, #0
 80043b2:	1c20      	adds	r0, r4, #0
 80043b4:	f7fc f938 	bl	8000628 <__aeabi_fadd>
 80043b8:	1c03      	adds	r3, r0, #0
 80043ba:	1c1c      	adds	r4, r3, #0
 80043bc:	4b2f      	ldr	r3, [pc, #188]	@ (800447c <Mahony_update+0xa78>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b2e      	ldr	r3, [pc, #184]	@ (800447c <Mahony_update+0xa78>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c19      	adds	r1, r3, #0
 80043c6:	1c10      	adds	r0, r2, #0
 80043c8:	f7fc fc9e 	bl	8000d08 <__aeabi_fmul>
 80043cc:	1c03      	adds	r3, r0, #0
 80043ce:	1c19      	adds	r1, r3, #0
 80043d0:	1c20      	adds	r0, r4, #0
 80043d2:	f7fc f929 	bl	8000628 <__aeabi_fadd>
 80043d6:	1c03      	adds	r3, r0, #0
 80043d8:	1c1c      	adds	r4, r3, #0
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <Mahony_update+0xa7c>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <Mahony_update+0xa7c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	1c19      	adds	r1, r3, #0
 80043e4:	1c10      	adds	r0, r2, #0
 80043e6:	f7fc fc8f 	bl	8000d08 <__aeabi_fmul>
 80043ea:	1c03      	adds	r3, r0, #0
 80043ec:	1c19      	adds	r1, r3, #0
 80043ee:	1c20      	adds	r0, r4, #0
 80043f0:	f7fc f91a 	bl	8000628 <__aeabi_fadd>
 80043f4:	1c03      	adds	r3, r0, #0
 80043f6:	1c18      	adds	r0, r3, #0
 80043f8:	f000 fb30 	bl	8004a5c <Mahony_invSqrt>
 80043fc:	1c03      	adds	r3, r0, #0
 80043fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
	q0 *= recipNorm;
 8004400:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <Mahony_update+0xa70>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004406:	1c18      	adds	r0, r3, #0
 8004408:	f7fc fc7e 	bl	8000d08 <__aeabi_fmul>
 800440c:	1c03      	adds	r3, r0, #0
 800440e:	1c1a      	adds	r2, r3, #0
 8004410:	4b18      	ldr	r3, [pc, #96]	@ (8004474 <Mahony_update+0xa70>)
 8004412:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8004414:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <Mahony_update+0xa74>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800441a:	1c18      	adds	r0, r3, #0
 800441c:	f7fc fc74 	bl	8000d08 <__aeabi_fmul>
 8004420:	1c03      	adds	r3, r0, #0
 8004422:	1c1a      	adds	r2, r3, #0
 8004424:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <Mahony_update+0xa74>)
 8004426:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8004428:	4b14      	ldr	r3, [pc, #80]	@ (800447c <Mahony_update+0xa78>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc fc6a 	bl	8000d08 <__aeabi_fmul>
 8004434:	1c03      	adds	r3, r0, #0
 8004436:	1c1a      	adds	r2, r3, #0
 8004438:	4b10      	ldr	r3, [pc, #64]	@ (800447c <Mahony_update+0xa78>)
 800443a:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <Mahony_update+0xa7c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004442:	1c18      	adds	r0, r3, #0
 8004444:	f7fc fc60 	bl	8000d08 <__aeabi_fmul>
 8004448:	1c03      	adds	r3, r0, #0
 800444a:	1c1a      	adds	r2, r3, #0
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <Mahony_update+0xa7c>)
 800444e:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <Mahony_update+0xa80>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
}
 8004456:	46bd      	mov	sp, r7
 8004458:	b021      	add	sp, #132	@ 0x84
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445c:	200004a8 	.word	0x200004a8
 8004460:	20000008 	.word	0x20000008
 8004464:	200004b8 	.word	0x200004b8
 8004468:	200004bc 	.word	0x200004bc
 800446c:	200004c0 	.word	0x200004c0
 8004470:	20000000 	.word	0x20000000
 8004474:	20000004 	.word	0x20000004
 8004478:	200004ac 	.word	0x200004ac
 800447c:	200004b0 	.word	0x200004b0
 8004480:	200004b4 	.word	0x200004b4
 8004484:	200004c4 	.word	0x200004c4

08004488 <Mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Mahony_updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b08f      	sub	sp, #60	@ 0x3c
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8004496:	49a5      	ldr	r1, [pc, #660]	@ (800472c <Mahony_updateIMU+0x2a4>)
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7fc fc35 	bl	8000d08 <__aeabi_fmul>
 800449e:	1c03      	adds	r3, r0, #0
 80044a0:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 80044a2:	49a2      	ldr	r1, [pc, #648]	@ (800472c <Mahony_updateIMU+0x2a4>)
 80044a4:	68b8      	ldr	r0, [r7, #8]
 80044a6:	f7fc fc2f 	bl	8000d08 <__aeabi_fmul>
 80044aa:	1c03      	adds	r3, r0, #0
 80044ac:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 80044ae:	499f      	ldr	r1, [pc, #636]	@ (800472c <Mahony_updateIMU+0x2a4>)
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fc fc29 	bl	8000d08 <__aeabi_fmul>
 80044b6:	1c03      	adds	r3, r0, #0
 80044b8:	607b      	str	r3, [r7, #4]

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80044ba:	2100      	movs	r1, #0
 80044bc:	6838      	ldr	r0, [r7, #0]
 80044be:	f7fb ffff 	bl	80004c0 <__aeabi_fcmpeq>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d00c      	beq.n	80044e0 <Mahony_updateIMU+0x58>
 80044c6:	2100      	movs	r1, #0
 80044c8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80044ca:	f7fb fff9 	bl	80004c0 <__aeabi_fcmpeq>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d006      	beq.n	80044e0 <Mahony_updateIMU+0x58>
 80044d2:	2100      	movs	r1, #0
 80044d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044d6:	f7fb fff3 	bl	80004c0 <__aeabi_fcmpeq>
 80044da:	1e03      	subs	r3, r0, #0
 80044dc:	d000      	beq.n	80044e0 <Mahony_updateIMU+0x58>
 80044de:	e169      	b.n	80047b4 <Mahony_updateIMU+0x32c>

		// Normalise accelerometer measurement
		recipNorm = Mahony_invSqrt(ax * ax + ay * ay + az * az);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6838      	ldr	r0, [r7, #0]
 80044e4:	f7fc fc10 	bl	8000d08 <__aeabi_fmul>
 80044e8:	1c03      	adds	r3, r0, #0
 80044ea:	1c1c      	adds	r4, r3, #0
 80044ec:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80044ee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80044f0:	f7fc fc0a 	bl	8000d08 <__aeabi_fmul>
 80044f4:	1c03      	adds	r3, r0, #0
 80044f6:	1c19      	adds	r1, r3, #0
 80044f8:	1c20      	adds	r0, r4, #0
 80044fa:	f7fc f895 	bl	8000628 <__aeabi_fadd>
 80044fe:	1c03      	adds	r3, r0, #0
 8004500:	1c1c      	adds	r4, r3, #0
 8004502:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004504:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004506:	f7fc fbff 	bl	8000d08 <__aeabi_fmul>
 800450a:	1c03      	adds	r3, r0, #0
 800450c:	1c19      	adds	r1, r3, #0
 800450e:	1c20      	adds	r0, r4, #0
 8004510:	f7fc f88a 	bl	8000628 <__aeabi_fadd>
 8004514:	1c03      	adds	r3, r0, #0
 8004516:	1c18      	adds	r0, r3, #0
 8004518:	f000 faa0 	bl	8004a5c <Mahony_invSqrt>
 800451c:	1c03      	adds	r3, r0, #0
 800451e:	637b      	str	r3, [r7, #52]	@ 0x34
		ax *= recipNorm;
 8004520:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f7fc fbf0 	bl	8000d08 <__aeabi_fmul>
 8004528:	1c03      	adds	r3, r0, #0
 800452a:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800452c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800452e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004530:	f7fc fbea 	bl	8000d08 <__aeabi_fmul>
 8004534:	1c03      	adds	r3, r0, #0
 8004536:	64bb      	str	r3, [r7, #72]	@ 0x48
		az *= recipNorm;
 8004538:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800453a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800453c:	f7fc fbe4 	bl	8000d08 <__aeabi_fmul>
 8004540:	1c03      	adds	r3, r0, #0
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8004544:	4b7a      	ldr	r3, [pc, #488]	@ (8004730 <Mahony_updateIMU+0x2a8>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b7a      	ldr	r3, [pc, #488]	@ (8004734 <Mahony_updateIMU+0x2ac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1c19      	adds	r1, r3, #0
 800454e:	1c10      	adds	r0, r2, #0
 8004550:	f7fc fbda 	bl	8000d08 <__aeabi_fmul>
 8004554:	1c03      	adds	r3, r0, #0
 8004556:	1c1c      	adds	r4, r3, #0
 8004558:	4b77      	ldr	r3, [pc, #476]	@ (8004738 <Mahony_updateIMU+0x2b0>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b77      	ldr	r3, [pc, #476]	@ (800473c <Mahony_updateIMU+0x2b4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	1c19      	adds	r1, r3, #0
 8004562:	1c10      	adds	r0, r2, #0
 8004564:	f7fc fbd0 	bl	8000d08 <__aeabi_fmul>
 8004568:	1c03      	adds	r3, r0, #0
 800456a:	1c19      	adds	r1, r3, #0
 800456c:	1c20      	adds	r0, r4, #0
 800456e:	f7fc fd09 	bl	8000f84 <__aeabi_fsub>
 8004572:	1c03      	adds	r3, r0, #0
 8004574:	633b      	str	r3, [r7, #48]	@ 0x30
		halfvy = q0 * q1 + q2 * q3;
 8004576:	4b70      	ldr	r3, [pc, #448]	@ (8004738 <Mahony_updateIMU+0x2b0>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b6d      	ldr	r3, [pc, #436]	@ (8004730 <Mahony_updateIMU+0x2a8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	1c19      	adds	r1, r3, #0
 8004580:	1c10      	adds	r0, r2, #0
 8004582:	f7fc fbc1 	bl	8000d08 <__aeabi_fmul>
 8004586:	1c03      	adds	r3, r0, #0
 8004588:	1c1c      	adds	r4, r3, #0
 800458a:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <Mahony_updateIMU+0x2b4>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b69      	ldr	r3, [pc, #420]	@ (8004734 <Mahony_updateIMU+0x2ac>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	1c19      	adds	r1, r3, #0
 8004594:	1c10      	adds	r0, r2, #0
 8004596:	f7fc fbb7 	bl	8000d08 <__aeabi_fmul>
 800459a:	1c03      	adds	r3, r0, #0
 800459c:	1c19      	adds	r1, r3, #0
 800459e:	1c20      	adds	r0, r4, #0
 80045a0:	f7fc f842 	bl	8000628 <__aeabi_fadd>
 80045a4:	1c03      	adds	r3, r0, #0
 80045a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 80045a8:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <Mahony_updateIMU+0x2b0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b62      	ldr	r3, [pc, #392]	@ (8004738 <Mahony_updateIMU+0x2b0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	1c19      	adds	r1, r3, #0
 80045b2:	1c10      	adds	r0, r2, #0
 80045b4:	f7fc fba8 	bl	8000d08 <__aeabi_fmul>
 80045b8:	1c03      	adds	r3, r0, #0
 80045ba:	21fc      	movs	r1, #252	@ 0xfc
 80045bc:	0589      	lsls	r1, r1, #22
 80045be:	1c18      	adds	r0, r3, #0
 80045c0:	f7fc fce0 	bl	8000f84 <__aeabi_fsub>
 80045c4:	1c03      	adds	r3, r0, #0
 80045c6:	1c1c      	adds	r4, r3, #0
 80045c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004734 <Mahony_updateIMU+0x2ac>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b59      	ldr	r3, [pc, #356]	@ (8004734 <Mahony_updateIMU+0x2ac>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	1c19      	adds	r1, r3, #0
 80045d2:	1c10      	adds	r0, r2, #0
 80045d4:	f7fc fb98 	bl	8000d08 <__aeabi_fmul>
 80045d8:	1c03      	adds	r3, r0, #0
 80045da:	1c19      	adds	r1, r3, #0
 80045dc:	1c20      	adds	r0, r4, #0
 80045de:	f7fc f823 	bl	8000628 <__aeabi_fadd>
 80045e2:	1c03      	adds	r3, r0, #0
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 80045e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80045ea:	f7fc fb8d 	bl	8000d08 <__aeabi_fmul>
 80045ee:	1c03      	adds	r3, r0, #0
 80045f0:	1c1c      	adds	r4, r3, #0
 80045f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80045f6:	f7fc fb87 	bl	8000d08 <__aeabi_fmul>
 80045fa:	1c03      	adds	r3, r0, #0
 80045fc:	1c19      	adds	r1, r3, #0
 80045fe:	1c20      	adds	r0, r4, #0
 8004600:	f7fc fcc0 	bl	8000f84 <__aeabi_fsub>
 8004604:	1c03      	adds	r3, r0, #0
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
		halfey = (az * halfvx - ax * halfvz);
 8004608:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800460a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800460c:	f7fc fb7c 	bl	8000d08 <__aeabi_fmul>
 8004610:	1c03      	adds	r3, r0, #0
 8004612:	1c1c      	adds	r4, r3, #0
 8004614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004616:	6838      	ldr	r0, [r7, #0]
 8004618:	f7fc fb76 	bl	8000d08 <__aeabi_fmul>
 800461c:	1c03      	adds	r3, r0, #0
 800461e:	1c19      	adds	r1, r3, #0
 8004620:	1c20      	adds	r0, r4, #0
 8004622:	f7fc fcaf 	bl	8000f84 <__aeabi_fsub>
 8004626:	1c03      	adds	r3, r0, #0
 8004628:	623b      	str	r3, [r7, #32]
		halfez = (ax * halfvy - ay * halfvx);
 800462a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	f7fc fb6b 	bl	8000d08 <__aeabi_fmul>
 8004632:	1c03      	adds	r3, r0, #0
 8004634:	1c1c      	adds	r4, r3, #0
 8004636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004638:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800463a:	f7fc fb65 	bl	8000d08 <__aeabi_fmul>
 800463e:	1c03      	adds	r3, r0, #0
 8004640:	1c19      	adds	r1, r3, #0
 8004642:	1c20      	adds	r0, r4, #0
 8004644:	f7fc fc9e 	bl	8000f84 <__aeabi_fsub>
 8004648:	1c03      	adds	r3, r0, #0
 800464a:	61fb      	str	r3, [r7, #28]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 800464c:	4b3c      	ldr	r3, [pc, #240]	@ (8004740 <Mahony_updateIMU+0x2b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2100      	movs	r1, #0
 8004652:	1c18      	adds	r0, r3, #0
 8004654:	f7fb ff4e 	bl	80004f4 <__aeabi_fcmpgt>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d07b      	beq.n	8004754 <Mahony_updateIMU+0x2cc>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 800465c:	4b38      	ldr	r3, [pc, #224]	@ (8004740 <Mahony_updateIMU+0x2b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004662:	1c18      	adds	r0, r3, #0
 8004664:	f7fc fb50 	bl	8000d08 <__aeabi_fmul>
 8004668:	1c03      	adds	r3, r0, #0
 800466a:	1c1a      	adds	r2, r3, #0
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <Mahony_updateIMU+0x2bc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c19      	adds	r1, r3, #0
 8004672:	1c10      	adds	r0, r2, #0
 8004674:	f7fc fb48 	bl	8000d08 <__aeabi_fmul>
 8004678:	1c03      	adds	r3, r0, #0
 800467a:	1c1a      	adds	r2, r3, #0
 800467c:	4b32      	ldr	r3, [pc, #200]	@ (8004748 <Mahony_updateIMU+0x2c0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	1c19      	adds	r1, r3, #0
 8004682:	1c10      	adds	r0, r2, #0
 8004684:	f7fb ffd0 	bl	8000628 <__aeabi_fadd>
 8004688:	1c03      	adds	r3, r0, #0
 800468a:	1c1a      	adds	r2, r3, #0
 800468c:	4b2e      	ldr	r3, [pc, #184]	@ (8004748 <Mahony_updateIMU+0x2c0>)
 800468e:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * invSampleFreq;
 8004690:	4b2b      	ldr	r3, [pc, #172]	@ (8004740 <Mahony_updateIMU+0x2b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a39      	ldr	r1, [r7, #32]
 8004696:	1c18      	adds	r0, r3, #0
 8004698:	f7fc fb36 	bl	8000d08 <__aeabi_fmul>
 800469c:	1c03      	adds	r3, r0, #0
 800469e:	1c1a      	adds	r2, r3, #0
 80046a0:	4b28      	ldr	r3, [pc, #160]	@ (8004744 <Mahony_updateIMU+0x2bc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1c19      	adds	r1, r3, #0
 80046a6:	1c10      	adds	r0, r2, #0
 80046a8:	f7fc fb2e 	bl	8000d08 <__aeabi_fmul>
 80046ac:	1c03      	adds	r3, r0, #0
 80046ae:	1c1a      	adds	r2, r3, #0
 80046b0:	4b26      	ldr	r3, [pc, #152]	@ (800474c <Mahony_updateIMU+0x2c4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1c19      	adds	r1, r3, #0
 80046b6:	1c10      	adds	r0, r2, #0
 80046b8:	f7fb ffb6 	bl	8000628 <__aeabi_fadd>
 80046bc:	1c03      	adds	r3, r0, #0
 80046be:	1c1a      	adds	r2, r3, #0
 80046c0:	4b22      	ldr	r3, [pc, #136]	@ (800474c <Mahony_updateIMU+0x2c4>)
 80046c2:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * invSampleFreq;
 80046c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <Mahony_updateIMU+0x2b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	1c18      	adds	r0, r3, #0
 80046cc:	f7fc fb1c 	bl	8000d08 <__aeabi_fmul>
 80046d0:	1c03      	adds	r3, r0, #0
 80046d2:	1c1a      	adds	r2, r3, #0
 80046d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <Mahony_updateIMU+0x2bc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1c19      	adds	r1, r3, #0
 80046da:	1c10      	adds	r0, r2, #0
 80046dc:	f7fc fb14 	bl	8000d08 <__aeabi_fmul>
 80046e0:	1c03      	adds	r3, r0, #0
 80046e2:	1c1a      	adds	r2, r3, #0
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <Mahony_updateIMU+0x2c8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	1c19      	adds	r1, r3, #0
 80046ea:	1c10      	adds	r0, r2, #0
 80046ec:	f7fb ff9c 	bl	8000628 <__aeabi_fadd>
 80046f0:	1c03      	adds	r3, r0, #0
 80046f2:	1c1a      	adds	r2, r3, #0
 80046f4:	4b16      	ldr	r3, [pc, #88]	@ (8004750 <Mahony_updateIMU+0x2c8>)
 80046f6:	601a      	str	r2, [r3, #0]
			gx += integralFBx;	// apply integral feedback
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <Mahony_updateIMU+0x2c0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c19      	adds	r1, r3, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7fb ff92 	bl	8000628 <__aeabi_fadd>
 8004704:	1c03      	adds	r3, r0, #0
 8004706:	60fb      	str	r3, [r7, #12]
			gy += integralFBy;
 8004708:	4b10      	ldr	r3, [pc, #64]	@ (800474c <Mahony_updateIMU+0x2c4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1c19      	adds	r1, r3, #0
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f7fb ff8a 	bl	8000628 <__aeabi_fadd>
 8004714:	1c03      	adds	r3, r0, #0
 8004716:	60bb      	str	r3, [r7, #8]
			gz += integralFBz;
 8004718:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <Mahony_updateIMU+0x2c8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1c19      	adds	r1, r3, #0
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fb ff82 	bl	8000628 <__aeabi_fadd>
 8004724:	1c03      	adds	r3, r0, #0
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	e01d      	b.n	8004766 <Mahony_updateIMU+0x2de>
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	3c8efa39 	.word	0x3c8efa39
 8004730:	200004ac 	.word	0x200004ac
 8004734:	200004b4 	.word	0x200004b4
 8004738:	20000004 	.word	0x20000004
 800473c:	200004b0 	.word	0x200004b0
 8004740:	200004a8 	.word	0x200004a8
 8004744:	20000008 	.word	0x20000008
 8004748:	200004b8 	.word	0x200004b8
 800474c:	200004bc 	.word	0x200004bc
 8004750:	200004c0 	.word	0x200004c0
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 8004754:	4bb7      	ldr	r3, [pc, #732]	@ (8004a34 <Mahony_updateIMU+0x5ac>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 800475a:	4bb7      	ldr	r3, [pc, #732]	@ (8004a38 <Mahony_updateIMU+0x5b0>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8004760:	4bb6      	ldr	r3, [pc, #728]	@ (8004a3c <Mahony_updateIMU+0x5b4>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004766:	4bb6      	ldr	r3, [pc, #728]	@ (8004a40 <Mahony_updateIMU+0x5b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800476c:	1c18      	adds	r0, r3, #0
 800476e:	f7fc facb 	bl	8000d08 <__aeabi_fmul>
 8004772:	1c03      	adds	r3, r0, #0
 8004774:	1c19      	adds	r1, r3, #0
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7fb ff56 	bl	8000628 <__aeabi_fadd>
 800477c:	1c03      	adds	r3, r0, #0
 800477e:	60fb      	str	r3, [r7, #12]
		gy += twoKp * halfey;
 8004780:	4baf      	ldr	r3, [pc, #700]	@ (8004a40 <Mahony_updateIMU+0x5b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	1c18      	adds	r0, r3, #0
 8004788:	f7fc fabe 	bl	8000d08 <__aeabi_fmul>
 800478c:	1c03      	adds	r3, r0, #0
 800478e:	1c19      	adds	r1, r3, #0
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f7fb ff49 	bl	8000628 <__aeabi_fadd>
 8004796:	1c03      	adds	r3, r0, #0
 8004798:	60bb      	str	r3, [r7, #8]
		gz += twoKp * halfez;
 800479a:	4ba9      	ldr	r3, [pc, #676]	@ (8004a40 <Mahony_updateIMU+0x5b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69f9      	ldr	r1, [r7, #28]
 80047a0:	1c18      	adds	r0, r3, #0
 80047a2:	f7fc fab1 	bl	8000d08 <__aeabi_fmul>
 80047a6:	1c03      	adds	r3, r0, #0
 80047a8:	1c19      	adds	r1, r3, #0
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fb ff3c 	bl	8000628 <__aeabi_fadd>
 80047b0:	1c03      	adds	r3, r0, #0
 80047b2:	607b      	str	r3, [r7, #4]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 80047b4:	4ba3      	ldr	r3, [pc, #652]	@ (8004a44 <Mahony_updateIMU+0x5bc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	21fc      	movs	r1, #252	@ 0xfc
 80047ba:	0589      	lsls	r1, r1, #22
 80047bc:	1c18      	adds	r0, r3, #0
 80047be:	f7fc faa3 	bl	8000d08 <__aeabi_fmul>
 80047c2:	1c03      	adds	r3, r0, #0
 80047c4:	1c19      	adds	r1, r3, #0
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7fc fa9e 	bl	8000d08 <__aeabi_fmul>
 80047cc:	1c03      	adds	r3, r0, #0
 80047ce:	60fb      	str	r3, [r7, #12]
	gy *= (0.5f * invSampleFreq);
 80047d0:	4b9c      	ldr	r3, [pc, #624]	@ (8004a44 <Mahony_updateIMU+0x5bc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	21fc      	movs	r1, #252	@ 0xfc
 80047d6:	0589      	lsls	r1, r1, #22
 80047d8:	1c18      	adds	r0, r3, #0
 80047da:	f7fc fa95 	bl	8000d08 <__aeabi_fmul>
 80047de:	1c03      	adds	r3, r0, #0
 80047e0:	1c19      	adds	r1, r3, #0
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f7fc fa90 	bl	8000d08 <__aeabi_fmul>
 80047e8:	1c03      	adds	r3, r0, #0
 80047ea:	60bb      	str	r3, [r7, #8]
	gz *= (0.5f * invSampleFreq);
 80047ec:	4b95      	ldr	r3, [pc, #596]	@ (8004a44 <Mahony_updateIMU+0x5bc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	21fc      	movs	r1, #252	@ 0xfc
 80047f2:	0589      	lsls	r1, r1, #22
 80047f4:	1c18      	adds	r0, r3, #0
 80047f6:	f7fc fa87 	bl	8000d08 <__aeabi_fmul>
 80047fa:	1c03      	adds	r3, r0, #0
 80047fc:	1c19      	adds	r1, r3, #0
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fa82 	bl	8000d08 <__aeabi_fmul>
 8004804:	1c03      	adds	r3, r0, #0
 8004806:	607b      	str	r3, [r7, #4]
	qa = q0;
 8004808:	4b8f      	ldr	r3, [pc, #572]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	61bb      	str	r3, [r7, #24]
	qb = q1;
 800480e:	4b8f      	ldr	r3, [pc, #572]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	617b      	str	r3, [r7, #20]
	qc = q2;
 8004814:	4b8e      	ldr	r3, [pc, #568]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	0612      	lsls	r2, r2, #24
 8004820:	4053      	eors	r3, r2
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	1c18      	adds	r0, r3, #0
 8004826:	f7fc fa6f 	bl	8000d08 <__aeabi_fmul>
 800482a:	1c03      	adds	r3, r0, #0
 800482c:	1c1c      	adds	r4, r3, #0
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	6938      	ldr	r0, [r7, #16]
 8004832:	f7fc fa69 	bl	8000d08 <__aeabi_fmul>
 8004836:	1c03      	adds	r3, r0, #0
 8004838:	1c19      	adds	r1, r3, #0
 800483a:	1c20      	adds	r0, r4, #0
 800483c:	f7fc fba2 	bl	8000f84 <__aeabi_fsub>
 8004840:	1c03      	adds	r3, r0, #0
 8004842:	1c1c      	adds	r4, r3, #0
 8004844:	4b83      	ldr	r3, [pc, #524]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	1c18      	adds	r0, r3, #0
 800484c:	f7fc fa5c 	bl	8000d08 <__aeabi_fmul>
 8004850:	1c03      	adds	r3, r0, #0
 8004852:	1c19      	adds	r1, r3, #0
 8004854:	1c20      	adds	r0, r4, #0
 8004856:	f7fc fb95 	bl	8000f84 <__aeabi_fsub>
 800485a:	1c03      	adds	r3, r0, #0
 800485c:	1c1a      	adds	r2, r3, #0
 800485e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1c19      	adds	r1, r3, #0
 8004864:	1c10      	adds	r0, r2, #0
 8004866:	f7fb fedf 	bl	8000628 <__aeabi_fadd>
 800486a:	1c03      	adds	r3, r0, #0
 800486c:	1c1a      	adds	r2, r3, #0
 800486e:	4b76      	ldr	r3, [pc, #472]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 8004870:	601a      	str	r2, [r3, #0]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	69b8      	ldr	r0, [r7, #24]
 8004876:	f7fc fa47 	bl	8000d08 <__aeabi_fmul>
 800487a:	1c03      	adds	r3, r0, #0
 800487c:	1c1c      	adds	r4, r3, #0
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	6938      	ldr	r0, [r7, #16]
 8004882:	f7fc fa41 	bl	8000d08 <__aeabi_fmul>
 8004886:	1c03      	adds	r3, r0, #0
 8004888:	1c19      	adds	r1, r3, #0
 800488a:	1c20      	adds	r0, r4, #0
 800488c:	f7fb fecc 	bl	8000628 <__aeabi_fadd>
 8004890:	1c03      	adds	r3, r0, #0
 8004892:	1c1c      	adds	r4, r3, #0
 8004894:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	1c18      	adds	r0, r3, #0
 800489c:	f7fc fa34 	bl	8000d08 <__aeabi_fmul>
 80048a0:	1c03      	adds	r3, r0, #0
 80048a2:	1c19      	adds	r1, r3, #0
 80048a4:	1c20      	adds	r0, r4, #0
 80048a6:	f7fc fb6d 	bl	8000f84 <__aeabi_fsub>
 80048aa:	1c03      	adds	r3, r0, #0
 80048ac:	1c1a      	adds	r2, r3, #0
 80048ae:	4b67      	ldr	r3, [pc, #412]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1c19      	adds	r1, r3, #0
 80048b4:	1c10      	adds	r0, r2, #0
 80048b6:	f7fb feb7 	bl	8000628 <__aeabi_fadd>
 80048ba:	1c03      	adds	r3, r0, #0
 80048bc:	1c1a      	adds	r2, r3, #0
 80048be:	4b63      	ldr	r3, [pc, #396]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 80048c0:	601a      	str	r2, [r3, #0]
	q2 += (qa * gy - qb * gz + q3 * gx);
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	69b8      	ldr	r0, [r7, #24]
 80048c6:	f7fc fa1f 	bl	8000d08 <__aeabi_fmul>
 80048ca:	1c03      	adds	r3, r0, #0
 80048cc:	1c1c      	adds	r4, r3, #0
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	6978      	ldr	r0, [r7, #20]
 80048d2:	f7fc fa19 	bl	8000d08 <__aeabi_fmul>
 80048d6:	1c03      	adds	r3, r0, #0
 80048d8:	1c19      	adds	r1, r3, #0
 80048da:	1c20      	adds	r0, r4, #0
 80048dc:	f7fc fb52 	bl	8000f84 <__aeabi_fsub>
 80048e0:	1c03      	adds	r3, r0, #0
 80048e2:	1c1c      	adds	r4, r3, #0
 80048e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	1c18      	adds	r0, r3, #0
 80048ec:	f7fc fa0c 	bl	8000d08 <__aeabi_fmul>
 80048f0:	1c03      	adds	r3, r0, #0
 80048f2:	1c19      	adds	r1, r3, #0
 80048f4:	1c20      	adds	r0, r4, #0
 80048f6:	f7fb fe97 	bl	8000628 <__aeabi_fadd>
 80048fa:	1c03      	adds	r3, r0, #0
 80048fc:	1c1a      	adds	r2, r3, #0
 80048fe:	4b54      	ldr	r3, [pc, #336]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	1c19      	adds	r1, r3, #0
 8004904:	1c10      	adds	r0, r2, #0
 8004906:	f7fb fe8f 	bl	8000628 <__aeabi_fadd>
 800490a:	1c03      	adds	r3, r0, #0
 800490c:	1c1a      	adds	r2, r3, #0
 800490e:	4b50      	ldr	r3, [pc, #320]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 8004910:	601a      	str	r2, [r3, #0]
	q3 += (qa * gz + qb * gy - qc * gx);
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	69b8      	ldr	r0, [r7, #24]
 8004916:	f7fc f9f7 	bl	8000d08 <__aeabi_fmul>
 800491a:	1c03      	adds	r3, r0, #0
 800491c:	1c1c      	adds	r4, r3, #0
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	6978      	ldr	r0, [r7, #20]
 8004922:	f7fc f9f1 	bl	8000d08 <__aeabi_fmul>
 8004926:	1c03      	adds	r3, r0, #0
 8004928:	1c19      	adds	r1, r3, #0
 800492a:	1c20      	adds	r0, r4, #0
 800492c:	f7fb fe7c 	bl	8000628 <__aeabi_fadd>
 8004930:	1c03      	adds	r3, r0, #0
 8004932:	1c1c      	adds	r4, r3, #0
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f7fc f9e6 	bl	8000d08 <__aeabi_fmul>
 800493c:	1c03      	adds	r3, r0, #0
 800493e:	1c19      	adds	r1, r3, #0
 8004940:	1c20      	adds	r0, r4, #0
 8004942:	f7fc fb1f 	bl	8000f84 <__aeabi_fsub>
 8004946:	1c03      	adds	r3, r0, #0
 8004948:	1c1a      	adds	r2, r3, #0
 800494a:	4b42      	ldr	r3, [pc, #264]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	1c19      	adds	r1, r3, #0
 8004950:	1c10      	adds	r0, r2, #0
 8004952:	f7fb fe69 	bl	8000628 <__aeabi_fadd>
 8004956:	1c03      	adds	r3, r0, #0
 8004958:	1c1a      	adds	r2, r3, #0
 800495a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 800495c:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = Mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800495e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b39      	ldr	r3, [pc, #228]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	1c19      	adds	r1, r3, #0
 8004968:	1c10      	adds	r0, r2, #0
 800496a:	f7fc f9cd 	bl	8000d08 <__aeabi_fmul>
 800496e:	1c03      	adds	r3, r0, #0
 8004970:	1c1c      	adds	r4, r3, #0
 8004972:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b35      	ldr	r3, [pc, #212]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	1c19      	adds	r1, r3, #0
 800497c:	1c10      	adds	r0, r2, #0
 800497e:	f7fc f9c3 	bl	8000d08 <__aeabi_fmul>
 8004982:	1c03      	adds	r3, r0, #0
 8004984:	1c19      	adds	r1, r3, #0
 8004986:	1c20      	adds	r0, r4, #0
 8004988:	f7fb fe4e 	bl	8000628 <__aeabi_fadd>
 800498c:	1c03      	adds	r3, r0, #0
 800498e:	1c1c      	adds	r4, r3, #0
 8004990:	4b2f      	ldr	r3, [pc, #188]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b2e      	ldr	r3, [pc, #184]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1c19      	adds	r1, r3, #0
 800499a:	1c10      	adds	r0, r2, #0
 800499c:	f7fc f9b4 	bl	8000d08 <__aeabi_fmul>
 80049a0:	1c03      	adds	r3, r0, #0
 80049a2:	1c19      	adds	r1, r3, #0
 80049a4:	1c20      	adds	r0, r4, #0
 80049a6:	f7fb fe3f 	bl	8000628 <__aeabi_fadd>
 80049aa:	1c03      	adds	r3, r0, #0
 80049ac:	1c1c      	adds	r4, r3, #0
 80049ae:	4b29      	ldr	r3, [pc, #164]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1c19      	adds	r1, r3, #0
 80049b8:	1c10      	adds	r0, r2, #0
 80049ba:	f7fc f9a5 	bl	8000d08 <__aeabi_fmul>
 80049be:	1c03      	adds	r3, r0, #0
 80049c0:	1c19      	adds	r1, r3, #0
 80049c2:	1c20      	adds	r0, r4, #0
 80049c4:	f7fb fe30 	bl	8000628 <__aeabi_fadd>
 80049c8:	1c03      	adds	r3, r0, #0
 80049ca:	1c18      	adds	r0, r3, #0
 80049cc:	f000 f846 	bl	8004a5c <Mahony_invSqrt>
 80049d0:	1c03      	adds	r3, r0, #0
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
	q0 *= recipNorm;
 80049d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049da:	1c18      	adds	r0, r3, #0
 80049dc:	f7fc f994 	bl	8000d08 <__aeabi_fmul>
 80049e0:	1c03      	adds	r3, r0, #0
 80049e2:	1c1a      	adds	r2, r3, #0
 80049e4:	4b18      	ldr	r3, [pc, #96]	@ (8004a48 <Mahony_updateIMU+0x5c0>)
 80049e6:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 80049e8:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049ee:	1c18      	adds	r0, r3, #0
 80049f0:	f7fc f98a 	bl	8000d08 <__aeabi_fmul>
 80049f4:	1c03      	adds	r3, r0, #0
 80049f6:	1c1a      	adds	r2, r3, #0
 80049f8:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <Mahony_updateIMU+0x5c4>)
 80049fa:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80049fc:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a02:	1c18      	adds	r0, r3, #0
 8004a04:	f7fc f980 	bl	8000d08 <__aeabi_fmul>
 8004a08:	1c03      	adds	r3, r0, #0
 8004a0a:	1c1a      	adds	r2, r3, #0
 8004a0c:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <Mahony_updateIMU+0x5c8>)
 8004a0e:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a16:	1c18      	adds	r0, r3, #0
 8004a18:	f7fc f976 	bl	8000d08 <__aeabi_fmul>
 8004a1c:	1c03      	adds	r3, r0, #0
 8004a1e:	1c1a      	adds	r2, r3, #0
 8004a20:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <Mahony_updateIMU+0x5cc>)
 8004a22:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <Mahony_updateIMU+0x5d0>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b00f      	add	sp, #60	@ 0x3c
 8004a30:	bd90      	pop	{r4, r7, pc}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	200004b8 	.word	0x200004b8
 8004a38:	200004bc 	.word	0x200004bc
 8004a3c:	200004c0 	.word	0x200004c0
 8004a40:	20000000 	.word	0x20000000
 8004a44:	20000008 	.word	0x20000008
 8004a48:	20000004 	.word	0x20000004
 8004a4c:	200004ac 	.word	0x200004ac
 8004a50:	200004b0 	.word	0x200004b0
 8004a54:	200004b4 	.word	0x200004b4
 8004a58:	200004c4 	.word	0x200004c4

08004a5c <Mahony_invSqrt>:
//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Mahony_invSqrt(float x)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8004a64:	21fc      	movs	r1, #252	@ 0xfc
 8004a66:	0589      	lsls	r1, r1, #22
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc f94d 	bl	8000d08 <__aeabi_fmul>
 8004a6e:	1c03      	adds	r3, r0, #0
 8004a70:	617b      	str	r3, [r7, #20]
	float y = x;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8004a76:	2310      	movs	r3, #16
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	105b      	asrs	r3, r3, #1
 8004a82:	4a21      	ldr	r2, [pc, #132]	@ (8004b08 <Mahony_invSqrt+0xac>)
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8004a88:	230c      	movs	r3, #12
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6979      	ldr	r1, [r7, #20]
 8004a94:	1c18      	adds	r0, r3, #0
 8004a96:	f7fc f937 	bl	8000d08 <__aeabi_fmul>
 8004a9a:	1c03      	adds	r3, r0, #0
 8004a9c:	1c1a      	adds	r2, r3, #0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1c19      	adds	r1, r3, #0
 8004aa2:	1c10      	adds	r0, r2, #0
 8004aa4:	f7fc f930 	bl	8000d08 <__aeabi_fmul>
 8004aa8:	1c03      	adds	r3, r0, #0
 8004aaa:	1c19      	adds	r1, r3, #0
 8004aac:	20ff      	movs	r0, #255	@ 0xff
 8004aae:	0580      	lsls	r0, r0, #22
 8004ab0:	f7fc fa68 	bl	8000f84 <__aeabi_fsub>
 8004ab4:	1c03      	adds	r3, r0, #0
 8004ab6:	1c1a      	adds	r2, r3, #0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1c19      	adds	r1, r3, #0
 8004abc:	1c10      	adds	r0, r2, #0
 8004abe:	f7fc f923 	bl	8000d08 <__aeabi_fmul>
 8004ac2:	1c03      	adds	r3, r0, #0
 8004ac4:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	1c18      	adds	r0, r3, #0
 8004acc:	f7fc f91c 	bl	8000d08 <__aeabi_fmul>
 8004ad0:	1c03      	adds	r3, r0, #0
 8004ad2:	1c1a      	adds	r2, r3, #0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1c19      	adds	r1, r3, #0
 8004ad8:	1c10      	adds	r0, r2, #0
 8004ada:	f7fc f915 	bl	8000d08 <__aeabi_fmul>
 8004ade:	1c03      	adds	r3, r0, #0
 8004ae0:	1c19      	adds	r1, r3, #0
 8004ae2:	20ff      	movs	r0, #255	@ 0xff
 8004ae4:	0580      	lsls	r0, r0, #22
 8004ae6:	f7fc fa4d 	bl	8000f84 <__aeabi_fsub>
 8004aea:	1c03      	adds	r3, r0, #0
 8004aec:	1c1a      	adds	r2, r3, #0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1c19      	adds	r1, r3, #0
 8004af2:	1c10      	adds	r0, r2, #0
 8004af4:	f7fc f908 	bl	8000d08 <__aeabi_fmul>
 8004af8:	1c03      	adds	r3, r0, #0
 8004afa:	613b      	str	r3, [r7, #16]
	return y;
 8004afc:	693b      	ldr	r3, [r7, #16]
}
 8004afe:	1c18      	adds	r0, r3, #0
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b006      	add	sp, #24
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	5f3759df 	.word	0x5f3759df

08004b0c <Mahony_computeAngles>:

//-------------------------------------------------------------------------------------------

void Mahony_computeAngles()
{
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8004b10:	4b52      	ldr	r3, [pc, #328]	@ (8004c5c <Mahony_computeAngles+0x150>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b52      	ldr	r3, [pc, #328]	@ (8004c60 <Mahony_computeAngles+0x154>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	1c19      	adds	r1, r3, #0
 8004b1a:	1c10      	adds	r0, r2, #0
 8004b1c:	f7fc f8f4 	bl	8000d08 <__aeabi_fmul>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	1c1c      	adds	r4, r3, #0
 8004b24:	4b4f      	ldr	r3, [pc, #316]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <Mahony_computeAngles+0x15c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1c19      	adds	r1, r3, #0
 8004b2e:	1c10      	adds	r0, r2, #0
 8004b30:	f7fc f8ea 	bl	8000d08 <__aeabi_fmul>
 8004b34:	1c03      	adds	r3, r0, #0
 8004b36:	1c19      	adds	r1, r3, #0
 8004b38:	1c20      	adds	r0, r4, #0
 8004b3a:	f7fb fd75 	bl	8000628 <__aeabi_fadd>
 8004b3e:	1c03      	adds	r3, r0, #0
 8004b40:	1c1c      	adds	r4, r3, #0
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <Mahony_computeAngles+0x154>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b46      	ldr	r3, [pc, #280]	@ (8004c60 <Mahony_computeAngles+0x154>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1c19      	adds	r1, r3, #0
 8004b4c:	1c10      	adds	r0, r2, #0
 8004b4e:	f7fc f8db 	bl	8000d08 <__aeabi_fmul>
 8004b52:	1c03      	adds	r3, r0, #0
 8004b54:	1c19      	adds	r1, r3, #0
 8004b56:	20fc      	movs	r0, #252	@ 0xfc
 8004b58:	0580      	lsls	r0, r0, #22
 8004b5a:	f7fc fa13 	bl	8000f84 <__aeabi_fsub>
 8004b5e:	1c03      	adds	r3, r0, #0
 8004b60:	1c1d      	adds	r5, r3, #0
 8004b62:	4b40      	ldr	r3, [pc, #256]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b3f      	ldr	r3, [pc, #252]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	1c19      	adds	r1, r3, #0
 8004b6c:	1c10      	adds	r0, r2, #0
 8004b6e:	f7fc f8cb 	bl	8000d08 <__aeabi_fmul>
 8004b72:	1c03      	adds	r3, r0, #0
 8004b74:	1c19      	adds	r1, r3, #0
 8004b76:	1c28      	adds	r0, r5, #0
 8004b78:	f7fc fa04 	bl	8000f84 <__aeabi_fsub>
 8004b7c:	1c03      	adds	r3, r0, #0
 8004b7e:	1c19      	adds	r1, r3, #0
 8004b80:	1c20      	adds	r0, r4, #0
 8004b82:	f00b fd45 	bl	8010610 <atan2f>
 8004b86:	1c02      	adds	r2, r0, #0
 8004b88:	4b38      	ldr	r3, [pc, #224]	@ (8004c6c <Mahony_computeAngles+0x160>)
 8004b8a:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8004b8c:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <Mahony_computeAngles+0x154>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <Mahony_computeAngles+0x15c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1c19      	adds	r1, r3, #0
 8004b96:	1c10      	adds	r0, r2, #0
 8004b98:	f7fc f8b6 	bl	8000d08 <__aeabi_fmul>
 8004b9c:	1c03      	adds	r3, r0, #0
 8004b9e:	1c1c      	adds	r4, r3, #0
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <Mahony_computeAngles+0x150>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	1c19      	adds	r1, r3, #0
 8004baa:	1c10      	adds	r0, r2, #0
 8004bac:	f7fc f8ac 	bl	8000d08 <__aeabi_fmul>
 8004bb0:	1c03      	adds	r3, r0, #0
 8004bb2:	1c19      	adds	r1, r3, #0
 8004bb4:	1c20      	adds	r0, r4, #0
 8004bb6:	f7fc f9e5 	bl	8000f84 <__aeabi_fsub>
 8004bba:	1c03      	adds	r3, r0, #0
 8004bbc:	21c0      	movs	r1, #192	@ 0xc0
 8004bbe:	0609      	lsls	r1, r1, #24
 8004bc0:	1c18      	adds	r0, r3, #0
 8004bc2:	f7fc f8a1 	bl	8000d08 <__aeabi_fmul>
 8004bc6:	1c03      	adds	r3, r0, #0
 8004bc8:	1c18      	adds	r0, r3, #0
 8004bca:	f00b fd01 	bl	80105d0 <asinf>
 8004bce:	1c02      	adds	r2, r0, #0
 8004bd0:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <Mahony_computeAngles+0x164>)
 8004bd2:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 8004bd4:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <Mahony_computeAngles+0x154>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b22      	ldr	r3, [pc, #136]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	1c19      	adds	r1, r3, #0
 8004bde:	1c10      	adds	r0, r2, #0
 8004be0:	f7fc f892 	bl	8000d08 <__aeabi_fmul>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	1c1c      	adds	r4, r3, #0
 8004be8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <Mahony_computeAngles+0x150>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <Mahony_computeAngles+0x15c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	1c19      	adds	r1, r3, #0
 8004bf2:	1c10      	adds	r0, r2, #0
 8004bf4:	f7fc f888 	bl	8000d08 <__aeabi_fmul>
 8004bf8:	1c03      	adds	r3, r0, #0
 8004bfa:	1c19      	adds	r1, r3, #0
 8004bfc:	1c20      	adds	r0, r4, #0
 8004bfe:	f7fb fd13 	bl	8000628 <__aeabi_fadd>
 8004c02:	1c03      	adds	r3, r0, #0
 8004c04:	1c1c      	adds	r4, r3, #0
 8004c06:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b16      	ldr	r3, [pc, #88]	@ (8004c64 <Mahony_computeAngles+0x158>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1c19      	adds	r1, r3, #0
 8004c10:	1c10      	adds	r0, r2, #0
 8004c12:	f7fc f879 	bl	8000d08 <__aeabi_fmul>
 8004c16:	1c03      	adds	r3, r0, #0
 8004c18:	1c19      	adds	r1, r3, #0
 8004c1a:	20fc      	movs	r0, #252	@ 0xfc
 8004c1c:	0580      	lsls	r0, r0, #22
 8004c1e:	f7fc f9b1 	bl	8000f84 <__aeabi_fsub>
 8004c22:	1c03      	adds	r3, r0, #0
 8004c24:	1c1d      	adds	r5, r3, #0
 8004c26:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <Mahony_computeAngles+0x15c>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <Mahony_computeAngles+0x15c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1c19      	adds	r1, r3, #0
 8004c30:	1c10      	adds	r0, r2, #0
 8004c32:	f7fc f869 	bl	8000d08 <__aeabi_fmul>
 8004c36:	1c03      	adds	r3, r0, #0
 8004c38:	1c19      	adds	r1, r3, #0
 8004c3a:	1c28      	adds	r0, r5, #0
 8004c3c:	f7fc f9a2 	bl	8000f84 <__aeabi_fsub>
 8004c40:	1c03      	adds	r3, r0, #0
 8004c42:	1c19      	adds	r1, r3, #0
 8004c44:	1c20      	adds	r0, r4, #0
 8004c46:	f00b fce3 	bl	8010610 <atan2f>
 8004c4a:	1c02      	adds	r2, r0, #0
 8004c4c:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <Mahony_computeAngles+0x168>)
 8004c4e:	601a      	str	r2, [r3, #0]
	//yaw = atan2f(q1*q2 + q0*q3, 0.5f+q1*q1 - q2*q2 - q3*q3);
	anglesComputed = 1;
 8004c50:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <Mahony_computeAngles+0x16c>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
}
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5c:	20000004 	.word	0x20000004
 8004c60:	200004ac 	.word	0x200004ac
 8004c64:	200004b0 	.word	0x200004b0
 8004c68:	200004b4 	.word	0x200004b4
 8004c6c:	200004c8 	.word	0x200004c8
 8004c70:	200004cc 	.word	0x200004cc
 8004c74:	200004d0 	.word	0x200004d0
 8004c78:	200004c4 	.word	0x200004c4

08004c7c <Mahony_getRoll>:
float Mahony_getRoll() {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	if (!anglesComputed) Mahony_computeAngles();
 8004c80:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <Mahony_getRoll+0x24>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <Mahony_getRoll+0x10>
 8004c88:	f7ff ff40 	bl	8004b0c <Mahony_computeAngles>
	return roll * 57.29578f;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <Mahony_getRoll+0x28>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4905      	ldr	r1, [pc, #20]	@ (8004ca8 <Mahony_getRoll+0x2c>)
 8004c92:	1c18      	adds	r0, r3, #0
 8004c94:	f7fc f838 	bl	8000d08 <__aeabi_fmul>
 8004c98:	1c03      	adds	r3, r0, #0
}
 8004c9a:	1c18      	adds	r0, r3, #0
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200004c4 	.word	0x200004c4
 8004ca4:	200004c8 	.word	0x200004c8
 8004ca8:	42652ee1 	.word	0x42652ee1

08004cac <Mahony_getPitch>:

float Mahony_getPitch() {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	if (!anglesComputed) Mahony_computeAngles();
 8004cb0:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <Mahony_getPitch+0x24>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <Mahony_getPitch+0x10>
 8004cb8:	f7ff ff28 	bl	8004b0c <Mahony_computeAngles>
	return pitch * 57.29578f;
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <Mahony_getPitch+0x28>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4905      	ldr	r1, [pc, #20]	@ (8004cd8 <Mahony_getPitch+0x2c>)
 8004cc2:	1c18      	adds	r0, r3, #0
 8004cc4:	f7fc f820 	bl	8000d08 <__aeabi_fmul>
 8004cc8:	1c03      	adds	r3, r0, #0
}
 8004cca:	1c18      	adds	r0, r3, #0
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200004c4 	.word	0x200004c4
 8004cd4:	200004cc 	.word	0x200004cc
 8004cd8:	42652ee1 	.word	0x42652ee1

08004cdc <Mahony_getYaw>:

float Mahony_getYaw() {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
	if (!anglesComputed) Mahony_computeAngles();
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <Mahony_getYaw+0x30>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <Mahony_getYaw+0x10>
 8004ce8:	f7ff ff10 	bl	8004b0c <Mahony_computeAngles>
	return yaw * 57.29578f + 180.0f;
 8004cec:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <Mahony_getYaw+0x34>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4908      	ldr	r1, [pc, #32]	@ (8004d14 <Mahony_getYaw+0x38>)
 8004cf2:	1c18      	adds	r0, r3, #0
 8004cf4:	f7fc f808 	bl	8000d08 <__aeabi_fmul>
 8004cf8:	1c03      	adds	r3, r0, #0
 8004cfa:	4907      	ldr	r1, [pc, #28]	@ (8004d18 <Mahony_getYaw+0x3c>)
 8004cfc:	1c18      	adds	r0, r3, #0
 8004cfe:	f7fb fc93 	bl	8000628 <__aeabi_fadd>
 8004d02:	1c03      	adds	r3, r0, #0

}
 8004d04:	1c18      	adds	r0, r3, #0
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	200004c4 	.word	0x200004c4
 8004d10:	200004d0 	.word	0x200004d0
 8004d14:	42652ee1 	.word	0x42652ee1
 8004d18:	43340000 	.word	0x43340000

08004d1c <convert_AHRS_pitch>:
float magCalibration[3], magbias[3],_mag_adjust[3];
float now,delta_t;
float lastUpdate;
static float yaw_angle=0;
float convert_AHRS_pitch(float AHRS_pitch)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	float pitch = AHRS_pitch*(-1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2280      	movs	r2, #128	@ 0x80
 8004d28:	0612      	lsls	r2, r2, #24
 8004d2a:	4053      	eors	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
	return AHRS_pitch;
 8004d2e:	687b      	ldr	r3, [r7, #4]
}
 8004d30:	1c18      	adds	r0, r3, #0
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <convert_AHRS_roll>:

float convert_AHRS_roll(float AHRS_roll)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	float roll = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
	if(AHRS_roll > 0)
 8004d44:	2100      	movs	r1, #0
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fb fbd4 	bl	80004f4 <__aeabi_fcmpgt>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d006      	beq.n	8004d5e <convert_AHRS_roll+0x26>
		roll = AHRS_roll - 180;
 8004d50:	490b      	ldr	r1, [pc, #44]	@ (8004d80 <convert_AHRS_roll+0x48>)
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc f916 	bl	8000f84 <__aeabi_fsub>
 8004d58:	1c03      	adds	r3, r0, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e00b      	b.n	8004d76 <convert_AHRS_roll+0x3e>
	else if(AHRS_roll < 0)
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7fb fbb3 	bl	80004cc <__aeabi_fcmplt>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d005      	beq.n	8004d76 <convert_AHRS_roll+0x3e>
		roll = AHRS_roll + 180;
 8004d6a:	4905      	ldr	r1, [pc, #20]	@ (8004d80 <convert_AHRS_roll+0x48>)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb fc5b 	bl	8000628 <__aeabi_fadd>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	60fb      	str	r3, [r7, #12]
	return AHRS_roll;
 8004d76:	687b      	ldr	r3, [r7, #4]
}
 8004d78:	1c18      	adds	r0, r3, #0
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	43340000 	.word	0x43340000

08004d84 <convert_AHRS_yaw>:

float convert_AHRS_yaw(float AHRS_yaw)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	float yaw = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
	if(AHRS_yaw > 180)
 8004d90:	490e      	ldr	r1, [pc, #56]	@ (8004dcc <convert_AHRS_yaw+0x48>)
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fb fbae 	bl	80004f4 <__aeabi_fcmpgt>
 8004d98:	1e03      	subs	r3, r0, #0
 8004d9a:	d006      	beq.n	8004daa <convert_AHRS_yaw+0x26>
		yaw = 360 - AHRS_yaw;
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	480c      	ldr	r0, [pc, #48]	@ (8004dd0 <convert_AHRS_yaw+0x4c>)
 8004da0:	f7fc f8f0 	bl	8000f84 <__aeabi_fsub>
 8004da4:	1c03      	adds	r3, r0, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e00a      	b.n	8004dc0 <convert_AHRS_yaw+0x3c>
	else if(AHRS_yaw < 180)
 8004daa:	4908      	ldr	r1, [pc, #32]	@ (8004dcc <convert_AHRS_yaw+0x48>)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fb fb8d 	bl	80004cc <__aeabi_fcmplt>
 8004db2:	1e03      	subs	r3, r0, #0
 8004db4:	d004      	beq.n	8004dc0 <convert_AHRS_yaw+0x3c>
		yaw = AHRS_yaw*(-1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2280      	movs	r2, #128	@ 0x80
 8004dba:	0612      	lsls	r2, r2, #24
 8004dbc:	4053      	eors	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
	//return yaw;
	return AHRS_yaw;
 8004dc0:	687b      	ldr	r3, [r7, #4]
}
 8004dc2:	1c18      	adds	r0, r3, #0
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	43340000 	.word	0x43340000
 8004dd0:	43b40000 	.word	0x43b40000

08004dd4 <get_yaw_pitch_roll>:
{

}

get_yaw_pitch_roll(float* Yaw_Pitch_Roll,float* gyro_XYZ,int GyroSize)
{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	46c6      	mov	lr, r8
 8004dd8:	b500      	push	{lr}
 8004dda:	b08e      	sub	sp, #56	@ 0x38
 8004ddc:	af06      	add	r7, sp, #24
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]

	MPU9250_GetAccData(AccData);
 8004de4:	4bed      	ldr	r3, [pc, #948]	@ (800519c <get_yaw_pitch_roll+0x3c8>)
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 fb8a 	bl	8005500 <MPU9250_GetAccData>
	MPU9250_GetGyroData(GyroData);
 8004dec:	4bec      	ldr	r3, [pc, #944]	@ (80051a0 <get_yaw_pitch_roll+0x3cc>)
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 fbba 	bl	8005568 <MPU9250_GetGyroData>
	MPU9250_GetMagData(MagData);
 8004df4:	4beb      	ldr	r3, [pc, #940]	@ (80051a4 <get_yaw_pitch_roll+0x3d0>)
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 fbea 	bl	80055d0 <MPU9250_GetMagData>
	float aRes = 2.0f/32768.0f;
 8004dfc:	23e2      	movs	r3, #226	@ 0xe2
 8004dfe:	059b      	lsls	r3, r3, #22
 8004e00:	61fb      	str	r3, [r7, #28]
	float gRes = 250.0f/32768.0f;
 8004e02:	4be9      	ldr	r3, [pc, #932]	@ (80051a8 <get_yaw_pitch_roll+0x3d4>)
 8004e04:	61bb      	str	r3, [r7, #24]
	float mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8004e06:	4be9      	ldr	r3, [pc, #932]	@ (80051ac <get_yaw_pitch_roll+0x3d8>)
 8004e08:	617b      	str	r3, [r7, #20]
	magbias[0] = +491.;  // User environmental x-axis correction in milliGauss, should be automatically calculated
 8004e0a:	4be9      	ldr	r3, [pc, #932]	@ (80051b0 <get_yaw_pitch_roll+0x3dc>)
 8004e0c:	4ae9      	ldr	r2, [pc, #932]	@ (80051b4 <get_yaw_pitch_roll+0x3e0>)
 8004e0e:	601a      	str	r2, [r3, #0]
	magbias[1] = -495.;  // User environmental x-axis correction in milliGauss
 8004e10:	4be7      	ldr	r3, [pc, #924]	@ (80051b0 <get_yaw_pitch_roll+0x3dc>)
 8004e12:	4ae9      	ldr	r2, [pc, #932]	@ (80051b8 <get_yaw_pitch_roll+0x3e4>)
 8004e14:	605a      	str	r2, [r3, #4]
	magbias[2] = -1015.;
 8004e16:	4be6      	ldr	r3, [pc, #920]	@ (80051b0 <get_yaw_pitch_roll+0x3dc>)
 8004e18:	4ae8      	ldr	r2, [pc, #928]	@ (80051bc <get_yaw_pitch_roll+0x3e8>)
 8004e1a:	609a      	str	r2, [r3, #8]
	readAK8963Registers(0x01,3,_mag_adjust);
 8004e1c:	4be8      	ldr	r3, [pc, #928]	@ (80051c0 <get_yaw_pitch_roll+0x3ec>)
 8004e1e:	001a      	movs	r2, r3
 8004e20:	2103      	movs	r1, #3
 8004e22:	2001      	movs	r0, #1
 8004e24:	f000 fb3b 	bl	800549e <readAK8963Registers>
	ax = (float)AccData[0]*aRes;
 8004e28:	4bdc      	ldr	r3, [pc, #880]	@ (800519c <get_yaw_pitch_roll+0x3c8>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	5e9b      	ldrsh	r3, [r3, r2]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7fc fa82 	bl	8001338 <__aeabi_i2f>
 8004e34:	1c03      	adds	r3, r0, #0
 8004e36:	69f9      	ldr	r1, [r7, #28]
 8004e38:	1c18      	adds	r0, r3, #0
 8004e3a:	f7fb ff65 	bl	8000d08 <__aeabi_fmul>
 8004e3e:	1c03      	adds	r3, r0, #0
 8004e40:	1c1a      	adds	r2, r3, #0
 8004e42:	4be0      	ldr	r3, [pc, #896]	@ (80051c4 <get_yaw_pitch_roll+0x3f0>)
 8004e44:	601a      	str	r2, [r3, #0]
	ay = (float)AccData[1]*aRes;
 8004e46:	4bd5      	ldr	r3, [pc, #852]	@ (800519c <get_yaw_pitch_roll+0x3c8>)
 8004e48:	2202      	movs	r2, #2
 8004e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fc fa73 	bl	8001338 <__aeabi_i2f>
 8004e52:	1c03      	adds	r3, r0, #0
 8004e54:	69f9      	ldr	r1, [r7, #28]
 8004e56:	1c18      	adds	r0, r3, #0
 8004e58:	f7fb ff56 	bl	8000d08 <__aeabi_fmul>
 8004e5c:	1c03      	adds	r3, r0, #0
 8004e5e:	1c1a      	adds	r2, r3, #0
 8004e60:	4bd9      	ldr	r3, [pc, #868]	@ (80051c8 <get_yaw_pitch_roll+0x3f4>)
 8004e62:	601a      	str	r2, [r3, #0]
	az = (float)AccData[2]*aRes;
 8004e64:	4bcd      	ldr	r3, [pc, #820]	@ (800519c <get_yaw_pitch_roll+0x3c8>)
 8004e66:	2204      	movs	r2, #4
 8004e68:	5e9b      	ldrsh	r3, [r3, r2]
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7fc fa64 	bl	8001338 <__aeabi_i2f>
 8004e70:	1c03      	adds	r3, r0, #0
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	1c18      	adds	r0, r3, #0
 8004e76:	f7fb ff47 	bl	8000d08 <__aeabi_fmul>
 8004e7a:	1c03      	adds	r3, r0, #0
 8004e7c:	1c1a      	adds	r2, r3, #0
 8004e7e:	4bd3      	ldr	r3, [pc, #844]	@ (80051cc <get_yaw_pitch_roll+0x3f8>)
 8004e80:	601a      	str	r2, [r3, #0]
	gx = (float)GyroData[0]*gRes*PI/180.0;  // get actual gyro value, this depends on scale being set
 8004e82:	4bc7      	ldr	r3, [pc, #796]	@ (80051a0 <get_yaw_pitch_roll+0x3cc>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	5e9b      	ldrsh	r3, [r3, r2]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fc fa55 	bl	8001338 <__aeabi_i2f>
 8004e8e:	1c03      	adds	r3, r0, #0
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	1c18      	adds	r0, r3, #0
 8004e94:	f7fb ff38 	bl	8000d08 <__aeabi_fmul>
 8004e98:	1c03      	adds	r3, r0, #0
 8004e9a:	1c18      	adds	r0, r3, #0
 8004e9c:	f7fe f996 	bl	80031cc <__aeabi_f2d>
 8004ea0:	4acb      	ldr	r2, [pc, #812]	@ (80051d0 <get_yaw_pitch_roll+0x3fc>)
 8004ea2:	4bcc      	ldr	r3, [pc, #816]	@ (80051d4 <get_yaw_pitch_roll+0x400>)
 8004ea4:	f7fd fa7e 	bl	80023a4 <__aeabi_dmul>
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	000b      	movs	r3, r1
 8004eac:	0010      	movs	r0, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4bc9      	ldr	r3, [pc, #804]	@ (80051d8 <get_yaw_pitch_roll+0x404>)
 8004eb4:	f7fc fe32 	bl	8001b1c <__aeabi_ddiv>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	000b      	movs	r3, r1
 8004ebc:	0010      	movs	r0, r2
 8004ebe:	0019      	movs	r1, r3
 8004ec0:	f7fe f9cc 	bl	800325c <__aeabi_d2f>
 8004ec4:	1c02      	adds	r2, r0, #0
 8004ec6:	4bc5      	ldr	r3, [pc, #788]	@ (80051dc <get_yaw_pitch_roll+0x408>)
 8004ec8:	601a      	str	r2, [r3, #0]
	gy = (float)GyroData[1]*gRes*PI/180.0;
 8004eca:	4bb5      	ldr	r3, [pc, #724]	@ (80051a0 <get_yaw_pitch_roll+0x3cc>)
 8004ecc:	2202      	movs	r2, #2
 8004ece:	5e9b      	ldrsh	r3, [r3, r2]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7fc fa31 	bl	8001338 <__aeabi_i2f>
 8004ed6:	1c03      	adds	r3, r0, #0
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	1c18      	adds	r0, r3, #0
 8004edc:	f7fb ff14 	bl	8000d08 <__aeabi_fmul>
 8004ee0:	1c03      	adds	r3, r0, #0
 8004ee2:	1c18      	adds	r0, r3, #0
 8004ee4:	f7fe f972 	bl	80031cc <__aeabi_f2d>
 8004ee8:	4ab9      	ldr	r2, [pc, #740]	@ (80051d0 <get_yaw_pitch_roll+0x3fc>)
 8004eea:	4bba      	ldr	r3, [pc, #744]	@ (80051d4 <get_yaw_pitch_roll+0x400>)
 8004eec:	f7fd fa5a 	bl	80023a4 <__aeabi_dmul>
 8004ef0:	0002      	movs	r2, r0
 8004ef2:	000b      	movs	r3, r1
 8004ef4:	0010      	movs	r0, r2
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4bb7      	ldr	r3, [pc, #732]	@ (80051d8 <get_yaw_pitch_roll+0x404>)
 8004efc:	f7fc fe0e 	bl	8001b1c <__aeabi_ddiv>
 8004f00:	0002      	movs	r2, r0
 8004f02:	000b      	movs	r3, r1
 8004f04:	0010      	movs	r0, r2
 8004f06:	0019      	movs	r1, r3
 8004f08:	f7fe f9a8 	bl	800325c <__aeabi_d2f>
 8004f0c:	1c02      	adds	r2, r0, #0
 8004f0e:	4bb4      	ldr	r3, [pc, #720]	@ (80051e0 <get_yaw_pitch_roll+0x40c>)
 8004f10:	601a      	str	r2, [r3, #0]
	gz = (float)GyroData[2]*gRes*PI/180.0;
 8004f12:	4ba3      	ldr	r3, [pc, #652]	@ (80051a0 <get_yaw_pitch_roll+0x3cc>)
 8004f14:	2204      	movs	r2, #4
 8004f16:	5e9b      	ldrsh	r3, [r3, r2]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fc fa0d 	bl	8001338 <__aeabi_i2f>
 8004f1e:	1c03      	adds	r3, r0, #0
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	1c18      	adds	r0, r3, #0
 8004f24:	f7fb fef0 	bl	8000d08 <__aeabi_fmul>
 8004f28:	1c03      	adds	r3, r0, #0
 8004f2a:	1c18      	adds	r0, r3, #0
 8004f2c:	f7fe f94e 	bl	80031cc <__aeabi_f2d>
 8004f30:	4aa7      	ldr	r2, [pc, #668]	@ (80051d0 <get_yaw_pitch_roll+0x3fc>)
 8004f32:	4ba8      	ldr	r3, [pc, #672]	@ (80051d4 <get_yaw_pitch_roll+0x400>)
 8004f34:	f7fd fa36 	bl	80023a4 <__aeabi_dmul>
 8004f38:	0002      	movs	r2, r0
 8004f3a:	000b      	movs	r3, r1
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	0019      	movs	r1, r3
 8004f40:	2200      	movs	r2, #0
 8004f42:	4ba5      	ldr	r3, [pc, #660]	@ (80051d8 <get_yaw_pitch_roll+0x404>)
 8004f44:	f7fc fdea 	bl	8001b1c <__aeabi_ddiv>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	000b      	movs	r3, r1
 8004f4c:	0010      	movs	r0, r2
 8004f4e:	0019      	movs	r1, r3
 8004f50:	f7fe f984 	bl	800325c <__aeabi_d2f>
 8004f54:	1c02      	adds	r2, r0, #0
 8004f56:	4ba3      	ldr	r3, [pc, #652]	@ (80051e4 <get_yaw_pitch_roll+0x410>)
 8004f58:	601a      	str	r2, [r3, #0]

	acc_x = ax/9.81f;
 8004f5a:	4b9a      	ldr	r3, [pc, #616]	@ (80051c4 <get_yaw_pitch_roll+0x3f0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	49a2      	ldr	r1, [pc, #648]	@ (80051e8 <get_yaw_pitch_roll+0x414>)
 8004f60:	1c18      	adds	r0, r3, #0
 8004f62:	f7fb fceb 	bl	800093c <__aeabi_fdiv>
 8004f66:	1c03      	adds	r3, r0, #0
 8004f68:	1c1a      	adds	r2, r3, #0
 8004f6a:	4ba0      	ldr	r3, [pc, #640]	@ (80051ec <get_yaw_pitch_roll+0x418>)
 8004f6c:	601a      	str	r2, [r3, #0]
	acc_y = ay/9.81f;
 8004f6e:	4b96      	ldr	r3, [pc, #600]	@ (80051c8 <get_yaw_pitch_roll+0x3f4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	499d      	ldr	r1, [pc, #628]	@ (80051e8 <get_yaw_pitch_roll+0x414>)
 8004f74:	1c18      	adds	r0, r3, #0
 8004f76:	f7fb fce1 	bl	800093c <__aeabi_fdiv>
 8004f7a:	1c03      	adds	r3, r0, #0
 8004f7c:	1c1a      	adds	r2, r3, #0
 8004f7e:	4b9c      	ldr	r3, [pc, #624]	@ (80051f0 <get_yaw_pitch_roll+0x41c>)
 8004f80:	601a      	str	r2, [r3, #0]
	acc_z = az/9.81f;
 8004f82:	4b92      	ldr	r3, [pc, #584]	@ (80051cc <get_yaw_pitch_roll+0x3f8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4998      	ldr	r1, [pc, #608]	@ (80051e8 <get_yaw_pitch_roll+0x414>)
 8004f88:	1c18      	adds	r0, r3, #0
 8004f8a:	f7fb fcd7 	bl	800093c <__aeabi_fdiv>
 8004f8e:	1c03      	adds	r3, r0, #0
 8004f90:	1c1a      	adds	r2, r3, #0
 8004f92:	4b98      	ldr	r3, [pc, #608]	@ (80051f4 <get_yaw_pitch_roll+0x420>)
 8004f94:	601a      	str	r2, [r3, #0]
	gyro_x = gx*57.29578f;
 8004f96:	4b91      	ldr	r3, [pc, #580]	@ (80051dc <get_yaw_pitch_roll+0x408>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4997      	ldr	r1, [pc, #604]	@ (80051f8 <get_yaw_pitch_roll+0x424>)
 8004f9c:	1c18      	adds	r0, r3, #0
 8004f9e:	f7fb feb3 	bl	8000d08 <__aeabi_fmul>
 8004fa2:	1c03      	adds	r3, r0, #0
 8004fa4:	1c1a      	adds	r2, r3, #0
 8004fa6:	4b95      	ldr	r3, [pc, #596]	@ (80051fc <get_yaw_pitch_roll+0x428>)
 8004fa8:	601a      	str	r2, [r3, #0]
	gyro_y = gy*57.29578f;
 8004faa:	4b8d      	ldr	r3, [pc, #564]	@ (80051e0 <get_yaw_pitch_roll+0x40c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4992      	ldr	r1, [pc, #584]	@ (80051f8 <get_yaw_pitch_roll+0x424>)
 8004fb0:	1c18      	adds	r0, r3, #0
 8004fb2:	f7fb fea9 	bl	8000d08 <__aeabi_fmul>
 8004fb6:	1c03      	adds	r3, r0, #0
 8004fb8:	1c1a      	adds	r2, r3, #0
 8004fba:	4b91      	ldr	r3, [pc, #580]	@ (8005200 <get_yaw_pitch_roll+0x42c>)
 8004fbc:	601a      	str	r2, [r3, #0]
	gyro_z = gz*57.29578f;
 8004fbe:	4b89      	ldr	r3, [pc, #548]	@ (80051e4 <get_yaw_pitch_roll+0x410>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	498d      	ldr	r1, [pc, #564]	@ (80051f8 <get_yaw_pitch_roll+0x424>)
 8004fc4:	1c18      	adds	r0, r3, #0
 8004fc6:	f7fb fe9f 	bl	8000d08 <__aeabi_fmul>
 8004fca:	1c03      	adds	r3, r0, #0
 8004fcc:	1c1a      	adds	r2, r3, #0
 8004fce:	4b8d      	ldr	r3, [pc, #564]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8004fd0:	601a      	str	r2, [r3, #0]
	/*mag_x = (float)MagData[0]*mRes*_mag_adjust[0] - magbias[0];  // get actual magnetometer value, this depends on scale being set
	mag_y = (float)MagData[1]*mRes*_mag_adjust[1] - magbias[1];
	mag_z = (float)MagData[2]*mRes*_mag_adjust[2] - magbias[2];*/


	Mahony_update(gyro_x, gyro_y, gyro_z, acc_x, acc_y, acc_z, mag_x, mag_y, mag_z);
 8004fd2:	4b8a      	ldr	r3, [pc, #552]	@ (80051fc <get_yaw_pitch_roll+0x428>)
 8004fd4:	681d      	ldr	r5, [r3, #0]
 8004fd6:	4b8a      	ldr	r3, [pc, #552]	@ (8005200 <get_yaw_pitch_roll+0x42c>)
 8004fd8:	681e      	ldr	r6, [r3, #0]
 8004fda:	4b8a      	ldr	r3, [pc, #552]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	469c      	mov	ip, r3
 8004fe0:	4b82      	ldr	r3, [pc, #520]	@ (80051ec <get_yaw_pitch_roll+0x418>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	4b82      	ldr	r3, [pc, #520]	@ (80051f0 <get_yaw_pitch_roll+0x41c>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b82      	ldr	r3, [pc, #520]	@ (80051f4 <get_yaw_pitch_roll+0x420>)
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	4b86      	ldr	r3, [pc, #536]	@ (8005208 <get_yaw_pitch_roll+0x434>)
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	4b86      	ldr	r3, [pc, #536]	@ (800520c <get_yaw_pitch_roll+0x438>)
 8004ff4:	681c      	ldr	r4, [r3, #0]
 8004ff6:	4b86      	ldr	r3, [pc, #536]	@ (8005210 <get_yaw_pitch_roll+0x43c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	9403      	str	r4, [sp, #12]
 8004ffe:	9002      	str	r0, [sp, #8]
 8005000:	9101      	str	r1, [sp, #4]
 8005002:	9200      	str	r2, [sp, #0]
 8005004:	4643      	mov	r3, r8
 8005006:	4662      	mov	r2, ip
 8005008:	1c31      	adds	r1, r6, #0
 800500a:	1c28      	adds	r0, r5, #0
 800500c:	f7fe fcfa 	bl	8003a04 <Mahony_update>

	if ((gyro_z > -2.5 && gyro_z <2.5) ) gyro_z=0;
 8005010:	4b7c      	ldr	r3, [pc, #496]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	497f      	ldr	r1, [pc, #508]	@ (8005214 <get_yaw_pitch_roll+0x440>)
 8005016:	1c18      	adds	r0, r3, #0
 8005018:	f7fb fa6c 	bl	80004f4 <__aeabi_fcmpgt>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d00a      	beq.n	8005036 <get_yaw_pitch_roll+0x262>
 8005020:	4b78      	ldr	r3, [pc, #480]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	497c      	ldr	r1, [pc, #496]	@ (8005218 <get_yaw_pitch_roll+0x444>)
 8005026:	1c18      	adds	r0, r3, #0
 8005028:	f7fb fa50 	bl	80004cc <__aeabi_fcmplt>
 800502c:	1e03      	subs	r3, r0, #0
 800502e:	d002      	beq.n	8005036 <get_yaw_pitch_roll+0x262>
 8005030:	4b74      	ldr	r3, [pc, #464]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	if ((gyro_y > -2 && gyro_y <-1 )) gyro_y=0;
 8005036:	4b72      	ldr	r3, [pc, #456]	@ (8005200 <get_yaw_pitch_roll+0x42c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	21c0      	movs	r1, #192	@ 0xc0
 800503c:	0609      	lsls	r1, r1, #24
 800503e:	1c18      	adds	r0, r3, #0
 8005040:	f7fb fa58 	bl	80004f4 <__aeabi_fcmpgt>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d00a      	beq.n	800505e <get_yaw_pitch_roll+0x28a>
 8005048:	4b6d      	ldr	r3, [pc, #436]	@ (8005200 <get_yaw_pitch_roll+0x42c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4973      	ldr	r1, [pc, #460]	@ (800521c <get_yaw_pitch_roll+0x448>)
 800504e:	1c18      	adds	r0, r3, #0
 8005050:	f7fb fa3c 	bl	80004cc <__aeabi_fcmplt>
 8005054:	1e03      	subs	r3, r0, #0
 8005056:	d002      	beq.n	800505e <get_yaw_pitch_roll+0x28a>
 8005058:	4b69      	ldr	r3, [pc, #420]	@ (8005200 <get_yaw_pitch_roll+0x42c>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
	if ((gyro_x > 0 && gyro_x < 1.5 )) gyro_x=0;
 800505e:	4b67      	ldr	r3, [pc, #412]	@ (80051fc <get_yaw_pitch_roll+0x428>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2100      	movs	r1, #0
 8005064:	1c18      	adds	r0, r3, #0
 8005066:	f7fb fa45 	bl	80004f4 <__aeabi_fcmpgt>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d00b      	beq.n	8005086 <get_yaw_pitch_roll+0x2b2>
 800506e:	4b63      	ldr	r3, [pc, #396]	@ (80051fc <get_yaw_pitch_roll+0x428>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	21ff      	movs	r1, #255	@ 0xff
 8005074:	0589      	lsls	r1, r1, #22
 8005076:	1c18      	adds	r0, r3, #0
 8005078:	f7fb fa28 	bl	80004cc <__aeabi_fcmplt>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d002      	beq.n	8005086 <get_yaw_pitch_roll+0x2b2>
 8005080:	4b5e      	ldr	r3, [pc, #376]	@ (80051fc <get_yaw_pitch_roll+0x428>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]


	if (yaw_angle>360) yaw_angle=yaw_angle-360;
 8005086:	4b66      	ldr	r3, [pc, #408]	@ (8005220 <get_yaw_pitch_roll+0x44c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4966      	ldr	r1, [pc, #408]	@ (8005224 <get_yaw_pitch_roll+0x450>)
 800508c:	1c18      	adds	r0, r3, #0
 800508e:	f7fb fa31 	bl	80004f4 <__aeabi_fcmpgt>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d009      	beq.n	80050aa <get_yaw_pitch_roll+0x2d6>
 8005096:	4b62      	ldr	r3, [pc, #392]	@ (8005220 <get_yaw_pitch_roll+0x44c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4962      	ldr	r1, [pc, #392]	@ (8005224 <get_yaw_pitch_roll+0x450>)
 800509c:	1c18      	adds	r0, r3, #0
 800509e:	f7fb ff71 	bl	8000f84 <__aeabi_fsub>
 80050a2:	1c03      	adds	r3, r0, #0
 80050a4:	1c1a      	adds	r2, r3, #0
 80050a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005220 <get_yaw_pitch_roll+0x44c>)
 80050a8:	601a      	str	r2, [r3, #0]
	if (yaw_angle < -360) yaw_angle=yaw_angle+360.0;
 80050aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005220 <get_yaw_pitch_roll+0x44c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	495e      	ldr	r1, [pc, #376]	@ (8005228 <get_yaw_pitch_roll+0x454>)
 80050b0:	1c18      	adds	r0, r3, #0
 80050b2:	f7fb fa0b 	bl	80004cc <__aeabi_fcmplt>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d009      	beq.n	80050ce <get_yaw_pitch_roll+0x2fa>
 80050ba:	4b59      	ldr	r3, [pc, #356]	@ (8005220 <get_yaw_pitch_roll+0x44c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4959      	ldr	r1, [pc, #356]	@ (8005224 <get_yaw_pitch_roll+0x450>)
 80050c0:	1c18      	adds	r0, r3, #0
 80050c2:	f7fb fab1 	bl	8000628 <__aeabi_fadd>
 80050c6:	1c03      	adds	r3, r0, #0
 80050c8:	1c1a      	adds	r2, r3, #0
 80050ca:	4b55      	ldr	r3, [pc, #340]	@ (8005220 <get_yaw_pitch_roll+0x44c>)
 80050cc:	601a      	str	r2, [r3, #0]
	angle_pitch = convert_AHRS_pitch(Mahony_getPitch());
 80050ce:	f7ff fded 	bl	8004cac <Mahony_getPitch>
 80050d2:	1c03      	adds	r3, r0, #0
 80050d4:	1c18      	adds	r0, r3, #0
 80050d6:	f7ff fe21 	bl	8004d1c <convert_AHRS_pitch>
 80050da:	1c02      	adds	r2, r0, #0
 80050dc:	4b53      	ldr	r3, [pc, #332]	@ (800522c <get_yaw_pitch_roll+0x458>)
 80050de:	601a      	str	r2, [r3, #0]
	angle_roll = convert_AHRS_roll(Mahony_getRoll());
 80050e0:	f7ff fdcc 	bl	8004c7c <Mahony_getRoll>
 80050e4:	1c03      	adds	r3, r0, #0
 80050e6:	1c18      	adds	r0, r3, #0
 80050e8:	f7ff fe26 	bl	8004d38 <convert_AHRS_roll>
 80050ec:	1c02      	adds	r2, r0, #0
 80050ee:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <get_yaw_pitch_roll+0x45c>)
 80050f0:	601a      	str	r2, [r3, #0]
	angle_yaw = convert_AHRS_yaw(Mahony_getYaw());
 80050f2:	f7ff fdf3 	bl	8004cdc <Mahony_getYaw>
 80050f6:	1c03      	adds	r3, r0, #0
 80050f8:	1c18      	adds	r0, r3, #0
 80050fa:	f7ff fe43 	bl	8004d84 <convert_AHRS_yaw>
 80050fe:	1c02      	adds	r2, r0, #0
 8005100:	4b4c      	ldr	r3, [pc, #304]	@ (8005234 <get_yaw_pitch_roll+0x460>)
 8005102:	601a      	str	r2, [r3, #0]

    now=HAL_GetTick();
 8005104:	f001 fc20 	bl	8006948 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	0018      	movs	r0, r3
 800510c:	f7fc f914 	bl	8001338 <__aeabi_i2f>
 8005110:	1c02      	adds	r2, r0, #0
 8005112:	4b49      	ldr	r3, [pc, #292]	@ (8005238 <get_yaw_pitch_roll+0x464>)
 8005114:	601a      	str	r2, [r3, #0]
    delta_t=lastUpdate-now;
 8005116:	4b49      	ldr	r3, [pc, #292]	@ (800523c <get_yaw_pitch_roll+0x468>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b47      	ldr	r3, [pc, #284]	@ (8005238 <get_yaw_pitch_roll+0x464>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1c19      	adds	r1, r3, #0
 8005120:	1c10      	adds	r0, r2, #0
 8005122:	f7fb ff2f 	bl	8000f84 <__aeabi_fsub>
 8005126:	1c03      	adds	r3, r0, #0
 8005128:	1c1a      	adds	r2, r3, #0
 800512a:	4b45      	ldr	r3, [pc, #276]	@ (8005240 <get_yaw_pitch_roll+0x46c>)
 800512c:	601a      	str	r2, [r3, #0]
    if (delta_t<0) delta_t=-delta_t;
 800512e:	4b44      	ldr	r3, [pc, #272]	@ (8005240 <get_yaw_pitch_roll+0x46c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2100      	movs	r1, #0
 8005134:	1c18      	adds	r0, r3, #0
 8005136:	f7fb f9c9 	bl	80004cc <__aeabi_fcmplt>
 800513a:	1e03      	subs	r3, r0, #0
 800513c:	d006      	beq.n	800514c <get_yaw_pitch_roll+0x378>
 800513e:	4b40      	ldr	r3, [pc, #256]	@ (8005240 <get_yaw_pitch_roll+0x46c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2280      	movs	r2, #128	@ 0x80
 8005144:	0612      	lsls	r2, r2, #24
 8005146:	405a      	eors	r2, r3
 8005148:	4b3d      	ldr	r3, [pc, #244]	@ (8005240 <get_yaw_pitch_roll+0x46c>)
 800514a:	601a      	str	r2, [r3, #0]
    lastUpdate=now;
 800514c:	4b3a      	ldr	r3, [pc, #232]	@ (8005238 <get_yaw_pitch_roll+0x464>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4b3a      	ldr	r3, [pc, #232]	@ (800523c <get_yaw_pitch_roll+0x468>)
 8005152:	601a      	str	r2, [r3, #0]
    if (gyro_z<0) gyro_z=gyro_z*0.95;
 8005154:	4b2b      	ldr	r3, [pc, #172]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2100      	movs	r1, #0
 800515a:	1c18      	adds	r0, r3, #0
 800515c:	f7fb f9b6 	bl	80004cc <__aeabi_fcmplt>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d011      	beq.n	8005188 <get_yaw_pitch_roll+0x3b4>
 8005164:	4b27      	ldr	r3, [pc, #156]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c18      	adds	r0, r3, #0
 800516a:	f7fe f82f 	bl	80031cc <__aeabi_f2d>
 800516e:	4a35      	ldr	r2, [pc, #212]	@ (8005244 <get_yaw_pitch_roll+0x470>)
 8005170:	4b35      	ldr	r3, [pc, #212]	@ (8005248 <get_yaw_pitch_roll+0x474>)
 8005172:	f7fd f917 	bl	80023a4 <__aeabi_dmul>
 8005176:	0002      	movs	r2, r0
 8005178:	000b      	movs	r3, r1
 800517a:	0010      	movs	r0, r2
 800517c:	0019      	movs	r1, r3
 800517e:	f7fe f86d 	bl	800325c <__aeabi_d2f>
 8005182:	1c02      	adds	r2, r0, #0
 8005184:	4b1f      	ldr	r3, [pc, #124]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 8005186:	601a      	str	r2, [r3, #0]
    if (gyro_z>0) gyro_z=gyro_z*1.07;
 8005188:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <get_yaw_pitch_roll+0x430>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2100      	movs	r1, #0
 800518e:	1c18      	adds	r0, r3, #0
 8005190:	f7fb f9b0 	bl	80004f4 <__aeabi_fcmpgt>
 8005194:	1e03      	subs	r3, r0, #0
 8005196:	d06b      	beq.n	8005270 <get_yaw_pitch_roll+0x49c>
 8005198:	e058      	b.n	800524c <get_yaw_pitch_roll+0x478>
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	2000051c 	.word	0x2000051c
 80051a0:	20000524 	.word	0x20000524
 80051a4:	2000052c 	.word	0x2000052c
 80051a8:	3bfa0000 	.word	0x3bfa0000
 80051ac:	3fbfebff 	.word	0x3fbfebff
 80051b0:	20000534 	.word	0x20000534
 80051b4:	43f58000 	.word	0x43f58000
 80051b8:	c3f78000 	.word	0xc3f78000
 80051bc:	c47dc000 	.word	0xc47dc000
 80051c0:	20000540 	.word	0x20000540
 80051c4:	20000504 	.word	0x20000504
 80051c8:	20000508 	.word	0x20000508
 80051cc:	2000050c 	.word	0x2000050c
 80051d0:	4d12d84a 	.word	0x4d12d84a
 80051d4:	400921fb 	.word	0x400921fb
 80051d8:	40668000 	.word	0x40668000
 80051dc:	20000510 	.word	0x20000510
 80051e0:	20000514 	.word	0x20000514
 80051e4:	20000518 	.word	0x20000518
 80051e8:	411cf5c3 	.word	0x411cf5c3
 80051ec:	200004e0 	.word	0x200004e0
 80051f0:	200004e4 	.word	0x200004e4
 80051f4:	200004e8 	.word	0x200004e8
 80051f8:	42652ee1 	.word	0x42652ee1
 80051fc:	200004ec 	.word	0x200004ec
 8005200:	200004f0 	.word	0x200004f0
 8005204:	200004f4 	.word	0x200004f4
 8005208:	200004f8 	.word	0x200004f8
 800520c:	200004fc 	.word	0x200004fc
 8005210:	20000500 	.word	0x20000500
 8005214:	c0200000 	.word	0xc0200000
 8005218:	40200000 	.word	0x40200000
 800521c:	bf800000 	.word	0xbf800000
 8005220:	20000558 	.word	0x20000558
 8005224:	43b40000 	.word	0x43b40000
 8005228:	c3b40000 	.word	0xc3b40000
 800522c:	200004d4 	.word	0x200004d4
 8005230:	200004d8 	.word	0x200004d8
 8005234:	200004dc 	.word	0x200004dc
 8005238:	2000054c 	.word	0x2000054c
 800523c:	20000554 	.word	0x20000554
 8005240:	20000550 	.word	0x20000550
 8005244:	66666666 	.word	0x66666666
 8005248:	3fee6666 	.word	0x3fee6666
 800524c:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <get_yaw_pitch_roll+0x518>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	1c18      	adds	r0, r3, #0
 8005252:	f7fd ffbb 	bl	80031cc <__aeabi_f2d>
 8005256:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <get_yaw_pitch_roll+0x51c>)
 8005258:	4b26      	ldr	r3, [pc, #152]	@ (80052f4 <get_yaw_pitch_roll+0x520>)
 800525a:	f7fd f8a3 	bl	80023a4 <__aeabi_dmul>
 800525e:	0002      	movs	r2, r0
 8005260:	000b      	movs	r3, r1
 8005262:	0010      	movs	r0, r2
 8005264:	0019      	movs	r1, r3
 8005266:	f7fd fff9 	bl	800325c <__aeabi_d2f>
 800526a:	1c02      	adds	r2, r0, #0
 800526c:	4b1f      	ldr	r3, [pc, #124]	@ (80052ec <get_yaw_pitch_roll+0x518>)
 800526e:	601a      	str	r2, [r3, #0]
    yaw_angle=yaw_angle+gyro_z*(delta_t/1000);
 8005270:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <get_yaw_pitch_roll+0x524>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4921      	ldr	r1, [pc, #132]	@ (80052fc <get_yaw_pitch_roll+0x528>)
 8005276:	1c18      	adds	r0, r3, #0
 8005278:	f7fb fb60 	bl	800093c <__aeabi_fdiv>
 800527c:	1c03      	adds	r3, r0, #0
 800527e:	1c1a      	adds	r2, r3, #0
 8005280:	4b1a      	ldr	r3, [pc, #104]	@ (80052ec <get_yaw_pitch_roll+0x518>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	1c19      	adds	r1, r3, #0
 8005286:	1c10      	adds	r0, r2, #0
 8005288:	f7fb fd3e 	bl	8000d08 <__aeabi_fmul>
 800528c:	1c03      	adds	r3, r0, #0
 800528e:	1c1a      	adds	r2, r3, #0
 8005290:	4b1b      	ldr	r3, [pc, #108]	@ (8005300 <get_yaw_pitch_roll+0x52c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1c19      	adds	r1, r3, #0
 8005296:	1c10      	adds	r0, r2, #0
 8005298:	f7fb f9c6 	bl	8000628 <__aeabi_fadd>
 800529c:	1c03      	adds	r3, r0, #0
 800529e:	1c1a      	adds	r2, r3, #0
 80052a0:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <get_yaw_pitch_roll+0x52c>)
 80052a2:	601a      	str	r2, [r3, #0]
	Yaw_Pitch_Roll[0]=yaw_angle ;
 80052a4:	4b16      	ldr	r3, [pc, #88]	@ (8005300 <get_yaw_pitch_roll+0x52c>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]
	Yaw_Pitch_Roll[1]=angle_pitch;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4a14      	ldr	r2, [pc, #80]	@ (8005304 <get_yaw_pitch_roll+0x530>)
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	601a      	str	r2, [r3, #0]
	Yaw_Pitch_Roll[2]=angle_roll ;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3308      	adds	r3, #8
 80052ba:	4a13      	ldr	r2, [pc, #76]	@ (8005308 <get_yaw_pitch_roll+0x534>)
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	601a      	str	r2, [r3, #0]
	gyro_XYZ[0]=gyro_x;
 80052c0:	4b12      	ldr	r3, [pc, #72]	@ (800530c <get_yaw_pitch_roll+0x538>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	601a      	str	r2, [r3, #0]
	gyro_XYZ[1]=gyro_y;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <get_yaw_pitch_roll+0x53c>)
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	601a      	str	r2, [r3, #0]
	gyro_XYZ[2]=gyro_z;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3308      	adds	r3, #8
 80052d6:	4a05      	ldr	r2, [pc, #20]	@ (80052ec <get_yaw_pitch_roll+0x518>)
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	601a      	str	r2, [r3, #0]

}
 80052dc:	46c0      	nop			@ (mov r8, r8)
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b008      	add	sp, #32
 80052e4:	bc80      	pop	{r7}
 80052e6:	46b8      	mov	r8, r7
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	200004f4 	.word	0x200004f4
 80052f0:	51eb851f 	.word	0x51eb851f
 80052f4:	3ff11eb8 	.word	0x3ff11eb8
 80052f8:	20000550 	.word	0x20000550
 80052fc:	447a0000 	.word	0x447a0000
 8005300:	20000558 	.word	0x20000558
 8005304:	200004d4 	.word	0x200004d4
 8005308:	200004d8 	.word	0x200004d8
 800530c:	200004ec 	.word	0x200004ec
 8005310:	200004f0 	.word	0x200004f0

08005314 <MPU9250_OnActivate>:




__weak void MPU9250_OnActivate()
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
}
 8005318:	46c0      	nop			@ (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 800531e:	b580      	push	{r7, lr}
 8005320:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8005322:	f7ff fff7 	bl	8005314 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8005326:	2390      	movs	r3, #144	@ 0x90
 8005328:	05db      	lsls	r3, r3, #23
 800532a:	2200      	movs	r2, #0
 800532c:	2120      	movs	r1, #32
 800532e:	0018      	movs	r0, r3
 8005330:	f002 fad4 	bl	80078dc <HAL_GPIO_WritePin>
}
 8005334:	46c0      	nop			@ (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 800533a:	b580      	push	{r7, lr}
 800533c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 800533e:	2390      	movs	r3, #144	@ 0x90
 8005340:	05db      	lsls	r3, r3, #23
 8005342:	2201      	movs	r2, #1
 8005344:	2120      	movs	r1, #32
 8005346:	0018      	movs	r0, r3
 8005348:	f002 fac8 	bl	80078dc <HAL_GPIO_WritePin>
}
 800534c:	46c0      	nop			@ (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af02      	add	r7, sp, #8
 800535a:	0002      	movs	r2, r0
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	701a      	strb	r2, [r3, #0]
	uint8_t receivedbyte = 0;
 8005360:	210f      	movs	r1, #15
 8005362:	187b      	adds	r3, r7, r1
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8005368:	187a      	adds	r2, r7, r1
 800536a:	1df9      	adds	r1, r7, #7
 800536c:	4808      	ldr	r0, [pc, #32]	@ (8005390 <SPIx_WriteRead+0x3c>)
 800536e:	2380      	movs	r3, #128	@ 0x80
 8005370:	015b      	lsls	r3, r3, #5
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2301      	movs	r3, #1
 8005376:	f003 fc29 	bl	8008bcc <HAL_SPI_TransmitReceive>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d001      	beq.n	8005382 <SPIx_WriteRead+0x2e>
	{
		return -1;
 800537e:	23ff      	movs	r3, #255	@ 0xff
 8005380:	e002      	b.n	8005388 <SPIx_WriteRead+0x34>
	}
	else
	{
	}
	return receivedbyte;
 8005382:	230f      	movs	r3, #15
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	781b      	ldrb	r3, [r3, #0]
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b004      	add	sp, #16
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000025c 	.word	0x2000025c

08005394 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	0008      	movs	r0, r1
 800539e:	0011      	movs	r1, r2
 80053a0:	1cfb      	adds	r3, r7, #3
 80053a2:	1c02      	adds	r2, r0, #0
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	003b      	movs	r3, r7
 80053a8:	1c0a      	adds	r2, r1, #0
 80053aa:	801a      	strh	r2, [r3, #0]
	MPU9250_Activate();
 80053ac:	f7ff ffb7 	bl	800531e <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 80053b0:	1cfb      	adds	r3, r7, #3
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7ff ffcd 	bl	8005354 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 80053ba:	e00c      	b.n	80053d6 <MPU_SPI_Write+0x42>
	{
		SPIx_WriteRead(*pBuffer);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff ffc7 	bl	8005354 <SPIx_WriteRead>
		NumByteToWrite--;
 80053c6:	003b      	movs	r3, r7
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	003b      	movs	r3, r7
 80053cc:	3a01      	subs	r2, #1
 80053ce:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3301      	adds	r3, #1
 80053d4:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 80053d6:	003b      	movs	r3, r7
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ee      	bne.n	80053bc <MPU_SPI_Write+0x28>
	}
	MPU9250_Deactivate();
 80053de:	f7ff ffac 	bl	800533a <MPU9250_Deactivate>
}
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b002      	add	sp, #8
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	0008      	movs	r0, r1
 80053f6:	0011      	movs	r1, r2
 80053f8:	1cfb      	adds	r3, r7, #3
 80053fa:	1c02      	adds	r2, r0, #0
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	003b      	movs	r3, r7
 8005400:	1c0a      	adds	r2, r1, #0
 8005402:	801a      	strh	r2, [r3, #0]
	MPU9250_Activate();
 8005404:	f7ff ff8b 	bl	800531e <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8005408:	2280      	movs	r2, #128	@ 0x80
 800540a:	1cfb      	adds	r3, r7, #3
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4313      	orrs	r3, r2
 8005410:	b2da      	uxtb	r2, r3
 8005412:	210f      	movs	r1, #15
 8005414:	187b      	adds	r3, r7, r1
 8005416:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 8005418:	2301      	movs	r3, #1
 800541a:	425b      	negs	r3, r3
 800541c:	1879      	adds	r1, r7, r1
 800541e:	4809      	ldr	r0, [pc, #36]	@ (8005444 <MPU_SPI_Read+0x58>)
 8005420:	2201      	movs	r2, #1
 8005422:	f003 f921 	bl	8008668 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8005426:	2301      	movs	r3, #1
 8005428:	425c      	negs	r4, r3
 800542a:	003b      	movs	r3, r7
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4804      	ldr	r0, [pc, #16]	@ (8005444 <MPU_SPI_Read+0x58>)
 8005432:	0023      	movs	r3, r4
 8005434:	f003 fa78 	bl	8008928 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 8005438:	f7ff ff7f 	bl	800533a <MPU9250_Deactivate>
}
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b005      	add	sp, #20
 8005442:	bd90      	pop	{r4, r7, pc}
 8005444:	2000025c 	.word	0x2000025c

08005448 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	0002      	movs	r2, r0
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	1dbb      	adds	r3, r7, #6
 8005456:	1c0a      	adds	r2, r1, #0
 8005458:	701a      	strb	r2, [r3, #0]
	MPU_SPI_Write(&data, subAddress, 1);
 800545a:	1dfb      	adds	r3, r7, #7
 800545c:	7819      	ldrb	r1, [r3, #0]
 800545e:	1dbb      	adds	r3, r7, #6
 8005460:	2201      	movs	r2, #1
 8005462:	0018      	movs	r0, r3
 8005464:	f7ff ff96 	bl	8005394 <MPU_SPI_Write>
	//HAL_Delay(10);
}
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}

08005470 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	603a      	str	r2, [r7, #0]
 8005478:	1dfb      	adds	r3, r7, #7
 800547a:	1c02      	adds	r2, r0, #0
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	1dbb      	adds	r3, r7, #6
 8005480:	1c0a      	adds	r2, r1, #0
 8005482:	701a      	strb	r2, [r3, #0]
	MPU_SPI_Read(dest, subAddress, count);
 8005484:	1dbb      	adds	r3, r7, #6
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	7819      	ldrb	r1, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	0018      	movs	r0, r3
 8005492:	f7ff ffab 	bl	80053ec <MPU_SPI_Read>
}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b002      	add	sp, #8
 800549c:	bd80      	pop	{r7, pc}

0800549e <readAK8963Registers>:
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
}

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	603a      	str	r2, [r7, #0]
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	1c02      	adds	r2, r0, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	1dbb      	adds	r3, r7, #6
 80054ae:	1c0a      	adds	r2, r1, #0
 80054b0:	701a      	strb	r2, [r3, #0]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 80054b2:	2025      	movs	r0, #37	@ 0x25
 80054b4:	220c      	movs	r2, #12
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	0019      	movs	r1, r3
 80054be:	f7ff ffc3 	bl	8005448 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80054c2:	2226      	movs	r2, #38	@ 0x26
 80054c4:	1dfb      	adds	r3, r7, #7
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	0019      	movs	r1, r3
 80054ca:	0010      	movs	r0, r2
 80054cc:	f7ff ffbc 	bl	8005448 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 80054d0:	2027      	movs	r0, #39	@ 0x27
 80054d2:	2280      	movs	r2, #128	@ 0x80
 80054d4:	1dbb      	adds	r3, r7, #6
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	0019      	movs	r1, r3
 80054de:	f7ff ffb3 	bl	8005448 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 80054e2:	2001      	movs	r0, #1
 80054e4:	f001 fa3a 	bl	800695c <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 80054e8:	2049      	movs	r0, #73	@ 0x49
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	1dbb      	adds	r3, r7, #6
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	0019      	movs	r1, r3
 80054f2:	f7ff ffbd 	bl	8005470 <readRegisters>
}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b002      	add	sp, #8
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <MPU9250_GetAccData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetAccData(int16_t* AccData)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 7, _buffer);
 8005508:	203b      	movs	r0, #59	@ 0x3b
 800550a:	4b16      	ldr	r3, [pc, #88]	@ (8005564 <MPU9250_GetAccData+0x64>)
 800550c:	001a      	movs	r2, r3
 800550e:	2107      	movs	r1, #7
 8005510:	f7ff ffae 	bl	8005470 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8005514:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <MPU9250_GetAccData+0x64>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	b21a      	sxth	r2, r3
 800551c:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <MPU9250_GetAccData+0x64>)
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	b21b      	sxth	r3, r3
 8005522:	4313      	orrs	r3, r2
 8005524:	b21a      	sxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800552a:	4b0e      	ldr	r3, [pc, #56]	@ (8005564 <MPU9250_GetAccData+0x64>)
 800552c:	789b      	ldrb	r3, [r3, #2]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	b219      	sxth	r1, r3
 8005532:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <MPU9250_GetAccData+0x64>)
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	b21a      	sxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3302      	adds	r3, #2
 800553c:	430a      	orrs	r2, r1
 800553e:	b212      	sxth	r2, r2
 8005540:	801a      	strh	r2, [r3, #0]
	AccData[2] = ((((int16_t)_buffer[4]) << 8) | _buffer[5]);
 8005542:	4b08      	ldr	r3, [pc, #32]	@ (8005564 <MPU9250_GetAccData+0x64>)
 8005544:	791b      	ldrb	r3, [r3, #4]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	b219      	sxth	r1, r3
 800554a:	4b06      	ldr	r3, [pc, #24]	@ (8005564 <MPU9250_GetAccData+0x64>)
 800554c:	795b      	ldrb	r3, [r3, #5]
 800554e:	b21a      	sxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	430a      	orrs	r2, r1
 8005556:	b212      	sxth	r2, r2
 8005558:	801a      	strh	r2, [r3, #0]

}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	2000055c 	.word	0x2000055c

08005568 <MPU9250_GetGyroData>:


void MPU9250_GetGyroData(int16_t* GyroData)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(GYRO_OUT, 7, _buffer);
 8005570:	2043      	movs	r0, #67	@ 0x43
 8005572:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 8005574:	001a      	movs	r2, r3
 8005576:	2107      	movs	r1, #7
 8005578:	f7ff ff7a 	bl	8005470 <readRegisters>

	// combine into 16 bit values
	GyroData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 800557c:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	b21a      	sxth	r2, r3
 8005584:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	b21b      	sxth	r3, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	b21a      	sxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8005592:	4b0e      	ldr	r3, [pc, #56]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 8005594:	789b      	ldrb	r3, [r3, #2]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	b219      	sxth	r1, r3
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 800559c:	78db      	ldrb	r3, [r3, #3]
 800559e:	b21a      	sxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3302      	adds	r3, #2
 80055a4:	430a      	orrs	r2, r1
 80055a6:	b212      	sxth	r2, r2
 80055a8:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 80055aa:	4b08      	ldr	r3, [pc, #32]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 80055ac:	791b      	ldrb	r3, [r3, #4]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	b219      	sxth	r1, r3
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <MPU9250_GetGyroData+0x64>)
 80055b4:	795b      	ldrb	r3, [r3, #5]
 80055b6:	b21a      	sxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	430a      	orrs	r2, r1
 80055be:	b212      	sxth	r2, r2
 80055c0:	801a      	strh	r2, [r3, #0]


}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b002      	add	sp, #8
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	2000055c 	.word	0x2000055c

080055d0 <MPU9250_GetMagData>:

void MPU9250_GetMagData(int16_t* MagData)
{
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(AK8963_HXL , 7, _buffer);
 80055d8:	2003      	movs	r0, #3
 80055da:	4b50      	ldr	r3, [pc, #320]	@ (800571c <MPU9250_GetMagData+0x14c>)
 80055dc:	001a      	movs	r2, r3
 80055de:	2107      	movs	r1, #7
 80055e0:	f7ff ff46 	bl	8005470 <readRegisters>

	int16_t magx = (((int16_t)_buffer[1]) << 8) | _buffer[0];
 80055e4:	4b4d      	ldr	r3, [pc, #308]	@ (800571c <MPU9250_GetMagData+0x14c>)
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	b219      	sxth	r1, r3
 80055ec:	4b4b      	ldr	r3, [pc, #300]	@ (800571c <MPU9250_GetMagData+0x14c>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b21a      	sxth	r2, r3
 80055f2:	200e      	movs	r0, #14
 80055f4:	183b      	adds	r3, r7, r0
 80055f6:	430a      	orrs	r2, r1
 80055f8:	801a      	strh	r2, [r3, #0]
	int16_t magy = (((int16_t)_buffer[3]) << 8) | _buffer[2];
 80055fa:	4b48      	ldr	r3, [pc, #288]	@ (800571c <MPU9250_GetMagData+0x14c>)
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	b219      	sxth	r1, r3
 8005602:	4b46      	ldr	r3, [pc, #280]	@ (800571c <MPU9250_GetMagData+0x14c>)
 8005604:	789b      	ldrb	r3, [r3, #2]
 8005606:	b21a      	sxth	r2, r3
 8005608:	250c      	movs	r5, #12
 800560a:	197b      	adds	r3, r7, r5
 800560c:	430a      	orrs	r2, r1
 800560e:	801a      	strh	r2, [r3, #0]
	int16_t magz = (((int16_t)_buffer[5]) << 8) | _buffer[4];
 8005610:	4b42      	ldr	r3, [pc, #264]	@ (800571c <MPU9250_GetMagData+0x14c>)
 8005612:	795b      	ldrb	r3, [r3, #5]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	b219      	sxth	r1, r3
 8005618:	4b40      	ldr	r3, [pc, #256]	@ (800571c <MPU9250_GetMagData+0x14c>)
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	b21a      	sxth	r2, r3
 800561e:	260a      	movs	r6, #10
 8005620:	19bb      	adds	r3, r7, r6
 8005622:	430a      	orrs	r2, r1
 8005624:	801a      	strh	r2, [r3, #0]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8005626:	183b      	adds	r3, r7, r0
 8005628:	2200      	movs	r2, #0
 800562a:	5e9b      	ldrsh	r3, [r3, r2]
 800562c:	0018      	movs	r0, r3
 800562e:	f7fb fe83 	bl	8001338 <__aeabi_i2f>
 8005632:	1c04      	adds	r4, r0, #0
 8005634:	4b3a      	ldr	r3, [pc, #232]	@ (8005720 <MPU9250_GetMagData+0x150>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	3b80      	subs	r3, #128	@ 0x80
 800563a:	0018      	movs	r0, r3
 800563c:	f7fb fe7c 	bl	8001338 <__aeabi_i2f>
 8005640:	1c03      	adds	r3, r0, #0
 8005642:	2187      	movs	r1, #135	@ 0x87
 8005644:	05c9      	lsls	r1, r1, #23
 8005646:	1c18      	adds	r0, r3, #0
 8005648:	f7fb f978 	bl	800093c <__aeabi_fdiv>
 800564c:	1c03      	adds	r3, r0, #0
 800564e:	21fe      	movs	r1, #254	@ 0xfe
 8005650:	0589      	lsls	r1, r1, #22
 8005652:	1c18      	adds	r0, r3, #0
 8005654:	f7fa ffe8 	bl	8000628 <__aeabi_fadd>
 8005658:	1c03      	adds	r3, r0, #0
 800565a:	1c19      	adds	r1, r3, #0
 800565c:	1c20      	adds	r0, r4, #0
 800565e:	f7fb fb53 	bl	8000d08 <__aeabi_fmul>
 8005662:	1c03      	adds	r3, r0, #0
 8005664:	1c18      	adds	r0, r3, #0
 8005666:	f7fb fe47 	bl	80012f8 <__aeabi_f2iz>
 800566a:	0003      	movs	r3, r0
 800566c:	b21a      	sxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8005672:	197b      	adds	r3, r7, r5
 8005674:	2200      	movs	r2, #0
 8005676:	5e9b      	ldrsh	r3, [r3, r2]
 8005678:	0018      	movs	r0, r3
 800567a:	f7fb fe5d 	bl	8001338 <__aeabi_i2f>
 800567e:	1c04      	adds	r4, r0, #0
 8005680:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <MPU9250_GetMagData+0x150>)
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	3b80      	subs	r3, #128	@ 0x80
 8005686:	0018      	movs	r0, r3
 8005688:	f7fb fe56 	bl	8001338 <__aeabi_i2f>
 800568c:	1c03      	adds	r3, r0, #0
 800568e:	2187      	movs	r1, #135	@ 0x87
 8005690:	05c9      	lsls	r1, r1, #23
 8005692:	1c18      	adds	r0, r3, #0
 8005694:	f7fb f952 	bl	800093c <__aeabi_fdiv>
 8005698:	1c03      	adds	r3, r0, #0
 800569a:	21fe      	movs	r1, #254	@ 0xfe
 800569c:	0589      	lsls	r1, r1, #22
 800569e:	1c18      	adds	r0, r3, #0
 80056a0:	f7fa ffc2 	bl	8000628 <__aeabi_fadd>
 80056a4:	1c03      	adds	r3, r0, #0
 80056a6:	1c19      	adds	r1, r3, #0
 80056a8:	1c20      	adds	r0, r4, #0
 80056aa:	f7fb fb2d 	bl	8000d08 <__aeabi_fmul>
 80056ae:	1c03      	adds	r3, r0, #0
 80056b0:	1c1a      	adds	r2, r3, #0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1c9c      	adds	r4, r3, #2
 80056b6:	1c10      	adds	r0, r2, #0
 80056b8:	f7fb fe1e 	bl	80012f8 <__aeabi_f2iz>
 80056bc:	0003      	movs	r3, r0
 80056be:	b21b      	sxth	r3, r3
 80056c0:	8023      	strh	r3, [r4, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 80056c2:	19bb      	adds	r3, r7, r6
 80056c4:	2200      	movs	r2, #0
 80056c6:	5e9b      	ldrsh	r3, [r3, r2]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fb fe35 	bl	8001338 <__aeabi_i2f>
 80056ce:	1c04      	adds	r4, r0, #0
 80056d0:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <MPU9250_GetMagData+0x150>)
 80056d2:	789b      	ldrb	r3, [r3, #2]
 80056d4:	3b80      	subs	r3, #128	@ 0x80
 80056d6:	0018      	movs	r0, r3
 80056d8:	f7fb fe2e 	bl	8001338 <__aeabi_i2f>
 80056dc:	1c03      	adds	r3, r0, #0
 80056de:	2187      	movs	r1, #135	@ 0x87
 80056e0:	05c9      	lsls	r1, r1, #23
 80056e2:	1c18      	adds	r0, r3, #0
 80056e4:	f7fb f92a 	bl	800093c <__aeabi_fdiv>
 80056e8:	1c03      	adds	r3, r0, #0
 80056ea:	21fe      	movs	r1, #254	@ 0xfe
 80056ec:	0589      	lsls	r1, r1, #22
 80056ee:	1c18      	adds	r0, r3, #0
 80056f0:	f7fa ff9a 	bl	8000628 <__aeabi_fadd>
 80056f4:	1c03      	adds	r3, r0, #0
 80056f6:	1c19      	adds	r1, r3, #0
 80056f8:	1c20      	adds	r0, r4, #0
 80056fa:	f7fb fb05 	bl	8000d08 <__aeabi_fmul>
 80056fe:	1c03      	adds	r3, r0, #0
 8005700:	1c1a      	adds	r2, r3, #0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	1d1c      	adds	r4, r3, #4
 8005706:	1c10      	adds	r0, r2, #0
 8005708:	f7fb fdf6 	bl	80012f8 <__aeabi_f2iz>
 800570c:	0003      	movs	r3, r0
 800570e:	b21b      	sxth	r3, r3
 8005710:	8023      	strh	r3, [r4, #0]
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b005      	add	sp, #20
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	2000055c 	.word	0x2000055c
 8005720:	20000574 	.word	0x20000574

08005724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800572a:	f001 f8b3 	bl	8006894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800572e:	f7fd ff7b 	bl	8003628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005732:	f7fd febd 	bl	80034b0 <MX_GPIO_Init>
  MX_ADC_Init();
 8005736:	f7fd fe61 	bl	80033fc <MX_ADC_Init>
  MX_TIM1_Init();
 800573a:	f7fd ffcf 	bl	80036dc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800573e:	f7fe f931 	bl	80039a4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8005742:	f7fd ff33 	bl	80035ac <MX_SPI1_Init>
  MX_TIM3_Init();
 8005746:	f7fe f881 	bl	800384c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800574a:	f7fe f8fb 	bl	8003944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart1, rxBuf, 32);
 800574e:	4998      	ldr	r1, [pc, #608]	@ (80059b0 <main+0x28c>)
 8005750:	4b98      	ldr	r3, [pc, #608]	@ (80059b4 <main+0x290>)
 8005752:	2220      	movs	r2, #32
 8005754:	0018      	movs	r0, r3
 8005756:	f005 f916 	bl	800a986 <HAL_UART_Receive_IT>


  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800575a:	4b97      	ldr	r3, [pc, #604]	@ (80059b8 <main+0x294>)
 800575c:	2100      	movs	r1, #0
 800575e:	0018      	movs	r0, r3
 8005760:	f003 fe8a 	bl	8009478 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8005764:	4b94      	ldr	r3, [pc, #592]	@ (80059b8 <main+0x294>)
 8005766:	2104      	movs	r1, #4
 8005768:	0018      	movs	r0, r3
 800576a:	f003 fe85 	bl	8009478 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800576e:	4b92      	ldr	r3, [pc, #584]	@ (80059b8 <main+0x294>)
 8005770:	2108      	movs	r1, #8
 8005772:	0018      	movs	r0, r3
 8005774:	f003 fe80 	bl	8009478 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8005778:	4b8f      	ldr	r3, [pc, #572]	@ (80059b8 <main+0x294>)
 800577a:	210c      	movs	r1, #12
 800577c:	0018      	movs	r0, r3
 800577e:	f003 fe7b 	bl	8009478 <HAL_TIM_PWM_Start>
  PID_Init(&pidRoll, Proportional_Roll, Integral_Roll, Derivative_Roll);
 8005782:	4b8e      	ldr	r3, [pc, #568]	@ (80059bc <main+0x298>)
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	4b8e      	ldr	r3, [pc, #568]	@ (80059c0 <main+0x29c>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b8e      	ldr	r3, [pc, #568]	@ (80059c4 <main+0x2a0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	488e      	ldr	r0, [pc, #568]	@ (80059c8 <main+0x2a4>)
 8005790:	f000 fc6a 	bl	8006068 <PID_Init>
  PID_Init(&pidPitch, Proportional_Pitch, Integral_Pitch, Derivative_Pitch);
 8005794:	4b8d      	ldr	r3, [pc, #564]	@ (80059cc <main+0x2a8>)
 8005796:	6819      	ldr	r1, [r3, #0]
 8005798:	4b8d      	ldr	r3, [pc, #564]	@ (80059d0 <main+0x2ac>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b8d      	ldr	r3, [pc, #564]	@ (80059d4 <main+0x2b0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	488d      	ldr	r0, [pc, #564]	@ (80059d8 <main+0x2b4>)
 80057a2:	f000 fc61 	bl	8006068 <PID_Init>
  PID_Init(&pidYaw, Proportional_Yaw, Integral_Yaw, Derivative_Yaw);
 80057a6:	4b8d      	ldr	r3, [pc, #564]	@ (80059dc <main+0x2b8>)
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	4b8d      	ldr	r3, [pc, #564]	@ (80059e0 <main+0x2bc>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b8d      	ldr	r3, [pc, #564]	@ (80059e4 <main+0x2c0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	488d      	ldr	r0, [pc, #564]	@ (80059e8 <main+0x2c4>)
 80057b4:	f000 fc58 	bl	8006068 <PID_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80057b8:	2390      	movs	r3, #144	@ 0x90
 80057ba:	05db      	lsls	r3, r3, #23
 80057bc:	2201      	movs	r2, #1
 80057be:	2120      	movs	r1, #32
 80057c0:	0018      	movs	r0, r3
 80057c2:	f002 f88b 	bl	80078dc <HAL_GPIO_WritePin>

	  if(start==0)
 80057c6:	4b89      	ldr	r3, [pc, #548]	@ (80059ec <main+0x2c8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d141      	bne.n	8005852 <main+0x12e>
	  {
		  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0);
 80057ce:	4b7a      	ldr	r3, [pc, #488]	@ (80059b8 <main+0x294>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);
 80057d6:	4b78      	ldr	r3, [pc, #480]	@ (80059b8 <main+0x294>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0);
 80057de:	4b76      	ldr	r3, [pc, #472]	@ (80059b8 <main+0x294>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0);
 80057e6:	4b74      	ldr	r3, [pc, #464]	@ (80059b8 <main+0x294>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40

		  for(int i=0;i<=3;i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e016      	b.n	8005822 <main+0xfe>
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80057f4:	2390      	movs	r3, #144	@ 0x90
 80057f6:	05db      	lsls	r3, r3, #23
 80057f8:	2201      	movs	r2, #1
 80057fa:	2120      	movs	r1, #32
 80057fc:	0018      	movs	r0, r3
 80057fe:	f002 f86d 	bl	80078dc <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8005802:	2064      	movs	r0, #100	@ 0x64
 8005804:	f001 f8aa 	bl	800695c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005808:	2390      	movs	r3, #144	@ 0x90
 800580a:	05db      	lsls	r3, r3, #23
 800580c:	2200      	movs	r2, #0
 800580e:	2120      	movs	r1, #32
 8005810:	0018      	movs	r0, r3
 8005812:	f002 f863 	bl	80078dc <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8005816:	2064      	movs	r0, #100	@ 0x64
 8005818:	f001 f8a0 	bl	800695c <HAL_Delay>
		  for(int i=0;i<=3;i++)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b03      	cmp	r3, #3
 8005826:	dde5      	ble.n	80057f4 <main+0xd0>
		  }

		  IbusData(ibus_data_channels,IBUS_USER_CHANNELS,rxBuf);
 8005828:	4a61      	ldr	r2, [pc, #388]	@ (80059b0 <main+0x28c>)
 800582a:	4b71      	ldr	r3, [pc, #452]	@ (80059f0 <main+0x2cc>)
 800582c:	2106      	movs	r1, #6
 800582e:	0018      	movs	r0, r3
 8005830:	f7fd fdb6 	bl	80033a0 <IbusData>
		  //if(ibus_data_channels[2]==0) NVIC_SystemReset();
		  if(ibus_data_channels[2]>=1000 && ibus_data_channels[2]<=2000) start=1;
 8005834:	4b6e      	ldr	r3, [pc, #440]	@ (80059f0 <main+0x2cc>)
 8005836:	889a      	ldrh	r2, [r3, #4]
 8005838:	23fa      	movs	r3, #250	@ 0xfa
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	429a      	cmp	r2, r3
 800583e:	d308      	bcc.n	8005852 <main+0x12e>
 8005840:	4b6b      	ldr	r3, [pc, #428]	@ (80059f0 <main+0x2cc>)
 8005842:	889a      	ldrh	r2, [r3, #4]
 8005844:	23fa      	movs	r3, #250	@ 0xfa
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	429a      	cmp	r2, r3
 800584a:	d802      	bhi.n	8005852 <main+0x12e>
 800584c:	4b67      	ldr	r3, [pc, #412]	@ (80059ec <main+0x2c8>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

	  }

	  if(rxBuf[14]==232 && initialize==0)
 8005852:	4b57      	ldr	r3, [pc, #348]	@ (80059b0 <main+0x28c>)
 8005854:	7b9b      	ldrb	r3, [r3, #14]
 8005856:	2be8      	cmp	r3, #232	@ 0xe8
 8005858:	d119      	bne.n	800588e <main+0x16a>
 800585a:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <main+0x2d0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d115      	bne.n	800588e <main+0x16a>
	  {
		  get_yaw_pitch_roll(Yaw_Pitch_Roll,gyro_XYZ, GYRO_SIZE);
 8005862:	4965      	ldr	r1, [pc, #404]	@ (80059f8 <main+0x2d4>)
 8005864:	4b65      	ldr	r3, [pc, #404]	@ (80059fc <main+0x2d8>)
 8005866:	2203      	movs	r2, #3
 8005868:	0018      	movs	r0, r3
 800586a:	f7ff fab3 	bl	8004dd4 <get_yaw_pitch_roll>
		  initial_yaw=Yaw_Pitch_Roll[0];
 800586e:	4b63      	ldr	r3, [pc, #396]	@ (80059fc <main+0x2d8>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b63      	ldr	r3, [pc, #396]	@ (8005a00 <main+0x2dc>)
 8005874:	601a      	str	r2, [r3, #0]
		  initial_pitch=Yaw_Pitch_Roll[1];
 8005876:	4b61      	ldr	r3, [pc, #388]	@ (80059fc <main+0x2d8>)
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	4b62      	ldr	r3, [pc, #392]	@ (8005a04 <main+0x2e0>)
 800587c:	601a      	str	r2, [r3, #0]
		  initial_roll=Yaw_Pitch_Roll[2];
 800587e:	4b5f      	ldr	r3, [pc, #380]	@ (80059fc <main+0x2d8>)
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	4b61      	ldr	r3, [pc, #388]	@ (8005a08 <main+0x2e4>)
 8005884:	601a      	str	r2, [r3, #0]
		  start=1;
 8005886:	4b59      	ldr	r3, [pc, #356]	@ (80059ec <main+0x2c8>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e071      	b.n	8005972 <main+0x24e>
	  }

	  else
	  {
		  IbusData(ibus_data_channels,IBUS_USER_CHANNELS,rxBuf);
 800588e:	4a48      	ldr	r2, [pc, #288]	@ (80059b0 <main+0x28c>)
 8005890:	4b57      	ldr	r3, [pc, #348]	@ (80059f0 <main+0x2cc>)
 8005892:	2106      	movs	r1, #6
 8005894:	0018      	movs	r0, r3
 8005896:	f7fd fd83 	bl	80033a0 <IbusData>
		  throttle=ibus_data_channels[2];
 800589a:	4b55      	ldr	r3, [pc, #340]	@ (80059f0 <main+0x2cc>)
 800589c:	889b      	ldrh	r3, [r3, #4]
 800589e:	001a      	movs	r2, r3
 80058a0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a0c <main+0x2e8>)
 80058a2:	601a      	str	r2, [r3, #0]
		  get_yaw_pitch_roll(Yaw_Pitch_Roll,gyro_XYZ, GYRO_SIZE);
 80058a4:	4954      	ldr	r1, [pc, #336]	@ (80059f8 <main+0x2d4>)
 80058a6:	4b55      	ldr	r3, [pc, #340]	@ (80059fc <main+0x2d8>)
 80058a8:	2203      	movs	r2, #3
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff fa92 	bl	8004dd4 <get_yaw_pitch_roll>

		  Yaw_Pitch_Roll[0]=Yaw_Pitch_Roll[0]-initial_yaw;
 80058b0:	4b52      	ldr	r3, [pc, #328]	@ (80059fc <main+0x2d8>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b52      	ldr	r3, [pc, #328]	@ (8005a00 <main+0x2dc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	1c19      	adds	r1, r3, #0
 80058ba:	1c10      	adds	r0, r2, #0
 80058bc:	f7fb fb62 	bl	8000f84 <__aeabi_fsub>
 80058c0:	1c03      	adds	r3, r0, #0
 80058c2:	1c1a      	adds	r2, r3, #0
 80058c4:	4b4d      	ldr	r3, [pc, #308]	@ (80059fc <main+0x2d8>)
 80058c6:	601a      	str	r2, [r3, #0]
		  Yaw_Pitch_Roll[1]=Yaw_Pitch_Roll[1]-initial_pitch;
 80058c8:	4b4c      	ldr	r3, [pc, #304]	@ (80059fc <main+0x2d8>)
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005a04 <main+0x2e0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	1c19      	adds	r1, r3, #0
 80058d2:	1c10      	adds	r0, r2, #0
 80058d4:	f7fb fb56 	bl	8000f84 <__aeabi_fsub>
 80058d8:	1c03      	adds	r3, r0, #0
 80058da:	1c1a      	adds	r2, r3, #0
 80058dc:	4b47      	ldr	r3, [pc, #284]	@ (80059fc <main+0x2d8>)
 80058de:	605a      	str	r2, [r3, #4]
		  Yaw_Pitch_Roll[2]=Yaw_Pitch_Roll[2]-initial_roll;
 80058e0:	4b46      	ldr	r3, [pc, #280]	@ (80059fc <main+0x2d8>)
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	4b48      	ldr	r3, [pc, #288]	@ (8005a08 <main+0x2e4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1c19      	adds	r1, r3, #0
 80058ea:	1c10      	adds	r0, r2, #0
 80058ec:	f7fb fb4a 	bl	8000f84 <__aeabi_fsub>
 80058f0:	1c03      	adds	r3, r0, #0
 80058f2:	1c1a      	adds	r2, r3, #0
 80058f4:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <main+0x2d8>)
 80058f6:	609a      	str	r2, [r3, #8]

		  desired_yaw_pitch_roll(desired_yaw_pitch_roll_angle);
 80058f8:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <main+0x2ec>)
 80058fa:	0018      	movs	r0, r3
 80058fc:	f000 facc 	bl	8005e98 <desired_yaw_pitch_roll>

		  pidRoll.setpoint=desired_yaw_pitch_roll_angle[2];
 8005900:	4b43      	ldr	r3, [pc, #268]	@ (8005a10 <main+0x2ec>)
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	4b30      	ldr	r3, [pc, #192]	@ (80059c8 <main+0x2a4>)
 8005906:	60da      	str	r2, [r3, #12]
		  pidPitch.setpoint=desired_yaw_pitch_roll_angle[1];
 8005908:	4b41      	ldr	r3, [pc, #260]	@ (8005a10 <main+0x2ec>)
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b32      	ldr	r3, [pc, #200]	@ (80059d8 <main+0x2b4>)
 800590e:	60da      	str	r2, [r3, #12]
		  pidYaw.setpoint=desired_yaw_pitch_roll_angle[0];
 8005910:	4b3f      	ldr	r3, [pc, #252]	@ (8005a10 <main+0x2ec>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b34      	ldr	r3, [pc, #208]	@ (80059e8 <main+0x2c4>)
 8005916:	60da      	str	r2, [r3, #12]

		  float rollOutput = PID_Compute(&pidRoll,pidRoll.setpoint,Yaw_Pitch_Roll[2]);
 8005918:	4b2b      	ldr	r3, [pc, #172]	@ (80059c8 <main+0x2a4>)
 800591a:	68d9      	ldr	r1, [r3, #12]
 800591c:	4b37      	ldr	r3, [pc, #220]	@ (80059fc <main+0x2d8>)
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4b29      	ldr	r3, [pc, #164]	@ (80059c8 <main+0x2a4>)
 8005922:	0018      	movs	r0, r3
 8005924:	f000 fbbe 	bl	80060a4 <PID_Compute>
 8005928:	1c03      	adds	r3, r0, #0
 800592a:	60bb      	str	r3, [r7, #8]
		  float pitchOutput = PID_Compute(&pidPitch, pidPitch.setpoint, Yaw_Pitch_Roll[1]);
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <main+0x2b4>)
 800592e:	68d9      	ldr	r1, [r3, #12]
 8005930:	4b32      	ldr	r3, [pc, #200]	@ (80059fc <main+0x2d8>)
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4b28      	ldr	r3, [pc, #160]	@ (80059d8 <main+0x2b4>)
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fbb4 	bl	80060a4 <PID_Compute>
 800593c:	1c03      	adds	r3, r0, #0
 800593e:	607b      	str	r3, [r7, #4]
		  float yawOutput = PID_Compute(&pidYaw,  pidYaw.setpoint, Yaw_Pitch_Roll[0]);
 8005940:	4b29      	ldr	r3, [pc, #164]	@ (80059e8 <main+0x2c4>)
 8005942:	68d9      	ldr	r1, [r3, #12]
 8005944:	4b2d      	ldr	r3, [pc, #180]	@ (80059fc <main+0x2d8>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b27      	ldr	r3, [pc, #156]	@ (80059e8 <main+0x2c4>)
 800594a:	0018      	movs	r0, r3
 800594c:	f000 fbaa 	bl	80060a4 <PID_Compute>
 8005950:	1c03      	adds	r3, r0, #0
 8005952:	603b      	str	r3, [r7, #0]


		  yaw_input=Yaw_Pitch_Roll[0];
 8005954:	4b29      	ldr	r3, [pc, #164]	@ (80059fc <main+0x2d8>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b2e      	ldr	r3, [pc, #184]	@ (8005a14 <main+0x2f0>)
 800595a:	601a      	str	r2, [r3, #0]
		  pitch_input=Yaw_Pitch_Roll[1];
 800595c:	4b27      	ldr	r3, [pc, #156]	@ (80059fc <main+0x2d8>)
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4b2d      	ldr	r3, [pc, #180]	@ (8005a18 <main+0x2f4>)
 8005962:	601a      	str	r2, [r3, #0]
		  roll_input=Yaw_Pitch_Roll[2];
 8005964:	4b25      	ldr	r3, [pc, #148]	@ (80059fc <main+0x2d8>)
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	4b2c      	ldr	r3, [pc, #176]	@ (8005a1c <main+0x2f8>)
 800596a:	601a      	str	r2, [r3, #0]
		  start=2;
 800596c:	4b1f      	ldr	r3, [pc, #124]	@ (80059ec <main+0x2c8>)
 800596e:	2202      	movs	r2, #2
 8005970:	601a      	str	r2, [r3, #0]

	  }

	  if (throttle<=1300 && start==2)
 8005972:	4b26      	ldr	r3, [pc, #152]	@ (8005a0c <main+0x2e8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2a      	ldr	r2, [pc, #168]	@ (8005a20 <main+0x2fc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	dc55      	bgt.n	8005a28 <main+0x304>
 800597c:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <main+0x2c8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d151      	bne.n	8005a28 <main+0x304>
	  {
		  motor[0] = throttle;
 8005984:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <main+0x2e8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <main+0x300>)
 800598c:	801a      	strh	r2, [r3, #0]
		  motor[1] = throttle;
 800598e:	4b1f      	ldr	r3, [pc, #124]	@ (8005a0c <main+0x2e8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	b29a      	uxth	r2, r3
 8005994:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <main+0x300>)
 8005996:	805a      	strh	r2, [r3, #2]
		  motor[2] = throttle;
 8005998:	4b1c      	ldr	r3, [pc, #112]	@ (8005a0c <main+0x2e8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b29a      	uxth	r2, r3
 800599e:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <main+0x300>)
 80059a0:	809a      	strh	r2, [r3, #4]
		  motor[3] = throttle;
 80059a2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <main+0x2e8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a24 <main+0x300>)
 80059aa:	80da      	strh	r2, [r3, #6]
 80059ac:	e0de      	b.n	8005b6c <main+0x448>
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	2000057c 	.word	0x2000057c
 80059b4:	20000398 	.word	0x20000398
 80059b8:	200002c0 	.word	0x200002c0
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	2000067c 	.word	0x2000067c
 80059c4:	20000010 	.word	0x20000010
 80059c8:	200005f8 	.word	0x200005f8
 80059cc:	20000014 	.word	0x20000014
 80059d0:	20000680 	.word	0x20000680
 80059d4:	20000018 	.word	0x20000018
 80059d8:	20000624 	.word	0x20000624
 80059dc:	2000001c 	.word	0x2000001c
 80059e0:	20000684 	.word	0x20000684
 80059e4:	20000020 	.word	0x20000020
 80059e8:	20000650 	.word	0x20000650
 80059ec:	200005dc 	.word	0x200005dc
 80059f0:	2000059c 	.word	0x2000059c
 80059f4:	20000578 	.word	0x20000578
 80059f8:	200005b4 	.word	0x200005b4
 80059fc:	200005a8 	.word	0x200005a8
 8005a00:	200005d0 	.word	0x200005d0
 8005a04:	200005d4 	.word	0x200005d4
 8005a08:	200005d8 	.word	0x200005d8
 8005a0c:	200005e8 	.word	0x200005e8
 8005a10:	20000688 	.word	0x20000688
 8005a14:	200005f4 	.word	0x200005f4
 8005a18:	200005f0 	.word	0x200005f0
 8005a1c:	200005ec 	.word	0x200005ec
 8005a20:	00000514 	.word	0x00000514
 8005a24:	200005e0 	.word	0x200005e0
	  }

	  else if (throttle>1300 && throttle<=2000 && start==2)
 8005a28:	4bb9      	ldr	r3, [pc, #740]	@ (8005d10 <main+0x5ec>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4ab9      	ldr	r2, [pc, #740]	@ (8005d14 <main+0x5f0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	dc00      	bgt.n	8005a34 <main+0x310>
 8005a32:	e09b      	b.n	8005b6c <main+0x448>
 8005a34:	4bb6      	ldr	r3, [pc, #728]	@ (8005d10 <main+0x5ec>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	23fa      	movs	r3, #250	@ 0xfa
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	dd00      	ble.n	8005a42 <main+0x31e>
 8005a40:	e094      	b.n	8005b6c <main+0x448>
 8005a42:	4bb5      	ldr	r3, [pc, #724]	@ (8005d18 <main+0x5f4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d000      	beq.n	8005a4c <main+0x328>
 8005a4a:	e08f      	b.n	8005b6c <main+0x448>
	  {
		  motor[0] = throttle - pidPitch.output + pidRoll.output - pidYaw.output; //Calculate the pulse for esc 1 (front-right - CCW)
 8005a4c:	4bb0      	ldr	r3, [pc, #704]	@ (8005d10 <main+0x5ec>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7fb fc71 	bl	8001338 <__aeabi_i2f>
 8005a56:	1c02      	adds	r2, r0, #0
 8005a58:	4bb0      	ldr	r3, [pc, #704]	@ (8005d1c <main+0x5f8>)
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	1c19      	adds	r1, r3, #0
 8005a5e:	1c10      	adds	r0, r2, #0
 8005a60:	f7fb fa90 	bl	8000f84 <__aeabi_fsub>
 8005a64:	1c03      	adds	r3, r0, #0
 8005a66:	1c1a      	adds	r2, r3, #0
 8005a68:	4bad      	ldr	r3, [pc, #692]	@ (8005d20 <main+0x5fc>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	1c19      	adds	r1, r3, #0
 8005a6e:	1c10      	adds	r0, r2, #0
 8005a70:	f7fa fdda 	bl	8000628 <__aeabi_fadd>
 8005a74:	1c03      	adds	r3, r0, #0
 8005a76:	1c1a      	adds	r2, r3, #0
 8005a78:	4baa      	ldr	r3, [pc, #680]	@ (8005d24 <main+0x600>)
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	1c19      	adds	r1, r3, #0
 8005a7e:	1c10      	adds	r0, r2, #0
 8005a80:	f7fb fa80 	bl	8000f84 <__aeabi_fsub>
 8005a84:	1c03      	adds	r3, r0, #0
 8005a86:	1c18      	adds	r0, r3, #0
 8005a88:	f7fa fd48 	bl	800051c <__aeabi_f2uiz>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	4ba5      	ldr	r3, [pc, #660]	@ (8005d28 <main+0x604>)
 8005a92:	801a      	strh	r2, [r3, #0]
		  motor[1] = throttle - pidPitch.output - pidRoll.output + pidYaw.output; //Calculate the pulse for esc 2 (rear-right - CW)
 8005a94:	4b9e      	ldr	r3, [pc, #632]	@ (8005d10 <main+0x5ec>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7fb fc4d 	bl	8001338 <__aeabi_i2f>
 8005a9e:	1c02      	adds	r2, r0, #0
 8005aa0:	4b9e      	ldr	r3, [pc, #632]	@ (8005d1c <main+0x5f8>)
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	1c19      	adds	r1, r3, #0
 8005aa6:	1c10      	adds	r0, r2, #0
 8005aa8:	f7fb fa6c 	bl	8000f84 <__aeabi_fsub>
 8005aac:	1c03      	adds	r3, r0, #0
 8005aae:	1c1a      	adds	r2, r3, #0
 8005ab0:	4b9b      	ldr	r3, [pc, #620]	@ (8005d20 <main+0x5fc>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	1c19      	adds	r1, r3, #0
 8005ab6:	1c10      	adds	r0, r2, #0
 8005ab8:	f7fb fa64 	bl	8000f84 <__aeabi_fsub>
 8005abc:	1c03      	adds	r3, r0, #0
 8005abe:	1c1a      	adds	r2, r3, #0
 8005ac0:	4b98      	ldr	r3, [pc, #608]	@ (8005d24 <main+0x600>)
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac4:	1c19      	adds	r1, r3, #0
 8005ac6:	1c10      	adds	r0, r2, #0
 8005ac8:	f7fa fdae 	bl	8000628 <__aeabi_fadd>
 8005acc:	1c03      	adds	r3, r0, #0
 8005ace:	1c18      	adds	r0, r3, #0
 8005ad0:	f7fa fd24 	bl	800051c <__aeabi_f2uiz>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	4b93      	ldr	r3, [pc, #588]	@ (8005d28 <main+0x604>)
 8005ada:	805a      	strh	r2, [r3, #2]
		  motor[2] = throttle + pidPitch.output - pidRoll.output - pidYaw.output; //Calculate the pulse for esc 3 (rear-left - CCW)
 8005adc:	4b8c      	ldr	r3, [pc, #560]	@ (8005d10 <main+0x5ec>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7fb fc29 	bl	8001338 <__aeabi_i2f>
 8005ae6:	1c02      	adds	r2, r0, #0
 8005ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8005d1c <main+0x5f8>)
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	1c19      	adds	r1, r3, #0
 8005aee:	1c10      	adds	r0, r2, #0
 8005af0:	f7fa fd9a 	bl	8000628 <__aeabi_fadd>
 8005af4:	1c03      	adds	r3, r0, #0
 8005af6:	1c1a      	adds	r2, r3, #0
 8005af8:	4b89      	ldr	r3, [pc, #548]	@ (8005d20 <main+0x5fc>)
 8005afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afc:	1c19      	adds	r1, r3, #0
 8005afe:	1c10      	adds	r0, r2, #0
 8005b00:	f7fb fa40 	bl	8000f84 <__aeabi_fsub>
 8005b04:	1c03      	adds	r3, r0, #0
 8005b06:	1c1a      	adds	r2, r3, #0
 8005b08:	4b86      	ldr	r3, [pc, #536]	@ (8005d24 <main+0x600>)
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	1c19      	adds	r1, r3, #0
 8005b0e:	1c10      	adds	r0, r2, #0
 8005b10:	f7fb fa38 	bl	8000f84 <__aeabi_fsub>
 8005b14:	1c03      	adds	r3, r0, #0
 8005b16:	1c18      	adds	r0, r3, #0
 8005b18:	f7fa fd00 	bl	800051c <__aeabi_f2uiz>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	4b81      	ldr	r3, [pc, #516]	@ (8005d28 <main+0x604>)
 8005b22:	809a      	strh	r2, [r3, #4]
		  motor[3] = throttle + pidPitch.output + pidRoll.output + pidYaw.output; //Calculate the pulse for esc 4 (front-left - CW)
 8005b24:	4b7a      	ldr	r3, [pc, #488]	@ (8005d10 <main+0x5ec>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fb fc05 	bl	8001338 <__aeabi_i2f>
 8005b2e:	1c02      	adds	r2, r0, #0
 8005b30:	4b7a      	ldr	r3, [pc, #488]	@ (8005d1c <main+0x5f8>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	1c19      	adds	r1, r3, #0
 8005b36:	1c10      	adds	r0, r2, #0
 8005b38:	f7fa fd76 	bl	8000628 <__aeabi_fadd>
 8005b3c:	1c03      	adds	r3, r0, #0
 8005b3e:	1c1a      	adds	r2, r3, #0
 8005b40:	4b77      	ldr	r3, [pc, #476]	@ (8005d20 <main+0x5fc>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	1c19      	adds	r1, r3, #0
 8005b46:	1c10      	adds	r0, r2, #0
 8005b48:	f7fa fd6e 	bl	8000628 <__aeabi_fadd>
 8005b4c:	1c03      	adds	r3, r0, #0
 8005b4e:	1c1a      	adds	r2, r3, #0
 8005b50:	4b74      	ldr	r3, [pc, #464]	@ (8005d24 <main+0x600>)
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	1c19      	adds	r1, r3, #0
 8005b56:	1c10      	adds	r0, r2, #0
 8005b58:	f7fa fd66 	bl	8000628 <__aeabi_fadd>
 8005b5c:	1c03      	adds	r3, r0, #0
 8005b5e:	1c18      	adds	r0, r3, #0
 8005b60:	f7fa fcdc 	bl	800051c <__aeabi_f2uiz>
 8005b64:	0003      	movs	r3, r0
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	4b6f      	ldr	r3, [pc, #444]	@ (8005d28 <main+0x604>)
 8005b6a:	80da      	strh	r2, [r3, #6]



	  }

	  if (motor[0]<1000 || motor[0]>2200) motor[0]=1000;
 8005b6c:	4b6e      	ldr	r3, [pc, #440]	@ (8005d28 <main+0x604>)
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	23fa      	movs	r3, #250	@ 0xfa
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d304      	bcc.n	8005b82 <main+0x45e>
 8005b78:	4b6b      	ldr	r3, [pc, #428]	@ (8005d28 <main+0x604>)
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d2c <main+0x608>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d903      	bls.n	8005b8a <main+0x466>
 8005b82:	4b69      	ldr	r3, [pc, #420]	@ (8005d28 <main+0x604>)
 8005b84:	22fa      	movs	r2, #250	@ 0xfa
 8005b86:	0092      	lsls	r2, r2, #2
 8005b88:	801a      	strh	r2, [r3, #0]
	  if (motor[1]<1000 || motor[1]>2200) motor[1]=1000;
 8005b8a:	4b67      	ldr	r3, [pc, #412]	@ (8005d28 <main+0x604>)
 8005b8c:	885a      	ldrh	r2, [r3, #2]
 8005b8e:	23fa      	movs	r3, #250	@ 0xfa
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d304      	bcc.n	8005ba0 <main+0x47c>
 8005b96:	4b64      	ldr	r3, [pc, #400]	@ (8005d28 <main+0x604>)
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	4a64      	ldr	r2, [pc, #400]	@ (8005d2c <main+0x608>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d903      	bls.n	8005ba8 <main+0x484>
 8005ba0:	4b61      	ldr	r3, [pc, #388]	@ (8005d28 <main+0x604>)
 8005ba2:	22fa      	movs	r2, #250	@ 0xfa
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	805a      	strh	r2, [r3, #2]
	  if (motor[2]<1000 || motor[2]>2200) motor[2]=1000;
 8005ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8005d28 <main+0x604>)
 8005baa:	889a      	ldrh	r2, [r3, #4]
 8005bac:	23fa      	movs	r3, #250	@ 0xfa
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d304      	bcc.n	8005bbe <main+0x49a>
 8005bb4:	4b5c      	ldr	r3, [pc, #368]	@ (8005d28 <main+0x604>)
 8005bb6:	889b      	ldrh	r3, [r3, #4]
 8005bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8005d2c <main+0x608>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d903      	bls.n	8005bc6 <main+0x4a2>
 8005bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8005d28 <main+0x604>)
 8005bc0:	22fa      	movs	r2, #250	@ 0xfa
 8005bc2:	0092      	lsls	r2, r2, #2
 8005bc4:	809a      	strh	r2, [r3, #4]
	  if (motor[3]<1000 || motor[3]>2200) motor[3]=1000;
 8005bc6:	4b58      	ldr	r3, [pc, #352]	@ (8005d28 <main+0x604>)
 8005bc8:	88da      	ldrh	r2, [r3, #6]
 8005bca:	23fa      	movs	r3, #250	@ 0xfa
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d304      	bcc.n	8005bdc <main+0x4b8>
 8005bd2:	4b55      	ldr	r3, [pc, #340]	@ (8005d28 <main+0x604>)
 8005bd4:	88db      	ldrh	r3, [r3, #6]
 8005bd6:	4a55      	ldr	r2, [pc, #340]	@ (8005d2c <main+0x608>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d903      	bls.n	8005be4 <main+0x4c0>
 8005bdc:	4b52      	ldr	r3, [pc, #328]	@ (8005d28 <main+0x604>)
 8005bde:	22fa      	movs	r2, #250	@ 0xfa
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	80da      	strh	r2, [r3, #6]

	  if ((motor[0]>2000) && (motor[0]<=2200)) motor[0]=2000;
 8005be4:	4b50      	ldr	r3, [pc, #320]	@ (8005d28 <main+0x604>)
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	23fa      	movs	r3, #250	@ 0xfa
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d908      	bls.n	8005c02 <main+0x4de>
 8005bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8005d28 <main+0x604>)
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8005d2c <main+0x608>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d803      	bhi.n	8005c02 <main+0x4de>
 8005bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8005d28 <main+0x604>)
 8005bfc:	22fa      	movs	r2, #250	@ 0xfa
 8005bfe:	00d2      	lsls	r2, r2, #3
 8005c00:	801a      	strh	r2, [r3, #0]
	  if ((motor[1]>2000) && (motor[0]<=2200)) motor[1]=2000;
 8005c02:	4b49      	ldr	r3, [pc, #292]	@ (8005d28 <main+0x604>)
 8005c04:	885a      	ldrh	r2, [r3, #2]
 8005c06:	23fa      	movs	r3, #250	@ 0xfa
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d908      	bls.n	8005c20 <main+0x4fc>
 8005c0e:	4b46      	ldr	r3, [pc, #280]	@ (8005d28 <main+0x604>)
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	4a46      	ldr	r2, [pc, #280]	@ (8005d2c <main+0x608>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d803      	bhi.n	8005c20 <main+0x4fc>
 8005c18:	4b43      	ldr	r3, [pc, #268]	@ (8005d28 <main+0x604>)
 8005c1a:	22fa      	movs	r2, #250	@ 0xfa
 8005c1c:	00d2      	lsls	r2, r2, #3
 8005c1e:	805a      	strh	r2, [r3, #2]
	  if ((motor[2]>2000) && (motor[0]<=2200)) motor[2]=2000;
 8005c20:	4b41      	ldr	r3, [pc, #260]	@ (8005d28 <main+0x604>)
 8005c22:	889a      	ldrh	r2, [r3, #4]
 8005c24:	23fa      	movs	r3, #250	@ 0xfa
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d908      	bls.n	8005c3e <main+0x51a>
 8005c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d28 <main+0x604>)
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	4a3e      	ldr	r2, [pc, #248]	@ (8005d2c <main+0x608>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d803      	bhi.n	8005c3e <main+0x51a>
 8005c36:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <main+0x604>)
 8005c38:	22fa      	movs	r2, #250	@ 0xfa
 8005c3a:	00d2      	lsls	r2, r2, #3
 8005c3c:	809a      	strh	r2, [r3, #4]
	  if ((motor[3]>2000) && (motor[0]<=2200)) motor[3]=2000;
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d28 <main+0x604>)
 8005c40:	88da      	ldrh	r2, [r3, #6]
 8005c42:	23fa      	movs	r3, #250	@ 0xfa
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d908      	bls.n	8005c5c <main+0x538>
 8005c4a:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <main+0x604>)
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	4a37      	ldr	r2, [pc, #220]	@ (8005d2c <main+0x608>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d803      	bhi.n	8005c5c <main+0x538>
 8005c54:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <main+0x604>)
 8005c56:	22fa      	movs	r2, #250	@ 0xfa
 8005c58:	00d2      	lsls	r2, r2, #3
 8005c5a:	80da      	strh	r2, [r3, #6]

	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,motor[0]);
 8005c5c:	4b32      	ldr	r3, [pc, #200]	@ (8005d28 <main+0x604>)
 8005c5e:	881a      	ldrh	r2, [r3, #0]
 8005c60:	4b33      	ldr	r3, [pc, #204]	@ (8005d30 <main+0x60c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,motor[1]);
 8005c66:	4b30      	ldr	r3, [pc, #192]	@ (8005d28 <main+0x604>)
 8005c68:	885a      	ldrh	r2, [r3, #2]
 8005c6a:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <main+0x60c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,motor[2]);
 8005c70:	4b2d      	ldr	r3, [pc, #180]	@ (8005d28 <main+0x604>)
 8005c72:	889a      	ldrh	r2, [r3, #4]
 8005c74:	4b2e      	ldr	r3, [pc, #184]	@ (8005d30 <main+0x60c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,motor[3]);
 8005c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d28 <main+0x604>)
 8005c7c:	88da      	ldrh	r2, [r3, #6]
 8005c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d30 <main+0x60c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	641a      	str	r2, [r3, #64]	@ 0x40
	  IbusData(ibus_data_channels,IBUS_USER_CHANNELS,rxBuf);
 8005c84:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <main+0x610>)
 8005c86:	4b2c      	ldr	r3, [pc, #176]	@ (8005d38 <main+0x614>)
 8005c88:	2106      	movs	r1, #6
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f7fd fb88 	bl	80033a0 <IbusData>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%1.f\t",Yaw_Pitch_Roll[0] ), 0xFFFF);
 8005c90:	4b2a      	ldr	r3, [pc, #168]	@ (8005d3c <main+0x618>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	1c18      	adds	r0, r3, #0
 8005c96:	f7fd fa99 	bl	80031cc <__aeabi_f2d>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	000b      	movs	r3, r1
 8005c9e:	4928      	ldr	r1, [pc, #160]	@ (8005d40 <main+0x61c>)
 8005ca0:	4828      	ldr	r0, [pc, #160]	@ (8005d44 <main+0x620>)
 8005ca2:	f006 ff7b 	bl	800cb9c <siprintf>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <main+0x624>)
 8005cac:	4925      	ldr	r1, [pc, #148]	@ (8005d44 <main+0x620>)
 8005cae:	4827      	ldr	r0, [pc, #156]	@ (8005d4c <main+0x628>)
 8005cb0:	f004 fdca 	bl	800a848 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%1.f\t", Yaw_Pitch_Roll[1]), 0xFFFF);
 8005cb4:	4b21      	ldr	r3, [pc, #132]	@ (8005d3c <main+0x618>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	1c18      	adds	r0, r3, #0
 8005cba:	f7fd fa87 	bl	80031cc <__aeabi_f2d>
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	000b      	movs	r3, r1
 8005cc2:	491f      	ldr	r1, [pc, #124]	@ (8005d40 <main+0x61c>)
 8005cc4:	481f      	ldr	r0, [pc, #124]	@ (8005d44 <main+0x620>)
 8005cc6:	f006 ff69 	bl	800cb9c <siprintf>
 8005cca:	0003      	movs	r3, r0
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	4b1e      	ldr	r3, [pc, #120]	@ (8005d48 <main+0x624>)
 8005cd0:	491c      	ldr	r1, [pc, #112]	@ (8005d44 <main+0x620>)
 8005cd2:	481e      	ldr	r0, [pc, #120]	@ (8005d4c <main+0x628>)
 8005cd4:	f004 fdb8 	bl	800a848 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%1.f\t\n",Yaw_Pitch_Roll[2] ), 0xFFFF);
 8005cd8:	4b18      	ldr	r3, [pc, #96]	@ (8005d3c <main+0x618>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	1c18      	adds	r0, r3, #0
 8005cde:	f7fd fa75 	bl	80031cc <__aeabi_f2d>
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	000b      	movs	r3, r1
 8005ce6:	491a      	ldr	r1, [pc, #104]	@ (8005d50 <main+0x62c>)
 8005ce8:	4816      	ldr	r0, [pc, #88]	@ (8005d44 <main+0x620>)
 8005cea:	f006 ff57 	bl	800cb9c <siprintf>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <main+0x624>)
 8005cf4:	4913      	ldr	r1, [pc, #76]	@ (8005d44 <main+0x620>)
 8005cf6:	4815      	ldr	r0, [pc, #84]	@ (8005d4c <main+0x628>)
 8005cf8:	f004 fda6 	bl	800a848 <HAL_UART_Transmit>
      battery_voltaj=read_voltaj();
 8005cfc:	f000 f82c 	bl	8005d58 <read_voltaj>
 8005d00:	1c02      	adds	r2, r0, #0
 8005d02:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <main+0x630>)
 8005d04:	601a      	str	r2, [r3, #0]

	 HAL_Delay(10);
 8005d06:	200a      	movs	r0, #10
 8005d08:	f000 fe28 	bl	800695c <HAL_Delay>
  {
 8005d0c:	e554      	b.n	80057b8 <main+0x94>
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	200005e8 	.word	0x200005e8
 8005d14:	00000514 	.word	0x00000514
 8005d18:	200005dc 	.word	0x200005dc
 8005d1c:	20000624 	.word	0x20000624
 8005d20:	200005f8 	.word	0x200005f8
 8005d24:	20000650 	.word	0x20000650
 8005d28:	200005e0 	.word	0x200005e0
 8005d2c:	00000898 	.word	0x00000898
 8005d30:	200002c0 	.word	0x200002c0
 8005d34:	2000057c 	.word	0x2000057c
 8005d38:	2000059c 	.word	0x2000059c
 8005d3c:	200005a8 	.word	0x200005a8
 8005d40:	08010d08 	.word	0x08010d08
 8005d44:	200005c0 	.word	0x200005c0
 8005d48:	0000ffff 	.word	0x0000ffff
 8005d4c:	20000420 	.word	0x20000420
 8005d50:	08010d10 	.word	0x08010d10
 8005d54:	20000694 	.word	0x20000694

08005d58 <read_voltaj>:


/* USER CODE BEGIN 4 */

float read_voltaj()
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
	uint16_t adc_v;
	float R1=5.0;
 8005d5e:	4b31      	ldr	r3, [pc, #196]	@ (8005e24 <read_voltaj+0xcc>)
 8005d60:	60bb      	str	r3, [r7, #8]
	int R2=1.0;
 8005d62:	2301      	movs	r3, #1
 8005d64:	607b      	str	r3, [r7, #4]
	float battery;
	HAL_ADC_Start(&hadc); // ADC'yi start et pointer ile çagır.
 8005d66:	4b30      	ldr	r3, [pc, #192]	@ (8005e28 <read_voltaj+0xd0>)
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 ff5b 	bl	8006c24 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc,20)==HAL_OK)  // HAL_ADC_PollForConversion kullanman gerekecek
 8005d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e28 <read_voltaj+0xd0>)
 8005d70:	2114      	movs	r1, #20
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 ffea 	bl	8006d4c <HAL_ADC_PollForConversion>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d107      	bne.n	8005d8c <read_voltaj+0x34>
	{
		adc_v=HAL_ADC_GetValue(&hadc);
 8005d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e28 <read_voltaj+0xd0>)
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f001 f87c 	bl	8006e7c <HAL_ADC_GetValue>
 8005d84:	0002      	movs	r2, r0
 8005d86:	230e      	movs	r3, #14
 8005d88:	18fb      	adds	r3, r7, r3
 8005d8a:	801a      	strh	r2, [r3, #0]
		/*HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d-", adc_v), 0xFFFF);
		HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d \n\r", adc_v/2), 0xFFFF);*/
	}

	HAL_ADC_Stop(&hadc); // ADC'yi start et pointer ile çagır.
 8005d8c:	4b26      	ldr	r3, [pc, #152]	@ (8005e28 <read_voltaj+0xd0>)
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 ff9c 	bl	8006ccc <HAL_ADC_Stop>
	battery=(((float)adc_v)/4096)*3.3;
 8005d94:	230e      	movs	r3, #14
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7fb fb18 	bl	80013d0 <__aeabi_ui2f>
 8005da0:	1c03      	adds	r3, r0, #0
 8005da2:	218b      	movs	r1, #139	@ 0x8b
 8005da4:	05c9      	lsls	r1, r1, #23
 8005da6:	1c18      	adds	r0, r3, #0
 8005da8:	f7fa fdc8 	bl	800093c <__aeabi_fdiv>
 8005dac:	1c03      	adds	r3, r0, #0
 8005dae:	1c18      	adds	r0, r3, #0
 8005db0:	f7fd fa0c 	bl	80031cc <__aeabi_f2d>
 8005db4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e2c <read_voltaj+0xd4>)
 8005db6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e30 <read_voltaj+0xd8>)
 8005db8:	f7fc faf4 	bl	80023a4 <__aeabi_dmul>
 8005dbc:	0002      	movs	r2, r0
 8005dbe:	000b      	movs	r3, r1
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	f7fd fa4a 	bl	800325c <__aeabi_d2f>
 8005dc8:	1c03      	adds	r3, r0, #0
 8005dca:	603b      	str	r3, [r7, #0]
	battery=battery/(R2/(R1+R2))+0.1;
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb fab3 	bl	8001338 <__aeabi_i2f>
 8005dd2:	1c04      	adds	r4, r0, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fb faaf 	bl	8001338 <__aeabi_i2f>
 8005dda:	1c03      	adds	r3, r0, #0
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	1c18      	adds	r0, r3, #0
 8005de0:	f7fa fc22 	bl	8000628 <__aeabi_fadd>
 8005de4:	1c03      	adds	r3, r0, #0
 8005de6:	1c19      	adds	r1, r3, #0
 8005de8:	1c20      	adds	r0, r4, #0
 8005dea:	f7fa fda7 	bl	800093c <__aeabi_fdiv>
 8005dee:	1c03      	adds	r3, r0, #0
 8005df0:	1c19      	adds	r1, r3, #0
 8005df2:	6838      	ldr	r0, [r7, #0]
 8005df4:	f7fa fda2 	bl	800093c <__aeabi_fdiv>
 8005df8:	1c03      	adds	r3, r0, #0
 8005dfa:	1c18      	adds	r0, r3, #0
 8005dfc:	f7fd f9e6 	bl	80031cc <__aeabi_f2d>
 8005e00:	4a0c      	ldr	r2, [pc, #48]	@ (8005e34 <read_voltaj+0xdc>)
 8005e02:	4b0d      	ldr	r3, [pc, #52]	@ (8005e38 <read_voltaj+0xe0>)
 8005e04:	f7fb fb26 	bl	8001454 <__aeabi_dadd>
 8005e08:	0002      	movs	r2, r0
 8005e0a:	000b      	movs	r3, r1
 8005e0c:	0010      	movs	r0, r2
 8005e0e:	0019      	movs	r1, r3
 8005e10:	f7fd fa24 	bl	800325c <__aeabi_d2f>
 8005e14:	1c03      	adds	r3, r0, #0
 8005e16:	603b      	str	r3, [r7, #0]
	return battery;
 8005e18:	683b      	ldr	r3, [r7, #0]
}
 8005e1a:	1c18      	adds	r0, r3, #0
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b005      	add	sp, #20
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	40a00000 	.word	0x40a00000
 8005e28:	2000021c 	.word	0x2000021c
 8005e2c:	66666666 	.word	0x66666666
 8005e30:	400a6666 	.word	0x400a6666
 8005e34:	9999999a 	.word	0x9999999a
 8005e38:	3fb99999 	.word	0x3fb99999

08005e3c <Mapping>:



float Mapping(float x,float in_min,float in_max,float out_min,float out_max)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	float y;
	y=(x-in_min)*(out_max - out_min)/ (in_max - in_min) + out_min;
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7fb f899 	bl	8000f84 <__aeabi_fsub>
 8005e52:	1c03      	adds	r3, r0, #0
 8005e54:	1c1c      	adds	r4, r3, #0
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e5a:	f7fb f893 	bl	8000f84 <__aeabi_fsub>
 8005e5e:	1c03      	adds	r3, r0, #0
 8005e60:	1c19      	adds	r1, r3, #0
 8005e62:	1c20      	adds	r0, r4, #0
 8005e64:	f7fa ff50 	bl	8000d08 <__aeabi_fmul>
 8005e68:	1c03      	adds	r3, r0, #0
 8005e6a:	1c1c      	adds	r4, r3, #0
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fb f888 	bl	8000f84 <__aeabi_fsub>
 8005e74:	1c03      	adds	r3, r0, #0
 8005e76:	1c19      	adds	r1, r3, #0
 8005e78:	1c20      	adds	r0, r4, #0
 8005e7a:	f7fa fd5f 	bl	800093c <__aeabi_fdiv>
 8005e7e:	1c03      	adds	r3, r0, #0
 8005e80:	1c19      	adds	r1, r3, #0
 8005e82:	6838      	ldr	r0, [r7, #0]
 8005e84:	f7fa fbd0 	bl	8000628 <__aeabi_fadd>
 8005e88:	1c03      	adds	r3, r0, #0
 8005e8a:	617b      	str	r3, [r7, #20]
	return y;
 8005e8c:	697b      	ldr	r3, [r7, #20]
}
 8005e8e:	1c18      	adds	r0, r3, #0
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b007      	add	sp, #28
 8005e94:	bd90      	pop	{r4, r7, pc}
	...

08005e98 <desired_yaw_pitch_roll>:


void desired_yaw_pitch_roll(float* desired_yaw_pitch_roll)
{
 8005e98:	b5b0      	push	{r4, r5, r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	6078      	str	r0, [r7, #4]
	IbusData(ibus_data_channels,IBUS_USER_CHANNELS,rxBuf);
 8005ea0:	4a51      	ldr	r2, [pc, #324]	@ (8005fe8 <desired_yaw_pitch_roll+0x150>)
 8005ea2:	4b52      	ldr	r3, [pc, #328]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005ea4:	2106      	movs	r1, #6
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7fd fa7a 	bl	80033a0 <IbusData>
	  if (ibus_data_channels[0]<1500)
 8005eac:	4b4f      	ldr	r3, [pc, #316]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8005ff0 <desired_yaw_pitch_roll+0x158>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d812      	bhi.n	8005edc <desired_yaw_pitch_roll+0x44>
		  desired_yaw_pitch_roll[2]=Mapping(ibus_data_channels[0], 1000, 1500, -3, 0);
 8005eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7fb fa88 	bl	80013d0 <__aeabi_ui2f>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	001c      	movs	r4, r3
 8005ec6:	4d4b      	ldr	r5, [pc, #300]	@ (8005ff4 <desired_yaw_pitch_roll+0x15c>)
 8005ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ff8 <desired_yaw_pitch_roll+0x160>)
 8005eca:	494c      	ldr	r1, [pc, #304]	@ (8005ffc <desired_yaw_pitch_roll+0x164>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	1c2b      	adds	r3, r5, #0
 8005ed2:	f7ff ffb3 	bl	8005e3c <Mapping>
 8005ed6:	1c03      	adds	r3, r0, #0
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	e01c      	b.n	8005f16 <desired_yaw_pitch_roll+0x7e>
	  else if (ibus_data_channels[0]>=1500 && ibus_data_channels[0]<2000)
 8005edc:	4b43      	ldr	r3, [pc, #268]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	4a43      	ldr	r2, [pc, #268]	@ (8005ff0 <desired_yaw_pitch_roll+0x158>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d917      	bls.n	8005f16 <desired_yaw_pitch_roll+0x7e>
 8005ee6:	4b41      	ldr	r3, [pc, #260]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	23fa      	movs	r3, #250	@ 0xfa
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d211      	bcs.n	8005f16 <desired_yaw_pitch_roll+0x7e>
		  desired_yaw_pitch_roll[2]=Mapping(ibus_data_channels[0], 1501, 2000, 0, 3);
 8005ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7fb fa6a 	bl	80013d0 <__aeabi_ui2f>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3308      	adds	r3, #8
 8005f00:	001c      	movs	r4, r3
 8005f02:	2500      	movs	r5, #0
 8005f04:	4a3e      	ldr	r2, [pc, #248]	@ (8006000 <desired_yaw_pitch_roll+0x168>)
 8005f06:	493f      	ldr	r1, [pc, #252]	@ (8006004 <desired_yaw_pitch_roll+0x16c>)
 8005f08:	4b3f      	ldr	r3, [pc, #252]	@ (8006008 <desired_yaw_pitch_roll+0x170>)
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	1c2b      	adds	r3, r5, #0
 8005f0e:	f7ff ff95 	bl	8005e3c <Mapping>
 8005f12:	1c03      	adds	r3, r0, #0
 8005f14:	6023      	str	r3, [r4, #0]

	  if (ibus_data_channels[1]<1500)
 8005f16:	4b35      	ldr	r3, [pc, #212]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f18:	885b      	ldrh	r3, [r3, #2]
 8005f1a:	4a35      	ldr	r2, [pc, #212]	@ (8005ff0 <desired_yaw_pitch_roll+0x158>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d811      	bhi.n	8005f44 <desired_yaw_pitch_roll+0xac>
		  desired_yaw_pitch_roll[1]=Mapping(ibus_data_channels[1], 1000, 1500, -3, 0);
 8005f20:	4b32      	ldr	r3, [pc, #200]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f22:	885b      	ldrh	r3, [r3, #2]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fb fa53 	bl	80013d0 <__aeabi_ui2f>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	1d1c      	adds	r4, r3, #4
 8005f2e:	4d31      	ldr	r5, [pc, #196]	@ (8005ff4 <desired_yaw_pitch_roll+0x15c>)
 8005f30:	4a31      	ldr	r2, [pc, #196]	@ (8005ff8 <desired_yaw_pitch_roll+0x160>)
 8005f32:	4932      	ldr	r1, [pc, #200]	@ (8005ffc <desired_yaw_pitch_roll+0x164>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	1c2b      	adds	r3, r5, #0
 8005f3a:	f7ff ff7f 	bl	8005e3c <Mapping>
 8005f3e:	1c03      	adds	r3, r0, #0
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	e01b      	b.n	8005f7c <desired_yaw_pitch_roll+0xe4>
	  else if (ibus_data_channels[1]>=1500 && ibus_data_channels[1]<2000)
 8005f44:	4b29      	ldr	r3, [pc, #164]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f46:	885b      	ldrh	r3, [r3, #2]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <desired_yaw_pitch_roll+0x158>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d916      	bls.n	8005f7c <desired_yaw_pitch_roll+0xe4>
 8005f4e:	4b27      	ldr	r3, [pc, #156]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f50:	885a      	ldrh	r2, [r3, #2]
 8005f52:	23fa      	movs	r3, #250	@ 0xfa
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d210      	bcs.n	8005f7c <desired_yaw_pitch_roll+0xe4>
		  desired_yaw_pitch_roll[1]=Mapping(ibus_data_channels[1], 1500, 2000, 0, 3);
 8005f5a:	4b24      	ldr	r3, [pc, #144]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f7fb fa36 	bl	80013d0 <__aeabi_ui2f>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1d1c      	adds	r4, r3, #4
 8005f68:	2500      	movs	r5, #0
 8005f6a:	4a25      	ldr	r2, [pc, #148]	@ (8006000 <desired_yaw_pitch_roll+0x168>)
 8005f6c:	4922      	ldr	r1, [pc, #136]	@ (8005ff8 <desired_yaw_pitch_roll+0x160>)
 8005f6e:	4b26      	ldr	r3, [pc, #152]	@ (8006008 <desired_yaw_pitch_roll+0x170>)
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	1c2b      	adds	r3, r5, #0
 8005f74:	f7ff ff62 	bl	8005e3c <Mapping>
 8005f78:	1c03      	adds	r3, r0, #0
 8005f7a:	6023      	str	r3, [r4, #0]

	  if (ibus_data_channels[3]<1500)
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f7e:	88db      	ldrh	r3, [r3, #6]
 8005f80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff0 <desired_yaw_pitch_roll+0x158>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d810      	bhi.n	8005fa8 <desired_yaw_pitch_roll+0x110>
		  desired_yaw_pitch_roll[0]=Mapping(ibus_data_channels[3], 1000, 1500, -360, 0);
 8005f86:	4b19      	ldr	r3, [pc, #100]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005f88:	88db      	ldrh	r3, [r3, #6]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fb fa20 	bl	80013d0 <__aeabi_ui2f>
 8005f90:	4c1e      	ldr	r4, [pc, #120]	@ (800600c <desired_yaw_pitch_roll+0x174>)
 8005f92:	4a19      	ldr	r2, [pc, #100]	@ (8005ff8 <desired_yaw_pitch_roll+0x160>)
 8005f94:	4919      	ldr	r1, [pc, #100]	@ (8005ffc <desired_yaw_pitch_roll+0x164>)
 8005f96:	2300      	movs	r3, #0
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	1c23      	adds	r3, r4, #0
 8005f9c:	f7ff ff4e 	bl	8005e3c <Mapping>
 8005fa0:	1c02      	adds	r2, r0, #0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
	  else if (ibus_data_channels[3]>=1500 && ibus_data_channels[3]<2000)
		  desired_yaw_pitch_roll[0]=Mapping(ibus_data_channels[3], 1500, 2000, 0, 360);
}
 8005fa6:	e01a      	b.n	8005fde <desired_yaw_pitch_roll+0x146>
	  else if (ibus_data_channels[3]>=1500 && ibus_data_channels[3]<2000)
 8005fa8:	4b10      	ldr	r3, [pc, #64]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005faa:	88db      	ldrh	r3, [r3, #6]
 8005fac:	4a10      	ldr	r2, [pc, #64]	@ (8005ff0 <desired_yaw_pitch_roll+0x158>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d915      	bls.n	8005fde <desired_yaw_pitch_roll+0x146>
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005fb4:	88da      	ldrh	r2, [r3, #6]
 8005fb6:	23fa      	movs	r3, #250	@ 0xfa
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d20f      	bcs.n	8005fde <desired_yaw_pitch_roll+0x146>
		  desired_yaw_pitch_roll[0]=Mapping(ibus_data_channels[3], 1500, 2000, 0, 360);
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005fec <desired_yaw_pitch_roll+0x154>)
 8005fc0:	88db      	ldrh	r3, [r3, #6]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fb fa04 	bl	80013d0 <__aeabi_ui2f>
 8005fc8:	2400      	movs	r4, #0
 8005fca:	4a0d      	ldr	r2, [pc, #52]	@ (8006000 <desired_yaw_pitch_roll+0x168>)
 8005fcc:	490a      	ldr	r1, [pc, #40]	@ (8005ff8 <desired_yaw_pitch_roll+0x160>)
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <desired_yaw_pitch_roll+0x178>)
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	1c23      	adds	r3, r4, #0
 8005fd4:	f7ff ff32 	bl	8005e3c <Mapping>
 8005fd8:	1c02      	adds	r2, r0, #0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b002      	add	sp, #8
 8005fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	2000057c 	.word	0x2000057c
 8005fec:	2000059c 	.word	0x2000059c
 8005ff0:	000005db 	.word	0x000005db
 8005ff4:	c0400000 	.word	0xc0400000
 8005ff8:	44bb8000 	.word	0x44bb8000
 8005ffc:	447a0000 	.word	0x447a0000
 8006000:	44fa0000 	.word	0x44fa0000
 8006004:	44bba000 	.word	0x44bba000
 8006008:	40400000 	.word	0x40400000
 800600c:	c3b40000 	.word	0xc3b40000
 8006010:	43b40000 	.word	0x43b40000

08006014 <HAL_TIM_IC_CaptureCallback>:

__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

  __HAL_TIM_SET_COUNTER(&htim2,0);
 800601c:	4b03      	ldr	r3, [pc, #12]	@ (800602c <HAL_TIM_IC_CaptureCallback+0x18>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2200      	movs	r2, #0
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006024:	46c0      	nop			@ (mov r8, r8)
 8006026:	46bd      	mov	sp, r7
 8006028:	b002      	add	sp, #8
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000308 	.word	0x20000308

08006030 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <HAL_UART_RxCpltCallback+0x24>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d105      	bne.n	800604c <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, rxBuf, 32);
 8006040:	4905      	ldr	r1, [pc, #20]	@ (8006058 <HAL_UART_RxCpltCallback+0x28>)
 8006042:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <HAL_UART_RxCpltCallback+0x24>)
 8006044:	2220      	movs	r2, #32
 8006046:	0018      	movs	r0, r3
 8006048:	f004 fc9d 	bl	800a986 <HAL_UART_Receive_IT>
	}

}
 800604c:	46c0      	nop			@ (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	b002      	add	sp, #8
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000398 	.word	0x20000398
 8006058:	2000057c 	.word	0x2000057c

0800605c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006060:	b672      	cpsid	i
}
 8006062:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006064:	46c0      	nop			@ (mov r8, r8)
 8006066:	e7fd      	b.n	8006064 <Error_Handler+0x8>

08006068 <PID_Init>:
 */


#include "pid.h"

void PID_Init(PIDController *pid, float kp, float ki, float kd) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
    pid->kp = kp;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	609a      	str	r2, [r3, #8]

    pid->integral = 0.0f;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	615a      	str	r2, [r3, #20]
    pid->output = 0.0f;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	46bd      	mov	sp, r7
 800609e:	b004      	add	sp, #16
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <PID_Compute>:

float PID_Compute(PIDController *pid, float setpoint, float input) {
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
	if (pid->ki<= 0.055 && pid->ki>=0.003 )
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	1c18      	adds	r0, r3, #0
 80060b6:	f7fd f889 	bl	80031cc <__aeabi_f2d>
 80060ba:	4a59      	ldr	r2, [pc, #356]	@ (8006220 <PID_Compute+0x17c>)
 80060bc:	4b59      	ldr	r3, [pc, #356]	@ (8006224 <PID_Compute+0x180>)
 80060be:	f7fa f9d5 	bl	800046c <__aeabi_dcmple>
 80060c2:	1e03      	subs	r3, r0, #0
 80060c4:	d011      	beq.n	80060ea <PID_Compute+0x46>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	1c18      	adds	r0, r3, #0
 80060cc:	f7fd f87e 	bl	80031cc <__aeabi_f2d>
 80060d0:	4a55      	ldr	r2, [pc, #340]	@ (8006228 <PID_Compute+0x184>)
 80060d2:	4b56      	ldr	r3, [pc, #344]	@ (800622c <PID_Compute+0x188>)
 80060d4:	f7fa f9de 	bl	8000494 <__aeabi_dcmpge>
 80060d8:	1e03      	subs	r3, r0, #0
 80060da:	d006      	beq.n	80060ea <PID_Compute+0x46>
	{
		pid->min_integral=-3636;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a54      	ldr	r2, [pc, #336]	@ (8006230 <PID_Compute+0x18c>)
 80060e0:	61da      	str	r2, [r3, #28]
		pid->max_integral=3636;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a53      	ldr	r2, [pc, #332]	@ (8006234 <PID_Compute+0x190>)
 80060e6:	619a      	str	r2, [r3, #24]
 80060e8:	e010      	b.n	800610c <PID_Compute+0x68>
	}


	else if (pid->ki<=0.003)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	1c18      	adds	r0, r3, #0
 80060f0:	f7fd f86c 	bl	80031cc <__aeabi_f2d>
 80060f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006228 <PID_Compute+0x184>)
 80060f6:	4b4d      	ldr	r3, [pc, #308]	@ (800622c <PID_Compute+0x188>)
 80060f8:	f7fa f9b8 	bl	800046c <__aeabi_dcmple>
 80060fc:	1e03      	subs	r3, r0, #0
 80060fe:	d005      	beq.n	800610c <PID_Compute+0x68>
	{
		pid->min_integral=-100000;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a4d      	ldr	r2, [pc, #308]	@ (8006238 <PID_Compute+0x194>)
 8006104:	61da      	str	r2, [r3, #28]
		pid->max_integral=100000;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a4c      	ldr	r2, [pc, #304]	@ (800623c <PID_Compute+0x198>)
 800610a:	619a      	str	r2, [r3, #24]
	}
	pid->setpoint = setpoint;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	60da      	str	r2, [r3, #12]

	pid->min_output=-200;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a4a      	ldr	r2, [pc, #296]	@ (8006240 <PID_Compute+0x19c>)
 8006116:	625a      	str	r2, [r3, #36]	@ 0x24

	pid->max_output=200;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a4a      	ldr	r2, [pc, #296]	@ (8006244 <PID_Compute+0x1a0>)
 800611c:	621a      	str	r2, [r3, #32]

    float error = pid->setpoint - input;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	1c18      	adds	r0, r3, #0
 8006126:	f7fa ff2d 	bl	8000f84 <__aeabi_fsub>
 800612a:	1c03      	adds	r3, r0, #0
 800612c:	617b      	str	r3, [r7, #20]
    pid->integral += error;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	1c18      	adds	r0, r3, #0
 8006136:	f7fa fa77 	bl	8000628 <__aeabi_fadd>
 800613a:	1c03      	adds	r3, r0, #0
 800613c:	1c1a      	adds	r2, r3, #0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	611a      	str	r2, [r3, #16]
    float derivative = error - pid->previous_error;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	1c19      	adds	r1, r3, #0
 8006148:	6978      	ldr	r0, [r7, #20]
 800614a:	f7fa ff1b 	bl	8000f84 <__aeabi_fsub>
 800614e:	1c03      	adds	r3, r0, #0
 8006150:	613b      	str	r3, [r7, #16]

    pid->output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	1c18      	adds	r0, r3, #0
 800615a:	f7fa fdd5 	bl	8000d08 <__aeabi_fmul>
 800615e:	1c03      	adds	r3, r0, #0
 8006160:	1c1c      	adds	r4, r3, #0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	1c19      	adds	r1, r3, #0
 800616c:	1c10      	adds	r0, r2, #0
 800616e:	f7fa fdcb 	bl	8000d08 <__aeabi_fmul>
 8006172:	1c03      	adds	r3, r0, #0
 8006174:	1c19      	adds	r1, r3, #0
 8006176:	1c20      	adds	r0, r4, #0
 8006178:	f7fa fa56 	bl	8000628 <__aeabi_fadd>
 800617c:	1c03      	adds	r3, r0, #0
 800617e:	1c1c      	adds	r4, r3, #0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	6939      	ldr	r1, [r7, #16]
 8006186:	1c18      	adds	r0, r3, #0
 8006188:	f7fa fdbe 	bl	8000d08 <__aeabi_fmul>
 800618c:	1c03      	adds	r3, r0, #0
 800618e:	1c19      	adds	r1, r3, #0
 8006190:	1c20      	adds	r0, r4, #0
 8006192:	f7fa fa49 	bl	8000628 <__aeabi_fadd>
 8006196:	1c03      	adds	r3, r0, #0
 8006198:	1c1a      	adds	r2, r3, #0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->previous_error = error;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	615a      	str	r2, [r3, #20]

    if (pid->integral<pid->min_integral) pid->integral=pid->min_integral;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	1c19      	adds	r1, r3, #0
 80061ae:	1c10      	adds	r0, r2, #0
 80061b0:	f7fa f98c 	bl	80004cc <__aeabi_fcmplt>
 80061b4:	1e03      	subs	r3, r0, #0
 80061b6:	d003      	beq.n	80061c0 <PID_Compute+0x11c>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	611a      	str	r2, [r3, #16]
    if (pid->integral>pid->max_integral) pid->integral=pid->max_integral;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	1c19      	adds	r1, r3, #0
 80061ca:	1c10      	adds	r0, r2, #0
 80061cc:	f7fa f992 	bl	80004f4 <__aeabi_fcmpgt>
 80061d0:	1e03      	subs	r3, r0, #0
 80061d2:	d003      	beq.n	80061dc <PID_Compute+0x138>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	611a      	str	r2, [r3, #16]
    if (pid->output<pid->min_output) pid->output=pid->min_output;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	1c19      	adds	r1, r3, #0
 80061e6:	1c10      	adds	r0, r2, #0
 80061e8:	f7fa f970 	bl	80004cc <__aeabi_fcmplt>
 80061ec:	1e03      	subs	r3, r0, #0
 80061ee:	d003      	beq.n	80061f8 <PID_Compute+0x154>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pid->output>pid->max_output) pid->output=pid->max_output;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	1c19      	adds	r1, r3, #0
 8006202:	1c10      	adds	r0, r2, #0
 8006204:	f7fa f976 	bl	80004f4 <__aeabi_fcmpgt>
 8006208:	1e03      	subs	r3, r0, #0
 800620a:	d003      	beq.n	8006214 <PID_Compute+0x170>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	629a      	str	r2, [r3, #40]	@ 0x28
    return pid->output;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8006218:	1c18      	adds	r0, r3, #0
 800621a:	46bd      	mov	sp, r7
 800621c:	b007      	add	sp, #28
 800621e:	bd90      	pop	{r4, r7, pc}
 8006220:	c28f5c29 	.word	0xc28f5c29
 8006224:	3fac28f5 	.word	0x3fac28f5
 8006228:	bc6a7efa 	.word	0xbc6a7efa
 800622c:	3f689374 	.word	0x3f689374
 8006230:	c5634000 	.word	0xc5634000
 8006234:	45634000 	.word	0x45634000
 8006238:	c7c35000 	.word	0xc7c35000
 800623c:	47c35000 	.word	0x47c35000
 8006240:	c3480000 	.word	0xc3480000
 8006244:	43480000 	.word	0x43480000

08006248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800624e:	4b0f      	ldr	r3, [pc, #60]	@ (800628c <HAL_MspInit+0x44>)
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	4b0e      	ldr	r3, [pc, #56]	@ (800628c <HAL_MspInit+0x44>)
 8006254:	2101      	movs	r1, #1
 8006256:	430a      	orrs	r2, r1
 8006258:	619a      	str	r2, [r3, #24]
 800625a:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <HAL_MspInit+0x44>)
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2201      	movs	r2, #1
 8006260:	4013      	ands	r3, r2
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <HAL_MspInit+0x44>)
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	4b08      	ldr	r3, [pc, #32]	@ (800628c <HAL_MspInit+0x44>)
 800626c:	2180      	movs	r1, #128	@ 0x80
 800626e:	0549      	lsls	r1, r1, #21
 8006270:	430a      	orrs	r2, r1
 8006272:	61da      	str	r2, [r3, #28]
 8006274:	4b05      	ldr	r3, [pc, #20]	@ (800628c <HAL_MspInit+0x44>)
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	055b      	lsls	r3, r3, #21
 800627c:	4013      	ands	r3, r2
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	46bd      	mov	sp, r7
 8006286:	b002      	add	sp, #8
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	40021000 	.word	0x40021000

08006290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b08b      	sub	sp, #44	@ 0x2c
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006298:	2414      	movs	r4, #20
 800629a:	193b      	adds	r3, r7, r4
 800629c:	0018      	movs	r0, r3
 800629e:	2314      	movs	r3, #20
 80062a0:	001a      	movs	r2, r3
 80062a2:	2100      	movs	r1, #0
 80062a4:	f006 fce6 	bl	800cc74 <memset>
  if(hadc->Instance==ADC1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_ADC_MspInit+0x84>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d12b      	bne.n	800630a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80062b2:	4b19      	ldr	r3, [pc, #100]	@ (8006318 <HAL_ADC_MspInit+0x88>)
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	4b18      	ldr	r3, [pc, #96]	@ (8006318 <HAL_ADC_MspInit+0x88>)
 80062b8:	2180      	movs	r1, #128	@ 0x80
 80062ba:	0089      	lsls	r1, r1, #2
 80062bc:	430a      	orrs	r2, r1
 80062be:	619a      	str	r2, [r3, #24]
 80062c0:	4b15      	ldr	r3, [pc, #84]	@ (8006318 <HAL_ADC_MspInit+0x88>)
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4013      	ands	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ce:	4b12      	ldr	r3, [pc, #72]	@ (8006318 <HAL_ADC_MspInit+0x88>)
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	4b11      	ldr	r3, [pc, #68]	@ (8006318 <HAL_ADC_MspInit+0x88>)
 80062d4:	2180      	movs	r1, #128	@ 0x80
 80062d6:	0289      	lsls	r1, r1, #10
 80062d8:	430a      	orrs	r2, r1
 80062da:	615a      	str	r2, [r3, #20]
 80062dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006318 <HAL_ADC_MspInit+0x88>)
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	2380      	movs	r3, #128	@ 0x80
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80062ea:	193b      	adds	r3, r7, r4
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062f0:	193b      	adds	r3, r7, r4
 80062f2:	2203      	movs	r2, #3
 80062f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f6:	193b      	adds	r3, r7, r4
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062fc:	193a      	adds	r2, r7, r4
 80062fe:	2390      	movs	r3, #144	@ 0x90
 8006300:	05db      	lsls	r3, r3, #23
 8006302:	0011      	movs	r1, r2
 8006304:	0018      	movs	r0, r3
 8006306:	f001 f971 	bl	80075ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b00b      	add	sp, #44	@ 0x2c
 8006310:	bd90      	pop	{r4, r7, pc}
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	40012400 	.word	0x40012400
 8006318:	40021000 	.word	0x40021000

0800631c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b08b      	sub	sp, #44	@ 0x2c
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006324:	2414      	movs	r4, #20
 8006326:	193b      	adds	r3, r7, r4
 8006328:	0018      	movs	r0, r3
 800632a:	2314      	movs	r3, #20
 800632c:	001a      	movs	r2, r3
 800632e:	2100      	movs	r1, #0
 8006330:	f006 fca0 	bl	800cc74 <memset>
  if(hspi->Instance==SPI1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a2e      	ldr	r2, [pc, #184]	@ (80063f4 <HAL_SPI_MspInit+0xd8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d155      	bne.n	80063ea <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800633e:	4b2e      	ldr	r3, [pc, #184]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	4b2d      	ldr	r3, [pc, #180]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 8006344:	2180      	movs	r1, #128	@ 0x80
 8006346:	0149      	lsls	r1, r1, #5
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
 800634c:	4b2a      	ldr	r3, [pc, #168]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	015b      	lsls	r3, r3, #5
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	4b26      	ldr	r3, [pc, #152]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 8006360:	2180      	movs	r1, #128	@ 0x80
 8006362:	0289      	lsls	r1, r1, #10
 8006364:	430a      	orrs	r2, r1
 8006366:	615a      	str	r2, [r3, #20]
 8006368:	4b23      	ldr	r3, [pc, #140]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	2380      	movs	r3, #128	@ 0x80
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	4013      	ands	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006376:	4b20      	ldr	r3, [pc, #128]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	4b1f      	ldr	r3, [pc, #124]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	02c9      	lsls	r1, r1, #11
 8006380:	430a      	orrs	r2, r1
 8006382:	615a      	str	r2, [r3, #20]
 8006384:	4b1c      	ldr	r3, [pc, #112]	@ (80063f8 <HAL_SPI_MspInit+0xdc>)
 8006386:	695a      	ldr	r2, [r3, #20]
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	02db      	lsls	r3, r3, #11
 800638c:	4013      	ands	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006392:	193b      	adds	r3, r7, r4
 8006394:	22c0      	movs	r2, #192	@ 0xc0
 8006396:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006398:	193b      	adds	r3, r7, r4
 800639a:	2202      	movs	r2, #2
 800639c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639e:	193b      	adds	r3, r7, r4
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063a4:	193b      	adds	r3, r7, r4
 80063a6:	2203      	movs	r2, #3
 80063a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80063aa:	193b      	adds	r3, r7, r4
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b0:	193a      	adds	r2, r7, r4
 80063b2:	2390      	movs	r3, #144	@ 0x90
 80063b4:	05db      	lsls	r3, r3, #23
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f001 f917 	bl	80075ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063be:	0021      	movs	r1, r4
 80063c0:	187b      	adds	r3, r7, r1
 80063c2:	2208      	movs	r2, #8
 80063c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c6:	187b      	adds	r3, r7, r1
 80063c8:	2202      	movs	r2, #2
 80063ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	2200      	movs	r2, #0
 80063d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063d2:	187b      	adds	r3, r7, r1
 80063d4:	2203      	movs	r2, #3
 80063d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80063d8:	187b      	adds	r3, r7, r1
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063de:	187b      	adds	r3, r7, r1
 80063e0:	4a06      	ldr	r2, [pc, #24]	@ (80063fc <HAL_SPI_MspInit+0xe0>)
 80063e2:	0019      	movs	r1, r3
 80063e4:	0010      	movs	r0, r2
 80063e6:	f001 f901 	bl	80075ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80063ea:	46c0      	nop			@ (mov r8, r8)
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b00b      	add	sp, #44	@ 0x2c
 80063f0:	bd90      	pop	{r4, r7, pc}
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	40013000 	.word	0x40013000
 80063f8:	40021000 	.word	0x40021000
 80063fc:	48000400 	.word	0x48000400

08006400 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a0a      	ldr	r2, [pc, #40]	@ (8006438 <HAL_TIM_PWM_MspInit+0x38>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10d      	bne.n	800642e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006412:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <HAL_TIM_PWM_MspInit+0x3c>)
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <HAL_TIM_PWM_MspInit+0x3c>)
 8006418:	2180      	movs	r1, #128	@ 0x80
 800641a:	0109      	lsls	r1, r1, #4
 800641c:	430a      	orrs	r2, r1
 800641e:	619a      	str	r2, [r3, #24]
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <HAL_TIM_PWM_MspInit+0x3c>)
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	2380      	movs	r3, #128	@ 0x80
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	46bd      	mov	sp, r7
 8006432:	b004      	add	sp, #16
 8006434:	bd80      	pop	{r7, pc}
 8006436:	46c0      	nop			@ (mov r8, r8)
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40021000 	.word	0x40021000

08006440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0d      	ldr	r2, [pc, #52]	@ (8006484 <HAL_TIM_Base_MspInit+0x44>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d113      	bne.n	800647a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <HAL_TIM_Base_MspInit+0x48>)
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <HAL_TIM_Base_MspInit+0x48>)
 8006458:	2102      	movs	r1, #2
 800645a:	430a      	orrs	r2, r1
 800645c:	61da      	str	r2, [r3, #28]
 800645e:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <HAL_TIM_Base_MspInit+0x48>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2202      	movs	r2, #2
 8006464:	4013      	ands	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800646a:	2200      	movs	r2, #0
 800646c:	2100      	movs	r1, #0
 800646e:	2010      	movs	r0, #16
 8006470:	f001 f80c 	bl	800748c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006474:	2010      	movs	r0, #16
 8006476:	f001 f81e 	bl	80074b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800647a:	46c0      	nop			@ (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	b004      	add	sp, #16
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	40000400 	.word	0x40000400
 8006488:	40021000 	.word	0x40021000

0800648c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800648c:	b590      	push	{r4, r7, lr}
 800648e:	b089      	sub	sp, #36	@ 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006494:	240c      	movs	r4, #12
 8006496:	193b      	adds	r3, r7, r4
 8006498:	0018      	movs	r0, r3
 800649a:	2314      	movs	r3, #20
 800649c:	001a      	movs	r2, r3
 800649e:	2100      	movs	r1, #0
 80064a0:	f006 fbe8 	bl	800cc74 <memset>
  if(htim->Instance==TIM1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a16      	ldr	r2, [pc, #88]	@ (8006504 <HAL_TIM_MspPostInit+0x78>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d125      	bne.n	80064fa <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ae:	4b16      	ldr	r3, [pc, #88]	@ (8006508 <HAL_TIM_MspPostInit+0x7c>)
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	4b15      	ldr	r3, [pc, #84]	@ (8006508 <HAL_TIM_MspPostInit+0x7c>)
 80064b4:	2180      	movs	r1, #128	@ 0x80
 80064b6:	0289      	lsls	r1, r1, #10
 80064b8:	430a      	orrs	r2, r1
 80064ba:	615a      	str	r2, [r3, #20]
 80064bc:	4b12      	ldr	r3, [pc, #72]	@ (8006508 <HAL_TIM_MspPostInit+0x7c>)
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	2380      	movs	r3, #128	@ 0x80
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	4013      	ands	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80064ca:	193b      	adds	r3, r7, r4
 80064cc:	22f0      	movs	r2, #240	@ 0xf0
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d2:	0021      	movs	r1, r4
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	2202      	movs	r2, #2
 80064d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	187b      	adds	r3, r7, r1
 80064dc:	2200      	movs	r2, #0
 80064de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e0:	187b      	adds	r3, r7, r1
 80064e2:	2200      	movs	r2, #0
 80064e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	2202      	movs	r2, #2
 80064ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ec:	187a      	adds	r2, r7, r1
 80064ee:	2390      	movs	r3, #144	@ 0x90
 80064f0:	05db      	lsls	r3, r3, #23
 80064f2:	0011      	movs	r1, r2
 80064f4:	0018      	movs	r0, r3
 80064f6:	f001 f879 	bl	80075ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b009      	add	sp, #36	@ 0x24
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40021000 	.word	0x40021000

0800650c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b08d      	sub	sp, #52	@ 0x34
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006514:	241c      	movs	r4, #28
 8006516:	193b      	adds	r3, r7, r4
 8006518:	0018      	movs	r0, r3
 800651a:	2314      	movs	r3, #20
 800651c:	001a      	movs	r2, r3
 800651e:	2100      	movs	r1, #0
 8006520:	f006 fba8 	bl	800cc74 <memset>
  if(huart->Instance==USART1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a40      	ldr	r2, [pc, #256]	@ (800662c <HAL_UART_MspInit+0x120>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d13a      	bne.n	80065a4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800652e:	4b40      	ldr	r3, [pc, #256]	@ (8006630 <HAL_UART_MspInit+0x124>)
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	4b3f      	ldr	r3, [pc, #252]	@ (8006630 <HAL_UART_MspInit+0x124>)
 8006534:	2180      	movs	r1, #128	@ 0x80
 8006536:	01c9      	lsls	r1, r1, #7
 8006538:	430a      	orrs	r2, r1
 800653a:	619a      	str	r2, [r3, #24]
 800653c:	4b3c      	ldr	r3, [pc, #240]	@ (8006630 <HAL_UART_MspInit+0x124>)
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	2380      	movs	r3, #128	@ 0x80
 8006542:	01db      	lsls	r3, r3, #7
 8006544:	4013      	ands	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800654a:	4b39      	ldr	r3, [pc, #228]	@ (8006630 <HAL_UART_MspInit+0x124>)
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	4b38      	ldr	r3, [pc, #224]	@ (8006630 <HAL_UART_MspInit+0x124>)
 8006550:	2180      	movs	r1, #128	@ 0x80
 8006552:	02c9      	lsls	r1, r1, #11
 8006554:	430a      	orrs	r2, r1
 8006556:	615a      	str	r2, [r3, #20]
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <HAL_UART_MspInit+0x124>)
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	2380      	movs	r3, #128	@ 0x80
 800655e:	02db      	lsls	r3, r3, #11
 8006560:	4013      	ands	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006566:	0021      	movs	r1, r4
 8006568:	187b      	adds	r3, r7, r1
 800656a:	22c0      	movs	r2, #192	@ 0xc0
 800656c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800656e:	187b      	adds	r3, r7, r1
 8006570:	2202      	movs	r2, #2
 8006572:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006574:	187b      	adds	r3, r7, r1
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800657a:	187b      	adds	r3, r7, r1
 800657c:	2203      	movs	r2, #3
 800657e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8006580:	187b      	adds	r3, r7, r1
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006586:	187b      	adds	r3, r7, r1
 8006588:	4a2a      	ldr	r2, [pc, #168]	@ (8006634 <HAL_UART_MspInit+0x128>)
 800658a:	0019      	movs	r1, r3
 800658c:	0010      	movs	r0, r2
 800658e:	f001 f82d 	bl	80075ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006592:	2200      	movs	r2, #0
 8006594:	2100      	movs	r1, #0
 8006596:	201b      	movs	r0, #27
 8006598:	f000 ff78 	bl	800748c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800659c:	201b      	movs	r0, #27
 800659e:	f000 ff8a 	bl	80074b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80065a2:	e03f      	b.n	8006624 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a23      	ldr	r2, [pc, #140]	@ (8006638 <HAL_UART_MspInit+0x12c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d13a      	bne.n	8006624 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 80065ae:	4b20      	ldr	r3, [pc, #128]	@ (8006630 <HAL_UART_MspInit+0x124>)
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006630 <HAL_UART_MspInit+0x124>)
 80065b4:	2180      	movs	r1, #128	@ 0x80
 80065b6:	0289      	lsls	r1, r1, #10
 80065b8:	430a      	orrs	r2, r1
 80065ba:	61da      	str	r2, [r3, #28]
 80065bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006630 <HAL_UART_MspInit+0x124>)
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	2380      	movs	r3, #128	@ 0x80
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	4013      	ands	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ca:	4b19      	ldr	r3, [pc, #100]	@ (8006630 <HAL_UART_MspInit+0x124>)
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	4b18      	ldr	r3, [pc, #96]	@ (8006630 <HAL_UART_MspInit+0x124>)
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	0289      	lsls	r1, r1, #10
 80065d4:	430a      	orrs	r2, r1
 80065d6:	615a      	str	r2, [r3, #20]
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <HAL_UART_MspInit+0x124>)
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	2380      	movs	r3, #128	@ 0x80
 80065de:	029b      	lsls	r3, r3, #10
 80065e0:	4013      	ands	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80065e6:	211c      	movs	r1, #28
 80065e8:	187b      	adds	r3, r7, r1
 80065ea:	220c      	movs	r2, #12
 80065ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ee:	187b      	adds	r3, r7, r1
 80065f0:	2202      	movs	r2, #2
 80065f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065fa:	187b      	adds	r3, r7, r1
 80065fc:	2203      	movs	r2, #3
 80065fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006600:	187b      	adds	r3, r7, r1
 8006602:	2201      	movs	r2, #1
 8006604:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006606:	187a      	adds	r2, r7, r1
 8006608:	2390      	movs	r3, #144	@ 0x90
 800660a:	05db      	lsls	r3, r3, #23
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f000 ffec 	bl	80075ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006614:	2200      	movs	r2, #0
 8006616:	2100      	movs	r1, #0
 8006618:	201c      	movs	r0, #28
 800661a:	f000 ff37 	bl	800748c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800661e:	201c      	movs	r0, #28
 8006620:	f000 ff49 	bl	80074b6 <HAL_NVIC_EnableIRQ>
}
 8006624:	46c0      	nop			@ (mov r8, r8)
 8006626:	46bd      	mov	sp, r7
 8006628:	b00d      	add	sp, #52	@ 0x34
 800662a:	bd90      	pop	{r4, r7, pc}
 800662c:	40013800 	.word	0x40013800
 8006630:	40021000 	.word	0x40021000
 8006634:	48000400 	.word	0x48000400
 8006638:	40004400 	.word	0x40004400

0800663c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006640:	46c0      	nop			@ (mov r8, r8)
 8006642:	e7fd      	b.n	8006640 <NMI_Handler+0x4>

08006644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006648:	46c0      	nop			@ (mov r8, r8)
 800664a:	e7fd      	b.n	8006648 <HardFault_Handler+0x4>

0800664c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006650:	46c0      	nop			@ (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006664:	f000 f95e 	bl	8006924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006674:	4b03      	ldr	r3, [pc, #12]	@ (8006684 <TIM3_IRQHandler+0x14>)
 8006676:	0018      	movs	r0, r3
 8006678:	f003 f80e 	bl	8009698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800667c:	46c0      	nop			@ (mov r8, r8)
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	46c0      	nop			@ (mov r8, r8)
 8006684:	20000350 	.word	0x20000350

08006688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <USART1_IRQHandler+0x14>)
 800668e:	0018      	movs	r0, r3
 8006690:	f004 f9d0 	bl	800aa34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006694:	46c0      	nop			@ (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	20000398 	.word	0x20000398

080066a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80066a4:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <USART2_IRQHandler+0x14>)
 80066a6:	0018      	movs	r0, r3
 80066a8:	f004 f9c4 	bl	800aa34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80066ac:	46c0      	nop			@ (mov r8, r8)
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	20000420 	.word	0x20000420

080066b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
	return 1;
 80066bc:	2301      	movs	r3, #1
}
 80066be:	0018      	movs	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <_kill>:

int _kill(int pid, int sig)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80066ce:	f006 fb2b 	bl	800cd28 <__errno>
 80066d2:	0003      	movs	r3, r0
 80066d4:	2216      	movs	r2, #22
 80066d6:	601a      	str	r2, [r3, #0]
	return -1;
 80066d8:	2301      	movs	r3, #1
 80066da:	425b      	negs	r3, r3
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b002      	add	sp, #8
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_exit>:

void _exit (int status)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80066ec:	2301      	movs	r3, #1
 80066ee:	425a      	negs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0011      	movs	r1, r2
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7ff ffe5 	bl	80066c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80066fa:	46c0      	nop			@ (mov r8, r8)
 80066fc:	e7fd      	b.n	80066fa <_exit+0x16>

080066fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b086      	sub	sp, #24
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e00a      	b.n	8006726 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006710:	e000      	b.n	8006714 <_read+0x16>
 8006712:	bf00      	nop
 8006714:	0001      	movs	r1, r0
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	60ba      	str	r2, [r7, #8]
 800671c:	b2ca      	uxtb	r2, r1
 800671e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	3301      	adds	r3, #1
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	429a      	cmp	r2, r3
 800672c:	dbf0      	blt.n	8006710 <_read+0x12>
	}

return len;
 800672e:	687b      	ldr	r3, [r7, #4]
}
 8006730:	0018      	movs	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	b006      	add	sp, #24
 8006736:	bd80      	pop	{r7, pc}

08006738 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e009      	b.n	800675e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	60ba      	str	r2, [r7, #8]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	0018      	movs	r0, r3
 8006754:	e000      	b.n	8006758 <_write+0x20>
 8006756:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	3301      	adds	r3, #1
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	dbf1      	blt.n	800674a <_write+0x12>
	}
	return len;
 8006766:	687b      	ldr	r3, [r7, #4]
}
 8006768:	0018      	movs	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	b006      	add	sp, #24
 800676e:	bd80      	pop	{r7, pc}

08006770 <_close>:

int _close(int file)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	return -1;
 8006778:	2301      	movs	r3, #1
 800677a:	425b      	negs	r3, r3
}
 800677c:	0018      	movs	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	b002      	add	sp, #8
 8006782:	bd80      	pop	{r7, pc}

08006784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2280      	movs	r2, #128	@ 0x80
 8006792:	0192      	lsls	r2, r2, #6
 8006794:	605a      	str	r2, [r3, #4]
	return 0;
 8006796:	2300      	movs	r3, #0
}
 8006798:	0018      	movs	r0, r3
 800679a:	46bd      	mov	sp, r7
 800679c:	b002      	add	sp, #8
 800679e:	bd80      	pop	{r7, pc}

080067a0 <_isatty>:

int _isatty(int file)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	return 1;
 80067a8:	2301      	movs	r3, #1
}
 80067aa:	0018      	movs	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b002      	add	sp, #8
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
	return 0;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	0018      	movs	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b004      	add	sp, #16
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067d0:	4a14      	ldr	r2, [pc, #80]	@ (8006824 <_sbrk+0x5c>)
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <_sbrk+0x60>)
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067dc:	4b13      	ldr	r3, [pc, #76]	@ (800682c <_sbrk+0x64>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067e4:	4b11      	ldr	r3, [pc, #68]	@ (800682c <_sbrk+0x64>)
 80067e6:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <_sbrk+0x68>)
 80067e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067ea:	4b10      	ldr	r3, [pc, #64]	@ (800682c <_sbrk+0x64>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	18d3      	adds	r3, r2, r3
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d207      	bcs.n	8006808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067f8:	f006 fa96 	bl	800cd28 <__errno>
 80067fc:	0003      	movs	r3, r0
 80067fe:	220c      	movs	r2, #12
 8006800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006802:	2301      	movs	r3, #1
 8006804:	425b      	negs	r3, r3
 8006806:	e009      	b.n	800681c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006808:	4b08      	ldr	r3, [pc, #32]	@ (800682c <_sbrk+0x64>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800680e:	4b07      	ldr	r3, [pc, #28]	@ (800682c <_sbrk+0x64>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	18d2      	adds	r2, r2, r3
 8006816:	4b05      	ldr	r3, [pc, #20]	@ (800682c <_sbrk+0x64>)
 8006818:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	0018      	movs	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	b006      	add	sp, #24
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20004000 	.word	0x20004000
 8006828:	00000400 	.word	0x00000400
 800682c:	20000698 	.word	0x20000698
 8006830:	200007f0 	.word	0x200007f0

08006834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006838:	46c0      	nop			@ (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006840:	480d      	ldr	r0, [pc, #52]	@ (8006878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006842:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006844:	480d      	ldr	r0, [pc, #52]	@ (800687c <LoopForever+0x6>)
  ldr r1, =_edata
 8006846:	490e      	ldr	r1, [pc, #56]	@ (8006880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006848:	4a0e      	ldr	r2, [pc, #56]	@ (8006884 <LoopForever+0xe>)
  movs r3, #0
 800684a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800684c:	e002      	b.n	8006854 <LoopCopyDataInit>

0800684e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800684e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006852:	3304      	adds	r3, #4

08006854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006858:	d3f9      	bcc.n	800684e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800685a:	4a0b      	ldr	r2, [pc, #44]	@ (8006888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800685c:	4c0b      	ldr	r4, [pc, #44]	@ (800688c <LoopForever+0x16>)
  movs r3, #0
 800685e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006860:	e001      	b.n	8006866 <LoopFillZerobss>

08006862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006864:	3204      	adds	r2, #4

08006866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006868:	d3fb      	bcc.n	8006862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800686a:	f7ff ffe3 	bl	8006834 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800686e:	f006 fa61 	bl	800cd34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006872:	f7fe ff57 	bl	8005724 <main>

08006876 <LoopForever>:

LoopForever:
    b LoopForever
 8006876:	e7fe      	b.n	8006876 <LoopForever>
  ldr   r0, =_estack
 8006878:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800687c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006880:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006884:	08011278 	.word	0x08011278
  ldr r2, =_sbss
 8006888:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800688c:	200007ec 	.word	0x200007ec

08006890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006890:	e7fe      	b.n	8006890 <ADC1_COMP_IRQHandler>
	...

08006894 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006898:	4b07      	ldr	r3, [pc, #28]	@ (80068b8 <HAL_Init+0x24>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <HAL_Init+0x24>)
 800689e:	2110      	movs	r1, #16
 80068a0:	430a      	orrs	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80068a4:	2000      	movs	r0, #0
 80068a6:	f000 f809 	bl	80068bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068aa:	f7ff fccd 	bl	8006248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	0018      	movs	r0, r3
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	46c0      	nop			@ (mov r8, r8)
 80068b8:	40022000 	.word	0x40022000

080068bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068c4:	4b14      	ldr	r3, [pc, #80]	@ (8006918 <HAL_InitTick+0x5c>)
 80068c6:	681c      	ldr	r4, [r3, #0]
 80068c8:	4b14      	ldr	r3, [pc, #80]	@ (800691c <HAL_InitTick+0x60>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	0019      	movs	r1, r3
 80068ce:	23fa      	movs	r3, #250	@ 0xfa
 80068d0:	0098      	lsls	r0, r3, #2
 80068d2:	f7f9 fc35 	bl	8000140 <__udivsi3>
 80068d6:	0003      	movs	r3, r0
 80068d8:	0019      	movs	r1, r3
 80068da:	0020      	movs	r0, r4
 80068dc:	f7f9 fc30 	bl	8000140 <__udivsi3>
 80068e0:	0003      	movs	r3, r0
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 fdf7 	bl	80074d6 <HAL_SYSTICK_Config>
 80068e8:	1e03      	subs	r3, r0, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e00f      	b.n	8006910 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d80b      	bhi.n	800690e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	2301      	movs	r3, #1
 80068fa:	425b      	negs	r3, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	0018      	movs	r0, r3
 8006900:	f000 fdc4 	bl	800748c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006904:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <HAL_InitTick+0x64>)
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e000      	b.n	8006910 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
}
 8006910:	0018      	movs	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	b003      	add	sp, #12
 8006916:	bd90      	pop	{r4, r7, pc}
 8006918:	20000024 	.word	0x20000024
 800691c:	2000002c 	.word	0x2000002c
 8006920:	20000028 	.word	0x20000028

08006924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <HAL_IncTick+0x1c>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	001a      	movs	r2, r3
 800692e:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <HAL_IncTick+0x20>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	18d2      	adds	r2, r2, r3
 8006934:	4b03      	ldr	r3, [pc, #12]	@ (8006944 <HAL_IncTick+0x20>)
 8006936:	601a      	str	r2, [r3, #0]
}
 8006938:	46c0      	nop			@ (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	2000002c 	.word	0x2000002c
 8006944:	2000069c 	.word	0x2000069c

08006948 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  return uwTick;
 800694c:	4b02      	ldr	r3, [pc, #8]	@ (8006958 <HAL_GetTick+0x10>)
 800694e:	681b      	ldr	r3, [r3, #0]
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	46c0      	nop			@ (mov r8, r8)
 8006958:	2000069c 	.word	0x2000069c

0800695c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006964:	f7ff fff0 	bl	8006948 <HAL_GetTick>
 8006968:	0003      	movs	r3, r0
 800696a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	d005      	beq.n	8006982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006976:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <HAL_Delay+0x44>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	001a      	movs	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	189b      	adds	r3, r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	f7ff ffe0 	bl	8006948 <HAL_GetTick>
 8006988:	0002      	movs	r2, r0
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	429a      	cmp	r2, r3
 8006992:	d8f7      	bhi.n	8006984 <HAL_Delay+0x28>
  {
  }
}
 8006994:	46c0      	nop			@ (mov r8, r8)
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	46bd      	mov	sp, r7
 800699a:	b004      	add	sp, #16
 800699c:	bd80      	pop	{r7, pc}
 800699e:	46c0      	nop			@ (mov r8, r8)
 80069a0:	2000002c 	.word	0x2000002c

080069a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069ac:	230f      	movs	r3, #15
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e125      	b.n	8006c0e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2234      	movs	r2, #52	@ 0x34
 80069d4:	2100      	movs	r1, #0
 80069d6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0018      	movs	r0, r3
 80069dc:	f7ff fc58 	bl	8006290 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	2210      	movs	r2, #16
 80069e6:	4013      	ands	r3, r2
 80069e8:	d000      	beq.n	80069ec <HAL_ADC_Init+0x48>
 80069ea:	e103      	b.n	8006bf4 <HAL_ADC_Init+0x250>
 80069ec:	230f      	movs	r3, #15
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d000      	beq.n	80069f8 <HAL_ADC_Init+0x54>
 80069f6:	e0fd      	b.n	8006bf4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2204      	movs	r2, #4
 8006a00:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8006a02:	d000      	beq.n	8006a06 <HAL_ADC_Init+0x62>
 8006a04:	e0f6      	b.n	8006bf4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0a:	4a83      	ldr	r2, [pc, #524]	@ (8006c18 <HAL_ADC_Init+0x274>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2202      	movs	r2, #2
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d112      	bne.n	8006a4a <HAL_ADC_Init+0xa6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d009      	beq.n	8006a46 <HAL_ADC_Init+0xa2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	2380      	movs	r3, #128	@ 0x80
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	401a      	ands	r2, r3
 8006a3e:	2380      	movs	r3, #128	@ 0x80
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d101      	bne.n	8006a4a <HAL_ADC_Init+0xa6>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <HAL_ADC_Init+0xa8>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d116      	bne.n	8006a7e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2218      	movs	r2, #24
 8006a58:	4393      	bics	r3, r2
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	0899      	lsrs	r1, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4964      	ldr	r1, [pc, #400]	@ (8006c1c <HAL_ADC_Init+0x278>)
 8006a8a:	400a      	ands	r2, r1
 8006a8c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7e1b      	ldrb	r3, [r3, #24]
 8006a92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7e5b      	ldrb	r3, [r3, #25]
 8006a98:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	7e9b      	ldrb	r3, [r3, #26]
 8006aa0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006aa2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d002      	beq.n	8006ab2 <HAL_ADC_Init+0x10e>
 8006aac:	2380      	movs	r3, #128	@ 0x80
 8006aae:	015b      	lsls	r3, r3, #5
 8006ab0:	e000      	b.n	8006ab4 <HAL_ADC_Init+0x110>
 8006ab2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006ab4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006aba:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d101      	bne.n	8006ac8 <HAL_ADC_Init+0x124>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	e000      	b.n	8006aca <HAL_ADC_Init+0x126>
 8006ac8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8006aca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2124      	movs	r1, #36	@ 0x24
 8006ad0:	5c5b      	ldrb	r3, [r3, r1]
 8006ad2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006ad4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7edb      	ldrb	r3, [r3, #27]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d115      	bne.n	8006b10 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7e9b      	ldrb	r3, [r3, #26]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2280      	movs	r2, #128	@ 0x80
 8006af0:	0252      	lsls	r2, r2, #9
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	e00b      	b.n	8006b10 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afc:	2220      	movs	r2, #32
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	2201      	movs	r2, #1
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	23c2      	movs	r3, #194	@ 0xc2
 8006b16:	33ff      	adds	r3, #255	@ 0xff
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d007      	beq.n	8006b2c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006b24:	4313      	orrs	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68d9      	ldr	r1, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b40:	2380      	movs	r3, #128	@ 0x80
 8006b42:	055b      	lsls	r3, r3, #21
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d01b      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d017      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d013      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d00f      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d00b      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d007      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d003      	beq.n	8006b80 <HAL_ADC_Init+0x1dc>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	d112      	bne.n	8006ba6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2107      	movs	r1, #7
 8006b8c:	438a      	bics	r2, r1
 8006b8e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6959      	ldr	r1, [r3, #20]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	2207      	movs	r2, #7
 8006b9c:	401a      	ands	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	4a1c      	ldr	r2, [pc, #112]	@ (8006c20 <HAL_ADC_Init+0x27c>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10b      	bne.n	8006bce <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4393      	bics	r3, r2
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006bcc:	e01c      	b.n	8006c08 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd2:	2212      	movs	r2, #18
 8006bd4:	4393      	bics	r3, r2
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be2:	2201      	movs	r2, #1
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8006bea:	230f      	movs	r3, #15
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	2201      	movs	r2, #1
 8006bf0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006bf2:	e009      	b.n	8006c08 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8006c00:	230f      	movs	r3, #15
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006c08:	230f      	movs	r3, #15
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	781b      	ldrb	r3, [r3, #0]
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b004      	add	sp, #16
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	fffffefd 	.word	0xfffffefd
 8006c1c:	fffe0219 	.word	0xfffe0219
 8006c20:	833fffe7 	.word	0x833fffe7

08006c24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006c24:	b590      	push	{r4, r7, lr}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c2c:	230f      	movs	r3, #15
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d138      	bne.n	8006cb2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2234      	movs	r2, #52	@ 0x34
 8006c44:	5c9b      	ldrb	r3, [r3, r2]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_ADC_Start+0x2a>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e038      	b.n	8006cc0 <HAL_ADC_Start+0x9c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2234      	movs	r2, #52	@ 0x34
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7e5b      	ldrb	r3, [r3, #25]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d007      	beq.n	8006c6e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006c5e:	230f      	movs	r3, #15
 8006c60:	18fc      	adds	r4, r7, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fa23 	bl	80070b0 <ADC_Enable>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006c6e:	230f      	movs	r3, #15
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d120      	bne.n	8006cba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	4a12      	ldr	r2, [pc, #72]	@ (8006cc8 <HAL_ADC_Start+0xa4>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2280      	movs	r2, #128	@ 0x80
 8006c82:	0052      	lsls	r2, r2, #1
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2234      	movs	r2, #52	@ 0x34
 8006c94:	2100      	movs	r1, #0
 8006c96:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	221c      	movs	r2, #28
 8006c9e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2104      	movs	r1, #4
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
 8006cb0:	e003      	b.n	8006cba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006cb2:	230f      	movs	r3, #15
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006cba:	230f      	movs	r3, #15
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	781b      	ldrb	r3, [r3, #0]
}
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b005      	add	sp, #20
 8006cc6:	bd90      	pop	{r4, r7, pc}
 8006cc8:	fffff0fe 	.word	0xfffff0fe

08006ccc <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8006ccc:	b5b0      	push	{r4, r5, r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cd4:	230f      	movs	r3, #15
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2234      	movs	r2, #52	@ 0x34
 8006ce0:	5c9b      	ldrb	r3, [r3, r2]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_ADC_Stop+0x1e>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e029      	b.n	8006d3e <HAL_ADC_Stop+0x72>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2234      	movs	r2, #52	@ 0x34
 8006cee:	2101      	movs	r1, #1
 8006cf0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006cf2:	250f      	movs	r5, #15
 8006cf4:	197c      	adds	r4, r7, r5
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 face 	bl	800729a <ADC_ConversionStop>
 8006cfe:	0003      	movs	r3, r0
 8006d00:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006d02:	197b      	adds	r3, r7, r5
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d112      	bne.n	8006d30 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006d0a:	197c      	adds	r4, r7, r5
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 fa52 	bl	80071b8 <ADC_Disable>
 8006d14:	0003      	movs	r3, r0
 8006d16:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006d18:	197b      	adds	r3, r7, r5
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d107      	bne.n	8006d30 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	4a08      	ldr	r2, [pc, #32]	@ (8006d48 <HAL_ADC_Stop+0x7c>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	2201      	movs	r2, #1
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2234      	movs	r2, #52	@ 0x34
 8006d34:	2100      	movs	r1, #0
 8006d36:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006d38:	230f      	movs	r3, #15
 8006d3a:	18fb      	adds	r3, r7, r3
 8006d3c:	781b      	ldrb	r3, [r3, #0]
}
 8006d3e:	0018      	movs	r0, r3
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b004      	add	sp, #16
 8006d44:	bdb0      	pop	{r4, r5, r7, pc}
 8006d46:	46c0      	nop			@ (mov r8, r8)
 8006d48:	fffffefe 	.word	0xfffffefe

08006d4c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d102      	bne.n	8006d64 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006d5e:	2308      	movs	r3, #8
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e014      	b.n	8006d8e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10b      	bne.n	8006d8a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d76:	2220      	movs	r2, #32
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2234      	movs	r2, #52	@ 0x34
 8006d82:	2100      	movs	r1, #0
 8006d84:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e071      	b.n	8006e6e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006d8e:	f7ff fddb 	bl	8006948 <HAL_GetTick>
 8006d92:	0003      	movs	r3, r0
 8006d94:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006d96:	e01f      	b.n	8006dd8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	d01c      	beq.n	8006dd8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_ADC_PollForConversion+0x68>
 8006da4:	f7ff fdd0 	bl	8006948 <HAL_GetTick>
 8006da8:	0002      	movs	r2, r0
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d211      	bcs.n	8006dd8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d10b      	bne.n	8006dd8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2234      	movs	r2, #52	@ 0x34
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e04a      	b.n	8006e6e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4013      	ands	r3, r2
 8006de2:	d0d9      	beq.n	8006d98 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	2280      	movs	r2, #128	@ 0x80
 8006dea:	0092      	lsls	r2, r2, #2
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	23c0      	movs	r3, #192	@ 0xc0
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d12d      	bne.n	8006e5c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d129      	bne.n	8006e5c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2208      	movs	r2, #8
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d122      	bne.n	8006e5c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d110      	bne.n	8006e44 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	210c      	movs	r1, #12
 8006e2e:	438a      	bics	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e36:	4a10      	ldr	r2, [pc, #64]	@ (8006e78 <HAL_ADC_PollForConversion+0x12c>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e42:	e00b      	b.n	8006e5c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	2220      	movs	r2, #32
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e54:	2201      	movs	r2, #1
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7e1b      	ldrb	r3, [r3, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d103      	bne.n	8006e6c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	220c      	movs	r2, #12
 8006e6a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b004      	add	sp, #16
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	fffffefe 	.word	0xfffffefe

08006e7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b002      	add	sp, #8
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e9e:	230f      	movs	r3, #15
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	2380      	movs	r3, #128	@ 0x80
 8006eb0:	055b      	lsls	r3, r3, #21
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d011      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x46>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d00d      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x46>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d009      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x46>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d005      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x46>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d001      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x46>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2234      	movs	r2, #52	@ 0x34
 8006ede:	5c9b      	ldrb	r3, [r3, r2]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_ADC_ConfigChannel+0x54>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e0d0      	b.n	800708a <HAL_ADC_ConfigChannel+0x1f6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2234      	movs	r2, #52	@ 0x34
 8006eec:	2101      	movs	r1, #1
 8006eee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d000      	beq.n	8006efe <HAL_ADC_ConfigChannel+0x6a>
 8006efc:	e0b4      	b.n	8007068 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4a64      	ldr	r2, [pc, #400]	@ (8007094 <HAL_ADC_ConfigChannel+0x200>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d100      	bne.n	8006f0a <HAL_ADC_ConfigChannel+0x76>
 8006f08:	e082      	b.n	8007010 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	409a      	lsls	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f24:	2380      	movs	r3, #128	@ 0x80
 8006f26:	055b      	lsls	r3, r3, #21
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d037      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d033      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d02f      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d02b      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d027      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	2b05      	cmp	r3, #5
 8006f52:	d023      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d01f      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	2b07      	cmp	r3, #7
 8006f62:	d01b      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	2107      	movs	r1, #7
 8006f70:	400b      	ands	r3, r1
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d012      	beq.n	8006f9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2107      	movs	r1, #7
 8006f82:	438a      	bics	r2, r1
 8006f84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6959      	ldr	r1, [r3, #20]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2207      	movs	r2, #7
 8006f92:	401a      	ands	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d007      	beq.n	8006fb4 <HAL_ADC_ConfigChannel+0x120>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b11      	cmp	r3, #17
 8006faa:	d003      	beq.n	8006fb4 <HAL_ADC_ConfigChannel+0x120>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b12      	cmp	r3, #18
 8006fb2:	d163      	bne.n	800707c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006fb4:	4b38      	ldr	r3, [pc, #224]	@ (8007098 <HAL_ADC_ConfigChannel+0x204>)
 8006fb6:	6819      	ldr	r1, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d009      	beq.n	8006fd4 <HAL_ADC_ConfigChannel+0x140>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b11      	cmp	r3, #17
 8006fc6:	d102      	bne.n	8006fce <HAL_ADC_ConfigChannel+0x13a>
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	03db      	lsls	r3, r3, #15
 8006fcc:	e004      	b.n	8006fd8 <HAL_ADC_ConfigChannel+0x144>
 8006fce:	2380      	movs	r3, #128	@ 0x80
 8006fd0:	045b      	lsls	r3, r3, #17
 8006fd2:	e001      	b.n	8006fd8 <HAL_ADC_ConfigChannel+0x144>
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8007098 <HAL_ADC_ConfigChannel+0x204>)
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d14a      	bne.n	800707c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800709c <HAL_ADC_ConfigChannel+0x208>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	492d      	ldr	r1, [pc, #180]	@ (80070a0 <HAL_ADC_ConfigChannel+0x20c>)
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7f9 f8a7 	bl	8000140 <__udivsi3>
 8006ff2:	0003      	movs	r3, r0
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	0013      	movs	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007000:	e002      	b.n	8007008 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3b01      	subs	r3, #1
 8007006:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f9      	bne.n	8007002 <HAL_ADC_ConfigChannel+0x16e>
 800700e:	e035      	b.n	800707c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2101      	movs	r1, #1
 800701c:	4099      	lsls	r1, r3
 800701e:	000b      	movs	r3, r1
 8007020:	43d9      	mvns	r1, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	400a      	ands	r2, r1
 8007028:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b10      	cmp	r3, #16
 8007030:	d007      	beq.n	8007042 <HAL_ADC_ConfigChannel+0x1ae>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b11      	cmp	r3, #17
 8007038:	d003      	beq.n	8007042 <HAL_ADC_ConfigChannel+0x1ae>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b12      	cmp	r3, #18
 8007040:	d11c      	bne.n	800707c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8007042:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <HAL_ADC_ConfigChannel+0x204>)
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b10      	cmp	r3, #16
 800704c:	d007      	beq.n	800705e <HAL_ADC_ConfigChannel+0x1ca>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b11      	cmp	r3, #17
 8007054:	d101      	bne.n	800705a <HAL_ADC_ConfigChannel+0x1c6>
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <HAL_ADC_ConfigChannel+0x210>)
 8007058:	e002      	b.n	8007060 <HAL_ADC_ConfigChannel+0x1cc>
 800705a:	4b13      	ldr	r3, [pc, #76]	@ (80070a8 <HAL_ADC_ConfigChannel+0x214>)
 800705c:	e000      	b.n	8007060 <HAL_ADC_ConfigChannel+0x1cc>
 800705e:	4b13      	ldr	r3, [pc, #76]	@ (80070ac <HAL_ADC_ConfigChannel+0x218>)
 8007060:	4a0d      	ldr	r2, [pc, #52]	@ (8007098 <HAL_ADC_ConfigChannel+0x204>)
 8007062:	400b      	ands	r3, r1
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e009      	b.n	800707c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706c:	2220      	movs	r2, #32
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8007074:	230f      	movs	r3, #15
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2234      	movs	r2, #52	@ 0x34
 8007080:	2100      	movs	r1, #0
 8007082:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8007084:	230f      	movs	r3, #15
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	781b      	ldrb	r3, [r3, #0]
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	00001001 	.word	0x00001001
 8007098:	40012708 	.word	0x40012708
 800709c:	20000024 	.word	0x20000024
 80070a0:	000f4240 	.word	0x000f4240
 80070a4:	ffbfffff 	.word	0xffbfffff
 80070a8:	feffffff 	.word	0xfeffffff
 80070ac:	ff7fffff 	.word	0xff7fffff

080070b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2203      	movs	r2, #3
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d112      	bne.n	80070f4 <ADC_Enable+0x44>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2201      	movs	r2, #1
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d009      	beq.n	80070f0 <ADC_Enable+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	2380      	movs	r3, #128	@ 0x80
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	401a      	ands	r2, r3
 80070e8:	2380      	movs	r3, #128	@ 0x80
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d101      	bne.n	80070f4 <ADC_Enable+0x44>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <ADC_Enable+0x46>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d152      	bne.n	80071a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4a2a      	ldr	r2, [pc, #168]	@ (80071ac <ADC_Enable+0xfc>)
 8007102:	4013      	ands	r3, r2
 8007104:	d00d      	beq.n	8007122 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	2210      	movs	r2, #16
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	2201      	movs	r2, #1
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e03f      	b.n	80071a2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2101      	movs	r1, #1
 800712e:	430a      	orrs	r2, r1
 8007130:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007132:	4b1f      	ldr	r3, [pc, #124]	@ (80071b0 <ADC_Enable+0x100>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	491f      	ldr	r1, [pc, #124]	@ (80071b4 <ADC_Enable+0x104>)
 8007138:	0018      	movs	r0, r3
 800713a:	f7f9 f801 	bl	8000140 <__udivsi3>
 800713e:	0003      	movs	r3, r0
 8007140:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007142:	e002      	b.n	800714a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f9      	bne.n	8007144 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8007150:	f7ff fbfa 	bl	8006948 <HAL_GetTick>
 8007154:	0003      	movs	r3, r0
 8007156:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007158:	e01b      	b.n	8007192 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800715a:	f7ff fbf5 	bl	8006948 <HAL_GetTick>
 800715e:	0002      	movs	r2, r0
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d914      	bls.n	8007192 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2201      	movs	r2, #1
 8007170:	4013      	ands	r3, r2
 8007172:	2b01      	cmp	r3, #1
 8007174:	d00d      	beq.n	8007192 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717a:	2210      	movs	r2, #16
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007186:	2201      	movs	r2, #1
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e007      	b.n	80071a2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	4013      	ands	r3, r2
 800719c:	2b01      	cmp	r3, #1
 800719e:	d1dc      	bne.n	800715a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	0018      	movs	r0, r3
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b004      	add	sp, #16
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	46c0      	nop			@ (mov r8, r8)
 80071ac:	80000017 	.word	0x80000017
 80071b0:	20000024 	.word	0x20000024
 80071b4:	000f4240 	.word	0x000f4240

080071b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2203      	movs	r2, #3
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d112      	bne.n	80071f8 <ADC_Disable+0x40>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2201      	movs	r2, #1
 80071da:	4013      	ands	r3, r2
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d009      	beq.n	80071f4 <ADC_Disable+0x3c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	2380      	movs	r3, #128	@ 0x80
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	401a      	ands	r2, r3
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d101      	bne.n	80071f8 <ADC_Disable+0x40>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <ADC_Disable+0x42>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d048      	beq.n	8007290 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2205      	movs	r2, #5
 8007206:	4013      	ands	r3, r2
 8007208:	2b01      	cmp	r3, #1
 800720a:	d110      	bne.n	800722e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2102      	movs	r1, #2
 8007218:	430a      	orrs	r2, r1
 800721a:	609a      	str	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2203      	movs	r2, #3
 8007222:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007224:	f7ff fb90 	bl	8006948 <HAL_GetTick>
 8007228:	0003      	movs	r3, r0
 800722a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800722c:	e029      	b.n	8007282 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	2210      	movs	r2, #16
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723e:	2201      	movs	r2, #1
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e023      	b.n	8007292 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800724a:	f7ff fb7d 	bl	8006948 <HAL_GetTick>
 800724e:	0002      	movs	r2, r0
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d914      	bls.n	8007282 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2201      	movs	r2, #1
 8007260:	4013      	ands	r3, r2
 8007262:	2b01      	cmp	r3, #1
 8007264:	d10d      	bne.n	8007282 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	2210      	movs	r2, #16
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007276:	2201      	movs	r2, #1
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e007      	b.n	8007292 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2201      	movs	r2, #1
 800728a:	4013      	ands	r3, r2
 800728c:	2b01      	cmp	r3, #1
 800728e:	d0dc      	beq.n	800724a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}

0800729a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2204      	movs	r2, #4
 80072ae:	4013      	ands	r3, r2
 80072b0:	d03a      	beq.n	8007328 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2204      	movs	r2, #4
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d10d      	bne.n	80072dc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2202      	movs	r2, #2
 80072c8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80072ca:	d107      	bne.n	80072dc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2110      	movs	r1, #16
 80072d8:	430a      	orrs	r2, r1
 80072da:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80072dc:	f7ff fb34 	bl	8006948 <HAL_GetTick>
 80072e0:	0003      	movs	r3, r0
 80072e2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80072e4:	e01a      	b.n	800731c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80072e6:	f7ff fb2f 	bl	8006948 <HAL_GetTick>
 80072ea:	0002      	movs	r2, r0
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d913      	bls.n	800731c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2204      	movs	r2, #4
 80072fc:	4013      	ands	r3, r2
 80072fe:	d00d      	beq.n	800731c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	2210      	movs	r2, #16
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007310:	2201      	movs	r2, #1
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e006      	b.n	800732a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2204      	movs	r2, #4
 8007324:	4013      	ands	r3, r2
 8007326:	d1de      	bne.n	80072e6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	0018      	movs	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	b004      	add	sp, #16
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	0002      	movs	r2, r0
 800733c:	1dfb      	adds	r3, r7, #7
 800733e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007340:	1dfb      	adds	r3, r7, #7
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b7f      	cmp	r3, #127	@ 0x7f
 8007346:	d809      	bhi.n	800735c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007348:	1dfb      	adds	r3, r7, #7
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	001a      	movs	r2, r3
 800734e:	231f      	movs	r3, #31
 8007350:	401a      	ands	r2, r3
 8007352:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <__NVIC_EnableIRQ+0x30>)
 8007354:	2101      	movs	r1, #1
 8007356:	4091      	lsls	r1, r2
 8007358:	000a      	movs	r2, r1
 800735a:	601a      	str	r2, [r3, #0]
  }
}
 800735c:	46c0      	nop			@ (mov r8, r8)
 800735e:	46bd      	mov	sp, r7
 8007360:	b002      	add	sp, #8
 8007362:	bd80      	pop	{r7, pc}
 8007364:	e000e100 	.word	0xe000e100

08007368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	0002      	movs	r2, r0
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	1dfb      	adds	r3, r7, #7
 8007374:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007376:	1dfb      	adds	r3, r7, #7
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b7f      	cmp	r3, #127	@ 0x7f
 800737c:	d828      	bhi.n	80073d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800737e:	4a2f      	ldr	r2, [pc, #188]	@ (800743c <__NVIC_SetPriority+0xd4>)
 8007380:	1dfb      	adds	r3, r7, #7
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	b25b      	sxtb	r3, r3
 8007386:	089b      	lsrs	r3, r3, #2
 8007388:	33c0      	adds	r3, #192	@ 0xc0
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	589b      	ldr	r3, [r3, r2]
 800738e:	1dfa      	adds	r2, r7, #7
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	0011      	movs	r1, r2
 8007394:	2203      	movs	r2, #3
 8007396:	400a      	ands	r2, r1
 8007398:	00d2      	lsls	r2, r2, #3
 800739a:	21ff      	movs	r1, #255	@ 0xff
 800739c:	4091      	lsls	r1, r2
 800739e:	000a      	movs	r2, r1
 80073a0:	43d2      	mvns	r2, r2
 80073a2:	401a      	ands	r2, r3
 80073a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	019b      	lsls	r3, r3, #6
 80073aa:	22ff      	movs	r2, #255	@ 0xff
 80073ac:	401a      	ands	r2, r3
 80073ae:	1dfb      	adds	r3, r7, #7
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	0018      	movs	r0, r3
 80073b4:	2303      	movs	r3, #3
 80073b6:	4003      	ands	r3, r0
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80073bc:	481f      	ldr	r0, [pc, #124]	@ (800743c <__NVIC_SetPriority+0xd4>)
 80073be:	1dfb      	adds	r3, r7, #7
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b25b      	sxtb	r3, r3
 80073c4:	089b      	lsrs	r3, r3, #2
 80073c6:	430a      	orrs	r2, r1
 80073c8:	33c0      	adds	r3, #192	@ 0xc0
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80073ce:	e031      	b.n	8007434 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80073d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007440 <__NVIC_SetPriority+0xd8>)
 80073d2:	1dfb      	adds	r3, r7, #7
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	0019      	movs	r1, r3
 80073d8:	230f      	movs	r3, #15
 80073da:	400b      	ands	r3, r1
 80073dc:	3b08      	subs	r3, #8
 80073de:	089b      	lsrs	r3, r3, #2
 80073e0:	3306      	adds	r3, #6
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	18d3      	adds	r3, r2, r3
 80073e6:	3304      	adds	r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	1dfa      	adds	r2, r7, #7
 80073ec:	7812      	ldrb	r2, [r2, #0]
 80073ee:	0011      	movs	r1, r2
 80073f0:	2203      	movs	r2, #3
 80073f2:	400a      	ands	r2, r1
 80073f4:	00d2      	lsls	r2, r2, #3
 80073f6:	21ff      	movs	r1, #255	@ 0xff
 80073f8:	4091      	lsls	r1, r2
 80073fa:	000a      	movs	r2, r1
 80073fc:	43d2      	mvns	r2, r2
 80073fe:	401a      	ands	r2, r3
 8007400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	019b      	lsls	r3, r3, #6
 8007406:	22ff      	movs	r2, #255	@ 0xff
 8007408:	401a      	ands	r2, r3
 800740a:	1dfb      	adds	r3, r7, #7
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	0018      	movs	r0, r3
 8007410:	2303      	movs	r3, #3
 8007412:	4003      	ands	r3, r0
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007418:	4809      	ldr	r0, [pc, #36]	@ (8007440 <__NVIC_SetPriority+0xd8>)
 800741a:	1dfb      	adds	r3, r7, #7
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	001c      	movs	r4, r3
 8007420:	230f      	movs	r3, #15
 8007422:	4023      	ands	r3, r4
 8007424:	3b08      	subs	r3, #8
 8007426:	089b      	lsrs	r3, r3, #2
 8007428:	430a      	orrs	r2, r1
 800742a:	3306      	adds	r3, #6
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	18c3      	adds	r3, r0, r3
 8007430:	3304      	adds	r3, #4
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	46c0      	nop			@ (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b003      	add	sp, #12
 800743a:	bd90      	pop	{r4, r7, pc}
 800743c:	e000e100 	.word	0xe000e100
 8007440:	e000ed00 	.word	0xe000ed00

08007444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1e5a      	subs	r2, r3, #1
 8007450:	2380      	movs	r3, #128	@ 0x80
 8007452:	045b      	lsls	r3, r3, #17
 8007454:	429a      	cmp	r2, r3
 8007456:	d301      	bcc.n	800745c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007458:	2301      	movs	r3, #1
 800745a:	e010      	b.n	800747e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <SysTick_Config+0x44>)
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	3a01      	subs	r2, #1
 8007462:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007464:	2301      	movs	r3, #1
 8007466:	425b      	negs	r3, r3
 8007468:	2103      	movs	r1, #3
 800746a:	0018      	movs	r0, r3
 800746c:	f7ff ff7c 	bl	8007368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <SysTick_Config+0x44>)
 8007472:	2200      	movs	r2, #0
 8007474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007476:	4b04      	ldr	r3, [pc, #16]	@ (8007488 <SysTick_Config+0x44>)
 8007478:	2207      	movs	r2, #7
 800747a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800747c:	2300      	movs	r3, #0
}
 800747e:	0018      	movs	r0, r3
 8007480:	46bd      	mov	sp, r7
 8007482:	b002      	add	sp, #8
 8007484:	bd80      	pop	{r7, pc}
 8007486:	46c0      	nop			@ (mov r8, r8)
 8007488:	e000e010 	.word	0xe000e010

0800748c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	210f      	movs	r1, #15
 8007498:	187b      	adds	r3, r7, r1
 800749a:	1c02      	adds	r2, r0, #0
 800749c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	187b      	adds	r3, r7, r1
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	0011      	movs	r1, r2
 80074a8:	0018      	movs	r0, r3
 80074aa:	f7ff ff5d 	bl	8007368 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80074ae:	46c0      	nop			@ (mov r8, r8)
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b004      	add	sp, #16
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	0002      	movs	r2, r0
 80074be:	1dfb      	adds	r3, r7, #7
 80074c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074c2:	1dfb      	adds	r3, r7, #7
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	0018      	movs	r0, r3
 80074ca:	f7ff ff33 	bl	8007334 <__NVIC_EnableIRQ>
}
 80074ce:	46c0      	nop			@ (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b002      	add	sp, #8
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	0018      	movs	r0, r3
 80074e2:	f7ff ffaf 	bl	8007444 <SysTick_Config>
 80074e6:	0003      	movs	r3, r0
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b002      	add	sp, #8
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2221      	movs	r2, #33	@ 0x21
 80074fc:	5c9b      	ldrb	r3, [r3, r2]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d008      	beq.n	8007516 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2204      	movs	r2, #4
 8007508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	2100      	movs	r1, #0
 8007510:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e020      	b.n	8007558 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	210e      	movs	r1, #14
 8007522:	438a      	bics	r2, r1
 8007524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2101      	movs	r1, #1
 8007532:	438a      	bics	r2, r1
 8007534:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753e:	2101      	movs	r1, #1
 8007540:	4091      	lsls	r1, r2
 8007542:	000a      	movs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2221      	movs	r2, #33	@ 0x21
 800754a:	2101      	movs	r1, #1
 800754c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	2100      	movs	r1, #0
 8007554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b002      	add	sp, #8
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007568:	210f      	movs	r1, #15
 800756a:	187b      	adds	r3, r7, r1
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2221      	movs	r2, #33	@ 0x21
 8007574:	5c9b      	ldrb	r3, [r3, r2]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d006      	beq.n	800758a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2204      	movs	r2, #4
 8007580:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8007582:	187b      	adds	r3, r7, r1
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	e028      	b.n	80075dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	210e      	movs	r1, #14
 8007596:	438a      	bics	r2, r1
 8007598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2101      	movs	r1, #1
 80075a6:	438a      	bics	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b2:	2101      	movs	r1, #1
 80075b4:	4091      	lsls	r1, r2
 80075b6:	000a      	movs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2221      	movs	r2, #33	@ 0x21
 80075be:	2101      	movs	r1, #1
 80075c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	2100      	movs	r1, #0
 80075c8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	0010      	movs	r0, r2
 80075da:	4798      	blx	r3
    }
  }
  return status;
 80075dc:	230f      	movs	r3, #15
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	781b      	ldrb	r3, [r3, #0]
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b004      	add	sp, #16
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075fa:	e155      	b.n	80078a8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2101      	movs	r1, #1
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4091      	lsls	r1, r2
 8007606:	000a      	movs	r2, r1
 8007608:	4013      	ands	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d100      	bne.n	8007614 <HAL_GPIO_Init+0x28>
 8007612:	e146      	b.n	80078a2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2203      	movs	r2, #3
 800761a:	4013      	ands	r3, r2
 800761c:	2b01      	cmp	r3, #1
 800761e:	d005      	beq.n	800762c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2203      	movs	r2, #3
 8007626:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007628:	2b02      	cmp	r3, #2
 800762a:	d130      	bne.n	800768e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	2203      	movs	r2, #3
 8007638:	409a      	lsls	r2, r3
 800763a:	0013      	movs	r3, r2
 800763c:	43da      	mvns	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4013      	ands	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	409a      	lsls	r2, r3
 800764e:	0013      	movs	r3, r2
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007662:	2201      	movs	r2, #1
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	409a      	lsls	r2, r3
 8007668:	0013      	movs	r3, r2
 800766a:	43da      	mvns	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4013      	ands	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	091b      	lsrs	r3, r3, #4
 8007678:	2201      	movs	r2, #1
 800767a:	401a      	ands	r2, r3
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	409a      	lsls	r2, r3
 8007680:	0013      	movs	r3, r2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2203      	movs	r2, #3
 8007694:	4013      	ands	r3, r2
 8007696:	2b03      	cmp	r3, #3
 8007698:	d017      	beq.n	80076ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	2203      	movs	r2, #3
 80076a6:	409a      	lsls	r2, r3
 80076a8:	0013      	movs	r3, r2
 80076aa:	43da      	mvns	r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	4013      	ands	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	0013      	movs	r3, r2
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2203      	movs	r2, #3
 80076d0:	4013      	ands	r3, r2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d123      	bne.n	800771e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	08da      	lsrs	r2, r3, #3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3208      	adds	r2, #8
 80076de:	0092      	lsls	r2, r2, #2
 80076e0:	58d3      	ldr	r3, [r2, r3]
 80076e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2207      	movs	r2, #7
 80076e8:	4013      	ands	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	220f      	movs	r2, #15
 80076ee:	409a      	lsls	r2, r3
 80076f0:	0013      	movs	r3, r2
 80076f2:	43da      	mvns	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	4013      	ands	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2107      	movs	r1, #7
 8007702:	400b      	ands	r3, r1
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	409a      	lsls	r2, r3
 8007708:	0013      	movs	r3, r2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	08da      	lsrs	r2, r3, #3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3208      	adds	r2, #8
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	6939      	ldr	r1, [r7, #16]
 800771c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	2203      	movs	r2, #3
 800772a:	409a      	lsls	r2, r3
 800772c:	0013      	movs	r3, r2
 800772e:	43da      	mvns	r2, r3
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4013      	ands	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2203      	movs	r2, #3
 800773c:	401a      	ands	r2, r3
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	409a      	lsls	r2, r3
 8007744:	0013      	movs	r3, r2
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	23c0      	movs	r3, #192	@ 0xc0
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	4013      	ands	r3, r2
 800775c:	d100      	bne.n	8007760 <HAL_GPIO_Init+0x174>
 800775e:	e0a0      	b.n	80078a2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007760:	4b57      	ldr	r3, [pc, #348]	@ (80078c0 <HAL_GPIO_Init+0x2d4>)
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	4b56      	ldr	r3, [pc, #344]	@ (80078c0 <HAL_GPIO_Init+0x2d4>)
 8007766:	2101      	movs	r1, #1
 8007768:	430a      	orrs	r2, r1
 800776a:	619a      	str	r2, [r3, #24]
 800776c:	4b54      	ldr	r3, [pc, #336]	@ (80078c0 <HAL_GPIO_Init+0x2d4>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2201      	movs	r2, #1
 8007772:	4013      	ands	r3, r2
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007778:	4a52      	ldr	r2, [pc, #328]	@ (80078c4 <HAL_GPIO_Init+0x2d8>)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	089b      	lsrs	r3, r3, #2
 800777e:	3302      	adds	r3, #2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	589b      	ldr	r3, [r3, r2]
 8007784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2203      	movs	r2, #3
 800778a:	4013      	ands	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	220f      	movs	r2, #15
 8007790:	409a      	lsls	r2, r3
 8007792:	0013      	movs	r3, r2
 8007794:	43da      	mvns	r2, r3
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4013      	ands	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	2390      	movs	r3, #144	@ 0x90
 80077a0:	05db      	lsls	r3, r3, #23
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d019      	beq.n	80077da <HAL_GPIO_Init+0x1ee>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a47      	ldr	r2, [pc, #284]	@ (80078c8 <HAL_GPIO_Init+0x2dc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <HAL_GPIO_Init+0x1ea>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a46      	ldr	r2, [pc, #280]	@ (80078cc <HAL_GPIO_Init+0x2e0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00d      	beq.n	80077d2 <HAL_GPIO_Init+0x1e6>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a45      	ldr	r2, [pc, #276]	@ (80078d0 <HAL_GPIO_Init+0x2e4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d007      	beq.n	80077ce <HAL_GPIO_Init+0x1e2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a44      	ldr	r2, [pc, #272]	@ (80078d4 <HAL_GPIO_Init+0x2e8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <HAL_GPIO_Init+0x1de>
 80077c6:	2304      	movs	r3, #4
 80077c8:	e008      	b.n	80077dc <HAL_GPIO_Init+0x1f0>
 80077ca:	2305      	movs	r3, #5
 80077cc:	e006      	b.n	80077dc <HAL_GPIO_Init+0x1f0>
 80077ce:	2303      	movs	r3, #3
 80077d0:	e004      	b.n	80077dc <HAL_GPIO_Init+0x1f0>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e002      	b.n	80077dc <HAL_GPIO_Init+0x1f0>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <HAL_GPIO_Init+0x1f0>
 80077da:	2300      	movs	r3, #0
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	2103      	movs	r1, #3
 80077e0:	400a      	ands	r2, r1
 80077e2:	0092      	lsls	r2, r2, #2
 80077e4:	4093      	lsls	r3, r2
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80077ec:	4935      	ldr	r1, [pc, #212]	@ (80078c4 <HAL_GPIO_Init+0x2d8>)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	089b      	lsrs	r3, r3, #2
 80077f2:	3302      	adds	r3, #2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077fa:	4b37      	ldr	r3, [pc, #220]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	43da      	mvns	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4013      	ands	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	2380      	movs	r3, #128	@ 0x80
 8007810:	035b      	lsls	r3, r3, #13
 8007812:	4013      	ands	r3, r2
 8007814:	d003      	beq.n	800781e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800781e:	4b2e      	ldr	r3, [pc, #184]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007824:	4b2c      	ldr	r3, [pc, #176]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	43da      	mvns	r2, r3
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	4013      	ands	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	2380      	movs	r3, #128	@ 0x80
 800783a:	039b      	lsls	r3, r3, #14
 800783c:	4013      	ands	r3, r2
 800783e:	d003      	beq.n	8007848 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007848:	4b23      	ldr	r3, [pc, #140]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800784e:	4b22      	ldr	r3, [pc, #136]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	43da      	mvns	r2, r3
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4013      	ands	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	2380      	movs	r3, #128	@ 0x80
 8007864:	029b      	lsls	r3, r3, #10
 8007866:	4013      	ands	r3, r2
 8007868:	d003      	beq.n	8007872 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007872:	4b19      	ldr	r3, [pc, #100]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007878:	4b17      	ldr	r3, [pc, #92]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	43da      	mvns	r2, r3
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4013      	ands	r3, r2
 8007886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	2380      	movs	r3, #128	@ 0x80
 800788e:	025b      	lsls	r3, r3, #9
 8007890:	4013      	ands	r3, r2
 8007892:	d003      	beq.n	800789c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800789c:	4b0e      	ldr	r3, [pc, #56]	@ (80078d8 <HAL_GPIO_Init+0x2ec>)
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	3301      	adds	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	40da      	lsrs	r2, r3
 80078b0:	1e13      	subs	r3, r2, #0
 80078b2:	d000      	beq.n	80078b6 <HAL_GPIO_Init+0x2ca>
 80078b4:	e6a2      	b.n	80075fc <HAL_GPIO_Init+0x10>
  } 
}
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	46c0      	nop			@ (mov r8, r8)
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b006      	add	sp, #24
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40021000 	.word	0x40021000
 80078c4:	40010000 	.word	0x40010000
 80078c8:	48000400 	.word	0x48000400
 80078cc:	48000800 	.word	0x48000800
 80078d0:	48000c00 	.word	0x48000c00
 80078d4:	48001000 	.word	0x48001000
 80078d8:	40010400 	.word	0x40010400

080078dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	0008      	movs	r0, r1
 80078e6:	0011      	movs	r1, r2
 80078e8:	1cbb      	adds	r3, r7, #2
 80078ea:	1c02      	adds	r2, r0, #0
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	1c7b      	adds	r3, r7, #1
 80078f0:	1c0a      	adds	r2, r1, #0
 80078f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078f4:	1c7b      	adds	r3, r7, #1
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078fc:	1cbb      	adds	r3, r7, #2
 80078fe:	881a      	ldrh	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007904:	e003      	b.n	800790e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007906:	1cbb      	adds	r3, r7, #2
 8007908:	881a      	ldrh	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800790e:	46c0      	nop			@ (mov r8, r8)
 8007910:	46bd      	mov	sp, r7
 8007912:	b002      	add	sp, #8
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f000 fb76 	bl	8008018 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2201      	movs	r2, #1
 8007932:	4013      	ands	r3, r2
 8007934:	d100      	bne.n	8007938 <HAL_RCC_OscConfig+0x20>
 8007936:	e08e      	b.n	8007a56 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007938:	4bc5      	ldr	r3, [pc, #788]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	220c      	movs	r2, #12
 800793e:	4013      	ands	r3, r2
 8007940:	2b04      	cmp	r3, #4
 8007942:	d00e      	beq.n	8007962 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007944:	4bc2      	ldr	r3, [pc, #776]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	220c      	movs	r2, #12
 800794a:	4013      	ands	r3, r2
 800794c:	2b08      	cmp	r3, #8
 800794e:	d117      	bne.n	8007980 <HAL_RCC_OscConfig+0x68>
 8007950:	4bbf      	ldr	r3, [pc, #764]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	23c0      	movs	r3, #192	@ 0xc0
 8007956:	025b      	lsls	r3, r3, #9
 8007958:	401a      	ands	r2, r3
 800795a:	2380      	movs	r3, #128	@ 0x80
 800795c:	025b      	lsls	r3, r3, #9
 800795e:	429a      	cmp	r2, r3
 8007960:	d10e      	bne.n	8007980 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007962:	4bbb      	ldr	r3, [pc, #748]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	2380      	movs	r3, #128	@ 0x80
 8007968:	029b      	lsls	r3, r3, #10
 800796a:	4013      	ands	r3, r2
 800796c:	d100      	bne.n	8007970 <HAL_RCC_OscConfig+0x58>
 800796e:	e071      	b.n	8007a54 <HAL_RCC_OscConfig+0x13c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d000      	beq.n	800797a <HAL_RCC_OscConfig+0x62>
 8007978:	e06c      	b.n	8007a54 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f000 fb4c 	bl	8008018 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d107      	bne.n	8007998 <HAL_RCC_OscConfig+0x80>
 8007988:	4bb1      	ldr	r3, [pc, #708]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4bb0      	ldr	r3, [pc, #704]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 800798e:	2180      	movs	r1, #128	@ 0x80
 8007990:	0249      	lsls	r1, r1, #9
 8007992:	430a      	orrs	r2, r1
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e02f      	b.n	80079f8 <HAL_RCC_OscConfig+0xe0>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10c      	bne.n	80079ba <HAL_RCC_OscConfig+0xa2>
 80079a0:	4bab      	ldr	r3, [pc, #684]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4baa      	ldr	r3, [pc, #680]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079a6:	49ab      	ldr	r1, [pc, #684]	@ (8007c54 <HAL_RCC_OscConfig+0x33c>)
 80079a8:	400a      	ands	r2, r1
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	4ba8      	ldr	r3, [pc, #672]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4ba7      	ldr	r3, [pc, #668]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079b2:	49a9      	ldr	r1, [pc, #676]	@ (8007c58 <HAL_RCC_OscConfig+0x340>)
 80079b4:	400a      	ands	r2, r1
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e01e      	b.n	80079f8 <HAL_RCC_OscConfig+0xe0>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d10e      	bne.n	80079e0 <HAL_RCC_OscConfig+0xc8>
 80079c2:	4ba3      	ldr	r3, [pc, #652]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4ba2      	ldr	r3, [pc, #648]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079c8:	2180      	movs	r1, #128	@ 0x80
 80079ca:	02c9      	lsls	r1, r1, #11
 80079cc:	430a      	orrs	r2, r1
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	4b9f      	ldr	r3, [pc, #636]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b9e      	ldr	r3, [pc, #632]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079d6:	2180      	movs	r1, #128	@ 0x80
 80079d8:	0249      	lsls	r1, r1, #9
 80079da:	430a      	orrs	r2, r1
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e00b      	b.n	80079f8 <HAL_RCC_OscConfig+0xe0>
 80079e0:	4b9b      	ldr	r3, [pc, #620]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b9a      	ldr	r3, [pc, #616]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079e6:	499b      	ldr	r1, [pc, #620]	@ (8007c54 <HAL_RCC_OscConfig+0x33c>)
 80079e8:	400a      	ands	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	4b98      	ldr	r3, [pc, #608]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b97      	ldr	r3, [pc, #604]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 80079f2:	4999      	ldr	r1, [pc, #612]	@ (8007c58 <HAL_RCC_OscConfig+0x340>)
 80079f4:	400a      	ands	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d014      	beq.n	8007a2a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fe ffa2 	bl	8006948 <HAL_GetTick>
 8007a04:	0003      	movs	r3, r0
 8007a06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a08:	e008      	b.n	8007a1c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a0a:	f7fe ff9d 	bl	8006948 <HAL_GetTick>
 8007a0e:	0002      	movs	r2, r0
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b64      	cmp	r3, #100	@ 0x64
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e2fd      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	2380      	movs	r3, #128	@ 0x80
 8007a22:	029b      	lsls	r3, r3, #10
 8007a24:	4013      	ands	r3, r2
 8007a26:	d0f0      	beq.n	8007a0a <HAL_RCC_OscConfig+0xf2>
 8007a28:	e015      	b.n	8007a56 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2a:	f7fe ff8d 	bl	8006948 <HAL_GetTick>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a34:	f7fe ff88 	bl	8006948 <HAL_GetTick>
 8007a38:	0002      	movs	r2, r0
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b64      	cmp	r3, #100	@ 0x64
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e2e8      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a46:	4b82      	ldr	r3, [pc, #520]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	2380      	movs	r3, #128	@ 0x80
 8007a4c:	029b      	lsls	r3, r3, #10
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x11c>
 8007a52:	e000      	b.n	8007a56 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a54:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d100      	bne.n	8007a62 <HAL_RCC_OscConfig+0x14a>
 8007a60:	e06c      	b.n	8007b3c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a62:	4b7b      	ldr	r3, [pc, #492]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	220c      	movs	r2, #12
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a6c:	4b78      	ldr	r3, [pc, #480]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	220c      	movs	r2, #12
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d11f      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x1a0>
 8007a78:	4b75      	ldr	r3, [pc, #468]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	23c0      	movs	r3, #192	@ 0xc0
 8007a7e:	025b      	lsls	r3, r3, #9
 8007a80:	401a      	ands	r2, r3
 8007a82:	2380      	movs	r3, #128	@ 0x80
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d116      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a8a:	4b71      	ldr	r3, [pc, #452]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	4013      	ands	r3, r2
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x188>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e2bb      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa0:	4b6b      	ldr	r3, [pc, #428]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	22f8      	movs	r2, #248	@ 0xf8
 8007aa6:	4393      	bics	r3, r2
 8007aa8:	0019      	movs	r1, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	00da      	lsls	r2, r3, #3
 8007ab0:	4b67      	ldr	r3, [pc, #412]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ab6:	e041      	b.n	8007b3c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d024      	beq.n	8007b0a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ac0:	4b63      	ldr	r3, [pc, #396]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	4b62      	ldr	r3, [pc, #392]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007acc:	f7fe ff3c 	bl	8006948 <HAL_GetTick>
 8007ad0:	0003      	movs	r3, r0
 8007ad2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ad6:	f7fe ff37 	bl	8006948 <HAL_GetTick>
 8007ada:	0002      	movs	r2, r0
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e297      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ae8:	4b59      	ldr	r3, [pc, #356]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2202      	movs	r2, #2
 8007aee:	4013      	ands	r3, r2
 8007af0:	d0f1      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af2:	4b57      	ldr	r3, [pc, #348]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	22f8      	movs	r2, #248	@ 0xf8
 8007af8:	4393      	bics	r3, r2
 8007afa:	0019      	movs	r1, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	00da      	lsls	r2, r3, #3
 8007b02:	4b53      	ldr	r3, [pc, #332]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b04:	430a      	orrs	r2, r1
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	e018      	b.n	8007b3c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b0a:	4b51      	ldr	r3, [pc, #324]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b50      	ldr	r3, [pc, #320]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b10:	2101      	movs	r1, #1
 8007b12:	438a      	bics	r2, r1
 8007b14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b16:	f7fe ff17 	bl	8006948 <HAL_GetTick>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b20:	f7fe ff12 	bl	8006948 <HAL_GetTick>
 8007b24:	0002      	movs	r2, r0
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e272      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b32:	4b47      	ldr	r3, [pc, #284]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2202      	movs	r2, #2
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d1f1      	bne.n	8007b20 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2208      	movs	r2, #8
 8007b42:	4013      	ands	r3, r2
 8007b44:	d036      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d019      	beq.n	8007b82 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b4e:	4b40      	ldr	r3, [pc, #256]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b52:	4b3f      	ldr	r3, [pc, #252]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b54:	2101      	movs	r1, #1
 8007b56:	430a      	orrs	r2, r1
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b5a:	f7fe fef5 	bl	8006948 <HAL_GetTick>
 8007b5e:	0003      	movs	r3, r0
 8007b60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b64:	f7fe fef0 	bl	8006948 <HAL_GetTick>
 8007b68:	0002      	movs	r2, r0
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e250      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b76:	4b36      	ldr	r3, [pc, #216]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d0f1      	beq.n	8007b64 <HAL_RCC_OscConfig+0x24c>
 8007b80:	e018      	b.n	8007bb4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b82:	4b33      	ldr	r3, [pc, #204]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b86:	4b32      	ldr	r3, [pc, #200]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007b88:	2101      	movs	r1, #1
 8007b8a:	438a      	bics	r2, r1
 8007b8c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b8e:	f7fe fedb 	bl	8006948 <HAL_GetTick>
 8007b92:	0003      	movs	r3, r0
 8007b94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b98:	f7fe fed6 	bl	8006948 <HAL_GetTick>
 8007b9c:	0002      	movs	r2, r0
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e236      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007baa:	4b29      	ldr	r3, [pc, #164]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bae:	2202      	movs	r2, #2
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d1f1      	bne.n	8007b98 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2204      	movs	r2, #4
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d100      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x2a8>
 8007bbe:	e0b5      	b.n	8007d2c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bc0:	201f      	movs	r0, #31
 8007bc2:	183b      	adds	r3, r7, r0
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bc8:	4b21      	ldr	r3, [pc, #132]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007bca:	69da      	ldr	r2, [r3, #28]
 8007bcc:	2380      	movs	r3, #128	@ 0x80
 8007bce:	055b      	lsls	r3, r3, #21
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	d110      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007bd6:	69da      	ldr	r2, [r3, #28]
 8007bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007bda:	2180      	movs	r1, #128	@ 0x80
 8007bdc:	0549      	lsls	r1, r1, #21
 8007bde:	430a      	orrs	r2, r1
 8007be0:	61da      	str	r2, [r3, #28]
 8007be2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007be4:	69da      	ldr	r2, [r3, #28]
 8007be6:	2380      	movs	r3, #128	@ 0x80
 8007be8:	055b      	lsls	r3, r3, #21
 8007bea:	4013      	ands	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007bf0:	183b      	adds	r3, r7, r0
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf6:	4b19      	ldr	r3, [pc, #100]	@ (8007c5c <HAL_RCC_OscConfig+0x344>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	2380      	movs	r3, #128	@ 0x80
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d11a      	bne.n	8007c38 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c02:	4b16      	ldr	r3, [pc, #88]	@ (8007c5c <HAL_RCC_OscConfig+0x344>)
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b15      	ldr	r3, [pc, #84]	@ (8007c5c <HAL_RCC_OscConfig+0x344>)
 8007c08:	2180      	movs	r1, #128	@ 0x80
 8007c0a:	0049      	lsls	r1, r1, #1
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c10:	f7fe fe9a 	bl	8006948 <HAL_GetTick>
 8007c14:	0003      	movs	r3, r0
 8007c16:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1a:	f7fe fe95 	bl	8006948 <HAL_GetTick>
 8007c1e:	0002      	movs	r2, r0
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b64      	cmp	r3, #100	@ 0x64
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e1f5      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <HAL_RCC_OscConfig+0x344>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	2380      	movs	r3, #128	@ 0x80
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	4013      	ands	r3, r2
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10f      	bne.n	8007c60 <HAL_RCC_OscConfig+0x348>
 8007c40:	4b03      	ldr	r3, [pc, #12]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007c42:	6a1a      	ldr	r2, [r3, #32]
 8007c44:	4b02      	ldr	r3, [pc, #8]	@ (8007c50 <HAL_RCC_OscConfig+0x338>)
 8007c46:	2101      	movs	r1, #1
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	621a      	str	r2, [r3, #32]
 8007c4c:	e036      	b.n	8007cbc <HAL_RCC_OscConfig+0x3a4>
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	40021000 	.word	0x40021000
 8007c54:	fffeffff 	.word	0xfffeffff
 8007c58:	fffbffff 	.word	0xfffbffff
 8007c5c:	40007000 	.word	0x40007000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10c      	bne.n	8007c82 <HAL_RCC_OscConfig+0x36a>
 8007c68:	4bca      	ldr	r3, [pc, #808]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c6a:	6a1a      	ldr	r2, [r3, #32]
 8007c6c:	4bc9      	ldr	r3, [pc, #804]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c6e:	2101      	movs	r1, #1
 8007c70:	438a      	bics	r2, r1
 8007c72:	621a      	str	r2, [r3, #32]
 8007c74:	4bc7      	ldr	r3, [pc, #796]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	4bc6      	ldr	r3, [pc, #792]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	438a      	bics	r2, r1
 8007c7e:	621a      	str	r2, [r3, #32]
 8007c80:	e01c      	b.n	8007cbc <HAL_RCC_OscConfig+0x3a4>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x38c>
 8007c8a:	4bc2      	ldr	r3, [pc, #776]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c8c:	6a1a      	ldr	r2, [r3, #32]
 8007c8e:	4bc1      	ldr	r3, [pc, #772]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c90:	2104      	movs	r1, #4
 8007c92:	430a      	orrs	r2, r1
 8007c94:	621a      	str	r2, [r3, #32]
 8007c96:	4bbf      	ldr	r3, [pc, #764]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c98:	6a1a      	ldr	r2, [r3, #32]
 8007c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	621a      	str	r2, [r3, #32]
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCC_OscConfig+0x3a4>
 8007ca4:	4bbb      	ldr	r3, [pc, #748]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007ca6:	6a1a      	ldr	r2, [r3, #32]
 8007ca8:	4bba      	ldr	r3, [pc, #744]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007caa:	2101      	movs	r1, #1
 8007cac:	438a      	bics	r2, r1
 8007cae:	621a      	str	r2, [r3, #32]
 8007cb0:	4bb8      	ldr	r3, [pc, #736]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	4bb7      	ldr	r3, [pc, #732]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007cb6:	2104      	movs	r1, #4
 8007cb8:	438a      	bics	r2, r1
 8007cba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d014      	beq.n	8007cee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cc4:	f7fe fe40 	bl	8006948 <HAL_GetTick>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ccc:	e009      	b.n	8007ce2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cce:	f7fe fe3b 	bl	8006948 <HAL_GetTick>
 8007cd2:	0002      	movs	r2, r0
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	4aaf      	ldr	r2, [pc, #700]	@ (8007f98 <HAL_RCC_OscConfig+0x680>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e19a      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce2:	4bac      	ldr	r3, [pc, #688]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d0f0      	beq.n	8007cce <HAL_RCC_OscConfig+0x3b6>
 8007cec:	e013      	b.n	8007d16 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cee:	f7fe fe2b 	bl	8006948 <HAL_GetTick>
 8007cf2:	0003      	movs	r3, r0
 8007cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf6:	e009      	b.n	8007d0c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cf8:	f7fe fe26 	bl	8006948 <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	4aa5      	ldr	r2, [pc, #660]	@ (8007f98 <HAL_RCC_OscConfig+0x680>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e185      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	2202      	movs	r2, #2
 8007d12:	4013      	ands	r3, r2
 8007d14:	d1f0      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d16:	231f      	movs	r3, #31
 8007d18:	18fb      	adds	r3, r7, r3
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d105      	bne.n	8007d2c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d20:	4b9c      	ldr	r3, [pc, #624]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	4b9b      	ldr	r3, [pc, #620]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d26:	499d      	ldr	r1, [pc, #628]	@ (8007f9c <HAL_RCC_OscConfig+0x684>)
 8007d28:	400a      	ands	r2, r1
 8007d2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2210      	movs	r2, #16
 8007d32:	4013      	ands	r3, r2
 8007d34:	d063      	beq.n	8007dfe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d12a      	bne.n	8007d94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007d3e:	4b95      	ldr	r3, [pc, #596]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d42:	4b94      	ldr	r3, [pc, #592]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d44:	2104      	movs	r1, #4
 8007d46:	430a      	orrs	r2, r1
 8007d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007d4a:	4b92      	ldr	r3, [pc, #584]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d4e:	4b91      	ldr	r3, [pc, #580]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d50:	2101      	movs	r1, #1
 8007d52:	430a      	orrs	r2, r1
 8007d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d56:	f7fe fdf7 	bl	8006948 <HAL_GetTick>
 8007d5a:	0003      	movs	r3, r0
 8007d5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007d60:	f7fe fdf2 	bl	8006948 <HAL_GetTick>
 8007d64:	0002      	movs	r2, r0
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e152      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007d72:	4b88      	ldr	r3, [pc, #544]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d76:	2202      	movs	r2, #2
 8007d78:	4013      	ands	r3, r2
 8007d7a:	d0f1      	beq.n	8007d60 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007d7c:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d80:	22f8      	movs	r2, #248	@ 0xf8
 8007d82:	4393      	bics	r3, r2
 8007d84:	0019      	movs	r1, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	00da      	lsls	r2, r3, #3
 8007d8c:	4b81      	ldr	r3, [pc, #516]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d92:	e034      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	3305      	adds	r3, #5
 8007d9a:	d111      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da0:	4b7c      	ldr	r3, [pc, #496]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007da2:	2104      	movs	r1, #4
 8007da4:	438a      	bics	r2, r1
 8007da6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007da8:	4b7a      	ldr	r3, [pc, #488]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dac:	22f8      	movs	r2, #248	@ 0xf8
 8007dae:	4393      	bics	r3, r2
 8007db0:	0019      	movs	r1, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	00da      	lsls	r2, r3, #3
 8007db8:	4b76      	ldr	r3, [pc, #472]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8007dbe:	e01e      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007dc0:	4b74      	ldr	r3, [pc, #464]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dc4:	4b73      	ldr	r3, [pc, #460]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007dcc:	4b71      	ldr	r3, [pc, #452]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dd0:	4b70      	ldr	r3, [pc, #448]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	438a      	bics	r2, r1
 8007dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dd8:	f7fe fdb6 	bl	8006948 <HAL_GetTick>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007de2:	f7fe fdb1 	bl	8006948 <HAL_GetTick>
 8007de6:	0002      	movs	r2, r0
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e111      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007df4:	4b67      	ldr	r3, [pc, #412]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df8:	2202      	movs	r2, #2
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	d1f1      	bne.n	8007de2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2220      	movs	r2, #32
 8007e04:	4013      	ands	r3, r2
 8007e06:	d05c      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007e08:	4b62      	ldr	r3, [pc, #392]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	220c      	movs	r2, #12
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b0c      	cmp	r3, #12
 8007e12:	d00e      	beq.n	8007e32 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007e14:	4b5f      	ldr	r3, [pc, #380]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	220c      	movs	r2, #12
 8007e1a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d114      	bne.n	8007e4a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007e20:	4b5c      	ldr	r3, [pc, #368]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	23c0      	movs	r3, #192	@ 0xc0
 8007e26:	025b      	lsls	r3, r3, #9
 8007e28:	401a      	ands	r2, r3
 8007e2a:	23c0      	movs	r3, #192	@ 0xc0
 8007e2c:	025b      	lsls	r3, r3, #9
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d10b      	bne.n	8007e4a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007e32:	4b58      	ldr	r3, [pc, #352]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e36:	2380      	movs	r3, #128	@ 0x80
 8007e38:	029b      	lsls	r3, r3, #10
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d040      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x5a8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d03c      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e0e6      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01b      	beq.n	8007e8a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007e52:	4b50      	ldr	r3, [pc, #320]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e56:	4b4f      	ldr	r3, [pc, #316]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e58:	2180      	movs	r1, #128	@ 0x80
 8007e5a:	0249      	lsls	r1, r1, #9
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e60:	f7fe fd72 	bl	8006948 <HAL_GetTick>
 8007e64:	0003      	movs	r3, r0
 8007e66:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e6a:	f7fe fd6d 	bl	8006948 <HAL_GetTick>
 8007e6e:	0002      	movs	r2, r0
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e0cd      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007e7c:	4b45      	ldr	r3, [pc, #276]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	029b      	lsls	r3, r3, #10
 8007e84:	4013      	ands	r3, r2
 8007e86:	d0f0      	beq.n	8007e6a <HAL_RCC_OscConfig+0x552>
 8007e88:	e01b      	b.n	8007ec2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007e8a:	4b42      	ldr	r3, [pc, #264]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e8e:	4b41      	ldr	r3, [pc, #260]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007e90:	4943      	ldr	r1, [pc, #268]	@ (8007fa0 <HAL_RCC_OscConfig+0x688>)
 8007e92:	400a      	ands	r2, r1
 8007e94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e96:	f7fe fd57 	bl	8006948 <HAL_GetTick>
 8007e9a:	0003      	movs	r3, r0
 8007e9c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ea0:	f7fe fd52 	bl	8006948 <HAL_GetTick>
 8007ea4:	0002      	movs	r2, r0
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e0b2      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007eb2:	4b38      	ldr	r3, [pc, #224]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eb6:	2380      	movs	r3, #128	@ 0x80
 8007eb8:	029b      	lsls	r3, r3, #10
 8007eba:	4013      	ands	r3, r2
 8007ebc:	d1f0      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x588>
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007ec0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d100      	bne.n	8007ecc <HAL_RCC_OscConfig+0x5b4>
 8007eca:	e0a4      	b.n	8008016 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ecc:	4b31      	ldr	r3, [pc, #196]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	220c      	movs	r2, #12
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d100      	bne.n	8007eda <HAL_RCC_OscConfig+0x5c2>
 8007ed8:	e078      	b.n	8007fcc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d14c      	bne.n	8007f7c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007ee8:	492e      	ldr	r1, [pc, #184]	@ (8007fa4 <HAL_RCC_OscConfig+0x68c>)
 8007eea:	400a      	ands	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eee:	f7fe fd2b 	bl	8006948 <HAL_GetTick>
 8007ef2:	0003      	movs	r3, r0
 8007ef4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ef8:	f7fe fd26 	bl	8006948 <HAL_GetTick>
 8007efc:	0002      	movs	r2, r0
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e086      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f0a:	4b22      	ldr	r3, [pc, #136]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	2380      	movs	r3, #128	@ 0x80
 8007f10:	049b      	lsls	r3, r3, #18
 8007f12:	4013      	ands	r3, r2
 8007f14:	d1f0      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f16:	4b1f      	ldr	r3, [pc, #124]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	220f      	movs	r2, #15
 8007f1c:	4393      	bics	r3, r2
 8007f1e:	0019      	movs	r1, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f24:	4b1b      	ldr	r3, [pc, #108]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f26:	430a      	orrs	r2, r1
 8007f28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa8 <HAL_RCC_OscConfig+0x690>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	0019      	movs	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	4b15      	ldr	r3, [pc, #84]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f44:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	4b12      	ldr	r3, [pc, #72]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f4a:	2180      	movs	r1, #128	@ 0x80
 8007f4c:	0449      	lsls	r1, r1, #17
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f52:	f7fe fcf9 	bl	8006948 <HAL_GetTick>
 8007f56:	0003      	movs	r3, r0
 8007f58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f5c:	f7fe fcf4 	bl	8006948 <HAL_GetTick>
 8007f60:	0002      	movs	r2, r0
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e054      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f6e:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	2380      	movs	r3, #128	@ 0x80
 8007f74:	049b      	lsls	r3, r3, #18
 8007f76:	4013      	ands	r3, r2
 8007f78:	d0f0      	beq.n	8007f5c <HAL_RCC_OscConfig+0x644>
 8007f7a:	e04c      	b.n	8008016 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f7c:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b04      	ldr	r3, [pc, #16]	@ (8007f94 <HAL_RCC_OscConfig+0x67c>)
 8007f82:	4908      	ldr	r1, [pc, #32]	@ (8007fa4 <HAL_RCC_OscConfig+0x68c>)
 8007f84:	400a      	ands	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f88:	f7fe fcde 	bl	8006948 <HAL_GetTick>
 8007f8c:	0003      	movs	r3, r0
 8007f8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f90:	e015      	b.n	8007fbe <HAL_RCC_OscConfig+0x6a6>
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	40021000 	.word	0x40021000
 8007f98:	00001388 	.word	0x00001388
 8007f9c:	efffffff 	.word	0xefffffff
 8007fa0:	fffeffff 	.word	0xfffeffff
 8007fa4:	feffffff 	.word	0xfeffffff
 8007fa8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fac:	f7fe fccc 	bl	8006948 <HAL_GetTick>
 8007fb0:	0002      	movs	r2, r0
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e02c      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fbe:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <HAL_RCC_OscConfig+0x708>)
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	2380      	movs	r3, #128	@ 0x80
 8007fc4:	049b      	lsls	r3, r3, #18
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	d1f0      	bne.n	8007fac <HAL_RCC_OscConfig+0x694>
 8007fca:	e024      	b.n	8008016 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d101      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e01f      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007fd8:	4b11      	ldr	r3, [pc, #68]	@ (8008020 <HAL_RCC_OscConfig+0x708>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007fde:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <HAL_RCC_OscConfig+0x708>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	23c0      	movs	r3, #192	@ 0xc0
 8007fe8:	025b      	lsls	r3, r3, #9
 8007fea:	401a      	ands	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d10e      	bne.n	8008012 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	220f      	movs	r2, #15
 8007ff8:	401a      	ands	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d107      	bne.n	8008012 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	23f0      	movs	r3, #240	@ 0xf0
 8008006:	039b      	lsls	r3, r3, #14
 8008008:	401a      	ands	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800800e:	429a      	cmp	r2, r3
 8008010:	d001      	beq.n	8008016 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	0018      	movs	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	b008      	add	sp, #32
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40021000 	.word	0x40021000

08008024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0bf      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008038:	4b61      	ldr	r3, [pc, #388]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	4013      	ands	r3, r2
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d911      	bls.n	800806a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008046:	4b5e      	ldr	r3, [pc, #376]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2201      	movs	r2, #1
 800804c:	4393      	bics	r3, r2
 800804e:	0019      	movs	r1, r3
 8008050:	4b5b      	ldr	r3, [pc, #364]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008058:	4b59      	ldr	r3, [pc, #356]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2201      	movs	r2, #1
 800805e:	4013      	ands	r3, r2
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d001      	beq.n	800806a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e0a6      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2202      	movs	r2, #2
 8008070:	4013      	ands	r3, r2
 8008072:	d015      	beq.n	80080a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2204      	movs	r2, #4
 800807a:	4013      	ands	r3, r2
 800807c:	d006      	beq.n	800808c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800807e:	4b51      	ldr	r3, [pc, #324]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	4b50      	ldr	r3, [pc, #320]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008084:	21e0      	movs	r1, #224	@ 0xe0
 8008086:	00c9      	lsls	r1, r1, #3
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800808c:	4b4d      	ldr	r3, [pc, #308]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	22f0      	movs	r2, #240	@ 0xf0
 8008092:	4393      	bics	r3, r2
 8008094:	0019      	movs	r1, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	4b4a      	ldr	r3, [pc, #296]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2201      	movs	r2, #1
 80080a6:	4013      	ands	r3, r2
 80080a8:	d04c      	beq.n	8008144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d107      	bne.n	80080c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b2:	4b44      	ldr	r3, [pc, #272]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	029b      	lsls	r3, r3, #10
 80080ba:	4013      	ands	r3, r2
 80080bc:	d120      	bne.n	8008100 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e07a      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d107      	bne.n	80080da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ca:	4b3e      	ldr	r3, [pc, #248]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	2380      	movs	r3, #128	@ 0x80
 80080d0:	049b      	lsls	r3, r3, #18
 80080d2:	4013      	ands	r3, r2
 80080d4:	d114      	bne.n	8008100 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e06e      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d107      	bne.n	80080f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80080e2:	4b38      	ldr	r3, [pc, #224]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 80080e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080e6:	2380      	movs	r3, #128	@ 0x80
 80080e8:	029b      	lsls	r3, r3, #10
 80080ea:	4013      	ands	r3, r2
 80080ec:	d108      	bne.n	8008100 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e062      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f2:	4b34      	ldr	r3, [pc, #208]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2202      	movs	r2, #2
 80080f8:	4013      	ands	r3, r2
 80080fa:	d101      	bne.n	8008100 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e05b      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008100:	4b30      	ldr	r3, [pc, #192]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2203      	movs	r2, #3
 8008106:	4393      	bics	r3, r2
 8008108:	0019      	movs	r1, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	4b2d      	ldr	r3, [pc, #180]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008114:	f7fe fc18 	bl	8006948 <HAL_GetTick>
 8008118:	0003      	movs	r3, r0
 800811a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800811c:	e009      	b.n	8008132 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800811e:	f7fe fc13 	bl	8006948 <HAL_GetTick>
 8008122:	0002      	movs	r2, r0
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	4a27      	ldr	r2, [pc, #156]	@ (80081c8 <HAL_RCC_ClockConfig+0x1a4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e042      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008132:	4b24      	ldr	r3, [pc, #144]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	220c      	movs	r2, #12
 8008138:	401a      	ands	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	429a      	cmp	r2, r3
 8008142:	d1ec      	bne.n	800811e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008144:	4b1e      	ldr	r3, [pc, #120]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2201      	movs	r2, #1
 800814a:	4013      	ands	r3, r2
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d211      	bcs.n	8008176 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008152:	4b1b      	ldr	r3, [pc, #108]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2201      	movs	r2, #1
 8008158:	4393      	bics	r3, r2
 800815a:	0019      	movs	r1, r3
 800815c:	4b18      	ldr	r3, [pc, #96]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008164:	4b16      	ldr	r3, [pc, #88]	@ (80081c0 <HAL_RCC_ClockConfig+0x19c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	4013      	ands	r3, r2
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d001      	beq.n	8008176 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e020      	b.n	80081b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2204      	movs	r2, #4
 800817c:	4013      	ands	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008180:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4a11      	ldr	r2, [pc, #68]	@ (80081cc <HAL_RCC_ClockConfig+0x1a8>)
 8008186:	4013      	ands	r3, r2
 8008188:	0019      	movs	r1, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008194:	f000 f820 	bl	80081d8 <HAL_RCC_GetSysClockFreq>
 8008198:	0001      	movs	r1, r0
 800819a:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <HAL_RCC_ClockConfig+0x1a0>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	091b      	lsrs	r3, r3, #4
 80081a0:	220f      	movs	r2, #15
 80081a2:	4013      	ands	r3, r2
 80081a4:	4a0a      	ldr	r2, [pc, #40]	@ (80081d0 <HAL_RCC_ClockConfig+0x1ac>)
 80081a6:	5cd3      	ldrb	r3, [r2, r3]
 80081a8:	000a      	movs	r2, r1
 80081aa:	40da      	lsrs	r2, r3
 80081ac:	4b09      	ldr	r3, [pc, #36]	@ (80081d4 <HAL_RCC_ClockConfig+0x1b0>)
 80081ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80081b0:	2000      	movs	r0, #0
 80081b2:	f7fe fb83 	bl	80068bc <HAL_InitTick>
  
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	0018      	movs	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	b004      	add	sp, #16
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40022000 	.word	0x40022000
 80081c4:	40021000 	.word	0x40021000
 80081c8:	00001388 	.word	0x00001388
 80081cc:	fffff8ff 	.word	0xfffff8ff
 80081d0:	08010dd4 	.word	0x08010dd4
 80081d4:	20000024 	.word	0x20000024

080081d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80081f2:	4b2d      	ldr	r3, [pc, #180]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	220c      	movs	r2, #12
 80081fc:	4013      	ands	r3, r2
 80081fe:	2b0c      	cmp	r3, #12
 8008200:	d046      	beq.n	8008290 <HAL_RCC_GetSysClockFreq+0xb8>
 8008202:	d848      	bhi.n	8008296 <HAL_RCC_GetSysClockFreq+0xbe>
 8008204:	2b04      	cmp	r3, #4
 8008206:	d002      	beq.n	800820e <HAL_RCC_GetSysClockFreq+0x36>
 8008208:	2b08      	cmp	r3, #8
 800820a:	d003      	beq.n	8008214 <HAL_RCC_GetSysClockFreq+0x3c>
 800820c:	e043      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800820e:	4b27      	ldr	r3, [pc, #156]	@ (80082ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8008210:	613b      	str	r3, [r7, #16]
      break;
 8008212:	e043      	b.n	800829c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	0c9b      	lsrs	r3, r3, #18
 8008218:	220f      	movs	r2, #15
 800821a:	4013      	ands	r3, r2
 800821c:	4a24      	ldr	r2, [pc, #144]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800821e:	5cd3      	ldrb	r3, [r2, r3]
 8008220:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8008222:	4b21      	ldr	r3, [pc, #132]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	220f      	movs	r2, #15
 8008228:	4013      	ands	r3, r2
 800822a:	4a22      	ldr	r2, [pc, #136]	@ (80082b4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800822c:	5cd3      	ldrb	r3, [r2, r3]
 800822e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	23c0      	movs	r3, #192	@ 0xc0
 8008234:	025b      	lsls	r3, r3, #9
 8008236:	401a      	ands	r2, r3
 8008238:	2380      	movs	r3, #128	@ 0x80
 800823a:	025b      	lsls	r3, r3, #9
 800823c:	429a      	cmp	r2, r3
 800823e:	d109      	bne.n	8008254 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	481a      	ldr	r0, [pc, #104]	@ (80082ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8008244:	f7f7 ff7c 	bl	8000140 <__udivsi3>
 8008248:	0003      	movs	r3, r0
 800824a:	001a      	movs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4353      	muls	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	e01a      	b.n	800828a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	23c0      	movs	r3, #192	@ 0xc0
 8008258:	025b      	lsls	r3, r3, #9
 800825a:	401a      	ands	r2, r3
 800825c:	23c0      	movs	r3, #192	@ 0xc0
 800825e:	025b      	lsls	r3, r3, #9
 8008260:	429a      	cmp	r2, r3
 8008262:	d109      	bne.n	8008278 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	4814      	ldr	r0, [pc, #80]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8008268:	f7f7 ff6a 	bl	8000140 <__udivsi3>
 800826c:	0003      	movs	r3, r0
 800826e:	001a      	movs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4353      	muls	r3, r2
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e008      	b.n	800828a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	480c      	ldr	r0, [pc, #48]	@ (80082ac <HAL_RCC_GetSysClockFreq+0xd4>)
 800827c:	f7f7 ff60 	bl	8000140 <__udivsi3>
 8008280:	0003      	movs	r3, r0
 8008282:	001a      	movs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4353      	muls	r3, r2
 8008288:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	613b      	str	r3, [r7, #16]
      break;
 800828e:	e005      	b.n	800829c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8008290:	4b09      	ldr	r3, [pc, #36]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8008292:	613b      	str	r3, [r7, #16]
      break;
 8008294:	e002      	b.n	800829c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8008298:	613b      	str	r3, [r7, #16]
      break;
 800829a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800829c:	693b      	ldr	r3, [r7, #16]
}
 800829e:	0018      	movs	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b006      	add	sp, #24
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	40021000 	.word	0x40021000
 80082ac:	007a1200 	.word	0x007a1200
 80082b0:	08010dec 	.word	0x08010dec
 80082b4:	08010dfc 	.word	0x08010dfc
 80082b8:	02dc6c00 	.word	0x02dc6c00

080082bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082c0:	4b02      	ldr	r3, [pc, #8]	@ (80082cc <HAL_RCC_GetHCLKFreq+0x10>)
 80082c2:	681b      	ldr	r3, [r3, #0]
}
 80082c4:	0018      	movs	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	20000024 	.word	0x20000024

080082d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80082d4:	f7ff fff2 	bl	80082bc <HAL_RCC_GetHCLKFreq>
 80082d8:	0001      	movs	r1, r0
 80082da:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	0a1b      	lsrs	r3, r3, #8
 80082e0:	2207      	movs	r2, #7
 80082e2:	4013      	ands	r3, r2
 80082e4:	4a04      	ldr	r2, [pc, #16]	@ (80082f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80082e6:	5cd3      	ldrb	r3, [r2, r3]
 80082e8:	40d9      	lsrs	r1, r3
 80082ea:	000b      	movs	r3, r1
}    
 80082ec:	0018      	movs	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	40021000 	.word	0x40021000
 80082f8:	08010de4 	.word	0x08010de4

080082fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	2380      	movs	r3, #128	@ 0x80
 8008312:	025b      	lsls	r3, r3, #9
 8008314:	4013      	ands	r3, r2
 8008316:	d100      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8008318:	e08e      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800831a:	2017      	movs	r0, #23
 800831c:	183b      	adds	r3, r7, r0
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008322:	4b6e      	ldr	r3, [pc, #440]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008324:	69da      	ldr	r2, [r3, #28]
 8008326:	2380      	movs	r3, #128	@ 0x80
 8008328:	055b      	lsls	r3, r3, #21
 800832a:	4013      	ands	r3, r2
 800832c:	d110      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800832e:	4b6b      	ldr	r3, [pc, #428]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008330:	69da      	ldr	r2, [r3, #28]
 8008332:	4b6a      	ldr	r3, [pc, #424]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008334:	2180      	movs	r1, #128	@ 0x80
 8008336:	0549      	lsls	r1, r1, #21
 8008338:	430a      	orrs	r2, r1
 800833a:	61da      	str	r2, [r3, #28]
 800833c:	4b67      	ldr	r3, [pc, #412]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	2380      	movs	r3, #128	@ 0x80
 8008342:	055b      	lsls	r3, r3, #21
 8008344:	4013      	ands	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]
 8008348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800834a:	183b      	adds	r3, r7, r0
 800834c:	2201      	movs	r2, #1
 800834e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008350:	4b63      	ldr	r3, [pc, #396]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	2380      	movs	r3, #128	@ 0x80
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	4013      	ands	r3, r2
 800835a:	d11a      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800835c:	4b60      	ldr	r3, [pc, #384]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b5f      	ldr	r3, [pc, #380]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008362:	2180      	movs	r1, #128	@ 0x80
 8008364:	0049      	lsls	r1, r1, #1
 8008366:	430a      	orrs	r2, r1
 8008368:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800836a:	f7fe faed 	bl	8006948 <HAL_GetTick>
 800836e:	0003      	movs	r3, r0
 8008370:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008372:	e008      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008374:	f7fe fae8 	bl	8006948 <HAL_GetTick>
 8008378:	0002      	movs	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b64      	cmp	r3, #100	@ 0x64
 8008380:	d901      	bls.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e0a6      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008386:	4b56      	ldr	r3, [pc, #344]	@ (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	2380      	movs	r3, #128	@ 0x80
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4013      	ands	r3, r2
 8008390:	d0f0      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008392:	4b52      	ldr	r3, [pc, #328]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008394:	6a1a      	ldr	r2, [r3, #32]
 8008396:	23c0      	movs	r3, #192	@ 0xc0
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4013      	ands	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d034      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	23c0      	movs	r3, #192	@ 0xc0
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4013      	ands	r3, r2
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d02c      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083b4:	4b49      	ldr	r3, [pc, #292]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	4a4a      	ldr	r2, [pc, #296]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083be:	4b47      	ldr	r3, [pc, #284]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083c0:	6a1a      	ldr	r2, [r3, #32]
 80083c2:	4b46      	ldr	r3, [pc, #280]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	0249      	lsls	r1, r1, #9
 80083c8:	430a      	orrs	r2, r1
 80083ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083cc:	4b43      	ldr	r3, [pc, #268]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	4b42      	ldr	r3, [pc, #264]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083d2:	4945      	ldr	r1, [pc, #276]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80083d4:	400a      	ands	r2, r1
 80083d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80083d8:	4b40      	ldr	r3, [pc, #256]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	4013      	ands	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e6:	f7fe faaf 	bl	8006948 <HAL_GetTick>
 80083ea:	0003      	movs	r3, r0
 80083ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ee:	e009      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f0:	f7fe faaa 	bl	8006948 <HAL_GetTick>
 80083f4:	0002      	movs	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	4a3c      	ldr	r2, [pc, #240]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e067      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008404:	4b35      	ldr	r3, [pc, #212]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	2202      	movs	r2, #2
 800840a:	4013      	ands	r3, r2
 800840c:	d0f0      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800840e:	4b33      	ldr	r3, [pc, #204]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	4a34      	ldr	r2, [pc, #208]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008414:	4013      	ands	r3, r2
 8008416:	0019      	movs	r1, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b2f      	ldr	r3, [pc, #188]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800841e:	430a      	orrs	r2, r1
 8008420:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008422:	2317      	movs	r3, #23
 8008424:	18fb      	adds	r3, r7, r3
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d105      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800842c:	4b2b      	ldr	r3, [pc, #172]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	4b2a      	ldr	r3, [pc, #168]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008432:	492f      	ldr	r1, [pc, #188]	@ (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8008434:	400a      	ands	r2, r1
 8008436:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2201      	movs	r2, #1
 800843e:	4013      	ands	r3, r2
 8008440:	d009      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008442:	4b26      	ldr	r3, [pc, #152]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008446:	2203      	movs	r2, #3
 8008448:	4393      	bics	r3, r2
 800844a:	0019      	movs	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	4b22      	ldr	r3, [pc, #136]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008452:	430a      	orrs	r2, r1
 8008454:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2202      	movs	r2, #2
 800845c:	4013      	ands	r3, r2
 800845e:	d009      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008460:	4b1e      	ldr	r3, [pc, #120]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	4a23      	ldr	r2, [pc, #140]	@ (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008466:	4013      	ands	r3, r2
 8008468:	0019      	movs	r1, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	4b1b      	ldr	r3, [pc, #108]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008470:	430a      	orrs	r2, r1
 8008472:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2220      	movs	r2, #32
 800847a:	4013      	ands	r3, r2
 800847c:	d009      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800847e:	4b17      	ldr	r3, [pc, #92]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008482:	2210      	movs	r2, #16
 8008484:	4393      	bics	r3, r2
 8008486:	0019      	movs	r1, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	4b13      	ldr	r3, [pc, #76]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800848e:	430a      	orrs	r2, r1
 8008490:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	2380      	movs	r3, #128	@ 0x80
 8008498:	029b      	lsls	r3, r3, #10
 800849a:	4013      	ands	r3, r2
 800849c:	d009      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800849e:	4b0f      	ldr	r3, [pc, #60]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80084a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a2:	2280      	movs	r2, #128	@ 0x80
 80084a4:	4393      	bics	r3, r2
 80084a6:	0019      	movs	r1, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80084ae:	430a      	orrs	r2, r1
 80084b0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	2380      	movs	r3, #128	@ 0x80
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4013      	ands	r3, r2
 80084bc:	d009      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084be:	4b07      	ldr	r3, [pc, #28]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80084c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c2:	2240      	movs	r2, #64	@ 0x40
 80084c4:	4393      	bics	r3, r2
 80084c6:	0019      	movs	r1, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	4b03      	ldr	r3, [pc, #12]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80084ce:	430a      	orrs	r2, r1
 80084d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	0018      	movs	r0, r3
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b006      	add	sp, #24
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40021000 	.word	0x40021000
 80084e0:	40007000 	.word	0x40007000
 80084e4:	fffffcff 	.word	0xfffffcff
 80084e8:	fffeffff 	.word	0xfffeffff
 80084ec:	00001388 	.word	0x00001388
 80084f0:	efffffff 	.word	0xefffffff
 80084f4:	fffcffff 	.word	0xfffcffff

080084f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e0a8      	b.n	800865c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	2382      	movs	r3, #130	@ 0x82
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	429a      	cmp	r2, r3
 800851c:	d009      	beq.n	8008532 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	61da      	str	r2, [r3, #28]
 8008524:	e005      	b.n	8008532 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	225d      	movs	r2, #93	@ 0x5d
 800853c:	5c9b      	ldrb	r3, [r3, r2]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d107      	bne.n	8008554 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	225c      	movs	r2, #92	@ 0x5c
 8008548:	2100      	movs	r1, #0
 800854a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	0018      	movs	r0, r3
 8008550:	f7fd fee4 	bl	800631c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	225d      	movs	r2, #93	@ 0x5d
 8008558:	2102      	movs	r1, #2
 800855a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2140      	movs	r1, #64	@ 0x40
 8008568:	438a      	bics	r2, r1
 800856a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	23e0      	movs	r3, #224	@ 0xe0
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	429a      	cmp	r2, r3
 8008576:	d902      	bls.n	800857e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e002      	b.n	8008584 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800857e:	2380      	movs	r3, #128	@ 0x80
 8008580:	015b      	lsls	r3, r3, #5
 8008582:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	23f0      	movs	r3, #240	@ 0xf0
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	429a      	cmp	r2, r3
 800858e:	d008      	beq.n	80085a2 <HAL_SPI_Init+0xaa>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	23e0      	movs	r3, #224	@ 0xe0
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	429a      	cmp	r2, r3
 800859a:	d002      	beq.n	80085a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	2382      	movs	r3, #130	@ 0x82
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	401a      	ands	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6899      	ldr	r1, [r3, #8]
 80085b0:	2384      	movs	r3, #132	@ 0x84
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	400b      	ands	r3, r1
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2102      	movs	r1, #2
 80085be:	400b      	ands	r3, r1
 80085c0:	431a      	orrs	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2101      	movs	r1, #1
 80085c8:	400b      	ands	r3, r1
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6999      	ldr	r1, [r3, #24]
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	400b      	ands	r3, r1
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2138      	movs	r1, #56	@ 0x38
 80085de:	400b      	ands	r3, r1
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	2180      	movs	r1, #128	@ 0x80
 80085e8:	400b      	ands	r3, r1
 80085ea:	431a      	orrs	r2, r3
 80085ec:	0011      	movs	r1, r2
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085f2:	2380      	movs	r3, #128	@ 0x80
 80085f4:	019b      	lsls	r3, r3, #6
 80085f6:	401a      	ands	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	2204      	movs	r2, #4
 8008608:	401a      	ands	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	2110      	movs	r1, #16
 8008610:	400b      	ands	r3, r1
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008618:	2108      	movs	r1, #8
 800861a:	400b      	ands	r3, r1
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68d9      	ldr	r1, [r3, #12]
 8008622:	23f0      	movs	r3, #240	@ 0xf0
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	400b      	ands	r3, r1
 8008628:	431a      	orrs	r2, r3
 800862a:	0011      	movs	r1, r2
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	2380      	movs	r3, #128	@ 0x80
 8008630:	015b      	lsls	r3, r3, #5
 8008632:	401a      	ands	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69da      	ldr	r2, [r3, #28]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4907      	ldr	r1, [pc, #28]	@ (8008664 <HAL_SPI_Init+0x16c>)
 8008648:	400a      	ands	r2, r1
 800864a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	225d      	movs	r2, #93	@ 0x5d
 8008656:	2101      	movs	r1, #1
 8008658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	0018      	movs	r0, r3
 800865e:	46bd      	mov	sp, r7
 8008660:	b004      	add	sp, #16
 8008662:	bd80      	pop	{r7, pc}
 8008664:	fffff7ff 	.word	0xfffff7ff

08008668 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	1dbb      	adds	r3, r7, #6
 8008676:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008678:	231f      	movs	r3, #31
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	225c      	movs	r2, #92	@ 0x5c
 8008684:	5c9b      	ldrb	r3, [r3, r2]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_SPI_Transmit+0x26>
 800868a:	2302      	movs	r3, #2
 800868c:	e147      	b.n	800891e <HAL_SPI_Transmit+0x2b6>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	225c      	movs	r2, #92	@ 0x5c
 8008692:	2101      	movs	r1, #1
 8008694:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008696:	f7fe f957 	bl	8006948 <HAL_GetTick>
 800869a:	0003      	movs	r3, r0
 800869c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800869e:	2316      	movs	r3, #22
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	1dba      	adds	r2, r7, #6
 80086a4:	8812      	ldrh	r2, [r2, #0]
 80086a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	225d      	movs	r2, #93	@ 0x5d
 80086ac:	5c9b      	ldrb	r3, [r3, r2]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d004      	beq.n	80086be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80086b4:	231f      	movs	r3, #31
 80086b6:	18fb      	adds	r3, r7, r3
 80086b8:	2202      	movs	r2, #2
 80086ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80086bc:	e128      	b.n	8008910 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <HAL_SPI_Transmit+0x64>
 80086c4:	1dbb      	adds	r3, r7, #6
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80086cc:	231f      	movs	r3, #31
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2201      	movs	r2, #1
 80086d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80086d4:	e11c      	b.n	8008910 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	225d      	movs	r2, #93	@ 0x5d
 80086da:	2103      	movs	r1, #3
 80086dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1dba      	adds	r2, r7, #6
 80086ee:	8812      	ldrh	r2, [r2, #0]
 80086f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1dba      	adds	r2, r7, #6
 80086f6:	8812      	ldrh	r2, [r2, #0]
 80086f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2244      	movs	r2, #68	@ 0x44
 8008704:	2100      	movs	r1, #0
 8008706:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2246      	movs	r2, #70	@ 0x46
 800870c:	2100      	movs	r1, #0
 800870e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	2380      	movs	r3, #128	@ 0x80
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	429a      	cmp	r2, r3
 8008726:	d110      	bne.n	800874a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2140      	movs	r1, #64	@ 0x40
 8008734:	438a      	bics	r2, r1
 8008736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2180      	movs	r1, #128	@ 0x80
 8008744:	01c9      	lsls	r1, r1, #7
 8008746:	430a      	orrs	r2, r1
 8008748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2240      	movs	r2, #64	@ 0x40
 8008752:	4013      	ands	r3, r2
 8008754:	2b40      	cmp	r3, #64	@ 0x40
 8008756:	d007      	beq.n	8008768 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2140      	movs	r1, #64	@ 0x40
 8008764:	430a      	orrs	r2, r1
 8008766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	23e0      	movs	r3, #224	@ 0xe0
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	429a      	cmp	r2, r3
 8008772:	d952      	bls.n	800881a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_SPI_Transmit+0x11e>
 800877c:	2316      	movs	r3, #22
 800877e:	18fb      	adds	r3, r7, r3
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d143      	bne.n	800880e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	881a      	ldrh	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	1c9a      	adds	r2, r3, #2
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087aa:	e030      	b.n	800880e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2202      	movs	r2, #2
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d112      	bne.n	80087e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087be:	881a      	ldrh	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ca:	1c9a      	adds	r2, r3, #2
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29a      	uxth	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087de:	e016      	b.n	800880e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087e0:	f7fe f8b2 	bl	8006948 <HAL_GetTick>
 80087e4:	0002      	movs	r2, r0
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d802      	bhi.n	80087f6 <HAL_SPI_Transmit+0x18e>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	d102      	bne.n	80087fc <HAL_SPI_Transmit+0x194>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80087fc:	231f      	movs	r3, #31
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	2203      	movs	r2, #3
 8008802:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	225d      	movs	r2, #93	@ 0x5d
 8008808:	2101      	movs	r1, #1
 800880a:	5499      	strb	r1, [r3, r2]
          goto error;
 800880c:	e080      	b.n	8008910 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1c9      	bne.n	80087ac <HAL_SPI_Transmit+0x144>
 8008818:	e053      	b.n	80088c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <HAL_SPI_Transmit+0x1c4>
 8008822:	2316      	movs	r3, #22
 8008824:	18fb      	adds	r3, r7, r3
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d145      	bne.n	80088b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	330c      	adds	r3, #12
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29a      	uxth	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008852:	e031      	b.n	80088b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2202      	movs	r2, #2
 800885c:	4013      	ands	r3, r2
 800885e:	2b02      	cmp	r3, #2
 8008860:	d113      	bne.n	800888a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	330c      	adds	r3, #12
 800886c:	7812      	ldrb	r2, [r2, #0]
 800886e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008888:	e016      	b.n	80088b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800888a:	f7fe f85d 	bl	8006948 <HAL_GetTick>
 800888e:	0002      	movs	r2, r0
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d802      	bhi.n	80088a0 <HAL_SPI_Transmit+0x238>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	d102      	bne.n	80088a6 <HAL_SPI_Transmit+0x23e>
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d108      	bne.n	80088b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80088a6:	231f      	movs	r3, #31
 80088a8:	18fb      	adds	r3, r7, r3
 80088aa:	2203      	movs	r2, #3
 80088ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	225d      	movs	r2, #93	@ 0x5d
 80088b2:	2101      	movs	r1, #1
 80088b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80088b6:	e02b      	b.n	8008910 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1c8      	bne.n	8008854 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 fcef 	bl	80092ac <SPI_EndRxTxTransaction>
 80088ce:	1e03      	subs	r3, r0, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2220      	movs	r2, #32
 80088d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d004      	beq.n	8008908 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80088fe:	231f      	movs	r3, #31
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	2201      	movs	r2, #1
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	e003      	b.n	8008910 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	225d      	movs	r2, #93	@ 0x5d
 800890c:	2101      	movs	r1, #1
 800890e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	225c      	movs	r2, #92	@ 0x5c
 8008914:	2100      	movs	r1, #0
 8008916:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008918:	231f      	movs	r3, #31
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	781b      	ldrb	r3, [r3, #0]
}
 800891e:	0018      	movs	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	b008      	add	sp, #32
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b089      	sub	sp, #36	@ 0x24
 800892c:	af02      	add	r7, sp, #8
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	1dbb      	adds	r3, r7, #6
 8008936:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008938:	2117      	movs	r1, #23
 800893a:	187b      	adds	r3, r7, r1
 800893c:	2200      	movs	r2, #0
 800893e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	225d      	movs	r2, #93	@ 0x5d
 8008944:	5c9b      	ldrb	r3, [r3, r2]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b01      	cmp	r3, #1
 800894a:	d003      	beq.n	8008954 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800894c:	187b      	adds	r3, r7, r1
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
    goto error;
 8008952:	e12b      	b.n	8008bac <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	2382      	movs	r3, #130	@ 0x82
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	429a      	cmp	r2, r3
 800895e:	d113      	bne.n	8008988 <HAL_SPI_Receive+0x60>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10f      	bne.n	8008988 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	225d      	movs	r2, #93	@ 0x5d
 800896c:	2104      	movs	r1, #4
 800896e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008970:	1dbb      	adds	r3, r7, #6
 8008972:	881c      	ldrh	r4, [r3, #0]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	0023      	movs	r3, r4
 8008980:	f000 f924 	bl	8008bcc <HAL_SPI_TransmitReceive>
 8008984:	0003      	movs	r3, r0
 8008986:	e118      	b.n	8008bba <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	225c      	movs	r2, #92	@ 0x5c
 800898c:	5c9b      	ldrb	r3, [r3, r2]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d101      	bne.n	8008996 <HAL_SPI_Receive+0x6e>
 8008992:	2302      	movs	r3, #2
 8008994:	e111      	b.n	8008bba <HAL_SPI_Receive+0x292>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	225c      	movs	r2, #92	@ 0x5c
 800899a:	2101      	movs	r1, #1
 800899c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800899e:	f7fd ffd3 	bl	8006948 <HAL_GetTick>
 80089a2:	0003      	movs	r3, r0
 80089a4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_SPI_Receive+0x8c>
 80089ac:	1dbb      	adds	r3, r7, #6
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80089b4:	2317      	movs	r3, #23
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	2201      	movs	r2, #1
 80089ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80089bc:	e0f6      	b.n	8008bac <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	225d      	movs	r2, #93	@ 0x5d
 80089c2:	2104      	movs	r1, #4
 80089c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1dba      	adds	r2, r7, #6
 80089d6:	2144      	movs	r1, #68	@ 0x44
 80089d8:	8812      	ldrh	r2, [r2, #0]
 80089da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1dba      	adds	r2, r7, #6
 80089e0:	2146      	movs	r1, #70	@ 0x46
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	23e0      	movs	r3, #224	@ 0xe0
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d908      	bls.n	8008a22 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	496a      	ldr	r1, [pc, #424]	@ (8008bc4 <HAL_SPI_Receive+0x29c>)
 8008a1c:	400a      	ands	r2, r1
 8008a1e:	605a      	str	r2, [r3, #4]
 8008a20:	e008      	b.n	8008a34 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2180      	movs	r1, #128	@ 0x80
 8008a2e:	0149      	lsls	r1, r1, #5
 8008a30:	430a      	orrs	r2, r1
 8008a32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	2380      	movs	r3, #128	@ 0x80
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d10f      	bne.n	8008a60 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2140      	movs	r1, #64	@ 0x40
 8008a4c:	438a      	bics	r2, r1
 8008a4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	495b      	ldr	r1, [pc, #364]	@ (8008bc8 <HAL_SPI_Receive+0x2a0>)
 8008a5c:	400a      	ands	r2, r1
 8008a5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2240      	movs	r2, #64	@ 0x40
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b40      	cmp	r3, #64	@ 0x40
 8008a6c:	d007      	beq.n	8008a7e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2140      	movs	r1, #64	@ 0x40
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	23e0      	movs	r3, #224	@ 0xe0
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d900      	bls.n	8008a8c <HAL_SPI_Receive+0x164>
 8008a8a:	e071      	b.n	8008b70 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008a8c:	e035      	b.n	8008afa <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	2201      	movs	r2, #1
 8008a96:	4013      	ands	r3, r2
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d117      	bne.n	8008acc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	001a      	movs	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2246      	movs	r2, #70	@ 0x46
 8008abc:	5a9b      	ldrh	r3, [r3, r2]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	b299      	uxth	r1, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2246      	movs	r2, #70	@ 0x46
 8008ac8:	5299      	strh	r1, [r3, r2]
 8008aca:	e016      	b.n	8008afa <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008acc:	f7fd ff3c 	bl	8006948 <HAL_GetTick>
 8008ad0:	0002      	movs	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d802      	bhi.n	8008ae2 <HAL_SPI_Receive+0x1ba>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	d102      	bne.n	8008ae8 <HAL_SPI_Receive+0x1c0>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d108      	bne.n	8008afa <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008ae8:	2317      	movs	r3, #23
 8008aea:	18fb      	adds	r3, r7, r3
 8008aec:	2203      	movs	r2, #3
 8008aee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	225d      	movs	r2, #93	@ 0x5d
 8008af4:	2101      	movs	r1, #1
 8008af6:	5499      	strb	r1, [r3, r2]
          goto error;
 8008af8:	e058      	b.n	8008bac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2246      	movs	r2, #70	@ 0x46
 8008afe:	5a9b      	ldrh	r3, [r3, r2]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1c3      	bne.n	8008a8e <HAL_SPI_Receive+0x166>
 8008b06:	e039      	b.n	8008b7c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d115      	bne.n	8008b42 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b20:	b292      	uxth	r2, r2
 8008b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	1c9a      	adds	r2, r3, #2
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2246      	movs	r2, #70	@ 0x46
 8008b32:	5a9b      	ldrh	r3, [r3, r2]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b299      	uxth	r1, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2246      	movs	r2, #70	@ 0x46
 8008b3e:	5299      	strh	r1, [r3, r2]
 8008b40:	e016      	b.n	8008b70 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b42:	f7fd ff01 	bl	8006948 <HAL_GetTick>
 8008b46:	0002      	movs	r2, r0
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d802      	bhi.n	8008b58 <HAL_SPI_Receive+0x230>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	d102      	bne.n	8008b5e <HAL_SPI_Receive+0x236>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d108      	bne.n	8008b70 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8008b5e:	2317      	movs	r3, #23
 8008b60:	18fb      	adds	r3, r7, r3
 8008b62:	2203      	movs	r2, #3
 8008b64:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	225d      	movs	r2, #93	@ 0x5d
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	5499      	strb	r1, [r3, r2]
          goto error;
 8008b6e:	e01d      	b.n	8008bac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2246      	movs	r2, #70	@ 0x46
 8008b74:	5a9b      	ldrh	r3, [r3, r2]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1c5      	bne.n	8008b08 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	0018      	movs	r0, r3
 8008b84:	f000 fb34 	bl	80091f0 <SPI_EndRxTransaction>
 8008b88:	1e03      	subs	r3, r0, #0
 8008b8a:	d002      	beq.n	8008b92 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8008b9a:	2317      	movs	r3, #23
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e003      	b.n	8008bac <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	225d      	movs	r2, #93	@ 0x5d
 8008ba8:	2101      	movs	r1, #1
 8008baa:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	225c      	movs	r2, #92	@ 0x5c
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008bb4:	2317      	movs	r3, #23
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781b      	ldrb	r3, [r3, #0]
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b007      	add	sp, #28
 8008bc0:	bd90      	pop	{r4, r7, pc}
 8008bc2:	46c0      	nop			@ (mov r8, r8)
 8008bc4:	ffffefff 	.word	0xffffefff
 8008bc8:	ffffbfff 	.word	0xffffbfff

08008bcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	001a      	movs	r2, r3
 8008bda:	1cbb      	adds	r3, r7, #2
 8008bdc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bde:	2301      	movs	r3, #1
 8008be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008be2:	2323      	movs	r3, #35	@ 0x23
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	225c      	movs	r2, #92	@ 0x5c
 8008bee:	5c9b      	ldrb	r3, [r3, r2]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SPI_TransmitReceive+0x2c>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e1c4      	b.n	8008f82 <HAL_SPI_TransmitReceive+0x3b6>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	225c      	movs	r2, #92	@ 0x5c
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c00:	f7fd fea2 	bl	8006948 <HAL_GetTick>
 8008c04:	0003      	movs	r3, r0
 8008c06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c08:	201b      	movs	r0, #27
 8008c0a:	183b      	adds	r3, r7, r0
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	215d      	movs	r1, #93	@ 0x5d
 8008c10:	5c52      	ldrb	r2, [r2, r1]
 8008c12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c1a:	2312      	movs	r3, #18
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	1cba      	adds	r2, r7, #2
 8008c20:	8812      	ldrh	r2, [r2, #0]
 8008c22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c24:	183b      	adds	r3, r7, r0
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d011      	beq.n	8008c50 <HAL_SPI_TransmitReceive+0x84>
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	2382      	movs	r3, #130	@ 0x82
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d107      	bne.n	8008c46 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d103      	bne.n	8008c46 <HAL_SPI_TransmitReceive+0x7a>
 8008c3e:	183b      	adds	r3, r7, r0
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d004      	beq.n	8008c50 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008c46:	2323      	movs	r3, #35	@ 0x23
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8008c4e:	e191      	b.n	8008f74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x98>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x98>
 8008c5c:	1cbb      	adds	r3, r7, #2
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008c64:	2323      	movs	r3, #35	@ 0x23
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	2201      	movs	r2, #1
 8008c6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8008c6c:	e182      	b.n	8008f74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	225d      	movs	r2, #93	@ 0x5d
 8008c72:	5c9b      	ldrb	r3, [r3, r2]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d003      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	225d      	movs	r2, #93	@ 0x5d
 8008c7e:	2105      	movs	r1, #5
 8008c80:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	1cba      	adds	r2, r7, #2
 8008c92:	2146      	movs	r1, #70	@ 0x46
 8008c94:	8812      	ldrh	r2, [r2, #0]
 8008c96:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1cba      	adds	r2, r7, #2
 8008c9c:	2144      	movs	r1, #68	@ 0x44
 8008c9e:	8812      	ldrh	r2, [r2, #0]
 8008ca0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	1cba      	adds	r2, r7, #2
 8008cac:	8812      	ldrh	r2, [r2, #0]
 8008cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1cba      	adds	r2, r7, #2
 8008cb4:	8812      	ldrh	r2, [r2, #0]
 8008cb6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	23e0      	movs	r3, #224	@ 0xe0
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d908      	bls.n	8008ce2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	49ac      	ldr	r1, [pc, #688]	@ (8008f8c <HAL_SPI_TransmitReceive+0x3c0>)
 8008cdc:	400a      	ands	r2, r1
 8008cde:	605a      	str	r2, [r3, #4]
 8008ce0:	e008      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2180      	movs	r1, #128	@ 0x80
 8008cee:	0149      	lsls	r1, r1, #5
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2240      	movs	r2, #64	@ 0x40
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b40      	cmp	r3, #64	@ 0x40
 8008d00:	d007      	beq.n	8008d12 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2140      	movs	r1, #64	@ 0x40
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	23e0      	movs	r3, #224	@ 0xe0
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d800      	bhi.n	8008d20 <HAL_SPI_TransmitReceive+0x154>
 8008d1e:	e083      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_SPI_TransmitReceive+0x168>
 8008d28:	2312      	movs	r3, #18
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d000      	beq.n	8008d34 <HAL_SPI_TransmitReceive+0x168>
 8008d32:	e06d      	b.n	8008e10 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	1c9a      	adds	r2, r3, #2
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d58:	e05a      	b.n	8008e10 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2202      	movs	r2, #2
 8008d62:	4013      	ands	r3, r2
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d11b      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x1d4>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d016      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x1d4>
 8008d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d113      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7c:	881a      	ldrh	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d88:	1c9a      	adds	r2, r3, #2
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2201      	movs	r2, #1
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d11c      	bne.n	8008de8 <HAL_SPI_TransmitReceive+0x21c>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2246      	movs	r2, #70	@ 0x46
 8008db2:	5a9b      	ldrh	r3, [r3, r2]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d016      	beq.n	8008de8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	b292      	uxth	r2, r2
 8008dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dcc:	1c9a      	adds	r2, r3, #2
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2246      	movs	r2, #70	@ 0x46
 8008dd6:	5a9b      	ldrh	r3, [r3, r2]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b299      	uxth	r1, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2246      	movs	r2, #70	@ 0x46
 8008de2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008de4:	2301      	movs	r3, #1
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008de8:	f7fd fdae 	bl	8006948 <HAL_GetTick>
 8008dec:	0002      	movs	r2, r0
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d80b      	bhi.n	8008e10 <HAL_SPI_TransmitReceive+0x244>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	d008      	beq.n	8008e10 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8008dfe:	2323      	movs	r3, #35	@ 0x23
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	2203      	movs	r2, #3
 8008e04:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	225d      	movs	r2, #93	@ 0x5d
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	5499      	strb	r1, [r3, r2]
        goto error;
 8008e0e:	e0b1      	b.n	8008f74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d19f      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x18e>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2246      	movs	r2, #70	@ 0x46
 8008e1e:	5a9b      	ldrh	r3, [r3, r2]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d199      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x18e>
 8008e26:	e089      	b.n	8008f3c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <HAL_SPI_TransmitReceive+0x270>
 8008e30:	2312      	movs	r3, #18
 8008e32:	18fb      	adds	r3, r7, r3
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d000      	beq.n	8008e3c <HAL_SPI_TransmitReceive+0x270>
 8008e3a:	e074      	b.n	8008f26 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	330c      	adds	r3, #12
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e62:	e060      	b.n	8008f26 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d11c      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x2e0>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d017      	beq.n	8008eac <HAL_SPI_TransmitReceive+0x2e0>
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d114      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	330c      	adds	r3, #12
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d11e      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x32c>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2246      	movs	r2, #70	@ 0x46
 8008ebe:	5a9b      	ldrh	r3, [r3, r2]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d018      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	330c      	adds	r3, #12
 8008ecc:	001a      	movs	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	7812      	ldrb	r2, [r2, #0]
 8008ed4:	b2d2      	uxtb	r2, r2
 8008ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2246      	movs	r2, #70	@ 0x46
 8008ee6:	5a9b      	ldrh	r3, [r3, r2]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b299      	uxth	r1, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2246      	movs	r2, #70	@ 0x46
 8008ef2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ef8:	f7fd fd26 	bl	8006948 <HAL_GetTick>
 8008efc:	0002      	movs	r2, r0
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d802      	bhi.n	8008f0e <HAL_SPI_TransmitReceive+0x342>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	d102      	bne.n	8008f14 <HAL_SPI_TransmitReceive+0x348>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d108      	bne.n	8008f26 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8008f14:	2323      	movs	r3, #35	@ 0x23
 8008f16:	18fb      	adds	r3, r7, r3
 8008f18:	2203      	movs	r2, #3
 8008f1a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	225d      	movs	r2, #93	@ 0x5d
 8008f20:	2101      	movs	r1, #1
 8008f22:	5499      	strb	r1, [r3, r2]
        goto error;
 8008f24:	e026      	b.n	8008f74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d199      	bne.n	8008e64 <HAL_SPI_TransmitReceive+0x298>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2246      	movs	r2, #70	@ 0x46
 8008f34:	5a9b      	ldrh	r3, [r3, r2]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d193      	bne.n	8008e64 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 f9b2 	bl	80092ac <SPI_EndRxTxTransaction>
 8008f48:	1e03      	subs	r3, r0, #0
 8008f4a:	d006      	beq.n	8008f5a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8008f4c:	2323      	movs	r3, #35	@ 0x23
 8008f4e:	18fb      	adds	r3, r7, r3
 8008f50:	2201      	movs	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2220      	movs	r2, #32
 8008f58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d004      	beq.n	8008f6c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8008f62:	2323      	movs	r3, #35	@ 0x23
 8008f64:	18fb      	adds	r3, r7, r3
 8008f66:	2201      	movs	r2, #1
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e003      	b.n	8008f74 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	225d      	movs	r2, #93	@ 0x5d
 8008f70:	2101      	movs	r1, #1
 8008f72:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	225c      	movs	r2, #92	@ 0x5c
 8008f78:	2100      	movs	r1, #0
 8008f7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008f7c:	2323      	movs	r3, #35	@ 0x23
 8008f7e:	18fb      	adds	r3, r7, r3
 8008f80:	781b      	ldrb	r3, [r3, #0]
}
 8008f82:	0018      	movs	r0, r3
 8008f84:	46bd      	mov	sp, r7
 8008f86:	b00a      	add	sp, #40	@ 0x28
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	ffffefff 	.word	0xffffefff

08008f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	1dfb      	adds	r3, r7, #7
 8008f9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008fa0:	f7fd fcd2 	bl	8006948 <HAL_GetTick>
 8008fa4:	0002      	movs	r2, r0
 8008fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008fb0:	f7fd fcca 	bl	8006948 <HAL_GetTick>
 8008fb4:	0003      	movs	r3, r0
 8008fb6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80090a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	015b      	lsls	r3, r3, #5
 8008fbe:	0d1b      	lsrs	r3, r3, #20
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	4353      	muls	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fc6:	e058      	b.n	800907a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	d055      	beq.n	800907a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fce:	f7fd fcbb 	bl	8006948 <HAL_GetTick>
 8008fd2:	0002      	movs	r2, r0
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d902      	bls.n	8008fe4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d142      	bne.n	800906a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	21e0      	movs	r1, #224	@ 0xe0
 8008ff0:	438a      	bics	r2, r1
 8008ff2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	2382      	movs	r3, #130	@ 0x82
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d113      	bne.n	8009028 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	2380      	movs	r3, #128	@ 0x80
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	429a      	cmp	r2, r3
 800900a:	d005      	beq.n	8009018 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	2380      	movs	r3, #128	@ 0x80
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	429a      	cmp	r2, r3
 8009016:	d107      	bne.n	8009028 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2140      	movs	r1, #64	@ 0x40
 8009024:	438a      	bics	r2, r1
 8009026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800902c:	2380      	movs	r3, #128	@ 0x80
 800902e:	019b      	lsls	r3, r3, #6
 8009030:	429a      	cmp	r2, r3
 8009032:	d110      	bne.n	8009056 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	491a      	ldr	r1, [pc, #104]	@ (80090a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009040:	400a      	ands	r2, r1
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	0189      	lsls	r1, r1, #6
 8009052:	430a      	orrs	r2, r1
 8009054:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	225d      	movs	r2, #93	@ 0x5d
 800905a:	2101      	movs	r1, #1
 800905c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	225c      	movs	r2, #92	@ 0x5c
 8009062:	2100      	movs	r1, #0
 8009064:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e017      	b.n	800909a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3b01      	subs	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	4013      	ands	r3, r2
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	425a      	negs	r2, r3
 800908a:	4153      	adcs	r3, r2
 800908c:	b2db      	uxtb	r3, r3
 800908e:	001a      	movs	r2, r3
 8009090:	1dfb      	adds	r3, r7, #7
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d197      	bne.n	8008fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	0018      	movs	r0, r3
 800909c:	46bd      	mov	sp, r7
 800909e:	b008      	add	sp, #32
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	46c0      	nop			@ (mov r8, r8)
 80090a4:	20000024 	.word	0x20000024
 80090a8:	ffffdfff 	.word	0xffffdfff

080090ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08a      	sub	sp, #40	@ 0x28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80090ba:	2317      	movs	r3, #23
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80090c2:	f7fd fc41 	bl	8006948 <HAL_GetTick>
 80090c6:	0002      	movs	r2, r0
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	18d3      	adds	r3, r2, r3
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80090d2:	f7fd fc39 	bl	8006948 <HAL_GetTick>
 80090d6:	0003      	movs	r3, r0
 80090d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090e2:	4b41      	ldr	r3, [pc, #260]	@ (80091e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	0013      	movs	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	00da      	lsls	r2, r3, #3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	0d1b      	lsrs	r3, r3, #20
 80090f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f4:	4353      	muls	r3, r2
 80090f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80090f8:	e068      	b.n	80091cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	23c0      	movs	r3, #192	@ 0xc0
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	429a      	cmp	r2, r3
 8009102:	d10a      	bne.n	800911a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d107      	bne.n	800911a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	b2da      	uxtb	r2, r3
 8009110:	2117      	movs	r1, #23
 8009112:	187b      	adds	r3, r7, r1
 8009114:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009116:	187b      	adds	r3, r7, r1
 8009118:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	d055      	beq.n	80091cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009120:	f7fd fc12 	bl	8006948 <HAL_GetTick>
 8009124:	0002      	movs	r2, r0
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800912c:	429a      	cmp	r2, r3
 800912e:	d902      	bls.n	8009136 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d142      	bne.n	80091bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	21e0      	movs	r1, #224	@ 0xe0
 8009142:	438a      	bics	r2, r1
 8009144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	2382      	movs	r3, #130	@ 0x82
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	429a      	cmp	r2, r3
 8009150:	d113      	bne.n	800917a <SPI_WaitFifoStateUntilTimeout+0xce>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	2380      	movs	r3, #128	@ 0x80
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	429a      	cmp	r2, r3
 800915c:	d005      	beq.n	800916a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	2380      	movs	r3, #128	@ 0x80
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	429a      	cmp	r2, r3
 8009168:	d107      	bne.n	800917a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2140      	movs	r1, #64	@ 0x40
 8009176:	438a      	bics	r2, r1
 8009178:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800917e:	2380      	movs	r3, #128	@ 0x80
 8009180:	019b      	lsls	r3, r3, #6
 8009182:	429a      	cmp	r2, r3
 8009184:	d110      	bne.n	80091a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4916      	ldr	r1, [pc, #88]	@ (80091ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009192:	400a      	ands	r2, r1
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2180      	movs	r1, #128	@ 0x80
 80091a2:	0189      	lsls	r1, r1, #6
 80091a4:	430a      	orrs	r2, r1
 80091a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	225d      	movs	r2, #93	@ 0x5d
 80091ac:	2101      	movs	r1, #1
 80091ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	225c      	movs	r2, #92	@ 0x5c
 80091b4:	2100      	movs	r1, #0
 80091b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e010      	b.n	80091de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	4013      	ands	r3, r2
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d18e      	bne.n	80090fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	0018      	movs	r0, r3
 80091e0:	46bd      	mov	sp, r7
 80091e2:	b00a      	add	sp, #40	@ 0x28
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	46c0      	nop			@ (mov r8, r8)
 80091e8:	20000024 	.word	0x20000024
 80091ec:	ffffdfff 	.word	0xffffdfff

080091f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	2382      	movs	r3, #130	@ 0x82
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	429a      	cmp	r2, r3
 8009206:	d113      	bne.n	8009230 <SPI_EndRxTransaction+0x40>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	2380      	movs	r3, #128	@ 0x80
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	429a      	cmp	r2, r3
 8009212:	d005      	beq.n	8009220 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	2380      	movs	r3, #128	@ 0x80
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	429a      	cmp	r2, r3
 800921e:	d107      	bne.n	8009230 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2140      	movs	r1, #64	@ 0x40
 800922c:	438a      	bics	r2, r1
 800922e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	0013      	movs	r3, r2
 800923a:	2200      	movs	r2, #0
 800923c:	2180      	movs	r1, #128	@ 0x80
 800923e:	f7ff fea7 	bl	8008f90 <SPI_WaitFlagStateUntilTimeout>
 8009242:	1e03      	subs	r3, r0, #0
 8009244:	d007      	beq.n	8009256 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800924a:	2220      	movs	r2, #32
 800924c:	431a      	orrs	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e026      	b.n	80092a4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	2382      	movs	r3, #130	@ 0x82
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	429a      	cmp	r2, r3
 8009260:	d11f      	bne.n	80092a2 <SPI_EndRxTransaction+0xb2>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	2380      	movs	r3, #128	@ 0x80
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	429a      	cmp	r2, r3
 800926c:	d005      	beq.n	800927a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	2380      	movs	r3, #128	@ 0x80
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	429a      	cmp	r2, r3
 8009278:	d113      	bne.n	80092a2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	23c0      	movs	r3, #192	@ 0xc0
 800927e:	00d9      	lsls	r1, r3, #3
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	0013      	movs	r3, r2
 8009288:	2200      	movs	r2, #0
 800928a:	f7ff ff0f 	bl	80090ac <SPI_WaitFifoStateUntilTimeout>
 800928e:	1e03      	subs	r3, r0, #0
 8009290:	d007      	beq.n	80092a2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009296:	2220      	movs	r2, #32
 8009298:	431a      	orrs	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e000      	b.n	80092a4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	0018      	movs	r0, r3
 80092a6:	46bd      	mov	sp, r7
 80092a8:	b004      	add	sp, #16
 80092aa:	bd80      	pop	{r7, pc}

080092ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	23c0      	movs	r3, #192	@ 0xc0
 80092bc:	0159      	lsls	r1, r3, #5
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	0013      	movs	r3, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	f7ff fef0 	bl	80090ac <SPI_WaitFifoStateUntilTimeout>
 80092cc:	1e03      	subs	r3, r0, #0
 80092ce:	d007      	beq.n	80092e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d4:	2220      	movs	r2, #32
 80092d6:	431a      	orrs	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e027      	b.n	8009330 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	0013      	movs	r3, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	2180      	movs	r1, #128	@ 0x80
 80092ee:	f7ff fe4f 	bl	8008f90 <SPI_WaitFlagStateUntilTimeout>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d007      	beq.n	8009306 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092fa:	2220      	movs	r2, #32
 80092fc:	431a      	orrs	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e014      	b.n	8009330 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	23c0      	movs	r3, #192	@ 0xc0
 800930a:	00d9      	lsls	r1, r3, #3
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	0013      	movs	r3, r2
 8009314:	2200      	movs	r2, #0
 8009316:	f7ff fec9 	bl	80090ac <SPI_WaitFifoStateUntilTimeout>
 800931a:	1e03      	subs	r3, r0, #0
 800931c:	d007      	beq.n	800932e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009322:	2220      	movs	r2, #32
 8009324:	431a      	orrs	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e000      	b.n	8009330 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	0018      	movs	r0, r3
 8009332:	46bd      	mov	sp, r7
 8009334:	b004      	add	sp, #16
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e042      	b.n	80093d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	223d      	movs	r2, #61	@ 0x3d
 800934e:	5c9b      	ldrb	r3, [r3, r2]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d107      	bne.n	8009366 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	223c      	movs	r2, #60	@ 0x3c
 800935a:	2100      	movs	r1, #0
 800935c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	0018      	movs	r0, r3
 8009362:	f7fd f86d 	bl	8006440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	223d      	movs	r2, #61	@ 0x3d
 800936a:	2102      	movs	r1, #2
 800936c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3304      	adds	r3, #4
 8009376:	0019      	movs	r1, r3
 8009378:	0010      	movs	r0, r2
 800937a:	f000 fcd9 	bl	8009d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2246      	movs	r2, #70	@ 0x46
 8009382:	2101      	movs	r1, #1
 8009384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	223e      	movs	r2, #62	@ 0x3e
 800938a:	2101      	movs	r1, #1
 800938c:	5499      	strb	r1, [r3, r2]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	223f      	movs	r2, #63	@ 0x3f
 8009392:	2101      	movs	r1, #1
 8009394:	5499      	strb	r1, [r3, r2]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2240      	movs	r2, #64	@ 0x40
 800939a:	2101      	movs	r1, #1
 800939c:	5499      	strb	r1, [r3, r2]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2241      	movs	r2, #65	@ 0x41
 80093a2:	2101      	movs	r1, #1
 80093a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2242      	movs	r2, #66	@ 0x42
 80093aa:	2101      	movs	r1, #1
 80093ac:	5499      	strb	r1, [r3, r2]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2243      	movs	r2, #67	@ 0x43
 80093b2:	2101      	movs	r1, #1
 80093b4:	5499      	strb	r1, [r3, r2]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2244      	movs	r2, #68	@ 0x44
 80093ba:	2101      	movs	r1, #1
 80093bc:	5499      	strb	r1, [r3, r2]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2245      	movs	r2, #69	@ 0x45
 80093c2:	2101      	movs	r1, #1
 80093c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	223d      	movs	r2, #61	@ 0x3d
 80093ca:	2101      	movs	r1, #1
 80093cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	0018      	movs	r0, r3
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b002      	add	sp, #8
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e042      	b.n	8009470 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	223d      	movs	r2, #61	@ 0x3d
 80093ee:	5c9b      	ldrb	r3, [r3, r2]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d107      	bne.n	8009406 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	223c      	movs	r2, #60	@ 0x3c
 80093fa:	2100      	movs	r1, #0
 80093fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	0018      	movs	r0, r3
 8009402:	f7fc fffd 	bl	8006400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	223d      	movs	r2, #61	@ 0x3d
 800940a:	2102      	movs	r1, #2
 800940c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	0019      	movs	r1, r3
 8009418:	0010      	movs	r0, r2
 800941a:	f000 fc89 	bl	8009d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2246      	movs	r2, #70	@ 0x46
 8009422:	2101      	movs	r1, #1
 8009424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	223e      	movs	r2, #62	@ 0x3e
 800942a:	2101      	movs	r1, #1
 800942c:	5499      	strb	r1, [r3, r2]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	223f      	movs	r2, #63	@ 0x3f
 8009432:	2101      	movs	r1, #1
 8009434:	5499      	strb	r1, [r3, r2]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2240      	movs	r2, #64	@ 0x40
 800943a:	2101      	movs	r1, #1
 800943c:	5499      	strb	r1, [r3, r2]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2241      	movs	r2, #65	@ 0x41
 8009442:	2101      	movs	r1, #1
 8009444:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2242      	movs	r2, #66	@ 0x42
 800944a:	2101      	movs	r1, #1
 800944c:	5499      	strb	r1, [r3, r2]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2243      	movs	r2, #67	@ 0x43
 8009452:	2101      	movs	r1, #1
 8009454:	5499      	strb	r1, [r3, r2]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2244      	movs	r2, #68	@ 0x44
 800945a:	2101      	movs	r1, #1
 800945c:	5499      	strb	r1, [r3, r2]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2245      	movs	r2, #69	@ 0x45
 8009462:	2101      	movs	r1, #1
 8009464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	223d      	movs	r2, #61	@ 0x3d
 800946a:	2101      	movs	r1, #1
 800946c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	0018      	movs	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	b002      	add	sp, #8
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d108      	bne.n	800949a <HAL_TIM_PWM_Start+0x22>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	223e      	movs	r2, #62	@ 0x3e
 800948c:	5c9b      	ldrb	r3, [r3, r2]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	1e5a      	subs	r2, r3, #1
 8009494:	4193      	sbcs	r3, r2
 8009496:	b2db      	uxtb	r3, r3
 8009498:	e01f      	b.n	80094da <HAL_TIM_PWM_Start+0x62>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b04      	cmp	r3, #4
 800949e:	d108      	bne.n	80094b2 <HAL_TIM_PWM_Start+0x3a>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	223f      	movs	r2, #63	@ 0x3f
 80094a4:	5c9b      	ldrb	r3, [r3, r2]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	3b01      	subs	r3, #1
 80094aa:	1e5a      	subs	r2, r3, #1
 80094ac:	4193      	sbcs	r3, r2
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	e013      	b.n	80094da <HAL_TIM_PWM_Start+0x62>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d108      	bne.n	80094ca <HAL_TIM_PWM_Start+0x52>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2240      	movs	r2, #64	@ 0x40
 80094bc:	5c9b      	ldrb	r3, [r3, r2]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	1e5a      	subs	r2, r3, #1
 80094c4:	4193      	sbcs	r3, r2
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	e007      	b.n	80094da <HAL_TIM_PWM_Start+0x62>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2241      	movs	r2, #65	@ 0x41
 80094ce:	5c9b      	ldrb	r3, [r3, r2]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	4193      	sbcs	r3, r2
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e074      	b.n	80095cc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <HAL_TIM_PWM_Start+0x7a>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	223e      	movs	r2, #62	@ 0x3e
 80094ec:	2102      	movs	r1, #2
 80094ee:	5499      	strb	r1, [r3, r2]
 80094f0:	e013      	b.n	800951a <HAL_TIM_PWM_Start+0xa2>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d104      	bne.n	8009502 <HAL_TIM_PWM_Start+0x8a>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	223f      	movs	r2, #63	@ 0x3f
 80094fc:	2102      	movs	r1, #2
 80094fe:	5499      	strb	r1, [r3, r2]
 8009500:	e00b      	b.n	800951a <HAL_TIM_PWM_Start+0xa2>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b08      	cmp	r3, #8
 8009506:	d104      	bne.n	8009512 <HAL_TIM_PWM_Start+0x9a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2240      	movs	r2, #64	@ 0x40
 800950c:	2102      	movs	r1, #2
 800950e:	5499      	strb	r1, [r3, r2]
 8009510:	e003      	b.n	800951a <HAL_TIM_PWM_Start+0xa2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2241      	movs	r2, #65	@ 0x41
 8009516:	2102      	movs	r1, #2
 8009518:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	2201      	movs	r2, #1
 8009522:	0018      	movs	r0, r3
 8009524:	f001 f84c 	bl	800a5c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a29      	ldr	r2, [pc, #164]	@ (80095d4 <HAL_TIM_PWM_Start+0x15c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00e      	beq.n	8009550 <HAL_TIM_PWM_Start+0xd8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a28      	ldr	r2, [pc, #160]	@ (80095d8 <HAL_TIM_PWM_Start+0x160>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d009      	beq.n	8009550 <HAL_TIM_PWM_Start+0xd8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a26      	ldr	r2, [pc, #152]	@ (80095dc <HAL_TIM_PWM_Start+0x164>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d004      	beq.n	8009550 <HAL_TIM_PWM_Start+0xd8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a25      	ldr	r2, [pc, #148]	@ (80095e0 <HAL_TIM_PWM_Start+0x168>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d101      	bne.n	8009554 <HAL_TIM_PWM_Start+0xdc>
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <HAL_TIM_PWM_Start+0xde>
 8009554:	2300      	movs	r3, #0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d008      	beq.n	800956c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2180      	movs	r1, #128	@ 0x80
 8009566:	0209      	lsls	r1, r1, #8
 8009568:	430a      	orrs	r2, r1
 800956a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a18      	ldr	r2, [pc, #96]	@ (80095d4 <HAL_TIM_PWM_Start+0x15c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <HAL_TIM_PWM_Start+0x11e>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	2380      	movs	r3, #128	@ 0x80
 800957c:	05db      	lsls	r3, r3, #23
 800957e:	429a      	cmp	r2, r3
 8009580:	d009      	beq.n	8009596 <HAL_TIM_PWM_Start+0x11e>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a17      	ldr	r2, [pc, #92]	@ (80095e4 <HAL_TIM_PWM_Start+0x16c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d004      	beq.n	8009596 <HAL_TIM_PWM_Start+0x11e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a11      	ldr	r2, [pc, #68]	@ (80095d8 <HAL_TIM_PWM_Start+0x160>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d111      	bne.n	80095ba <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2207      	movs	r2, #7
 800959e:	4013      	ands	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b06      	cmp	r3, #6
 80095a6:	d010      	beq.n	80095ca <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2101      	movs	r1, #1
 80095b4:	430a      	orrs	r2, r1
 80095b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b8:	e007      	b.n	80095ca <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2101      	movs	r1, #1
 80095c6:	430a      	orrs	r2, r1
 80095c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	0018      	movs	r0, r3
 80095ce:	46bd      	mov	sp, r7
 80095d0:	b004      	add	sp, #16
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	40012c00 	.word	0x40012c00
 80095d8:	40014000 	.word	0x40014000
 80095dc:	40014400 	.word	0x40014400
 80095e0:	40014800 	.word	0x40014800
 80095e4:	40000400 	.word	0x40000400

080095e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e042      	b.n	8009680 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	223d      	movs	r2, #61	@ 0x3d
 80095fe:	5c9b      	ldrb	r3, [r3, r2]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d107      	bne.n	8009616 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	223c      	movs	r2, #60	@ 0x3c
 800960a:	2100      	movs	r1, #0
 800960c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	0018      	movs	r0, r3
 8009612:	f000 f839 	bl	8009688 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	223d      	movs	r2, #61	@ 0x3d
 800961a:	2102      	movs	r1, #2
 800961c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3304      	adds	r3, #4
 8009626:	0019      	movs	r1, r3
 8009628:	0010      	movs	r0, r2
 800962a:	f000 fb81 	bl	8009d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2246      	movs	r2, #70	@ 0x46
 8009632:	2101      	movs	r1, #1
 8009634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	223e      	movs	r2, #62	@ 0x3e
 800963a:	2101      	movs	r1, #1
 800963c:	5499      	strb	r1, [r3, r2]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	223f      	movs	r2, #63	@ 0x3f
 8009642:	2101      	movs	r1, #1
 8009644:	5499      	strb	r1, [r3, r2]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2240      	movs	r2, #64	@ 0x40
 800964a:	2101      	movs	r1, #1
 800964c:	5499      	strb	r1, [r3, r2]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2241      	movs	r2, #65	@ 0x41
 8009652:	2101      	movs	r1, #1
 8009654:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2242      	movs	r2, #66	@ 0x42
 800965a:	2101      	movs	r1, #1
 800965c:	5499      	strb	r1, [r3, r2]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2243      	movs	r2, #67	@ 0x43
 8009662:	2101      	movs	r1, #1
 8009664:	5499      	strb	r1, [r3, r2]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2244      	movs	r2, #68	@ 0x44
 800966a:	2101      	movs	r1, #1
 800966c:	5499      	strb	r1, [r3, r2]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2245      	movs	r2, #69	@ 0x45
 8009672:	2101      	movs	r1, #1
 8009674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	223d      	movs	r2, #61	@ 0x3d
 800967a:	2101      	movs	r1, #1
 800967c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b002      	add	sp, #8
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009690:	46c0      	nop			@ (mov r8, r8)
 8009692:	46bd      	mov	sp, r7
 8009694:	b002      	add	sp, #8
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2202      	movs	r2, #2
 80096b4:	4013      	ands	r3, r2
 80096b6:	d021      	beq.n	80096fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2202      	movs	r2, #2
 80096bc:	4013      	ands	r3, r2
 80096be:	d01d      	beq.n	80096fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2203      	movs	r2, #3
 80096c6:	4252      	negs	r2, r2
 80096c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	2203      	movs	r2, #3
 80096d8:	4013      	ands	r3, r2
 80096da:	d004      	beq.n	80096e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	0018      	movs	r0, r3
 80096e0:	f7fc fc98 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 80096e4:	e007      	b.n	80096f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	0018      	movs	r0, r3
 80096ea:	f000 fb09 	bl	8009d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	0018      	movs	r0, r3
 80096f2:	f000 fb0d 	bl	8009d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2204      	movs	r2, #4
 8009700:	4013      	ands	r3, r2
 8009702:	d022      	beq.n	800974a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2204      	movs	r2, #4
 8009708:	4013      	ands	r3, r2
 800970a:	d01e      	beq.n	800974a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2205      	movs	r2, #5
 8009712:	4252      	negs	r2, r2
 8009714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2202      	movs	r2, #2
 800971a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	699a      	ldr	r2, [r3, #24]
 8009722:	23c0      	movs	r3, #192	@ 0xc0
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4013      	ands	r3, r2
 8009728:	d004      	beq.n	8009734 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	0018      	movs	r0, r3
 800972e:	f7fc fc71 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 8009732:	e007      	b.n	8009744 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	0018      	movs	r0, r3
 8009738:	f000 fae2 	bl	8009d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	0018      	movs	r0, r3
 8009740:	f000 fae6 	bl	8009d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	2208      	movs	r2, #8
 800974e:	4013      	ands	r3, r2
 8009750:	d021      	beq.n	8009796 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2208      	movs	r2, #8
 8009756:	4013      	ands	r3, r2
 8009758:	d01d      	beq.n	8009796 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2209      	movs	r2, #9
 8009760:	4252      	negs	r2, r2
 8009762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2204      	movs	r2, #4
 8009768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	2203      	movs	r2, #3
 8009772:	4013      	ands	r3, r2
 8009774:	d004      	beq.n	8009780 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	0018      	movs	r0, r3
 800977a:	f7fc fc4b 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 800977e:	e007      	b.n	8009790 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	0018      	movs	r0, r3
 8009784:	f000 fabc 	bl	8009d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	0018      	movs	r0, r3
 800978c:	f000 fac0 	bl	8009d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2210      	movs	r2, #16
 800979a:	4013      	ands	r3, r2
 800979c:	d022      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2210      	movs	r2, #16
 80097a2:	4013      	ands	r3, r2
 80097a4:	d01e      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2211      	movs	r2, #17
 80097ac:	4252      	negs	r2, r2
 80097ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2208      	movs	r2, #8
 80097b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	23c0      	movs	r3, #192	@ 0xc0
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4013      	ands	r3, r2
 80097c2:	d004      	beq.n	80097ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	0018      	movs	r0, r3
 80097c8:	f7fc fc24 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 80097cc:	e007      	b.n	80097de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f000 fa95 	bl	8009d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	0018      	movs	r0, r3
 80097da:	f000 fa99 	bl	8009d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2201      	movs	r2, #1
 80097e8:	4013      	ands	r3, r2
 80097ea:	d00c      	beq.n	8009806 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	4013      	ands	r3, r2
 80097f2:	d008      	beq.n	8009806 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2202      	movs	r2, #2
 80097fa:	4252      	negs	r2, r2
 80097fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	0018      	movs	r0, r3
 8009802:	f000 fa75 	bl	8009cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2280      	movs	r2, #128	@ 0x80
 800980a:	4013      	ands	r3, r2
 800980c:	d00c      	beq.n	8009828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2280      	movs	r2, #128	@ 0x80
 8009812:	4013      	ands	r3, r2
 8009814:	d008      	beq.n	8009828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2281      	movs	r2, #129	@ 0x81
 800981c:	4252      	negs	r2, r2
 800981e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	0018      	movs	r0, r3
 8009824:	f000 ffb4 	bl	800a790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2240      	movs	r2, #64	@ 0x40
 800982c:	4013      	ands	r3, r2
 800982e:	d00c      	beq.n	800984a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2240      	movs	r2, #64	@ 0x40
 8009834:	4013      	ands	r3, r2
 8009836:	d008      	beq.n	800984a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2241      	movs	r2, #65	@ 0x41
 800983e:	4252      	negs	r2, r2
 8009840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	0018      	movs	r0, r3
 8009846:	f000 fa6b 	bl	8009d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2220      	movs	r2, #32
 800984e:	4013      	ands	r3, r2
 8009850:	d00c      	beq.n	800986c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2220      	movs	r2, #32
 8009856:	4013      	ands	r3, r2
 8009858:	d008      	beq.n	800986c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2221      	movs	r2, #33	@ 0x21
 8009860:	4252      	negs	r2, r2
 8009862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	0018      	movs	r0, r3
 8009868:	f000 ff8a 	bl	800a780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800986c:	46c0      	nop			@ (mov r8, r8)
 800986e:	46bd      	mov	sp, r7
 8009870:	b004      	add	sp, #16
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009880:	2317      	movs	r3, #23
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	2200      	movs	r2, #0
 8009886:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	223c      	movs	r2, #60	@ 0x3c
 800988c:	5c9b      	ldrb	r3, [r3, r2]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d101      	bne.n	8009896 <HAL_TIM_IC_ConfigChannel+0x22>
 8009892:	2302      	movs	r3, #2
 8009894:	e08c      	b.n	80099b0 <HAL_TIM_IC_ConfigChannel+0x13c>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	223c      	movs	r2, #60	@ 0x3c
 800989a:	2101      	movs	r1, #1
 800989c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11b      	bne.n	80098dc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80098b4:	f000 fcc6 	bl	800a244 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699a      	ldr	r2, [r3, #24]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	210c      	movs	r1, #12
 80098c4:	438a      	bics	r2, r1
 80098c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6999      	ldr	r1, [r3, #24]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	689a      	ldr	r2, [r3, #8]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	619a      	str	r2, [r3, #24]
 80098da:	e062      	b.n	80099a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b04      	cmp	r3, #4
 80098e0:	d11c      	bne.n	800991c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80098f2:	f000 fd31 	bl	800a358 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	699a      	ldr	r2, [r3, #24]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	492d      	ldr	r1, [pc, #180]	@ (80099b8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009902:	400a      	ands	r2, r1
 8009904:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6999      	ldr	r1, [r3, #24]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	021a      	lsls	r2, r3, #8
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	619a      	str	r2, [r3, #24]
 800991a:	e042      	b.n	80099a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b08      	cmp	r3, #8
 8009920:	d11b      	bne.n	800995a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009932:	f000 fd85 	bl	800a440 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	210c      	movs	r1, #12
 8009942:	438a      	bics	r2, r1
 8009944:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69d9      	ldr	r1, [r3, #28]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	430a      	orrs	r2, r1
 8009956:	61da      	str	r2, [r3, #28]
 8009958:	e023      	b.n	80099a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b0c      	cmp	r3, #12
 800995e:	d11c      	bne.n	800999a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009970:	f000 fda6 	bl	800a4c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69da      	ldr	r2, [r3, #28]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	490e      	ldr	r1, [pc, #56]	@ (80099b8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009980:	400a      	ands	r2, r1
 8009982:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	69d9      	ldr	r1, [r3, #28]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	021a      	lsls	r2, r3, #8
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	61da      	str	r2, [r3, #28]
 8009998:	e003      	b.n	80099a2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800999a:	2317      	movs	r3, #23
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	2201      	movs	r2, #1
 80099a0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	223c      	movs	r2, #60	@ 0x3c
 80099a6:	2100      	movs	r1, #0
 80099a8:	5499      	strb	r1, [r3, r2]

  return status;
 80099aa:	2317      	movs	r3, #23
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	781b      	ldrb	r3, [r3, #0]
}
 80099b0:	0018      	movs	r0, r3
 80099b2:	46bd      	mov	sp, r7
 80099b4:	b006      	add	sp, #24
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	fffff3ff 	.word	0xfffff3ff

080099bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c8:	2317      	movs	r3, #23
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	2200      	movs	r2, #0
 80099ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	223c      	movs	r2, #60	@ 0x3c
 80099d4:	5c9b      	ldrb	r3, [r3, r2]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d101      	bne.n	80099de <HAL_TIM_PWM_ConfigChannel+0x22>
 80099da:	2302      	movs	r3, #2
 80099dc:	e0ad      	b.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	223c      	movs	r2, #60	@ 0x3c
 80099e2:	2101      	movs	r1, #1
 80099e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b0c      	cmp	r3, #12
 80099ea:	d100      	bne.n	80099ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80099ec:	e076      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x120>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b0c      	cmp	r3, #12
 80099f2:	d900      	bls.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80099f4:	e095      	b.n	8009b22 <HAL_TIM_PWM_ConfigChannel+0x166>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d04e      	beq.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0xde>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	d900      	bls.n	8009a04 <HAL_TIM_PWM_ConfigChannel+0x48>
 8009a02:	e08e      	b.n	8009b22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_TIM_PWM_ConfigChannel+0x56>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d021      	beq.n	8009a54 <HAL_TIM_PWM_ConfigChannel+0x98>
 8009a10:	e087      	b.n	8009b22 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	0011      	movs	r1, r2
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f000 fa16 	bl	8009e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2108      	movs	r1, #8
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699a      	ldr	r2, [r3, #24]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2104      	movs	r1, #4
 8009a3c:	438a      	bics	r2, r1
 8009a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6999      	ldr	r1, [r3, #24]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	691a      	ldr	r2, [r3, #16]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	619a      	str	r2, [r3, #24]
      break;
 8009a52:	e06b      	b.n	8009b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	0011      	movs	r1, r2
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f000 fa7d 	bl	8009f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2180      	movs	r1, #128	@ 0x80
 8009a6e:	0109      	lsls	r1, r1, #4
 8009a70:	430a      	orrs	r2, r1
 8009a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699a      	ldr	r2, [r3, #24]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4931      	ldr	r1, [pc, #196]	@ (8009b44 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009a80:	400a      	ands	r2, r1
 8009a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6999      	ldr	r1, [r3, #24]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	021a      	lsls	r2, r3, #8
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	430a      	orrs	r2, r1
 8009a96:	619a      	str	r2, [r3, #24]
      break;
 8009a98:	e048      	b.n	8009b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	0011      	movs	r1, r2
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f000 fade 	bl	800a064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69da      	ldr	r2, [r3, #28]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2108      	movs	r1, #8
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69da      	ldr	r2, [r3, #28]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2104      	movs	r1, #4
 8009ac4:	438a      	bics	r2, r1
 8009ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69d9      	ldr	r1, [r3, #28]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	691a      	ldr	r2, [r3, #16]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	61da      	str	r2, [r3, #28]
      break;
 8009ada:	e027      	b.n	8009b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	0011      	movs	r1, r2
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 fb43 	bl	800a170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69da      	ldr	r2, [r3, #28]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2180      	movs	r1, #128	@ 0x80
 8009af6:	0109      	lsls	r1, r1, #4
 8009af8:	430a      	orrs	r2, r1
 8009afa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69da      	ldr	r2, [r3, #28]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	490f      	ldr	r1, [pc, #60]	@ (8009b44 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009b08:	400a      	ands	r2, r1
 8009b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69d9      	ldr	r1, [r3, #28]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	021a      	lsls	r2, r3, #8
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	61da      	str	r2, [r3, #28]
      break;
 8009b20:	e004      	b.n	8009b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8009b22:	2317      	movs	r3, #23
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	2201      	movs	r2, #1
 8009b28:	701a      	strb	r2, [r3, #0]
      break;
 8009b2a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	223c      	movs	r2, #60	@ 0x3c
 8009b30:	2100      	movs	r1, #0
 8009b32:	5499      	strb	r1, [r3, r2]

  return status;
 8009b34:	2317      	movs	r3, #23
 8009b36:	18fb      	adds	r3, r7, r3
 8009b38:	781b      	ldrb	r3, [r3, #0]
}
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	b006      	add	sp, #24
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	46c0      	nop			@ (mov r8, r8)
 8009b44:	fffffbff 	.word	0xfffffbff

08009b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b52:	230f      	movs	r3, #15
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	223c      	movs	r2, #60	@ 0x3c
 8009b5e:	5c9b      	ldrb	r3, [r3, r2]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_TIM_ConfigClockSource+0x20>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e0bc      	b.n	8009ce2 <HAL_TIM_ConfigClockSource+0x19a>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	223c      	movs	r2, #60	@ 0x3c
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	223d      	movs	r2, #61	@ 0x3d
 8009b74:	2102      	movs	r1, #2
 8009b76:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2277      	movs	r2, #119	@ 0x77
 8009b84:	4393      	bics	r3, r2
 8009b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a58      	ldr	r2, [pc, #352]	@ (8009cec <HAL_TIM_ConfigClockSource+0x1a4>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2280      	movs	r2, #128	@ 0x80
 8009b9e:	0192      	lsls	r2, r2, #6
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d040      	beq.n	8009c26 <HAL_TIM_ConfigClockSource+0xde>
 8009ba4:	2280      	movs	r2, #128	@ 0x80
 8009ba6:	0192      	lsls	r2, r2, #6
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d900      	bls.n	8009bae <HAL_TIM_ConfigClockSource+0x66>
 8009bac:	e088      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009bae:	2280      	movs	r2, #128	@ 0x80
 8009bb0:	0152      	lsls	r2, r2, #5
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d100      	bne.n	8009bb8 <HAL_TIM_ConfigClockSource+0x70>
 8009bb6:	e088      	b.n	8009cca <HAL_TIM_ConfigClockSource+0x182>
 8009bb8:	2280      	movs	r2, #128	@ 0x80
 8009bba:	0152      	lsls	r2, r2, #5
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d900      	bls.n	8009bc2 <HAL_TIM_ConfigClockSource+0x7a>
 8009bc0:	e07e      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009bc2:	2b70      	cmp	r3, #112	@ 0x70
 8009bc4:	d018      	beq.n	8009bf8 <HAL_TIM_ConfigClockSource+0xb0>
 8009bc6:	d900      	bls.n	8009bca <HAL_TIM_ConfigClockSource+0x82>
 8009bc8:	e07a      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009bca:	2b60      	cmp	r3, #96	@ 0x60
 8009bcc:	d04f      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x126>
 8009bce:	d900      	bls.n	8009bd2 <HAL_TIM_ConfigClockSource+0x8a>
 8009bd0:	e076      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009bd2:	2b50      	cmp	r3, #80	@ 0x50
 8009bd4:	d03b      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x106>
 8009bd6:	d900      	bls.n	8009bda <HAL_TIM_ConfigClockSource+0x92>
 8009bd8:	e072      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009bda:	2b40      	cmp	r3, #64	@ 0x40
 8009bdc:	d057      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x146>
 8009bde:	d900      	bls.n	8009be2 <HAL_TIM_ConfigClockSource+0x9a>
 8009be0:	e06e      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009be2:	2b30      	cmp	r3, #48	@ 0x30
 8009be4:	d063      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x166>
 8009be6:	d86b      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d060      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x166>
 8009bec:	d868      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d05d      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x166>
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	d05b      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x166>
 8009bf6:	e063      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c08:	f000 fcba 	bl	800a580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2277      	movs	r2, #119	@ 0x77
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	609a      	str	r2, [r3, #8]
      break;
 8009c24:	e052      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c36:	f000 fca3 	bl	800a580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2180      	movs	r1, #128	@ 0x80
 8009c46:	01c9      	lsls	r1, r1, #7
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	609a      	str	r2, [r3, #8]
      break;
 8009c4c:	e03e      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	f000 fb4e 	bl	800a2fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2150      	movs	r1, #80	@ 0x50
 8009c66:	0018      	movs	r0, r3
 8009c68:	f000 fc70 	bl	800a54c <TIM_ITRx_SetConfig>
      break;
 8009c6c:	e02e      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	f000 fbae 	bl	800a3dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2160      	movs	r1, #96	@ 0x60
 8009c86:	0018      	movs	r0, r3
 8009c88:	f000 fc60 	bl	800a54c <TIM_ITRx_SetConfig>
      break;
 8009c8c:	e01e      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c9a:	001a      	movs	r2, r3
 8009c9c:	f000 fb2e 	bl	800a2fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2140      	movs	r1, #64	@ 0x40
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f000 fc50 	bl	800a54c <TIM_ITRx_SetConfig>
      break;
 8009cac:	e00e      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	0019      	movs	r1, r3
 8009cb8:	0010      	movs	r0, r2
 8009cba:	f000 fc47 	bl	800a54c <TIM_ITRx_SetConfig>
      break;
 8009cbe:	e005      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009cc0:	230f      	movs	r3, #15
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	701a      	strb	r2, [r3, #0]
      break;
 8009cc8:	e000      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8009cca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	223d      	movs	r2, #61	@ 0x3d
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	223c      	movs	r2, #60	@ 0x3c
 8009cd8:	2100      	movs	r1, #0
 8009cda:	5499      	strb	r1, [r3, r2]

  return status;
 8009cdc:	230f      	movs	r3, #15
 8009cde:	18fb      	adds	r3, r7, r3
 8009ce0:	781b      	ldrb	r3, [r3, #0]
}
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b004      	add	sp, #16
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	ffff00ff 	.word	0xffff00ff

08009cf0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009cf8:	46c0      	nop			@ (mov r8, r8)
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d08:	46c0      	nop			@ (mov r8, r8)
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	b002      	add	sp, #8
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d18:	46c0      	nop			@ (mov r8, r8)
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	b002      	add	sp, #8
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d28:	46c0      	nop			@ (mov r8, r8)
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b002      	add	sp, #8
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a3b      	ldr	r2, [pc, #236]	@ (8009e30 <TIM_Base_SetConfig+0x100>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d008      	beq.n	8009d5a <TIM_Base_SetConfig+0x2a>
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	2380      	movs	r3, #128	@ 0x80
 8009d4c:	05db      	lsls	r3, r3, #23
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d003      	beq.n	8009d5a <TIM_Base_SetConfig+0x2a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a37      	ldr	r2, [pc, #220]	@ (8009e34 <TIM_Base_SetConfig+0x104>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d108      	bne.n	8009d6c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2270      	movs	r2, #112	@ 0x70
 8009d5e:	4393      	bics	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a30      	ldr	r2, [pc, #192]	@ (8009e30 <TIM_Base_SetConfig+0x100>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d018      	beq.n	8009da6 <TIM_Base_SetConfig+0x76>
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	2380      	movs	r3, #128	@ 0x80
 8009d78:	05db      	lsls	r3, r3, #23
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d013      	beq.n	8009da6 <TIM_Base_SetConfig+0x76>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2c      	ldr	r2, [pc, #176]	@ (8009e34 <TIM_Base_SetConfig+0x104>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00f      	beq.n	8009da6 <TIM_Base_SetConfig+0x76>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a2b      	ldr	r2, [pc, #172]	@ (8009e38 <TIM_Base_SetConfig+0x108>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d00b      	beq.n	8009da6 <TIM_Base_SetConfig+0x76>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a2a      	ldr	r2, [pc, #168]	@ (8009e3c <TIM_Base_SetConfig+0x10c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d007      	beq.n	8009da6 <TIM_Base_SetConfig+0x76>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a29      	ldr	r2, [pc, #164]	@ (8009e40 <TIM_Base_SetConfig+0x110>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d003      	beq.n	8009da6 <TIM_Base_SetConfig+0x76>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a28      	ldr	r2, [pc, #160]	@ (8009e44 <TIM_Base_SetConfig+0x114>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d108      	bne.n	8009db8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4a27      	ldr	r2, [pc, #156]	@ (8009e48 <TIM_Base_SetConfig+0x118>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2280      	movs	r2, #128	@ 0x80
 8009dbc:	4393      	bics	r3, r2
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	689a      	ldr	r2, [r3, #8]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a13      	ldr	r2, [pc, #76]	@ (8009e30 <TIM_Base_SetConfig+0x100>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00b      	beq.n	8009dfe <TIM_Base_SetConfig+0xce>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a14      	ldr	r2, [pc, #80]	@ (8009e3c <TIM_Base_SetConfig+0x10c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d007      	beq.n	8009dfe <TIM_Base_SetConfig+0xce>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a13      	ldr	r2, [pc, #76]	@ (8009e40 <TIM_Base_SetConfig+0x110>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_Base_SetConfig+0xce>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a12      	ldr	r2, [pc, #72]	@ (8009e44 <TIM_Base_SetConfig+0x114>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d103      	bne.n	8009e06 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	2201      	movs	r2, #1
 8009e12:	4013      	ands	r3, r2
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d106      	bne.n	8009e26 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	4393      	bics	r3, r2
 8009e20:	001a      	movs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	611a      	str	r2, [r3, #16]
  }
}
 8009e26:	46c0      	nop			@ (mov r8, r8)
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	b004      	add	sp, #16
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	46c0      	nop			@ (mov r8, r8)
 8009e30:	40012c00 	.word	0x40012c00
 8009e34:	40000400 	.word	0x40000400
 8009e38:	40002000 	.word	0x40002000
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	fffffcff 	.word	0xfffffcff

08009e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	2201      	movs	r2, #1
 8009e62:	4393      	bics	r3, r2
 8009e64:	001a      	movs	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2270      	movs	r2, #112	@ 0x70
 8009e7a:	4393      	bics	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2203      	movs	r2, #3
 8009e82:	4393      	bics	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2202      	movs	r2, #2
 8009e94:	4393      	bics	r3, r2
 8009e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a27      	ldr	r2, [pc, #156]	@ (8009f44 <TIM_OC1_SetConfig+0xf8>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00b      	beq.n	8009ec2 <TIM_OC1_SetConfig+0x76>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a26      	ldr	r2, [pc, #152]	@ (8009f48 <TIM_OC1_SetConfig+0xfc>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d007      	beq.n	8009ec2 <TIM_OC1_SetConfig+0x76>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a25      	ldr	r2, [pc, #148]	@ (8009f4c <TIM_OC1_SetConfig+0x100>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d003      	beq.n	8009ec2 <TIM_OC1_SetConfig+0x76>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a24      	ldr	r2, [pc, #144]	@ (8009f50 <TIM_OC1_SetConfig+0x104>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d10c      	bne.n	8009edc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	4393      	bics	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	4393      	bics	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <TIM_OC1_SetConfig+0xf8>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00b      	beq.n	8009efc <TIM_OC1_SetConfig+0xb0>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	@ (8009f48 <TIM_OC1_SetConfig+0xfc>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d007      	beq.n	8009efc <TIM_OC1_SetConfig+0xb0>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a17      	ldr	r2, [pc, #92]	@ (8009f4c <TIM_OC1_SetConfig+0x100>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d003      	beq.n	8009efc <TIM_OC1_SetConfig+0xb0>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a16      	ldr	r2, [pc, #88]	@ (8009f50 <TIM_OC1_SetConfig+0x104>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d111      	bne.n	8009f20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	4a15      	ldr	r2, [pc, #84]	@ (8009f54 <TIM_OC1_SetConfig+0x108>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	4a14      	ldr	r2, [pc, #80]	@ (8009f58 <TIM_OC1_SetConfig+0x10c>)
 8009f08:	4013      	ands	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	b006      	add	sp, #24
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	46c0      	nop			@ (mov r8, r8)
 8009f44:	40012c00 	.word	0x40012c00
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800
 8009f54:	fffffeff 	.word	0xfffffeff
 8009f58:	fffffdff 	.word	0xfffffdff

08009f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	2210      	movs	r2, #16
 8009f72:	4393      	bics	r3, r2
 8009f74:	001a      	movs	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4a2e      	ldr	r2, [pc, #184]	@ (800a044 <TIM_OC2_SetConfig+0xe8>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4a2d      	ldr	r2, [pc, #180]	@ (800a048 <TIM_OC2_SetConfig+0xec>)
 8009f92:	4013      	ands	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	021b      	lsls	r3, r3, #8
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	4393      	bics	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a24      	ldr	r2, [pc, #144]	@ (800a04c <TIM_OC2_SetConfig+0xf0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d10d      	bne.n	8009fda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2280      	movs	r2, #128	@ 0x80
 8009fc2:	4393      	bics	r3, r2
 8009fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2240      	movs	r2, #64	@ 0x40
 8009fd6:	4393      	bics	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800a04c <TIM_OC2_SetConfig+0xf0>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00b      	beq.n	8009ffa <TIM_OC2_SetConfig+0x9e>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a1a      	ldr	r2, [pc, #104]	@ (800a050 <TIM_OC2_SetConfig+0xf4>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d007      	beq.n	8009ffa <TIM_OC2_SetConfig+0x9e>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a19      	ldr	r2, [pc, #100]	@ (800a054 <TIM_OC2_SetConfig+0xf8>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC2_SetConfig+0x9e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a18      	ldr	r2, [pc, #96]	@ (800a058 <TIM_OC2_SetConfig+0xfc>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d113      	bne.n	800a022 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	4a17      	ldr	r2, [pc, #92]	@ (800a05c <TIM_OC2_SetConfig+0x100>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	4a16      	ldr	r2, [pc, #88]	@ (800a060 <TIM_OC2_SetConfig+0x104>)
 800a006:	4013      	ands	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	621a      	str	r2, [r3, #32]
}
 800a03c:	46c0      	nop			@ (mov r8, r8)
 800a03e:	46bd      	mov	sp, r7
 800a040:	b006      	add	sp, #24
 800a042:	bd80      	pop	{r7, pc}
 800a044:	ffff8fff 	.word	0xffff8fff
 800a048:	fffffcff 	.word	0xfffffcff
 800a04c:	40012c00 	.word	0x40012c00
 800a050:	40014000 	.word	0x40014000
 800a054:	40014400 	.word	0x40014400
 800a058:	40014800 	.word	0x40014800
 800a05c:	fffffbff 	.word	0xfffffbff
 800a060:	fffff7ff 	.word	0xfffff7ff

0800a064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	4a33      	ldr	r2, [pc, #204]	@ (800a148 <TIM_OC3_SetConfig+0xe4>)
 800a07a:	401a      	ands	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2270      	movs	r2, #112	@ 0x70
 800a090:	4393      	bics	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2203      	movs	r2, #3
 800a098:	4393      	bics	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	4a28      	ldr	r2, [pc, #160]	@ (800a14c <TIM_OC3_SetConfig+0xe8>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a24      	ldr	r2, [pc, #144]	@ (800a150 <TIM_OC3_SetConfig+0xec>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d10d      	bne.n	800a0de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	4a23      	ldr	r2, [pc, #140]	@ (800a154 <TIM_OC3_SetConfig+0xf0>)
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	4a1f      	ldr	r2, [pc, #124]	@ (800a158 <TIM_OC3_SetConfig+0xf4>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a150 <TIM_OC3_SetConfig+0xec>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00b      	beq.n	800a0fe <TIM_OC3_SetConfig+0x9a>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a1c      	ldr	r2, [pc, #112]	@ (800a15c <TIM_OC3_SetConfig+0xf8>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d007      	beq.n	800a0fe <TIM_OC3_SetConfig+0x9a>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a160 <TIM_OC3_SetConfig+0xfc>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d003      	beq.n	800a0fe <TIM_OC3_SetConfig+0x9a>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a1a      	ldr	r2, [pc, #104]	@ (800a164 <TIM_OC3_SetConfig+0x100>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d113      	bne.n	800a126 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	4a19      	ldr	r2, [pc, #100]	@ (800a168 <TIM_OC3_SetConfig+0x104>)
 800a102:	4013      	ands	r3, r2
 800a104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	4a18      	ldr	r2, [pc, #96]	@ (800a16c <TIM_OC3_SetConfig+0x108>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	011b      	lsls	r3, r3, #4
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	4313      	orrs	r3, r2
 800a124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	621a      	str	r2, [r3, #32]
}
 800a140:	46c0      	nop			@ (mov r8, r8)
 800a142:	46bd      	mov	sp, r7
 800a144:	b006      	add	sp, #24
 800a146:	bd80      	pop	{r7, pc}
 800a148:	fffffeff 	.word	0xfffffeff
 800a14c:	fffffdff 	.word	0xfffffdff
 800a150:	40012c00 	.word	0x40012c00
 800a154:	fffff7ff 	.word	0xfffff7ff
 800a158:	fffffbff 	.word	0xfffffbff
 800a15c:	40014000 	.word	0x40014000
 800a160:	40014400 	.word	0x40014400
 800a164:	40014800 	.word	0x40014800
 800a168:	ffffefff 	.word	0xffffefff
 800a16c:	ffffdfff 	.word	0xffffdfff

0800a170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	4a26      	ldr	r2, [pc, #152]	@ (800a220 <TIM_OC4_SetConfig+0xb0>)
 800a186:	401a      	ands	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4a22      	ldr	r2, [pc, #136]	@ (800a224 <TIM_OC4_SetConfig+0xb4>)
 800a19c:	4013      	ands	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4a21      	ldr	r2, [pc, #132]	@ (800a228 <TIM_OC4_SetConfig+0xb8>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	021b      	lsls	r3, r3, #8
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a22c <TIM_OC4_SetConfig+0xbc>)
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	031b      	lsls	r3, r3, #12
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a19      	ldr	r2, [pc, #100]	@ (800a230 <TIM_OC4_SetConfig+0xc0>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00b      	beq.n	800a1e8 <TIM_OC4_SetConfig+0x78>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a18      	ldr	r2, [pc, #96]	@ (800a234 <TIM_OC4_SetConfig+0xc4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d007      	beq.n	800a1e8 <TIM_OC4_SetConfig+0x78>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a17      	ldr	r2, [pc, #92]	@ (800a238 <TIM_OC4_SetConfig+0xc8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d003      	beq.n	800a1e8 <TIM_OC4_SetConfig+0x78>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a16      	ldr	r2, [pc, #88]	@ (800a23c <TIM_OC4_SetConfig+0xcc>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d109      	bne.n	800a1fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	4a15      	ldr	r2, [pc, #84]	@ (800a240 <TIM_OC4_SetConfig+0xd0>)
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	019b      	lsls	r3, r3, #6
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	46c0      	nop			@ (mov r8, r8)
 800a218:	46bd      	mov	sp, r7
 800a21a:	b006      	add	sp, #24
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	46c0      	nop			@ (mov r8, r8)
 800a220:	ffffefff 	.word	0xffffefff
 800a224:	ffff8fff 	.word	0xffff8fff
 800a228:	fffffcff 	.word	0xfffffcff
 800a22c:	ffffdfff 	.word	0xffffdfff
 800a230:	40012c00 	.word	0x40012c00
 800a234:	40014000 	.word	0x40014000
 800a238:	40014400 	.word	0x40014400
 800a23c:	40014800 	.word	0x40014800
 800a240:	ffffbfff 	.word	0xffffbfff

0800a244 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	2201      	movs	r2, #1
 800a25e:	4393      	bics	r3, r2
 800a260:	001a      	movs	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4a20      	ldr	r2, [pc, #128]	@ (800a2f0 <TIM_TI1_SetConfig+0xac>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d00c      	beq.n	800a28e <TIM_TI1_SetConfig+0x4a>
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	2380      	movs	r3, #128	@ 0x80
 800a278:	05db      	lsls	r3, r3, #23
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d007      	beq.n	800a28e <TIM_TI1_SetConfig+0x4a>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f4 <TIM_TI1_SetConfig+0xb0>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d003      	beq.n	800a28e <TIM_TI1_SetConfig+0x4a>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f8 <TIM_TI1_SetConfig+0xb4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d101      	bne.n	800a292 <TIM_TI1_SetConfig+0x4e>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <TIM_TI1_SetConfig+0x50>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d008      	beq.n	800a2aa <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2203      	movs	r2, #3
 800a29c:	4393      	bics	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e003      	b.n	800a2b2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	22f0      	movs	r2, #240	@ 0xf0
 800a2b6:	4393      	bics	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	22ff      	movs	r2, #255	@ 0xff
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	220a      	movs	r2, #10
 800a2cc:	4393      	bics	r3, r2
 800a2ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	220a      	movs	r2, #10
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	621a      	str	r2, [r3, #32]
}
 800a2e8:	46c0      	nop			@ (mov r8, r8)
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	b006      	add	sp, #24
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	40012c00 	.word	0x40012c00
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	40014000 	.word	0x40014000

0800a2fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	2201      	movs	r2, #1
 800a314:	4393      	bics	r3, r2
 800a316:	001a      	movs	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	22f0      	movs	r2, #240	@ 0xf0
 800a326:	4393      	bics	r3, r2
 800a328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4313      	orrs	r3, r2
 800a332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	220a      	movs	r2, #10
 800a338:	4393      	bics	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	621a      	str	r2, [r3, #32]
}
 800a350:	46c0      	nop			@ (mov r8, r8)
 800a352:	46bd      	mov	sp, r7
 800a354:	b006      	add	sp, #24
 800a356:	bd80      	pop	{r7, pc}

0800a358 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	2210      	movs	r2, #16
 800a372:	4393      	bics	r3, r2
 800a374:	001a      	movs	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4a14      	ldr	r2, [pc, #80]	@ (800a3d4 <TIM_TI2_SetConfig+0x7c>)
 800a384:	4013      	ands	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4313      	orrs	r3, r2
 800a390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4a10      	ldr	r2, [pc, #64]	@ (800a3d8 <TIM_TI2_SetConfig+0x80>)
 800a396:	4013      	ands	r3, r2
 800a398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	031b      	lsls	r3, r3, #12
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	0c1b      	lsrs	r3, r3, #16
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	22a0      	movs	r2, #160	@ 0xa0
 800a3ac:	4393      	bics	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	22a0      	movs	r2, #160	@ 0xa0
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	621a      	str	r2, [r3, #32]
}
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	b006      	add	sp, #24
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	46c0      	nop			@ (mov r8, r8)
 800a3d4:	fffffcff 	.word	0xfffffcff
 800a3d8:	ffff0fff 	.word	0xffff0fff

0800a3dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	2210      	movs	r2, #16
 800a3f4:	4393      	bics	r3, r2
 800a3f6:	001a      	movs	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	4a0d      	ldr	r2, [pc, #52]	@ (800a43c <TIM_TI2_ConfigInputStage+0x60>)
 800a406:	4013      	ands	r3, r2
 800a408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	031b      	lsls	r3, r3, #12
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	4313      	orrs	r3, r2
 800a412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	22a0      	movs	r2, #160	@ 0xa0
 800a418:	4393      	bics	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	46c0      	nop			@ (mov r8, r8)
 800a434:	46bd      	mov	sp, r7
 800a436:	b006      	add	sp, #24
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	46c0      	nop			@ (mov r8, r8)
 800a43c:	ffff0fff 	.word	0xffff0fff

0800a440 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	4a17      	ldr	r2, [pc, #92]	@ (800a4b8 <TIM_TI3_SetConfig+0x78>)
 800a45a:	401a      	ands	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2203      	movs	r2, #3
 800a46a:	4393      	bics	r3, r2
 800a46c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4313      	orrs	r3, r2
 800a474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	22f0      	movs	r2, #240	@ 0xf0
 800a47a:	4393      	bics	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	011b      	lsls	r3, r3, #4
 800a482:	22ff      	movs	r2, #255	@ 0xff
 800a484:	4013      	ands	r3, r2
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	4313      	orrs	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	4a0b      	ldr	r2, [pc, #44]	@ (800a4bc <TIM_TI3_SetConfig+0x7c>)
 800a490:	4013      	ands	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	021a      	lsls	r2, r3, #8
 800a498:	23a0      	movs	r3, #160	@ 0xa0
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	4013      	ands	r3, r2
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	621a      	str	r2, [r3, #32]
}
 800a4b0:	46c0      	nop			@ (mov r8, r8)
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	b006      	add	sp, #24
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	fffffeff 	.word	0xfffffeff
 800a4bc:	fffff5ff 	.word	0xfffff5ff

0800a4c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	4a18      	ldr	r2, [pc, #96]	@ (800a53c <TIM_TI4_SetConfig+0x7c>)
 800a4da:	401a      	ands	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	4a15      	ldr	r2, [pc, #84]	@ (800a540 <TIM_TI4_SetConfig+0x80>)
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	4a12      	ldr	r2, [pc, #72]	@ (800a544 <TIM_TI4_SetConfig+0x84>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	031b      	lsls	r3, r3, #12
 800a504:	041b      	lsls	r3, r3, #16
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	4a0d      	ldr	r2, [pc, #52]	@ (800a548 <TIM_TI4_SetConfig+0x88>)
 800a512:	4013      	ands	r3, r2
 800a514:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	031a      	lsls	r2, r3, #12
 800a51a:	23a0      	movs	r3, #160	@ 0xa0
 800a51c:	021b      	lsls	r3, r3, #8
 800a51e:	4013      	ands	r3, r2
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	621a      	str	r2, [r3, #32]
}
 800a532:	46c0      	nop			@ (mov r8, r8)
 800a534:	46bd      	mov	sp, r7
 800a536:	b006      	add	sp, #24
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	ffffefff 	.word	0xffffefff
 800a540:	fffffcff 	.word	0xfffffcff
 800a544:	ffff0fff 	.word	0xffff0fff
 800a548:	ffff5fff 	.word	0xffff5fff

0800a54c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2270      	movs	r2, #112	@ 0x70
 800a560:	4393      	bics	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4313      	orrs	r3, r2
 800a56a:	2207      	movs	r2, #7
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	609a      	str	r2, [r3, #8]
}
 800a576:	46c0      	nop			@ (mov r8, r8)
 800a578:	46bd      	mov	sp, r7
 800a57a:	b004      	add	sp, #16
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4a09      	ldr	r2, [pc, #36]	@ (800a5bc <TIM_ETR_SetConfig+0x3c>)
 800a598:	4013      	ands	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	021a      	lsls	r2, r3, #8
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	609a      	str	r2, [r3, #8]
}
 800a5b4:	46c0      	nop			@ (mov r8, r8)
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	b006      	add	sp, #24
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	ffff00ff 	.word	0xffff00ff

0800a5c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	221f      	movs	r2, #31
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	409a      	lsls	r2, r3
 800a5d6:	0013      	movs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	43d2      	mvns	r2, r2
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a1a      	ldr	r2, [r3, #32]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	211f      	movs	r1, #31
 800a5f0:	400b      	ands	r3, r1
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	4099      	lsls	r1, r3
 800a5f6:	000b      	movs	r3, r1
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	621a      	str	r2, [r3, #32]
}
 800a5fe:	46c0      	nop			@ (mov r8, r8)
 800a600:	46bd      	mov	sp, r7
 800a602:	b006      	add	sp, #24
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	223c      	movs	r2, #60	@ 0x3c
 800a616:	5c9b      	ldrb	r3, [r3, r2]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d101      	bne.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a61c:	2302      	movs	r3, #2
 800a61e:	e047      	b.n	800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	223c      	movs	r2, #60	@ 0x3c
 800a624:	2101      	movs	r1, #1
 800a626:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	223d      	movs	r2, #61	@ 0x3d
 800a62c:	2102      	movs	r1, #2
 800a62e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2270      	movs	r2, #112	@ 0x70
 800a644:	4393      	bics	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	4313      	orrs	r3, r2
 800a650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a16      	ldr	r2, [pc, #88]	@ (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d00f      	beq.n	800a684 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	2380      	movs	r3, #128	@ 0x80
 800a66a:	05db      	lsls	r3, r3, #23
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d009      	beq.n	800a684 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a11      	ldr	r2, [pc, #68]	@ (800a6bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d004      	beq.n	800a684 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a10      	ldr	r2, [pc, #64]	@ (800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d10c      	bne.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2280      	movs	r2, #128	@ 0x80
 800a688:	4393      	bics	r3, r2
 800a68a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	4313      	orrs	r3, r2
 800a694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	223d      	movs	r2, #61	@ 0x3d
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	223c      	movs	r2, #60	@ 0x3c
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	b004      	add	sp, #16
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	40012c00 	.word	0x40012c00
 800a6bc:	40000400 	.word	0x40000400
 800a6c0:	40014000 	.word	0x40014000

0800a6c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	223c      	movs	r2, #60	@ 0x3c
 800a6d6:	5c9b      	ldrb	r3, [r3, r2]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d101      	bne.n	800a6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e03e      	b.n	800a75e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	223c      	movs	r2, #60	@ 0x3c
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	22ff      	movs	r2, #255	@ 0xff
 800a6ec:	4393      	bics	r3, r2
 800a6ee:	001a      	movs	r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a768 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800a6fc:	401a      	ands	r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	4a18      	ldr	r2, [pc, #96]	@ (800a76c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800a70a:	401a      	ands	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4a16      	ldr	r2, [pc, #88]	@ (800a770 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a718:	401a      	ands	r2, r3
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4a13      	ldr	r2, [pc, #76]	@ (800a774 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800a726:	401a      	ands	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4a11      	ldr	r2, [pc, #68]	@ (800a778 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800a734:	401a      	ands	r2, r3
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4a0e      	ldr	r2, [pc, #56]	@ (800a77c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800a742:	401a      	ands	r2, r3
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	223c      	movs	r2, #60	@ 0x3c
 800a758:	2100      	movs	r1, #0
 800a75a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	0018      	movs	r0, r3
 800a760:	46bd      	mov	sp, r7
 800a762:	b004      	add	sp, #16
 800a764:	bd80      	pop	{r7, pc}
 800a766:	46c0      	nop			@ (mov r8, r8)
 800a768:	fffffcff 	.word	0xfffffcff
 800a76c:	fffffbff 	.word	0xfffffbff
 800a770:	fffff7ff 	.word	0xfffff7ff
 800a774:	ffffefff 	.word	0xffffefff
 800a778:	ffffdfff 	.word	0xffffdfff
 800a77c:	ffffbfff 	.word	0xffffbfff

0800a780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a788:	46c0      	nop			@ (mov r8, r8)
 800a78a:	46bd      	mov	sp, r7
 800a78c:	b002      	add	sp, #8
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a798:	46c0      	nop			@ (mov r8, r8)
 800a79a:	46bd      	mov	sp, r7
 800a79c:	b002      	add	sp, #8
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e044      	b.n	800a83c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2278      	movs	r2, #120	@ 0x78
 800a7be:	2100      	movs	r1, #0
 800a7c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f7fb fea1 	bl	800650c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2224      	movs	r2, #36	@ 0x24
 800a7ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2101      	movs	r1, #1
 800a7dc:	438a      	bics	r2, r1
 800a7de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	0018      	movs	r0, r3
 800a7ec:	f000 fda6 	bl	800b33c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f000 fc1a 	bl	800b02c <UART_SetConfig>
 800a7f8:	0003      	movs	r3, r0
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e01c      	b.n	800a83c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	490d      	ldr	r1, [pc, #52]	@ (800a844 <HAL_UART_Init+0xa4>)
 800a80e:	400a      	ands	r2, r1
 800a810:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	212a      	movs	r1, #42	@ 0x2a
 800a81e:	438a      	bics	r2, r1
 800a820:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2101      	movs	r1, #1
 800a82e:	430a      	orrs	r2, r1
 800a830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	0018      	movs	r0, r3
 800a836:	f000 fe35 	bl	800b4a4 <UART_CheckIdleState>
 800a83a:	0003      	movs	r3, r0
}
 800a83c:	0018      	movs	r0, r3
 800a83e:	46bd      	mov	sp, r7
 800a840:	b002      	add	sp, #8
 800a842:	bd80      	pop	{r7, pc}
 800a844:	ffffb7ff 	.word	0xffffb7ff

0800a848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08a      	sub	sp, #40	@ 0x28
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	1dbb      	adds	r3, r7, #6
 800a856:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d000      	beq.n	800a862 <HAL_UART_Transmit+0x1a>
 800a860:	e08c      	b.n	800a97c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <HAL_UART_Transmit+0x28>
 800a868:	1dbb      	adds	r3, r7, #6
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e084      	b.n	800a97e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	2380      	movs	r3, #128	@ 0x80
 800a87a:	015b      	lsls	r3, r3, #5
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d109      	bne.n	800a894 <HAL_UART_Transmit+0x4c>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d105      	bne.n	800a894 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	2201      	movs	r2, #1
 800a88c:	4013      	ands	r3, r2
 800a88e:	d001      	beq.n	800a894 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e074      	b.n	800a97e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2284      	movs	r2, #132	@ 0x84
 800a898:	2100      	movs	r1, #0
 800a89a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2221      	movs	r2, #33	@ 0x21
 800a8a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8a2:	f7fc f851 	bl	8006948 <HAL_GetTick>
 800a8a6:	0003      	movs	r3, r0
 800a8a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1dba      	adds	r2, r7, #6
 800a8ae:	2150      	movs	r1, #80	@ 0x50
 800a8b0:	8812      	ldrh	r2, [r2, #0]
 800a8b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	1dba      	adds	r2, r7, #6
 800a8b8:	2152      	movs	r1, #82	@ 0x52
 800a8ba:	8812      	ldrh	r2, [r2, #0]
 800a8bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	2380      	movs	r3, #128	@ 0x80
 800a8c4:	015b      	lsls	r3, r3, #5
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d108      	bne.n	800a8dc <HAL_UART_Transmit+0x94>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d104      	bne.n	800a8dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	61bb      	str	r3, [r7, #24]
 800a8da:	e003      	b.n	800a8e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a8e4:	e02f      	b.n	800a946 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	0013      	movs	r3, r2
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2180      	movs	r1, #128	@ 0x80
 800a8f4:	f000 fe7e 	bl	800b5f4 <UART_WaitOnFlagUntilTimeout>
 800a8f8:	1e03      	subs	r3, r0, #0
 800a8fa:	d004      	beq.n	800a906 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2220      	movs	r2, #32
 800a900:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e03b      	b.n	800a97e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10b      	bne.n	800a924 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	881a      	ldrh	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	05d2      	lsls	r2, r2, #23
 800a916:	0dd2      	lsrs	r2, r2, #23
 800a918:	b292      	uxth	r2, r2
 800a91a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	3302      	adds	r3, #2
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	e007      	b.n	800a934 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	781a      	ldrb	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	3301      	adds	r3, #1
 800a932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2252      	movs	r2, #82	@ 0x52
 800a938:	5a9b      	ldrh	r3, [r3, r2]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b299      	uxth	r1, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2252      	movs	r2, #82	@ 0x52
 800a944:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2252      	movs	r2, #82	@ 0x52
 800a94a:	5a9b      	ldrh	r3, [r3, r2]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1c9      	bne.n	800a8e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	0013      	movs	r3, r2
 800a95c:	2200      	movs	r2, #0
 800a95e:	2140      	movs	r1, #64	@ 0x40
 800a960:	f000 fe48 	bl	800b5f4 <UART_WaitOnFlagUntilTimeout>
 800a964:	1e03      	subs	r3, r0, #0
 800a966:	d004      	beq.n	800a972 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e005      	b.n	800a97e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	e000      	b.n	800a97e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800a97c:	2302      	movs	r3, #2
  }
}
 800a97e:	0018      	movs	r0, r3
 800a980:	46bd      	mov	sp, r7
 800a982:	b008      	add	sp, #32
 800a984:	bd80      	pop	{r7, pc}

0800a986 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b088      	sub	sp, #32
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	1dbb      	adds	r3, r7, #6
 800a992:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2280      	movs	r2, #128	@ 0x80
 800a998:	589b      	ldr	r3, [r3, r2]
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d145      	bne.n	800aa2a <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <HAL_UART_Receive_IT+0x26>
 800a9a4:	1dbb      	adds	r3, r7, #6
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e03d      	b.n	800aa2c <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	2380      	movs	r3, #128	@ 0x80
 800a9b6:	015b      	lsls	r3, r3, #5
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d109      	bne.n	800a9d0 <HAL_UART_Receive_IT+0x4a>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d105      	bne.n	800a9d0 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	d001      	beq.n	800a9d0 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e02d      	b.n	800aa2c <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	2380      	movs	r3, #128	@ 0x80
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	d019      	beq.n	800aa18 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9e8:	613b      	str	r3, [r7, #16]
  return(result);
 800a9ea:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9ec:	61fb      	str	r3, [r7, #28]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f383 8810 	msr	PRIMASK, r3
}
 800a9f8:	46c0      	nop			@ (mov r8, r8)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2180      	movs	r1, #128	@ 0x80
 800aa06:	04c9      	lsls	r1, r1, #19
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f383 8810 	msr	PRIMASK, r3
}
 800aa16:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa18:	1dbb      	adds	r3, r7, #6
 800aa1a:	881a      	ldrh	r2, [r3, #0]
 800aa1c:	68b9      	ldr	r1, [r7, #8]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	0018      	movs	r0, r3
 800aa22:	f000 fe57 	bl	800b6d4 <UART_Start_Receive_IT>
 800aa26:	0003      	movs	r3, r0
 800aa28:	e000      	b.n	800aa2c <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800aa2a:	2302      	movs	r3, #2
  }
}
 800aa2c:	0018      	movs	r0, r3
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	b008      	add	sp, #32
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa34:	b590      	push	{r4, r7, lr}
 800aa36:	b0ab      	sub	sp, #172	@ 0xac
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	22a4      	movs	r2, #164	@ 0xa4
 800aa44:	18b9      	adds	r1, r7, r2
 800aa46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	20a0      	movs	r0, #160	@ 0xa0
 800aa50:	1839      	adds	r1, r7, r0
 800aa52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	219c      	movs	r1, #156	@ 0x9c
 800aa5c:	1879      	adds	r1, r7, r1
 800aa5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa60:	0011      	movs	r1, r2
 800aa62:	18bb      	adds	r3, r7, r2
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a99      	ldr	r2, [pc, #612]	@ (800accc <HAL_UART_IRQHandler+0x298>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2298      	movs	r2, #152	@ 0x98
 800aa6c:	18bc      	adds	r4, r7, r2
 800aa6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800aa70:	18bb      	adds	r3, r7, r2
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d114      	bne.n	800aaa2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa78:	187b      	adds	r3, r7, r1
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d00f      	beq.n	800aaa2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa82:	183b      	adds	r3, r7, r0
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2220      	movs	r2, #32
 800aa88:	4013      	ands	r3, r2
 800aa8a:	d00a      	beq.n	800aaa2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d100      	bne.n	800aa96 <HAL_UART_IRQHandler+0x62>
 800aa94:	e29e      	b.n	800afd4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	0010      	movs	r0, r2
 800aa9e:	4798      	blx	r3
      }
      return;
 800aaa0:	e298      	b.n	800afd4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aaa2:	2398      	movs	r3, #152	@ 0x98
 800aaa4:	18fb      	adds	r3, r7, r3
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d100      	bne.n	800aaae <HAL_UART_IRQHandler+0x7a>
 800aaac:	e114      	b.n	800acd8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aaae:	239c      	movs	r3, #156	@ 0x9c
 800aab0:	18fb      	adds	r3, r7, r3
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2201      	movs	r2, #1
 800aab6:	4013      	ands	r3, r2
 800aab8:	d106      	bne.n	800aac8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aaba:	23a0      	movs	r3, #160	@ 0xa0
 800aabc:	18fb      	adds	r3, r7, r3
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a83      	ldr	r2, [pc, #524]	@ (800acd0 <HAL_UART_IRQHandler+0x29c>)
 800aac2:	4013      	ands	r3, r2
 800aac4:	d100      	bne.n	800aac8 <HAL_UART_IRQHandler+0x94>
 800aac6:	e107      	b.n	800acd8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aac8:	23a4      	movs	r3, #164	@ 0xa4
 800aaca:	18fb      	adds	r3, r7, r3
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2201      	movs	r2, #1
 800aad0:	4013      	ands	r3, r2
 800aad2:	d012      	beq.n	800aafa <HAL_UART_IRQHandler+0xc6>
 800aad4:	23a0      	movs	r3, #160	@ 0xa0
 800aad6:	18fb      	adds	r3, r7, r3
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	2380      	movs	r3, #128	@ 0x80
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	4013      	ands	r3, r2
 800aae0:	d00b      	beq.n	800aafa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2201      	movs	r2, #1
 800aae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2284      	movs	r2, #132	@ 0x84
 800aaee:	589b      	ldr	r3, [r3, r2]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2184      	movs	r1, #132	@ 0x84
 800aaf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aafa:	23a4      	movs	r3, #164	@ 0xa4
 800aafc:	18fb      	adds	r3, r7, r3
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2202      	movs	r2, #2
 800ab02:	4013      	ands	r3, r2
 800ab04:	d011      	beq.n	800ab2a <HAL_UART_IRQHandler+0xf6>
 800ab06:	239c      	movs	r3, #156	@ 0x9c
 800ab08:	18fb      	adds	r3, r7, r3
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	4013      	ands	r3, r2
 800ab10:	d00b      	beq.n	800ab2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2202      	movs	r2, #2
 800ab18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2284      	movs	r2, #132	@ 0x84
 800ab1e:	589b      	ldr	r3, [r3, r2]
 800ab20:	2204      	movs	r2, #4
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2184      	movs	r1, #132	@ 0x84
 800ab28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab2a:	23a4      	movs	r3, #164	@ 0xa4
 800ab2c:	18fb      	adds	r3, r7, r3
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2204      	movs	r2, #4
 800ab32:	4013      	ands	r3, r2
 800ab34:	d011      	beq.n	800ab5a <HAL_UART_IRQHandler+0x126>
 800ab36:	239c      	movs	r3, #156	@ 0x9c
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	4013      	ands	r3, r2
 800ab40:	d00b      	beq.n	800ab5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2204      	movs	r2, #4
 800ab48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2284      	movs	r2, #132	@ 0x84
 800ab4e:	589b      	ldr	r3, [r3, r2]
 800ab50:	2202      	movs	r2, #2
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2184      	movs	r1, #132	@ 0x84
 800ab58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab5a:	23a4      	movs	r3, #164	@ 0xa4
 800ab5c:	18fb      	adds	r3, r7, r3
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2208      	movs	r2, #8
 800ab62:	4013      	ands	r3, r2
 800ab64:	d017      	beq.n	800ab96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab66:	23a0      	movs	r3, #160	@ 0xa0
 800ab68:	18fb      	adds	r3, r7, r3
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	4013      	ands	r3, r2
 800ab70:	d105      	bne.n	800ab7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab72:	239c      	movs	r3, #156	@ 0x9c
 800ab74:	18fb      	adds	r3, r7, r3
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab7c:	d00b      	beq.n	800ab96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2208      	movs	r2, #8
 800ab84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2284      	movs	r2, #132	@ 0x84
 800ab8a:	589b      	ldr	r3, [r3, r2]
 800ab8c:	2208      	movs	r2, #8
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2184      	movs	r1, #132	@ 0x84
 800ab94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab96:	23a4      	movs	r3, #164	@ 0xa4
 800ab98:	18fb      	adds	r3, r7, r3
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	2380      	movs	r3, #128	@ 0x80
 800ab9e:	011b      	lsls	r3, r3, #4
 800aba0:	4013      	ands	r3, r2
 800aba2:	d013      	beq.n	800abcc <HAL_UART_IRQHandler+0x198>
 800aba4:	23a0      	movs	r3, #160	@ 0xa0
 800aba6:	18fb      	adds	r3, r7, r3
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	2380      	movs	r3, #128	@ 0x80
 800abac:	04db      	lsls	r3, r3, #19
 800abae:	4013      	ands	r3, r2
 800abb0:	d00c      	beq.n	800abcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2280      	movs	r2, #128	@ 0x80
 800abb8:	0112      	lsls	r2, r2, #4
 800abba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2284      	movs	r2, #132	@ 0x84
 800abc0:	589b      	ldr	r3, [r3, r2]
 800abc2:	2220      	movs	r2, #32
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2184      	movs	r1, #132	@ 0x84
 800abca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2284      	movs	r2, #132	@ 0x84
 800abd0:	589b      	ldr	r3, [r3, r2]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d100      	bne.n	800abd8 <HAL_UART_IRQHandler+0x1a4>
 800abd6:	e1ff      	b.n	800afd8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800abd8:	23a4      	movs	r3, #164	@ 0xa4
 800abda:	18fb      	adds	r3, r7, r3
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2220      	movs	r2, #32
 800abe0:	4013      	ands	r3, r2
 800abe2:	d00e      	beq.n	800ac02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800abe4:	23a0      	movs	r3, #160	@ 0xa0
 800abe6:	18fb      	adds	r3, r7, r3
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2220      	movs	r2, #32
 800abec:	4013      	ands	r3, r2
 800abee:	d008      	beq.n	800ac02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	0010      	movs	r0, r2
 800ac00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2284      	movs	r2, #132	@ 0x84
 800ac06:	589b      	ldr	r3, [r3, r2]
 800ac08:	2194      	movs	r1, #148	@ 0x94
 800ac0a:	187a      	adds	r2, r7, r1
 800ac0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	2240      	movs	r2, #64	@ 0x40
 800ac16:	4013      	ands	r3, r2
 800ac18:	2b40      	cmp	r3, #64	@ 0x40
 800ac1a:	d004      	beq.n	800ac26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac1c:	187b      	adds	r3, r7, r1
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2228      	movs	r2, #40	@ 0x28
 800ac22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac24:	d047      	beq.n	800acb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 fe1d 	bl	800b868 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2240      	movs	r2, #64	@ 0x40
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b40      	cmp	r3, #64	@ 0x40
 800ac3a:	d137      	bne.n	800acac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac40:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800ac42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac44:	2090      	movs	r0, #144	@ 0x90
 800ac46:	183a      	adds	r2, r7, r0
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac50:	f383 8810 	msr	PRIMASK, r3
}
 800ac54:	46c0      	nop			@ (mov r8, r8)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2140      	movs	r1, #64	@ 0x40
 800ac62:	438a      	bics	r2, r1
 800ac64:	609a      	str	r2, [r3, #8]
 800ac66:	183b      	adds	r3, r7, r0
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac6e:	f383 8810 	msr	PRIMASK, r3
}
 800ac72:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d012      	beq.n	800aca2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac80:	4a14      	ldr	r2, [pc, #80]	@ (800acd4 <HAL_UART_IRQHandler+0x2a0>)
 800ac82:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f7fc fc69 	bl	8007560 <HAL_DMA_Abort_IT>
 800ac8e:	1e03      	subs	r3, r0, #0
 800ac90:	d01a      	beq.n	800acc8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca0:	e012      	b.n	800acc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	0018      	movs	r0, r3
 800aca6:	f000 f9ad 	bl	800b004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acaa:	e00d      	b.n	800acc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	0018      	movs	r0, r3
 800acb0:	f000 f9a8 	bl	800b004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb4:	e008      	b.n	800acc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	0018      	movs	r0, r3
 800acba:	f000 f9a3 	bl	800b004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2284      	movs	r2, #132	@ 0x84
 800acc2:	2100      	movs	r1, #0
 800acc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800acc6:	e187      	b.n	800afd8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc8:	46c0      	nop			@ (mov r8, r8)
    return;
 800acca:	e185      	b.n	800afd8 <HAL_UART_IRQHandler+0x5a4>
 800accc:	0000080f 	.word	0x0000080f
 800acd0:	04000120 	.word	0x04000120
 800acd4:	0800b931 	.word	0x0800b931

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d000      	beq.n	800ace2 <HAL_UART_IRQHandler+0x2ae>
 800ace0:	e139      	b.n	800af56 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ace2:	23a4      	movs	r3, #164	@ 0xa4
 800ace4:	18fb      	adds	r3, r7, r3
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2210      	movs	r2, #16
 800acea:	4013      	ands	r3, r2
 800acec:	d100      	bne.n	800acf0 <HAL_UART_IRQHandler+0x2bc>
 800acee:	e132      	b.n	800af56 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acf0:	23a0      	movs	r3, #160	@ 0xa0
 800acf2:	18fb      	adds	r3, r7, r3
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2210      	movs	r2, #16
 800acf8:	4013      	ands	r3, r2
 800acfa:	d100      	bne.n	800acfe <HAL_UART_IRQHandler+0x2ca>
 800acfc:	e12b      	b.n	800af56 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2210      	movs	r2, #16
 800ad04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	2240      	movs	r2, #64	@ 0x40
 800ad0e:	4013      	ands	r3, r2
 800ad10:	2b40      	cmp	r3, #64	@ 0x40
 800ad12:	d000      	beq.n	800ad16 <HAL_UART_IRQHandler+0x2e2>
 800ad14:	e09f      	b.n	800ae56 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	217e      	movs	r1, #126	@ 0x7e
 800ad20:	187b      	adds	r3, r7, r1
 800ad22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800ad24:	187b      	adds	r3, r7, r1
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d100      	bne.n	800ad2e <HAL_UART_IRQHandler+0x2fa>
 800ad2c:	e156      	b.n	800afdc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2258      	movs	r2, #88	@ 0x58
 800ad32:	5a9b      	ldrh	r3, [r3, r2]
 800ad34:	187a      	adds	r2, r7, r1
 800ad36:	8812      	ldrh	r2, [r2, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d300      	bcc.n	800ad3e <HAL_UART_IRQHandler+0x30a>
 800ad3c:	e14e      	b.n	800afdc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	187a      	adds	r2, r7, r1
 800ad42:	215a      	movs	r1, #90	@ 0x5a
 800ad44:	8812      	ldrh	r2, [r2, #0]
 800ad46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	2b20      	cmp	r3, #32
 800ad50:	d06f      	beq.n	800ae32 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad52:	f3ef 8310 	mrs	r3, PRIMASK
 800ad56:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ad58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad62:	f383 8810 	msr	PRIMASK, r3
}
 800ad66:	46c0      	nop			@ (mov r8, r8)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	499e      	ldr	r1, [pc, #632]	@ (800afec <HAL_UART_IRQHandler+0x5b8>)
 800ad74:	400a      	ands	r2, r1
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7e:	f383 8810 	msr	PRIMASK, r3
}
 800ad82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad84:	f3ef 8310 	mrs	r3, PRIMASK
 800ad88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ad8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad8c:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad8e:	2301      	movs	r3, #1
 800ad90:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad94:	f383 8810 	msr	PRIMASK, r3
}
 800ad98:	46c0      	nop			@ (mov r8, r8)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2101      	movs	r1, #1
 800ada6:	438a      	bics	r2, r1
 800ada8:	609a      	str	r2, [r3, #8]
 800adaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800adac:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adb0:	f383 8810 	msr	PRIMASK, r3
}
 800adb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb6:	f3ef 8310 	mrs	r3, PRIMASK
 800adba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800adbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adbe:	673b      	str	r3, [r7, #112]	@ 0x70
 800adc0:	2301      	movs	r3, #1
 800adc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adc6:	f383 8810 	msr	PRIMASK, r3
}
 800adca:	46c0      	nop			@ (mov r8, r8)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2140      	movs	r1, #64	@ 0x40
 800add8:	438a      	bics	r2, r1
 800adda:	609a      	str	r2, [r3, #8]
 800addc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adde:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ade2:	f383 8810 	msr	PRIMASK, r3
}
 800ade6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2280      	movs	r2, #128	@ 0x80
 800adec:	2120      	movs	r1, #32
 800adee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf6:	f3ef 8310 	mrs	r3, PRIMASK
 800adfa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800adfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae00:	2301      	movs	r3, #1
 800ae02:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae06:	f383 8810 	msr	PRIMASK, r3
}
 800ae0a:	46c0      	nop			@ (mov r8, r8)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2110      	movs	r1, #16
 800ae18:	438a      	bics	r2, r1
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae22:	f383 8810 	msr	PRIMASK, r3
}
 800ae26:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae2c:	0018      	movs	r0, r3
 800ae2e:	f7fc fb5f 	bl	80074f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2258      	movs	r2, #88	@ 0x58
 800ae3c:	5a9a      	ldrh	r2, [r3, r2]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	215a      	movs	r1, #90	@ 0x5a
 800ae42:	5a5b      	ldrh	r3, [r3, r1]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	0011      	movs	r1, r2
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f000 f8e0 	bl	800b014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae54:	e0c2      	b.n	800afdc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2258      	movs	r2, #88	@ 0x58
 800ae5a:	5a99      	ldrh	r1, [r3, r2]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	225a      	movs	r2, #90	@ 0x5a
 800ae60:	5a9b      	ldrh	r3, [r3, r2]
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	208e      	movs	r0, #142	@ 0x8e
 800ae66:	183b      	adds	r3, r7, r0
 800ae68:	1a8a      	subs	r2, r1, r2
 800ae6a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	225a      	movs	r2, #90	@ 0x5a
 800ae70:	5a9b      	ldrh	r3, [r3, r2]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d100      	bne.n	800ae7a <HAL_UART_IRQHandler+0x446>
 800ae78:	e0b2      	b.n	800afe0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800ae7a:	183b      	adds	r3, r7, r0
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d100      	bne.n	800ae84 <HAL_UART_IRQHandler+0x450>
 800ae82:	e0ad      	b.n	800afe0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae84:	f3ef 8310 	mrs	r3, PRIMASK
 800ae88:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae8c:	2488      	movs	r4, #136	@ 0x88
 800ae8e:	193a      	adds	r2, r7, r4
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	2301      	movs	r3, #1
 800ae94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f383 8810 	msr	PRIMASK, r3
}
 800ae9c:	46c0      	nop			@ (mov r8, r8)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4951      	ldr	r1, [pc, #324]	@ (800aff0 <HAL_UART_IRQHandler+0x5bc>)
 800aeaa:	400a      	ands	r2, r1
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	193b      	adds	r3, r7, r4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f383 8810 	msr	PRIMASK, r3
}
 800aeba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aebc:	f3ef 8310 	mrs	r3, PRIMASK
 800aec0:	61bb      	str	r3, [r7, #24]
  return(result);
 800aec2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec4:	2484      	movs	r4, #132	@ 0x84
 800aec6:	193a      	adds	r2, r7, r4
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	2301      	movs	r3, #1
 800aecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	f383 8810 	msr	PRIMASK, r3
}
 800aed4:	46c0      	nop			@ (mov r8, r8)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689a      	ldr	r2, [r3, #8]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2101      	movs	r1, #1
 800aee2:	438a      	bics	r2, r1
 800aee4:	609a      	str	r2, [r3, #8]
 800aee6:	193b      	adds	r3, r7, r4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	f383 8810 	msr	PRIMASK, r3
}
 800aef2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2280      	movs	r2, #128	@ 0x80
 800aef8:	2120      	movs	r1, #32
 800aefa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af08:	f3ef 8310 	mrs	r3, PRIMASK
 800af0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af10:	2480      	movs	r4, #128	@ 0x80
 800af12:	193a      	adds	r2, r7, r4
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	2301      	movs	r3, #1
 800af18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1c:	f383 8810 	msr	PRIMASK, r3
}
 800af20:	46c0      	nop			@ (mov r8, r8)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2110      	movs	r1, #16
 800af2e:	438a      	bics	r2, r1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	193b      	adds	r3, r7, r4
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	f383 8810 	msr	PRIMASK, r3
}
 800af3e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af46:	183b      	adds	r3, r7, r0
 800af48:	881a      	ldrh	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	0011      	movs	r1, r2
 800af4e:	0018      	movs	r0, r3
 800af50:	f000 f860 	bl	800b014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af54:	e044      	b.n	800afe0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af56:	23a4      	movs	r3, #164	@ 0xa4
 800af58:	18fb      	adds	r3, r7, r3
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	2380      	movs	r3, #128	@ 0x80
 800af5e:	035b      	lsls	r3, r3, #13
 800af60:	4013      	ands	r3, r2
 800af62:	d010      	beq.n	800af86 <HAL_UART_IRQHandler+0x552>
 800af64:	239c      	movs	r3, #156	@ 0x9c
 800af66:	18fb      	adds	r3, r7, r3
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	2380      	movs	r3, #128	@ 0x80
 800af6c:	03db      	lsls	r3, r3, #15
 800af6e:	4013      	ands	r3, r2
 800af70:	d009      	beq.n	800af86 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2280      	movs	r2, #128	@ 0x80
 800af78:	0352      	lsls	r2, r2, #13
 800af7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	0018      	movs	r0, r3
 800af80:	f000 fed0 	bl	800bd24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af84:	e02f      	b.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af86:	23a4      	movs	r3, #164	@ 0xa4
 800af88:	18fb      	adds	r3, r7, r3
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2280      	movs	r2, #128	@ 0x80
 800af8e:	4013      	ands	r3, r2
 800af90:	d00f      	beq.n	800afb2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af92:	23a0      	movs	r3, #160	@ 0xa0
 800af94:	18fb      	adds	r3, r7, r3
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2280      	movs	r2, #128	@ 0x80
 800af9a:	4013      	ands	r3, r2
 800af9c:	d009      	beq.n	800afb2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d01e      	beq.n	800afe4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	0010      	movs	r0, r2
 800afae:	4798      	blx	r3
    }
    return;
 800afb0:	e018      	b.n	800afe4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800afb2:	23a4      	movs	r3, #164	@ 0xa4
 800afb4:	18fb      	adds	r3, r7, r3
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2240      	movs	r2, #64	@ 0x40
 800afba:	4013      	ands	r3, r2
 800afbc:	d013      	beq.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
 800afbe:	23a0      	movs	r3, #160	@ 0xa0
 800afc0:	18fb      	adds	r3, r7, r3
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2240      	movs	r2, #64	@ 0x40
 800afc6:	4013      	ands	r3, r2
 800afc8:	d00d      	beq.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	0018      	movs	r0, r3
 800afce:	f000 fcc6 	bl	800b95e <UART_EndTransmit_IT>
    return;
 800afd2:	e008      	b.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
      return;
 800afd4:	46c0      	nop			@ (mov r8, r8)
 800afd6:	e006      	b.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
    return;
 800afd8:	46c0      	nop			@ (mov r8, r8)
 800afda:	e004      	b.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
      return;
 800afdc:	46c0      	nop			@ (mov r8, r8)
 800afde:	e002      	b.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
      return;
 800afe0:	46c0      	nop			@ (mov r8, r8)
 800afe2:	e000      	b.n	800afe6 <HAL_UART_IRQHandler+0x5b2>
    return;
 800afe4:	46c0      	nop			@ (mov r8, r8)
  }

}
 800afe6:	46bd      	mov	sp, r7
 800afe8:	b02b      	add	sp, #172	@ 0xac
 800afea:	bd90      	pop	{r4, r7, pc}
 800afec:	fffffeff 	.word	0xfffffeff
 800aff0:	fffffedf 	.word	0xfffffedf

0800aff4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800affc:	46c0      	nop			@ (mov r8, r8)
 800affe:	46bd      	mov	sp, r7
 800b000:	b002      	add	sp, #8
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b00c:	46c0      	nop			@ (mov r8, r8)
 800b00e:	46bd      	mov	sp, r7
 800b010:	b002      	add	sp, #8
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	000a      	movs	r2, r1
 800b01e:	1cbb      	adds	r3, r7, #2
 800b020:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b022:	46c0      	nop			@ (mov r8, r8)
 800b024:	46bd      	mov	sp, r7
 800b026:	b002      	add	sp, #8
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b034:	231e      	movs	r3, #30
 800b036:	18fb      	adds	r3, r7, r3
 800b038:	2200      	movs	r2, #0
 800b03a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689a      	ldr	r2, [r3, #8]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	431a      	orrs	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	431a      	orrs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	4313      	orrs	r3, r2
 800b052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4aaf      	ldr	r2, [pc, #700]	@ (800b318 <UART_SetConfig+0x2ec>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	0019      	movs	r1, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	430a      	orrs	r2, r1
 800b068:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4aaa      	ldr	r2, [pc, #680]	@ (800b31c <UART_SetConfig+0x2f0>)
 800b072:	4013      	ands	r3, r2
 800b074:	0019      	movs	r1, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	4313      	orrs	r3, r2
 800b090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	4aa1      	ldr	r2, [pc, #644]	@ (800b320 <UART_SetConfig+0x2f4>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	0019      	movs	r1, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a9d      	ldr	r2, [pc, #628]	@ (800b324 <UART_SetConfig+0x2f8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d127      	bne.n	800b102 <UART_SetConfig+0xd6>
 800b0b2:	4b9d      	ldr	r3, [pc, #628]	@ (800b328 <UART_SetConfig+0x2fc>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d00d      	beq.n	800b0da <UART_SetConfig+0xae>
 800b0be:	d81b      	bhi.n	800b0f8 <UART_SetConfig+0xcc>
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d014      	beq.n	800b0ee <UART_SetConfig+0xc2>
 800b0c4:	d818      	bhi.n	800b0f8 <UART_SetConfig+0xcc>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <UART_SetConfig+0xa4>
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d00a      	beq.n	800b0e4 <UART_SetConfig+0xb8>
 800b0ce:	e013      	b.n	800b0f8 <UART_SetConfig+0xcc>
 800b0d0:	231f      	movs	r3, #31
 800b0d2:	18fb      	adds	r3, r7, r3
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	e065      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b0da:	231f      	movs	r3, #31
 800b0dc:	18fb      	adds	r3, r7, r3
 800b0de:	2202      	movs	r2, #2
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	e060      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b0e4:	231f      	movs	r3, #31
 800b0e6:	18fb      	adds	r3, r7, r3
 800b0e8:	2204      	movs	r2, #4
 800b0ea:	701a      	strb	r2, [r3, #0]
 800b0ec:	e05b      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b0ee:	231f      	movs	r3, #31
 800b0f0:	18fb      	adds	r3, r7, r3
 800b0f2:	2208      	movs	r2, #8
 800b0f4:	701a      	strb	r2, [r3, #0]
 800b0f6:	e056      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b0f8:	231f      	movs	r3, #31
 800b0fa:	18fb      	adds	r3, r7, r3
 800b0fc:	2210      	movs	r2, #16
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	e051      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a89      	ldr	r2, [pc, #548]	@ (800b32c <UART_SetConfig+0x300>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d134      	bne.n	800b176 <UART_SetConfig+0x14a>
 800b10c:	4b86      	ldr	r3, [pc, #536]	@ (800b328 <UART_SetConfig+0x2fc>)
 800b10e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b110:	23c0      	movs	r3, #192	@ 0xc0
 800b112:	029b      	lsls	r3, r3, #10
 800b114:	4013      	ands	r3, r2
 800b116:	22c0      	movs	r2, #192	@ 0xc0
 800b118:	0292      	lsls	r2, r2, #10
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d017      	beq.n	800b14e <UART_SetConfig+0x122>
 800b11e:	22c0      	movs	r2, #192	@ 0xc0
 800b120:	0292      	lsls	r2, r2, #10
 800b122:	4293      	cmp	r3, r2
 800b124:	d822      	bhi.n	800b16c <UART_SetConfig+0x140>
 800b126:	2280      	movs	r2, #128	@ 0x80
 800b128:	0292      	lsls	r2, r2, #10
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d019      	beq.n	800b162 <UART_SetConfig+0x136>
 800b12e:	2280      	movs	r2, #128	@ 0x80
 800b130:	0292      	lsls	r2, r2, #10
 800b132:	4293      	cmp	r3, r2
 800b134:	d81a      	bhi.n	800b16c <UART_SetConfig+0x140>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d004      	beq.n	800b144 <UART_SetConfig+0x118>
 800b13a:	2280      	movs	r2, #128	@ 0x80
 800b13c:	0252      	lsls	r2, r2, #9
 800b13e:	4293      	cmp	r3, r2
 800b140:	d00a      	beq.n	800b158 <UART_SetConfig+0x12c>
 800b142:	e013      	b.n	800b16c <UART_SetConfig+0x140>
 800b144:	231f      	movs	r3, #31
 800b146:	18fb      	adds	r3, r7, r3
 800b148:	2200      	movs	r2, #0
 800b14a:	701a      	strb	r2, [r3, #0]
 800b14c:	e02b      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b14e:	231f      	movs	r3, #31
 800b150:	18fb      	adds	r3, r7, r3
 800b152:	2202      	movs	r2, #2
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	e026      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b158:	231f      	movs	r3, #31
 800b15a:	18fb      	adds	r3, r7, r3
 800b15c:	2204      	movs	r2, #4
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	e021      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b162:	231f      	movs	r3, #31
 800b164:	18fb      	adds	r3, r7, r3
 800b166:	2208      	movs	r2, #8
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	e01c      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b16c:	231f      	movs	r3, #31
 800b16e:	18fb      	adds	r3, r7, r3
 800b170:	2210      	movs	r2, #16
 800b172:	701a      	strb	r2, [r3, #0]
 800b174:	e017      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a6d      	ldr	r2, [pc, #436]	@ (800b330 <UART_SetConfig+0x304>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d104      	bne.n	800b18a <UART_SetConfig+0x15e>
 800b180:	231f      	movs	r3, #31
 800b182:	18fb      	adds	r3, r7, r3
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
 800b188:	e00d      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a69      	ldr	r2, [pc, #420]	@ (800b334 <UART_SetConfig+0x308>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d104      	bne.n	800b19e <UART_SetConfig+0x172>
 800b194:	231f      	movs	r3, #31
 800b196:	18fb      	adds	r3, r7, r3
 800b198:	2200      	movs	r2, #0
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	e003      	b.n	800b1a6 <UART_SetConfig+0x17a>
 800b19e:	231f      	movs	r3, #31
 800b1a0:	18fb      	adds	r3, r7, r3
 800b1a2:	2210      	movs	r2, #16
 800b1a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	69da      	ldr	r2, [r3, #28]
 800b1aa:	2380      	movs	r3, #128	@ 0x80
 800b1ac:	021b      	lsls	r3, r3, #8
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d15c      	bne.n	800b26c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800b1b2:	231f      	movs	r3, #31
 800b1b4:	18fb      	adds	r3, r7, r3
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b08      	cmp	r3, #8
 800b1ba:	d015      	beq.n	800b1e8 <UART_SetConfig+0x1bc>
 800b1bc:	dc18      	bgt.n	800b1f0 <UART_SetConfig+0x1c4>
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d00d      	beq.n	800b1de <UART_SetConfig+0x1b2>
 800b1c2:	dc15      	bgt.n	800b1f0 <UART_SetConfig+0x1c4>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <UART_SetConfig+0x1a2>
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d005      	beq.n	800b1d8 <UART_SetConfig+0x1ac>
 800b1cc:	e010      	b.n	800b1f0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1ce:	f7fd f87f 	bl	80082d0 <HAL_RCC_GetPCLK1Freq>
 800b1d2:	0003      	movs	r3, r0
 800b1d4:	61bb      	str	r3, [r7, #24]
        break;
 800b1d6:	e012      	b.n	800b1fe <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1d8:	4b57      	ldr	r3, [pc, #348]	@ (800b338 <UART_SetConfig+0x30c>)
 800b1da:	61bb      	str	r3, [r7, #24]
        break;
 800b1dc:	e00f      	b.n	800b1fe <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1de:	f7fc fffb 	bl	80081d8 <HAL_RCC_GetSysClockFreq>
 800b1e2:	0003      	movs	r3, r0
 800b1e4:	61bb      	str	r3, [r7, #24]
        break;
 800b1e6:	e00a      	b.n	800b1fe <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1e8:	2380      	movs	r3, #128	@ 0x80
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	61bb      	str	r3, [r7, #24]
        break;
 800b1ee:	e006      	b.n	800b1fe <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b1f4:	231e      	movs	r3, #30
 800b1f6:	18fb      	adds	r3, r7, r3
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	701a      	strb	r2, [r3, #0]
        break;
 800b1fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d100      	bne.n	800b206 <UART_SetConfig+0x1da>
 800b204:	e07a      	b.n	800b2fc <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	005a      	lsls	r2, r3, #1
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	085b      	lsrs	r3, r3, #1
 800b210:	18d2      	adds	r2, r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	0019      	movs	r1, r3
 800b218:	0010      	movs	r0, r2
 800b21a:	f7f4 ff91 	bl	8000140 <__udivsi3>
 800b21e:	0003      	movs	r3, r0
 800b220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2b0f      	cmp	r3, #15
 800b226:	d91c      	bls.n	800b262 <UART_SetConfig+0x236>
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	2380      	movs	r3, #128	@ 0x80
 800b22c:	025b      	lsls	r3, r3, #9
 800b22e:	429a      	cmp	r2, r3
 800b230:	d217      	bcs.n	800b262 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	b29a      	uxth	r2, r3
 800b236:	200e      	movs	r0, #14
 800b238:	183b      	adds	r3, r7, r0
 800b23a:	210f      	movs	r1, #15
 800b23c:	438a      	bics	r2, r1
 800b23e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	085b      	lsrs	r3, r3, #1
 800b244:	b29b      	uxth	r3, r3
 800b246:	2207      	movs	r2, #7
 800b248:	4013      	ands	r3, r2
 800b24a:	b299      	uxth	r1, r3
 800b24c:	183b      	adds	r3, r7, r0
 800b24e:	183a      	adds	r2, r7, r0
 800b250:	8812      	ldrh	r2, [r2, #0]
 800b252:	430a      	orrs	r2, r1
 800b254:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	183a      	adds	r2, r7, r0
 800b25c:	8812      	ldrh	r2, [r2, #0]
 800b25e:	60da      	str	r2, [r3, #12]
 800b260:	e04c      	b.n	800b2fc <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800b262:	231e      	movs	r3, #30
 800b264:	18fb      	adds	r3, r7, r3
 800b266:	2201      	movs	r2, #1
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	e047      	b.n	800b2fc <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b26c:	231f      	movs	r3, #31
 800b26e:	18fb      	adds	r3, r7, r3
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b08      	cmp	r3, #8
 800b274:	d015      	beq.n	800b2a2 <UART_SetConfig+0x276>
 800b276:	dc18      	bgt.n	800b2aa <UART_SetConfig+0x27e>
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d00d      	beq.n	800b298 <UART_SetConfig+0x26c>
 800b27c:	dc15      	bgt.n	800b2aa <UART_SetConfig+0x27e>
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <UART_SetConfig+0x25c>
 800b282:	2b02      	cmp	r3, #2
 800b284:	d005      	beq.n	800b292 <UART_SetConfig+0x266>
 800b286:	e010      	b.n	800b2aa <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b288:	f7fd f822 	bl	80082d0 <HAL_RCC_GetPCLK1Freq>
 800b28c:	0003      	movs	r3, r0
 800b28e:	61bb      	str	r3, [r7, #24]
        break;
 800b290:	e012      	b.n	800b2b8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b292:	4b29      	ldr	r3, [pc, #164]	@ (800b338 <UART_SetConfig+0x30c>)
 800b294:	61bb      	str	r3, [r7, #24]
        break;
 800b296:	e00f      	b.n	800b2b8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b298:	f7fc ff9e 	bl	80081d8 <HAL_RCC_GetSysClockFreq>
 800b29c:	0003      	movs	r3, r0
 800b29e:	61bb      	str	r3, [r7, #24]
        break;
 800b2a0:	e00a      	b.n	800b2b8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2a2:	2380      	movs	r3, #128	@ 0x80
 800b2a4:	021b      	lsls	r3, r3, #8
 800b2a6:	61bb      	str	r3, [r7, #24]
        break;
 800b2a8:	e006      	b.n	800b2b8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b2ae:	231e      	movs	r3, #30
 800b2b0:	18fb      	adds	r3, r7, r3
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	701a      	strb	r2, [r3, #0]
        break;
 800b2b6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d01e      	beq.n	800b2fc <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	085a      	lsrs	r2, r3, #1
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	18d2      	adds	r2, r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	0019      	movs	r1, r3
 800b2ce:	0010      	movs	r0, r2
 800b2d0:	f7f4 ff36 	bl	8000140 <__udivsi3>
 800b2d4:	0003      	movs	r3, r0
 800b2d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	2b0f      	cmp	r3, #15
 800b2dc:	d90a      	bls.n	800b2f4 <UART_SetConfig+0x2c8>
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	2380      	movs	r3, #128	@ 0x80
 800b2e2:	025b      	lsls	r3, r3, #9
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d205      	bcs.n	800b2f4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	60da      	str	r2, [r3, #12]
 800b2f2:	e003      	b.n	800b2fc <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800b2f4:	231e      	movs	r3, #30
 800b2f6:	18fb      	adds	r3, r7, r3
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b308:	231e      	movs	r3, #30
 800b30a:	18fb      	adds	r3, r7, r3
 800b30c:	781b      	ldrb	r3, [r3, #0]
}
 800b30e:	0018      	movs	r0, r3
 800b310:	46bd      	mov	sp, r7
 800b312:	b008      	add	sp, #32
 800b314:	bd80      	pop	{r7, pc}
 800b316:	46c0      	nop			@ (mov r8, r8)
 800b318:	efff69f3 	.word	0xefff69f3
 800b31c:	ffffcfff 	.word	0xffffcfff
 800b320:	fffff4ff 	.word	0xfffff4ff
 800b324:	40013800 	.word	0x40013800
 800b328:	40021000 	.word	0x40021000
 800b32c:	40004400 	.word	0x40004400
 800b330:	40004800 	.word	0x40004800
 800b334:	40004c00 	.word	0x40004c00
 800b338:	007a1200 	.word	0x007a1200

0800b33c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b348:	2208      	movs	r2, #8
 800b34a:	4013      	ands	r3, r2
 800b34c:	d00b      	beq.n	800b366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4a4a      	ldr	r2, [pc, #296]	@ (800b480 <UART_AdvFeatureConfig+0x144>)
 800b356:	4013      	ands	r3, r2
 800b358:	0019      	movs	r1, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36a:	2201      	movs	r2, #1
 800b36c:	4013      	ands	r3, r2
 800b36e:	d00b      	beq.n	800b388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	4a43      	ldr	r2, [pc, #268]	@ (800b484 <UART_AdvFeatureConfig+0x148>)
 800b378:	4013      	ands	r3, r2
 800b37a:	0019      	movs	r1, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38c:	2202      	movs	r2, #2
 800b38e:	4013      	ands	r3, r2
 800b390:	d00b      	beq.n	800b3aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4a3b      	ldr	r2, [pc, #236]	@ (800b488 <UART_AdvFeatureConfig+0x14c>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	0019      	movs	r1, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	d00b      	beq.n	800b3cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	4a34      	ldr	r2, [pc, #208]	@ (800b48c <UART_AdvFeatureConfig+0x150>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	0019      	movs	r1, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	2210      	movs	r2, #16
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	d00b      	beq.n	800b3ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	4a2c      	ldr	r2, [pc, #176]	@ (800b490 <UART_AdvFeatureConfig+0x154>)
 800b3de:	4013      	ands	r3, r2
 800b3e0:	0019      	movs	r1, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	2220      	movs	r2, #32
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	d00b      	beq.n	800b410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	4a25      	ldr	r2, [pc, #148]	@ (800b494 <UART_AdvFeatureConfig+0x158>)
 800b400:	4013      	ands	r3, r2
 800b402:	0019      	movs	r1, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	430a      	orrs	r2, r1
 800b40e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b414:	2240      	movs	r2, #64	@ 0x40
 800b416:	4013      	ands	r3, r2
 800b418:	d01d      	beq.n	800b456 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4a1d      	ldr	r2, [pc, #116]	@ (800b498 <UART_AdvFeatureConfig+0x15c>)
 800b422:	4013      	ands	r3, r2
 800b424:	0019      	movs	r1, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b436:	2380      	movs	r3, #128	@ 0x80
 800b438:	035b      	lsls	r3, r3, #13
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d10b      	bne.n	800b456 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4a15      	ldr	r2, [pc, #84]	@ (800b49c <UART_AdvFeatureConfig+0x160>)
 800b446:	4013      	ands	r3, r2
 800b448:	0019      	movs	r1, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45a:	2280      	movs	r2, #128	@ 0x80
 800b45c:	4013      	ands	r3, r2
 800b45e:	d00b      	beq.n	800b478 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4a0e      	ldr	r2, [pc, #56]	@ (800b4a0 <UART_AdvFeatureConfig+0x164>)
 800b468:	4013      	ands	r3, r2
 800b46a:	0019      	movs	r1, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	605a      	str	r2, [r3, #4]
  }
}
 800b478:	46c0      	nop			@ (mov r8, r8)
 800b47a:	46bd      	mov	sp, r7
 800b47c:	b002      	add	sp, #8
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	ffff7fff 	.word	0xffff7fff
 800b484:	fffdffff 	.word	0xfffdffff
 800b488:	fffeffff 	.word	0xfffeffff
 800b48c:	fffbffff 	.word	0xfffbffff
 800b490:	ffffefff 	.word	0xffffefff
 800b494:	ffffdfff 	.word	0xffffdfff
 800b498:	ffefffff 	.word	0xffefffff
 800b49c:	ff9fffff 	.word	0xff9fffff
 800b4a0:	fff7ffff 	.word	0xfff7ffff

0800b4a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b092      	sub	sp, #72	@ 0x48
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2284      	movs	r2, #132	@ 0x84
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4b4:	f7fb fa48 	bl	8006948 <HAL_GetTick>
 800b4b8:	0003      	movs	r3, r0
 800b4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2208      	movs	r2, #8
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	2b08      	cmp	r3, #8
 800b4c8:	d12c      	bne.n	800b524 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4cc:	2280      	movs	r2, #128	@ 0x80
 800b4ce:	0391      	lsls	r1, r2, #14
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	4a46      	ldr	r2, [pc, #280]	@ (800b5ec <UART_CheckIdleState+0x148>)
 800b4d4:	9200      	str	r2, [sp, #0]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f000 f88c 	bl	800b5f4 <UART_WaitOnFlagUntilTimeout>
 800b4dc:	1e03      	subs	r3, r0, #0
 800b4de:	d021      	beq.n	800b524 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f0:	f383 8810 	msr	PRIMASK, r3
}
 800b4f4:	46c0      	nop			@ (mov r8, r8)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2180      	movs	r1, #128	@ 0x80
 800b502:	438a      	bics	r2, r1
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50c:	f383 8810 	msr	PRIMASK, r3
}
 800b510:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2278      	movs	r2, #120	@ 0x78
 800b51c:	2100      	movs	r1, #0
 800b51e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e05f      	b.n	800b5e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2204      	movs	r2, #4
 800b52c:	4013      	ands	r3, r2
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d146      	bne.n	800b5c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b534:	2280      	movs	r2, #128	@ 0x80
 800b536:	03d1      	lsls	r1, r2, #15
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4a2c      	ldr	r2, [pc, #176]	@ (800b5ec <UART_CheckIdleState+0x148>)
 800b53c:	9200      	str	r2, [sp, #0]
 800b53e:	2200      	movs	r2, #0
 800b540:	f000 f858 	bl	800b5f4 <UART_WaitOnFlagUntilTimeout>
 800b544:	1e03      	subs	r3, r0, #0
 800b546:	d03b      	beq.n	800b5c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b548:	f3ef 8310 	mrs	r3, PRIMASK
 800b54c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b54e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b550:	637b      	str	r3, [r7, #52]	@ 0x34
 800b552:	2301      	movs	r3, #1
 800b554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f383 8810 	msr	PRIMASK, r3
}
 800b55c:	46c0      	nop			@ (mov r8, r8)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4921      	ldr	r1, [pc, #132]	@ (800b5f0 <UART_CheckIdleState+0x14c>)
 800b56a:	400a      	ands	r2, r1
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f383 8810 	msr	PRIMASK, r3
}
 800b578:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b57a:	f3ef 8310 	mrs	r3, PRIMASK
 800b57e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b580:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b582:	633b      	str	r3, [r7, #48]	@ 0x30
 800b584:	2301      	movs	r3, #1
 800b586:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	f383 8810 	msr	PRIMASK, r3
}
 800b58e:	46c0      	nop			@ (mov r8, r8)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689a      	ldr	r2, [r3, #8]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2101      	movs	r1, #1
 800b59c:	438a      	bics	r2, r1
 800b59e:	609a      	str	r2, [r3, #8]
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	f383 8810 	msr	PRIMASK, r3
}
 800b5aa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2280      	movs	r2, #128	@ 0x80
 800b5b0:	2120      	movs	r1, #32
 800b5b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2278      	movs	r2, #120	@ 0x78
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e011      	b.n	800b5e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2280      	movs	r2, #128	@ 0x80
 800b5ca:	2120      	movs	r1, #32
 800b5cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2278      	movs	r2, #120	@ 0x78
 800b5de:	2100      	movs	r1, #0
 800b5e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	b010      	add	sp, #64	@ 0x40
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	01ffffff 	.word	0x01ffffff
 800b5f0:	fffffedf 	.word	0xfffffedf

0800b5f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	1dfb      	adds	r3, r7, #7
 800b602:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b604:	e051      	b.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	3301      	adds	r3, #1
 800b60a:	d04e      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b60c:	f7fb f99c 	bl	8006948 <HAL_GetTick>
 800b610:	0002      	movs	r2, r0
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	69ba      	ldr	r2, [r7, #24]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d302      	bcc.n	800b622 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e051      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2204      	movs	r2, #4
 800b62e:	4013      	ands	r3, r2
 800b630:	d03b      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb6>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b80      	cmp	r3, #128	@ 0x80
 800b636:	d038      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb6>
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2b40      	cmp	r3, #64	@ 0x40
 800b63c:	d035      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69db      	ldr	r3, [r3, #28]
 800b644:	2208      	movs	r2, #8
 800b646:	4013      	ands	r3, r2
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d111      	bne.n	800b670 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2208      	movs	r2, #8
 800b652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	0018      	movs	r0, r3
 800b658:	f000 f906 	bl	800b868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2284      	movs	r2, #132	@ 0x84
 800b660:	2108      	movs	r1, #8
 800b662:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2278      	movs	r2, #120	@ 0x78
 800b668:	2100      	movs	r1, #0
 800b66a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e02c      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	69da      	ldr	r2, [r3, #28]
 800b676:	2380      	movs	r3, #128	@ 0x80
 800b678:	011b      	lsls	r3, r3, #4
 800b67a:	401a      	ands	r2, r3
 800b67c:	2380      	movs	r3, #128	@ 0x80
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	429a      	cmp	r2, r3
 800b682:	d112      	bne.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2280      	movs	r2, #128	@ 0x80
 800b68a:	0112      	lsls	r2, r2, #4
 800b68c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	0018      	movs	r0, r3
 800b692:	f000 f8e9 	bl	800b868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2284      	movs	r2, #132	@ 0x84
 800b69a:	2120      	movs	r1, #32
 800b69c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2278      	movs	r2, #120	@ 0x78
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e00f      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69db      	ldr	r3, [r3, #28]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	425a      	negs	r2, r3
 800b6ba:	4153      	adcs	r3, r2
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	001a      	movs	r2, r3
 800b6c0:	1dfb      	adds	r3, r7, #7
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d09e      	beq.n	800b606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	b004      	add	sp, #16
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b090      	sub	sp, #64	@ 0x40
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	1dbb      	adds	r3, r7, #6
 800b6e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1dba      	adds	r2, r7, #6
 800b6ec:	2158      	movs	r1, #88	@ 0x58
 800b6ee:	8812      	ldrh	r2, [r2, #0]
 800b6f0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	1dba      	adds	r2, r7, #6
 800b6f6:	215a      	movs	r1, #90	@ 0x5a
 800b6f8:	8812      	ldrh	r2, [r2, #0]
 800b6fa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	689a      	ldr	r2, [r3, #8]
 800b706:	2380      	movs	r3, #128	@ 0x80
 800b708:	015b      	lsls	r3, r3, #5
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d10d      	bne.n	800b72a <UART_Start_Receive_IT+0x56>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d104      	bne.n	800b720 <UART_Start_Receive_IT+0x4c>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	225c      	movs	r2, #92	@ 0x5c
 800b71a:	4950      	ldr	r1, [pc, #320]	@ (800b85c <UART_Start_Receive_IT+0x188>)
 800b71c:	5299      	strh	r1, [r3, r2]
 800b71e:	e02e      	b.n	800b77e <UART_Start_Receive_IT+0xaa>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	225c      	movs	r2, #92	@ 0x5c
 800b724:	21ff      	movs	r1, #255	@ 0xff
 800b726:	5299      	strh	r1, [r3, r2]
 800b728:	e029      	b.n	800b77e <UART_Start_Receive_IT+0xaa>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10d      	bne.n	800b74e <UART_Start_Receive_IT+0x7a>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d104      	bne.n	800b744 <UART_Start_Receive_IT+0x70>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	225c      	movs	r2, #92	@ 0x5c
 800b73e:	21ff      	movs	r1, #255	@ 0xff
 800b740:	5299      	strh	r1, [r3, r2]
 800b742:	e01c      	b.n	800b77e <UART_Start_Receive_IT+0xaa>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	225c      	movs	r2, #92	@ 0x5c
 800b748:	217f      	movs	r1, #127	@ 0x7f
 800b74a:	5299      	strh	r1, [r3, r2]
 800b74c:	e017      	b.n	800b77e <UART_Start_Receive_IT+0xaa>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	2380      	movs	r3, #128	@ 0x80
 800b754:	055b      	lsls	r3, r3, #21
 800b756:	429a      	cmp	r2, r3
 800b758:	d10d      	bne.n	800b776 <UART_Start_Receive_IT+0xa2>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d104      	bne.n	800b76c <UART_Start_Receive_IT+0x98>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	225c      	movs	r2, #92	@ 0x5c
 800b766:	217f      	movs	r1, #127	@ 0x7f
 800b768:	5299      	strh	r1, [r3, r2]
 800b76a:	e008      	b.n	800b77e <UART_Start_Receive_IT+0xaa>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	225c      	movs	r2, #92	@ 0x5c
 800b770:	213f      	movs	r1, #63	@ 0x3f
 800b772:	5299      	strh	r1, [r3, r2]
 800b774:	e003      	b.n	800b77e <UART_Start_Receive_IT+0xaa>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	225c      	movs	r2, #92	@ 0x5c
 800b77a:	2100      	movs	r1, #0
 800b77c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2284      	movs	r2, #132	@ 0x84
 800b782:	2100      	movs	r1, #0
 800b784:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2280      	movs	r2, #128	@ 0x80
 800b78a:	2122      	movs	r1, #34	@ 0x22
 800b78c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b78e:	f3ef 8310 	mrs	r3, PRIMASK
 800b792:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800b794:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b798:	2301      	movs	r3, #1
 800b79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79e:	f383 8810 	msr	PRIMASK, r3
}
 800b7a2:	46c0      	nop			@ (mov r8, r8)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689a      	ldr	r2, [r3, #8]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	609a      	str	r2, [r3, #8]
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ba:	f383 8810 	msr	PRIMASK, r3
}
 800b7be:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	689a      	ldr	r2, [r3, #8]
 800b7c4:	2380      	movs	r3, #128	@ 0x80
 800b7c6:	015b      	lsls	r3, r3, #5
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d107      	bne.n	800b7dc <UART_Start_Receive_IT+0x108>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d103      	bne.n	800b7dc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	4a22      	ldr	r2, [pc, #136]	@ (800b860 <UART_Start_Receive_IT+0x18c>)
 800b7d8:	669a      	str	r2, [r3, #104]	@ 0x68
 800b7da:	e002      	b.n	800b7e2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4a21      	ldr	r2, [pc, #132]	@ (800b864 <UART_Start_Receive_IT+0x190>)
 800b7e0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d019      	beq.n	800b81e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b7ee:	61fb      	str	r3, [r7, #28]
  return(result);
 800b7f0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	f383 8810 	msr	PRIMASK, r3
}
 800b7fe:	46c0      	nop			@ (mov r8, r8)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2190      	movs	r1, #144	@ 0x90
 800b80c:	0049      	lsls	r1, r1, #1
 800b80e:	430a      	orrs	r2, r1
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	f383 8810 	msr	PRIMASK, r3
}
 800b81c:	e018      	b.n	800b850 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b81e:	f3ef 8310 	mrs	r3, PRIMASK
 800b822:	613b      	str	r3, [r7, #16]
  return(result);
 800b824:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b826:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b828:	2301      	movs	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f383 8810 	msr	PRIMASK, r3
}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2120      	movs	r1, #32
 800b840:	430a      	orrs	r2, r1
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b846:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	f383 8810 	msr	PRIMASK, r3
}
 800b84e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	0018      	movs	r0, r3
 800b854:	46bd      	mov	sp, r7
 800b856:	b010      	add	sp, #64	@ 0x40
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	46c0      	nop			@ (mov r8, r8)
 800b85c:	000001ff 	.word	0x000001ff
 800b860:	0800bb6d 	.word	0x0800bb6d
 800b864:	0800b9b5 	.word	0x0800b9b5

0800b868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08e      	sub	sp, #56	@ 0x38
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b870:	f3ef 8310 	mrs	r3, PRIMASK
 800b874:	617b      	str	r3, [r7, #20]
  return(result);
 800b876:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b878:	637b      	str	r3, [r7, #52]	@ 0x34
 800b87a:	2301      	movs	r3, #1
 800b87c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	f383 8810 	msr	PRIMASK, r3
}
 800b884:	46c0      	nop			@ (mov r8, r8)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4926      	ldr	r1, [pc, #152]	@ (800b92c <UART_EndRxTransfer+0xc4>)
 800b892:	400a      	ands	r2, r1
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	f383 8810 	msr	PRIMASK, r3
}
 800b8a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a6:	623b      	str	r3, [r7, #32]
  return(result);
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	f383 8810 	msr	PRIMASK, r3
}
 800b8b6:	46c0      	nop			@ (mov r8, r8)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689a      	ldr	r2, [r3, #8]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	438a      	bics	r2, r1
 800b8c6:	609a      	str	r2, [r3, #8]
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ce:	f383 8810 	msr	PRIMASK, r3
}
 800b8d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d118      	bne.n	800b90e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f383 8810 	msr	PRIMASK, r3
}
 800b8f0:	46c0      	nop			@ (mov r8, r8)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2110      	movs	r1, #16
 800b8fe:	438a      	bics	r2, r1
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f383 8810 	msr	PRIMASK, r3
}
 800b90c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2280      	movs	r2, #128	@ 0x80
 800b912:	2120      	movs	r1, #32
 800b914:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	46bd      	mov	sp, r7
 800b926:	b00e      	add	sp, #56	@ 0x38
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	46c0      	nop			@ (mov r8, r8)
 800b92c:	fffffedf 	.word	0xfffffedf

0800b930 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b93c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	225a      	movs	r2, #90	@ 0x5a
 800b942:	2100      	movs	r1, #0
 800b944:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2252      	movs	r2, #82	@ 0x52
 800b94a:	2100      	movs	r1, #0
 800b94c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	0018      	movs	r0, r3
 800b952:	f7ff fb57 	bl	800b004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b956:	46c0      	nop			@ (mov r8, r8)
 800b958:	46bd      	mov	sp, r7
 800b95a:	b004      	add	sp, #16
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b086      	sub	sp, #24
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b966:	f3ef 8310 	mrs	r3, PRIMASK
 800b96a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b96c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	2301      	movs	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f383 8810 	msr	PRIMASK, r3
}
 800b97a:	46c0      	nop			@ (mov r8, r8)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2140      	movs	r1, #64	@ 0x40
 800b988:	438a      	bics	r2, r1
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f383 8810 	msr	PRIMASK, r3
}
 800b996:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2220      	movs	r2, #32
 800b99c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	f7ff fb24 	bl	800aff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9ac:	46c0      	nop			@ (mov r8, r8)
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b006      	add	sp, #24
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b094      	sub	sp, #80	@ 0x50
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b9bc:	204e      	movs	r0, #78	@ 0x4e
 800b9be:	183b      	adds	r3, r7, r0
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	215c      	movs	r1, #92	@ 0x5c
 800b9c4:	5a52      	ldrh	r2, [r2, r1]
 800b9c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2280      	movs	r2, #128	@ 0x80
 800b9cc:	589b      	ldr	r3, [r3, r2]
 800b9ce:	2b22      	cmp	r3, #34	@ 0x22
 800b9d0:	d000      	beq.n	800b9d4 <UART_RxISR_8BIT+0x20>
 800b9d2:	e0ba      	b.n	800bb4a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	214c      	movs	r1, #76	@ 0x4c
 800b9da:	187b      	adds	r3, r7, r1
 800b9dc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800b9de:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b9e0:	187b      	adds	r3, r7, r1
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	183b      	adds	r3, r7, r0
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	b2d9      	uxtb	r1, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f0:	400a      	ands	r2, r1
 800b9f2:	b2d2      	uxtb	r2, r2
 800b9f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	225a      	movs	r2, #90	@ 0x5a
 800ba04:	5a9b      	ldrh	r3, [r3, r2]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b299      	uxth	r1, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	225a      	movs	r2, #90	@ 0x5a
 800ba10:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	225a      	movs	r2, #90	@ 0x5a
 800ba16:	5a9b      	ldrh	r3, [r3, r2]
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d000      	beq.n	800ba20 <UART_RxISR_8BIT+0x6c>
 800ba1e:	e09c      	b.n	800bb5a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba20:	f3ef 8310 	mrs	r3, PRIMASK
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba30:	f383 8810 	msr	PRIMASK, r3
}
 800ba34:	46c0      	nop			@ (mov r8, r8)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4948      	ldr	r1, [pc, #288]	@ (800bb64 <UART_RxISR_8BIT+0x1b0>)
 800ba42:	400a      	ands	r2, r1
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4c:	f383 8810 	msr	PRIMASK, r3
}
 800ba50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba52:	f3ef 8310 	mrs	r3, PRIMASK
 800ba56:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ba58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba62:	f383 8810 	msr	PRIMASK, r3
}
 800ba66:	46c0      	nop			@ (mov r8, r8)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689a      	ldr	r2, [r3, #8]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2101      	movs	r1, #1
 800ba74:	438a      	bics	r2, r1
 800ba76:	609a      	str	r2, [r3, #8]
 800ba78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7e:	f383 8810 	msr	PRIMASK, r3
}
 800ba82:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2280      	movs	r2, #128	@ 0x80
 800ba88:	2120      	movs	r1, #32
 800ba8a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	2380      	movs	r3, #128	@ 0x80
 800baa0:	041b      	lsls	r3, r3, #16
 800baa2:	4013      	ands	r3, r2
 800baa4:	d018      	beq.n	800bad8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baa6:	f3ef 8310 	mrs	r3, PRIMASK
 800baaa:	61bb      	str	r3, [r7, #24]
  return(result);
 800baac:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800baae:	643b      	str	r3, [r7, #64]	@ 0x40
 800bab0:	2301      	movs	r3, #1
 800bab2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	f383 8810 	msr	PRIMASK, r3
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4928      	ldr	r1, [pc, #160]	@ (800bb68 <UART_RxISR_8BIT+0x1b4>)
 800bac8:	400a      	ands	r2, r1
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	f383 8810 	msr	PRIMASK, r3
}
 800bad6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800badc:	2b01      	cmp	r3, #1
 800bade:	d12f      	bne.n	800bb40 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bae6:	f3ef 8310 	mrs	r3, PRIMASK
 800baea:	60fb      	str	r3, [r7, #12]
  return(result);
 800baec:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baf0:	2301      	movs	r3, #1
 800baf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	f383 8810 	msr	PRIMASK, r3
}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2110      	movs	r1, #16
 800bb08:	438a      	bics	r2, r1
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f383 8810 	msr	PRIMASK, r3
}
 800bb16:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	2210      	movs	r2, #16
 800bb20:	4013      	ands	r3, r2
 800bb22:	2b10      	cmp	r3, #16
 800bb24:	d103      	bne.n	800bb2e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2258      	movs	r2, #88	@ 0x58
 800bb32:	5a9a      	ldrh	r2, [r3, r2]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	0011      	movs	r1, r2
 800bb38:	0018      	movs	r0, r3
 800bb3a:	f7ff fa6b 	bl	800b014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb3e:	e00c      	b.n	800bb5a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	0018      	movs	r0, r3
 800bb44:	f7fa fa74 	bl	8006030 <HAL_UART_RxCpltCallback>
}
 800bb48:	e007      	b.n	800bb5a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	699a      	ldr	r2, [r3, #24]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2108      	movs	r1, #8
 800bb56:	430a      	orrs	r2, r1
 800bb58:	619a      	str	r2, [r3, #24]
}
 800bb5a:	46c0      	nop			@ (mov r8, r8)
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	b014      	add	sp, #80	@ 0x50
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	46c0      	nop			@ (mov r8, r8)
 800bb64:	fffffedf 	.word	0xfffffedf
 800bb68:	fbffffff 	.word	0xfbffffff

0800bb6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b094      	sub	sp, #80	@ 0x50
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bb74:	204e      	movs	r0, #78	@ 0x4e
 800bb76:	183b      	adds	r3, r7, r0
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	215c      	movs	r1, #92	@ 0x5c
 800bb7c:	5a52      	ldrh	r2, [r2, r1]
 800bb7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2280      	movs	r2, #128	@ 0x80
 800bb84:	589b      	ldr	r3, [r3, r2]
 800bb86:	2b22      	cmp	r3, #34	@ 0x22
 800bb88:	d000      	beq.n	800bb8c <UART_RxISR_16BIT+0x20>
 800bb8a:	e0ba      	b.n	800bd02 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	214c      	movs	r1, #76	@ 0x4c
 800bb92:	187b      	adds	r3, r7, r1
 800bb94:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800bb96:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800bb9e:	187b      	adds	r3, r7, r1
 800bba0:	183a      	adds	r2, r7, r0
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	8812      	ldrh	r2, [r2, #0]
 800bba6:	4013      	ands	r3, r2
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbb2:	1c9a      	adds	r2, r3, #2
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	225a      	movs	r2, #90	@ 0x5a
 800bbbc:	5a9b      	ldrh	r3, [r3, r2]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b299      	uxth	r1, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	225a      	movs	r2, #90	@ 0x5a
 800bbc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	225a      	movs	r2, #90	@ 0x5a
 800bbce:	5a9b      	ldrh	r3, [r3, r2]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d000      	beq.n	800bbd8 <UART_RxISR_16BIT+0x6c>
 800bbd6:	e09c      	b.n	800bd12 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbdc:	623b      	str	r3, [r7, #32]
  return(result);
 800bbde:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	f383 8810 	msr	PRIMASK, r3
}
 800bbec:	46c0      	nop			@ (mov r8, r8)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4948      	ldr	r1, [pc, #288]	@ (800bd1c <UART_RxISR_16BIT+0x1b0>)
 800bbfa:	400a      	ands	r2, r1
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc04:	f383 8810 	msr	PRIMASK, r3
}
 800bc08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc0a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc12:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc14:	2301      	movs	r3, #1
 800bc16:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1a:	f383 8810 	msr	PRIMASK, r3
}
 800bc1e:	46c0      	nop			@ (mov r8, r8)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	438a      	bics	r2, r1
 800bc2e:	609a      	str	r2, [r3, #8]
 800bc30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc32:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc36:	f383 8810 	msr	PRIMASK, r3
}
 800bc3a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2280      	movs	r2, #128	@ 0x80
 800bc40:	2120      	movs	r1, #32
 800bc42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	2380      	movs	r3, #128	@ 0x80
 800bc58:	041b      	lsls	r3, r3, #16
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	d018      	beq.n	800bc90 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc5e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc62:	617b      	str	r3, [r7, #20]
  return(result);
 800bc64:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc68:	2301      	movs	r3, #1
 800bc6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	f383 8810 	msr	PRIMASK, r3
}
 800bc72:	46c0      	nop			@ (mov r8, r8)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4928      	ldr	r1, [pc, #160]	@ (800bd20 <UART_RxISR_16BIT+0x1b4>)
 800bc80:	400a      	ands	r2, r1
 800bc82:	601a      	str	r2, [r3, #0]
 800bc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	f383 8810 	msr	PRIMASK, r3
}
 800bc8e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d12f      	bne.n	800bcf8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bca2:	60bb      	str	r3, [r7, #8]
  return(result);
 800bca4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bca8:	2301      	movs	r3, #1
 800bcaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f383 8810 	msr	PRIMASK, r3
}
 800bcb2:	46c0      	nop			@ (mov r8, r8)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2110      	movs	r1, #16
 800bcc0:	438a      	bics	r2, r1
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f383 8810 	msr	PRIMASK, r3
}
 800bcce:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	2210      	movs	r2, #16
 800bcd8:	4013      	ands	r3, r2
 800bcda:	2b10      	cmp	r3, #16
 800bcdc:	d103      	bne.n	800bce6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2210      	movs	r2, #16
 800bce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2258      	movs	r2, #88	@ 0x58
 800bcea:	5a9a      	ldrh	r2, [r3, r2]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	0011      	movs	r1, r2
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	f7ff f98f 	bl	800b014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bcf6:	e00c      	b.n	800bd12 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f7fa f998 	bl	8006030 <HAL_UART_RxCpltCallback>
}
 800bd00:	e007      	b.n	800bd12 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	699a      	ldr	r2, [r3, #24]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2108      	movs	r1, #8
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	619a      	str	r2, [r3, #24]
}
 800bd12:	46c0      	nop			@ (mov r8, r8)
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b014      	add	sp, #80	@ 0x50
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	46c0      	nop			@ (mov r8, r8)
 800bd1c:	fffffedf 	.word	0xfffffedf
 800bd20:	fbffffff 	.word	0xfbffffff

0800bd24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd2c:	46c0      	nop			@ (mov r8, r8)
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	b002      	add	sp, #8
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <__cvt>:
 800bd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd36:	001f      	movs	r7, r3
 800bd38:	2300      	movs	r3, #0
 800bd3a:	0016      	movs	r6, r2
 800bd3c:	b08b      	sub	sp, #44	@ 0x2c
 800bd3e:	429f      	cmp	r7, r3
 800bd40:	da04      	bge.n	800bd4c <__cvt+0x18>
 800bd42:	2180      	movs	r1, #128	@ 0x80
 800bd44:	0609      	lsls	r1, r1, #24
 800bd46:	187b      	adds	r3, r7, r1
 800bd48:	001f      	movs	r7, r3
 800bd4a:	232d      	movs	r3, #45	@ 0x2d
 800bd4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd4e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800bd50:	7013      	strb	r3, [r2, #0]
 800bd52:	2320      	movs	r3, #32
 800bd54:	2203      	movs	r2, #3
 800bd56:	439d      	bics	r5, r3
 800bd58:	2d46      	cmp	r5, #70	@ 0x46
 800bd5a:	d007      	beq.n	800bd6c <__cvt+0x38>
 800bd5c:	002b      	movs	r3, r5
 800bd5e:	3b45      	subs	r3, #69	@ 0x45
 800bd60:	4259      	negs	r1, r3
 800bd62:	414b      	adcs	r3, r1
 800bd64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bd66:	3a01      	subs	r2, #1
 800bd68:	18cb      	adds	r3, r1, r3
 800bd6a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd6c:	ab09      	add	r3, sp, #36	@ 0x24
 800bd6e:	9304      	str	r3, [sp, #16]
 800bd70:	ab08      	add	r3, sp, #32
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd76:	9200      	str	r2, [sp, #0]
 800bd78:	9302      	str	r3, [sp, #8]
 800bd7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd7c:	0032      	movs	r2, r6
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	003b      	movs	r3, r7
 800bd82:	f001 f89b 	bl	800cebc <_dtoa_r>
 800bd86:	0004      	movs	r4, r0
 800bd88:	2d47      	cmp	r5, #71	@ 0x47
 800bd8a:	d11b      	bne.n	800bdc4 <__cvt+0x90>
 800bd8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd8e:	07db      	lsls	r3, r3, #31
 800bd90:	d511      	bpl.n	800bdb6 <__cvt+0x82>
 800bd92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd94:	18c3      	adds	r3, r0, r3
 800bd96:	9307      	str	r3, [sp, #28]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	0030      	movs	r0, r6
 800bd9e:	0039      	movs	r1, r7
 800bda0:	f7f4 fb54 	bl	800044c <__aeabi_dcmpeq>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d001      	beq.n	800bdac <__cvt+0x78>
 800bda8:	9b07      	ldr	r3, [sp, #28]
 800bdaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdac:	2230      	movs	r2, #48	@ 0x30
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	9907      	ldr	r1, [sp, #28]
 800bdb2:	428b      	cmp	r3, r1
 800bdb4:	d320      	bcc.n	800bdf8 <__cvt+0xc4>
 800bdb6:	0020      	movs	r0, r4
 800bdb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bdbc:	1b1b      	subs	r3, r3, r4
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	b00b      	add	sp, #44	@ 0x2c
 800bdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdc6:	18c3      	adds	r3, r0, r3
 800bdc8:	9307      	str	r3, [sp, #28]
 800bdca:	2d46      	cmp	r5, #70	@ 0x46
 800bdcc:	d1e4      	bne.n	800bd98 <__cvt+0x64>
 800bdce:	7803      	ldrb	r3, [r0, #0]
 800bdd0:	2b30      	cmp	r3, #48	@ 0x30
 800bdd2:	d10c      	bne.n	800bdee <__cvt+0xba>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	0030      	movs	r0, r6
 800bdda:	0039      	movs	r1, r7
 800bddc:	f7f4 fb36 	bl	800044c <__aeabi_dcmpeq>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d104      	bne.n	800bdee <__cvt+0xba>
 800bde4:	2301      	movs	r3, #1
 800bde6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bde8:	1a9b      	subs	r3, r3, r2
 800bdea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdf0:	9a07      	ldr	r2, [sp, #28]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	18d3      	adds	r3, r2, r3
 800bdf6:	e7ce      	b.n	800bd96 <__cvt+0x62>
 800bdf8:	1c59      	adds	r1, r3, #1
 800bdfa:	9109      	str	r1, [sp, #36]	@ 0x24
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	e7d6      	b.n	800bdae <__cvt+0x7a>

0800be00 <__exponent>:
 800be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be02:	232b      	movs	r3, #43	@ 0x2b
 800be04:	0005      	movs	r5, r0
 800be06:	000c      	movs	r4, r1
 800be08:	b085      	sub	sp, #20
 800be0a:	7002      	strb	r2, [r0, #0]
 800be0c:	2900      	cmp	r1, #0
 800be0e:	da01      	bge.n	800be14 <__exponent+0x14>
 800be10:	424c      	negs	r4, r1
 800be12:	3302      	adds	r3, #2
 800be14:	706b      	strb	r3, [r5, #1]
 800be16:	2c09      	cmp	r4, #9
 800be18:	dd2c      	ble.n	800be74 <__exponent+0x74>
 800be1a:	ab02      	add	r3, sp, #8
 800be1c:	1dde      	adds	r6, r3, #7
 800be1e:	0020      	movs	r0, r4
 800be20:	210a      	movs	r1, #10
 800be22:	f7f4 fafd 	bl	8000420 <__aeabi_idivmod>
 800be26:	0037      	movs	r7, r6
 800be28:	3130      	adds	r1, #48	@ 0x30
 800be2a:	3e01      	subs	r6, #1
 800be2c:	0020      	movs	r0, r4
 800be2e:	7031      	strb	r1, [r6, #0]
 800be30:	210a      	movs	r1, #10
 800be32:	9401      	str	r4, [sp, #4]
 800be34:	f7f4 fa0e 	bl	8000254 <__divsi3>
 800be38:	9b01      	ldr	r3, [sp, #4]
 800be3a:	0004      	movs	r4, r0
 800be3c:	2b63      	cmp	r3, #99	@ 0x63
 800be3e:	dcee      	bgt.n	800be1e <__exponent+0x1e>
 800be40:	1eba      	subs	r2, r7, #2
 800be42:	1ca8      	adds	r0, r5, #2
 800be44:	0001      	movs	r1, r0
 800be46:	0013      	movs	r3, r2
 800be48:	3430      	adds	r4, #48	@ 0x30
 800be4a:	7014      	strb	r4, [r2, #0]
 800be4c:	ac02      	add	r4, sp, #8
 800be4e:	3407      	adds	r4, #7
 800be50:	429c      	cmp	r4, r3
 800be52:	d80a      	bhi.n	800be6a <__exponent+0x6a>
 800be54:	2300      	movs	r3, #0
 800be56:	42a2      	cmp	r2, r4
 800be58:	d803      	bhi.n	800be62 <__exponent+0x62>
 800be5a:	3309      	adds	r3, #9
 800be5c:	aa02      	add	r2, sp, #8
 800be5e:	189b      	adds	r3, r3, r2
 800be60:	1bdb      	subs	r3, r3, r7
 800be62:	18c0      	adds	r0, r0, r3
 800be64:	1b40      	subs	r0, r0, r5
 800be66:	b005      	add	sp, #20
 800be68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be6a:	781c      	ldrb	r4, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	700c      	strb	r4, [r1, #0]
 800be70:	3101      	adds	r1, #1
 800be72:	e7eb      	b.n	800be4c <__exponent+0x4c>
 800be74:	2330      	movs	r3, #48	@ 0x30
 800be76:	18e4      	adds	r4, r4, r3
 800be78:	70ab      	strb	r3, [r5, #2]
 800be7a:	1d28      	adds	r0, r5, #4
 800be7c:	70ec      	strb	r4, [r5, #3]
 800be7e:	e7f1      	b.n	800be64 <__exponent+0x64>

0800be80 <_printf_float>:
 800be80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be82:	b097      	sub	sp, #92	@ 0x5c
 800be84:	000d      	movs	r5, r1
 800be86:	920a      	str	r2, [sp, #40]	@ 0x28
 800be88:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800be8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be8c:	9009      	str	r0, [sp, #36]	@ 0x24
 800be8e:	f000 fef9 	bl	800cc84 <_localeconv_r>
 800be92:	6803      	ldr	r3, [r0, #0]
 800be94:	0018      	movs	r0, r3
 800be96:	930d      	str	r3, [sp, #52]	@ 0x34
 800be98:	f7f4 f936 	bl	8000108 <strlen>
 800be9c:	2300      	movs	r3, #0
 800be9e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bea0:	9314      	str	r3, [sp, #80]	@ 0x50
 800bea2:	7e2b      	ldrb	r3, [r5, #24]
 800bea4:	2207      	movs	r2, #7
 800bea6:	930c      	str	r3, [sp, #48]	@ 0x30
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	930e      	str	r3, [sp, #56]	@ 0x38
 800beac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	05c9      	lsls	r1, r1, #23
 800beb2:	d545      	bpl.n	800bf40 <_printf_float+0xc0>
 800beb4:	189b      	adds	r3, r3, r2
 800beb6:	4393      	bics	r3, r2
 800beb8:	001a      	movs	r2, r3
 800beba:	3208      	adds	r2, #8
 800bebc:	6022      	str	r2, [r4, #0]
 800bebe:	2201      	movs	r2, #1
 800bec0:	681e      	ldr	r6, [r3, #0]
 800bec2:	685f      	ldr	r7, [r3, #4]
 800bec4:	007b      	lsls	r3, r7, #1
 800bec6:	085b      	lsrs	r3, r3, #1
 800bec8:	9311      	str	r3, [sp, #68]	@ 0x44
 800beca:	9610      	str	r6, [sp, #64]	@ 0x40
 800becc:	64ae      	str	r6, [r5, #72]	@ 0x48
 800bece:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800bed0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bed2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bed4:	4ba7      	ldr	r3, [pc, #668]	@ (800c174 <_printf_float+0x2f4>)
 800bed6:	4252      	negs	r2, r2
 800bed8:	f7f7 f8c8 	bl	800306c <__aeabi_dcmpun>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d131      	bne.n	800bf44 <_printf_float+0xc4>
 800bee0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bee2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bee4:	2201      	movs	r2, #1
 800bee6:	4ba3      	ldr	r3, [pc, #652]	@ (800c174 <_printf_float+0x2f4>)
 800bee8:	4252      	negs	r2, r2
 800beea:	f7f4 fabf 	bl	800046c <__aeabi_dcmple>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d128      	bne.n	800bf44 <_printf_float+0xc4>
 800bef2:	2200      	movs	r2, #0
 800bef4:	2300      	movs	r3, #0
 800bef6:	0030      	movs	r0, r6
 800bef8:	0039      	movs	r1, r7
 800befa:	f7f4 faad 	bl	8000458 <__aeabi_dcmplt>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d003      	beq.n	800bf0a <_printf_float+0x8a>
 800bf02:	002b      	movs	r3, r5
 800bf04:	222d      	movs	r2, #45	@ 0x2d
 800bf06:	3343      	adds	r3, #67	@ 0x43
 800bf08:	701a      	strb	r2, [r3, #0]
 800bf0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf0c:	4f9a      	ldr	r7, [pc, #616]	@ (800c178 <_printf_float+0x2f8>)
 800bf0e:	2b47      	cmp	r3, #71	@ 0x47
 800bf10:	d900      	bls.n	800bf14 <_printf_float+0x94>
 800bf12:	4f9a      	ldr	r7, [pc, #616]	@ (800c17c <_printf_float+0x2fc>)
 800bf14:	2303      	movs	r3, #3
 800bf16:	2400      	movs	r4, #0
 800bf18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf1a:	612b      	str	r3, [r5, #16]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	439a      	bics	r2, r3
 800bf20:	602a      	str	r2, [r5, #0]
 800bf22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf24:	0029      	movs	r1, r5
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf2c:	aa15      	add	r2, sp, #84	@ 0x54
 800bf2e:	f000 f9e5 	bl	800c2fc <_printf_common>
 800bf32:	3001      	adds	r0, #1
 800bf34:	d000      	beq.n	800bf38 <_printf_float+0xb8>
 800bf36:	e09f      	b.n	800c078 <_printf_float+0x1f8>
 800bf38:	2001      	movs	r0, #1
 800bf3a:	4240      	negs	r0, r0
 800bf3c:	b017      	add	sp, #92	@ 0x5c
 800bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf40:	3307      	adds	r3, #7
 800bf42:	e7b8      	b.n	800beb6 <_printf_float+0x36>
 800bf44:	0032      	movs	r2, r6
 800bf46:	003b      	movs	r3, r7
 800bf48:	0030      	movs	r0, r6
 800bf4a:	0039      	movs	r1, r7
 800bf4c:	f7f7 f88e 	bl	800306c <__aeabi_dcmpun>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d00b      	beq.n	800bf6c <_printf_float+0xec>
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	da03      	bge.n	800bf60 <_printf_float+0xe0>
 800bf58:	002b      	movs	r3, r5
 800bf5a:	222d      	movs	r2, #45	@ 0x2d
 800bf5c:	3343      	adds	r3, #67	@ 0x43
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf62:	4f87      	ldr	r7, [pc, #540]	@ (800c180 <_printf_float+0x300>)
 800bf64:	2b47      	cmp	r3, #71	@ 0x47
 800bf66:	d9d5      	bls.n	800bf14 <_printf_float+0x94>
 800bf68:	4f86      	ldr	r7, [pc, #536]	@ (800c184 <_printf_float+0x304>)
 800bf6a:	e7d3      	b.n	800bf14 <_printf_float+0x94>
 800bf6c:	2220      	movs	r2, #32
 800bf6e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bf70:	686b      	ldr	r3, [r5, #4]
 800bf72:	4394      	bics	r4, r2
 800bf74:	1c5a      	adds	r2, r3, #1
 800bf76:	d146      	bne.n	800c006 <_printf_float+0x186>
 800bf78:	3307      	adds	r3, #7
 800bf7a:	606b      	str	r3, [r5, #4]
 800bf7c:	2380      	movs	r3, #128	@ 0x80
 800bf7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	4313      	orrs	r3, r2
 800bf84:	2200      	movs	r2, #0
 800bf86:	602b      	str	r3, [r5, #0]
 800bf88:	9206      	str	r2, [sp, #24]
 800bf8a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf8c:	9205      	str	r2, [sp, #20]
 800bf8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bf90:	a90a      	add	r1, sp, #40	@ 0x28
 800bf92:	9204      	str	r2, [sp, #16]
 800bf94:	aa13      	add	r2, sp, #76	@ 0x4c
 800bf96:	9203      	str	r2, [sp, #12]
 800bf98:	2223      	movs	r2, #35	@ 0x23
 800bf9a:	1852      	adds	r2, r2, r1
 800bf9c:	9202      	str	r2, [sp, #8]
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	686b      	ldr	r3, [r5, #4]
 800bfa2:	0032      	movs	r2, r6
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfa8:	003b      	movs	r3, r7
 800bfaa:	f7ff fec3 	bl	800bd34 <__cvt>
 800bfae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bfb0:	0007      	movs	r7, r0
 800bfb2:	2c47      	cmp	r4, #71	@ 0x47
 800bfb4:	d12d      	bne.n	800c012 <_printf_float+0x192>
 800bfb6:	1cd3      	adds	r3, r2, #3
 800bfb8:	db02      	blt.n	800bfc0 <_printf_float+0x140>
 800bfba:	686b      	ldr	r3, [r5, #4]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	dd48      	ble.n	800c052 <_printf_float+0x1d2>
 800bfc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bfc4:	3b02      	subs	r3, #2
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfca:	0028      	movs	r0, r5
 800bfcc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfce:	3901      	subs	r1, #1
 800bfd0:	3050      	adds	r0, #80	@ 0x50
 800bfd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bfd4:	f7ff ff14 	bl	800be00 <__exponent>
 800bfd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bfda:	0004      	movs	r4, r0
 800bfdc:	1813      	adds	r3, r2, r0
 800bfde:	612b      	str	r3, [r5, #16]
 800bfe0:	2a01      	cmp	r2, #1
 800bfe2:	dc02      	bgt.n	800bfea <_printf_float+0x16a>
 800bfe4:	682a      	ldr	r2, [r5, #0]
 800bfe6:	07d2      	lsls	r2, r2, #31
 800bfe8:	d501      	bpl.n	800bfee <_printf_float+0x16e>
 800bfea:	3301      	adds	r3, #1
 800bfec:	612b      	str	r3, [r5, #16]
 800bfee:	2323      	movs	r3, #35	@ 0x23
 800bff0:	aa0a      	add	r2, sp, #40	@ 0x28
 800bff2:	189b      	adds	r3, r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d100      	bne.n	800bffc <_printf_float+0x17c>
 800bffa:	e792      	b.n	800bf22 <_printf_float+0xa2>
 800bffc:	002b      	movs	r3, r5
 800bffe:	222d      	movs	r2, #45	@ 0x2d
 800c000:	3343      	adds	r3, #67	@ 0x43
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	e78d      	b.n	800bf22 <_printf_float+0xa2>
 800c006:	2c47      	cmp	r4, #71	@ 0x47
 800c008:	d1b8      	bne.n	800bf7c <_printf_float+0xfc>
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1b6      	bne.n	800bf7c <_printf_float+0xfc>
 800c00e:	3301      	adds	r3, #1
 800c010:	e7b3      	b.n	800bf7a <_printf_float+0xfa>
 800c012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c014:	0011      	movs	r1, r2
 800c016:	2b65      	cmp	r3, #101	@ 0x65
 800c018:	d9d7      	bls.n	800bfca <_printf_float+0x14a>
 800c01a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c01c:	2b66      	cmp	r3, #102	@ 0x66
 800c01e:	d11a      	bne.n	800c056 <_printf_float+0x1d6>
 800c020:	686b      	ldr	r3, [r5, #4]
 800c022:	2a00      	cmp	r2, #0
 800c024:	dd09      	ble.n	800c03a <_printf_float+0x1ba>
 800c026:	612a      	str	r2, [r5, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d102      	bne.n	800c032 <_printf_float+0x1b2>
 800c02c:	6829      	ldr	r1, [r5, #0]
 800c02e:	07c9      	lsls	r1, r1, #31
 800c030:	d50b      	bpl.n	800c04a <_printf_float+0x1ca>
 800c032:	3301      	adds	r3, #1
 800c034:	189b      	adds	r3, r3, r2
 800c036:	612b      	str	r3, [r5, #16]
 800c038:	e007      	b.n	800c04a <_printf_float+0x1ca>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d103      	bne.n	800c046 <_printf_float+0x1c6>
 800c03e:	2201      	movs	r2, #1
 800c040:	6829      	ldr	r1, [r5, #0]
 800c042:	4211      	tst	r1, r2
 800c044:	d000      	beq.n	800c048 <_printf_float+0x1c8>
 800c046:	1c9a      	adds	r2, r3, #2
 800c048:	612a      	str	r2, [r5, #16]
 800c04a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c04c:	2400      	movs	r4, #0
 800c04e:	65ab      	str	r3, [r5, #88]	@ 0x58
 800c050:	e7cd      	b.n	800bfee <_printf_float+0x16e>
 800c052:	2367      	movs	r3, #103	@ 0x67
 800c054:	930c      	str	r3, [sp, #48]	@ 0x30
 800c056:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c058:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c05a:	4299      	cmp	r1, r3
 800c05c:	db06      	blt.n	800c06c <_printf_float+0x1ec>
 800c05e:	682b      	ldr	r3, [r5, #0]
 800c060:	6129      	str	r1, [r5, #16]
 800c062:	07db      	lsls	r3, r3, #31
 800c064:	d5f1      	bpl.n	800c04a <_printf_float+0x1ca>
 800c066:	3101      	adds	r1, #1
 800c068:	6129      	str	r1, [r5, #16]
 800c06a:	e7ee      	b.n	800c04a <_printf_float+0x1ca>
 800c06c:	2201      	movs	r2, #1
 800c06e:	2900      	cmp	r1, #0
 800c070:	dce0      	bgt.n	800c034 <_printf_float+0x1b4>
 800c072:	1892      	adds	r2, r2, r2
 800c074:	1a52      	subs	r2, r2, r1
 800c076:	e7dd      	b.n	800c034 <_printf_float+0x1b4>
 800c078:	682a      	ldr	r2, [r5, #0]
 800c07a:	0553      	lsls	r3, r2, #21
 800c07c:	d408      	bmi.n	800c090 <_printf_float+0x210>
 800c07e:	692b      	ldr	r3, [r5, #16]
 800c080:	003a      	movs	r2, r7
 800c082:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c084:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c086:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c088:	47a0      	blx	r4
 800c08a:	3001      	adds	r0, #1
 800c08c:	d129      	bne.n	800c0e2 <_printf_float+0x262>
 800c08e:	e753      	b.n	800bf38 <_printf_float+0xb8>
 800c090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c092:	2b65      	cmp	r3, #101	@ 0x65
 800c094:	d800      	bhi.n	800c098 <_printf_float+0x218>
 800c096:	e0da      	b.n	800c24e <_printf_float+0x3ce>
 800c098:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c09a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c09c:	2200      	movs	r2, #0
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f7f4 f9d4 	bl	800044c <__aeabi_dcmpeq>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d033      	beq.n	800c110 <_printf_float+0x290>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	4a37      	ldr	r2, [pc, #220]	@ (800c188 <_printf_float+0x308>)
 800c0ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c0b2:	47a0      	blx	r4
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d100      	bne.n	800c0ba <_printf_float+0x23a>
 800c0b8:	e73e      	b.n	800bf38 <_printf_float+0xb8>
 800c0ba:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c0bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0be:	42b3      	cmp	r3, r6
 800c0c0:	db02      	blt.n	800c0c8 <_printf_float+0x248>
 800c0c2:	682b      	ldr	r3, [r5, #0]
 800c0c4:	07db      	lsls	r3, r3, #31
 800c0c6:	d50c      	bpl.n	800c0e2 <_printf_float+0x262>
 800c0c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0d2:	47a0      	blx	r4
 800c0d4:	2400      	movs	r4, #0
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	d100      	bne.n	800c0dc <_printf_float+0x25c>
 800c0da:	e72d      	b.n	800bf38 <_printf_float+0xb8>
 800c0dc:	1e73      	subs	r3, r6, #1
 800c0de:	42a3      	cmp	r3, r4
 800c0e0:	dc0a      	bgt.n	800c0f8 <_printf_float+0x278>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	079b      	lsls	r3, r3, #30
 800c0e6:	d500      	bpl.n	800c0ea <_printf_float+0x26a>
 800c0e8:	e105      	b.n	800c2f6 <_printf_float+0x476>
 800c0ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c0ec:	68e8      	ldr	r0, [r5, #12]
 800c0ee:	4298      	cmp	r0, r3
 800c0f0:	db00      	blt.n	800c0f4 <_printf_float+0x274>
 800c0f2:	e723      	b.n	800bf3c <_printf_float+0xbc>
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	e721      	b.n	800bf3c <_printf_float+0xbc>
 800c0f8:	002a      	movs	r2, r5
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c100:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c102:	321a      	adds	r2, #26
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	d100      	bne.n	800c10c <_printf_float+0x28c>
 800c10a:	e715      	b.n	800bf38 <_printf_float+0xb8>
 800c10c:	3401      	adds	r4, #1
 800c10e:	e7e5      	b.n	800c0dc <_printf_float+0x25c>
 800c110:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c112:	2b00      	cmp	r3, #0
 800c114:	dc3a      	bgt.n	800c18c <_printf_float+0x30c>
 800c116:	2301      	movs	r3, #1
 800c118:	4a1b      	ldr	r2, [pc, #108]	@ (800c188 <_printf_float+0x308>)
 800c11a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c11c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c11e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c120:	47a0      	blx	r4
 800c122:	3001      	adds	r0, #1
 800c124:	d100      	bne.n	800c128 <_printf_float+0x2a8>
 800c126:	e707      	b.n	800bf38 <_printf_float+0xb8>
 800c128:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c12a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c12c:	4333      	orrs	r3, r6
 800c12e:	d102      	bne.n	800c136 <_printf_float+0x2b6>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	07db      	lsls	r3, r3, #31
 800c134:	d5d5      	bpl.n	800c0e2 <_printf_float+0x262>
 800c136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c138:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c13a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c13c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c13e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c140:	47a0      	blx	r4
 800c142:	2300      	movs	r3, #0
 800c144:	3001      	adds	r0, #1
 800c146:	d100      	bne.n	800c14a <_printf_float+0x2ca>
 800c148:	e6f6      	b.n	800bf38 <_printf_float+0xb8>
 800c14a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c14c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c14e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c150:	425b      	negs	r3, r3
 800c152:	4293      	cmp	r3, r2
 800c154:	dc01      	bgt.n	800c15a <_printf_float+0x2da>
 800c156:	0033      	movs	r3, r6
 800c158:	e792      	b.n	800c080 <_printf_float+0x200>
 800c15a:	002a      	movs	r2, r5
 800c15c:	2301      	movs	r3, #1
 800c15e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c160:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c162:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c164:	321a      	adds	r2, #26
 800c166:	47a0      	blx	r4
 800c168:	3001      	adds	r0, #1
 800c16a:	d100      	bne.n	800c16e <_printf_float+0x2ee>
 800c16c:	e6e4      	b.n	800bf38 <_printf_float+0xb8>
 800c16e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c170:	3301      	adds	r3, #1
 800c172:	e7ea      	b.n	800c14a <_printf_float+0x2ca>
 800c174:	7fefffff 	.word	0x7fefffff
 800c178:	08010e0c 	.word	0x08010e0c
 800c17c:	08010e10 	.word	0x08010e10
 800c180:	08010e14 	.word	0x08010e14
 800c184:	08010e18 	.word	0x08010e18
 800c188:	08010e1c 	.word	0x08010e1c
 800c18c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c18e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c190:	930c      	str	r3, [sp, #48]	@ 0x30
 800c192:	429e      	cmp	r6, r3
 800c194:	dd00      	ble.n	800c198 <_printf_float+0x318>
 800c196:	001e      	movs	r6, r3
 800c198:	2e00      	cmp	r6, #0
 800c19a:	dc31      	bgt.n	800c200 <_printf_float+0x380>
 800c19c:	43f3      	mvns	r3, r6
 800c19e:	2400      	movs	r4, #0
 800c1a0:	17db      	asrs	r3, r3, #31
 800c1a2:	4033      	ands	r3, r6
 800c1a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1a6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c1a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1aa:	1af3      	subs	r3, r6, r3
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	dc30      	bgt.n	800c212 <_printf_float+0x392>
 800c1b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	dc38      	bgt.n	800c22a <_printf_float+0x3aa>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	07db      	lsls	r3, r3, #31
 800c1bc:	d435      	bmi.n	800c22a <_printf_float+0x3aa>
 800c1be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c1c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c1c4:	1b9b      	subs	r3, r3, r6
 800c1c6:	1b14      	subs	r4, r2, r4
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	dd00      	ble.n	800c1ce <_printf_float+0x34e>
 800c1cc:	001c      	movs	r4, r3
 800c1ce:	2c00      	cmp	r4, #0
 800c1d0:	dc34      	bgt.n	800c23c <_printf_float+0x3bc>
 800c1d2:	43e3      	mvns	r3, r4
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	17db      	asrs	r3, r3, #31
 800c1d8:	401c      	ands	r4, r3
 800c1da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	1b1b      	subs	r3, r3, r4
 800c1e2:	42b3      	cmp	r3, r6
 800c1e4:	dc00      	bgt.n	800c1e8 <_printf_float+0x368>
 800c1e6:	e77c      	b.n	800c0e2 <_printf_float+0x262>
 800c1e8:	002a      	movs	r2, r5
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c1ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c1f2:	321a      	adds	r2, #26
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	d100      	bne.n	800c1fc <_printf_float+0x37c>
 800c1fa:	e69d      	b.n	800bf38 <_printf_float+0xb8>
 800c1fc:	3601      	adds	r6, #1
 800c1fe:	e7ec      	b.n	800c1da <_printf_float+0x35a>
 800c200:	0033      	movs	r3, r6
 800c202:	003a      	movs	r2, r7
 800c204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c208:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c20a:	47a0      	blx	r4
 800c20c:	3001      	adds	r0, #1
 800c20e:	d1c5      	bne.n	800c19c <_printf_float+0x31c>
 800c210:	e692      	b.n	800bf38 <_printf_float+0xb8>
 800c212:	002a      	movs	r2, r5
 800c214:	2301      	movs	r3, #1
 800c216:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c218:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c21a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c21c:	321a      	adds	r2, #26
 800c21e:	47b0      	blx	r6
 800c220:	3001      	adds	r0, #1
 800c222:	d100      	bne.n	800c226 <_printf_float+0x3a6>
 800c224:	e688      	b.n	800bf38 <_printf_float+0xb8>
 800c226:	3401      	adds	r4, #1
 800c228:	e7bd      	b.n	800c1a6 <_printf_float+0x326>
 800c22a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c22c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c22e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c230:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c232:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c234:	47a0      	blx	r4
 800c236:	3001      	adds	r0, #1
 800c238:	d1c1      	bne.n	800c1be <_printf_float+0x33e>
 800c23a:	e67d      	b.n	800bf38 <_printf_float+0xb8>
 800c23c:	19ba      	adds	r2, r7, r6
 800c23e:	0023      	movs	r3, r4
 800c240:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c244:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c246:	47b0      	blx	r6
 800c248:	3001      	adds	r0, #1
 800c24a:	d1c2      	bne.n	800c1d2 <_printf_float+0x352>
 800c24c:	e674      	b.n	800bf38 <_printf_float+0xb8>
 800c24e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c250:	930c      	str	r3, [sp, #48]	@ 0x30
 800c252:	2b01      	cmp	r3, #1
 800c254:	dc02      	bgt.n	800c25c <_printf_float+0x3dc>
 800c256:	2301      	movs	r3, #1
 800c258:	421a      	tst	r2, r3
 800c25a:	d039      	beq.n	800c2d0 <_printf_float+0x450>
 800c25c:	2301      	movs	r3, #1
 800c25e:	003a      	movs	r2, r7
 800c260:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c264:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c266:	47b0      	blx	r6
 800c268:	3001      	adds	r0, #1
 800c26a:	d100      	bne.n	800c26e <_printf_float+0x3ee>
 800c26c:	e664      	b.n	800bf38 <_printf_float+0xb8>
 800c26e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c270:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c272:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c274:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c276:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c278:	47b0      	blx	r6
 800c27a:	3001      	adds	r0, #1
 800c27c:	d100      	bne.n	800c280 <_printf_float+0x400>
 800c27e:	e65b      	b.n	800bf38 <_printf_float+0xb8>
 800c280:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c282:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c286:	2200      	movs	r2, #0
 800c288:	3b01      	subs	r3, #1
 800c28a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c28c:	2300      	movs	r3, #0
 800c28e:	f7f4 f8dd 	bl	800044c <__aeabi_dcmpeq>
 800c292:	2800      	cmp	r0, #0
 800c294:	d11a      	bne.n	800c2cc <_printf_float+0x44c>
 800c296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c298:	1c7a      	adds	r2, r7, #1
 800c29a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c29c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c29e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c2a0:	47b0      	blx	r6
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	d10e      	bne.n	800c2c4 <_printf_float+0x444>
 800c2a6:	e647      	b.n	800bf38 <_printf_float+0xb8>
 800c2a8:	002a      	movs	r2, r5
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c2b2:	321a      	adds	r2, #26
 800c2b4:	47b8      	blx	r7
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d100      	bne.n	800c2bc <_printf_float+0x43c>
 800c2ba:	e63d      	b.n	800bf38 <_printf_float+0xb8>
 800c2bc:	3601      	adds	r6, #1
 800c2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2c0:	429e      	cmp	r6, r3
 800c2c2:	dbf1      	blt.n	800c2a8 <_printf_float+0x428>
 800c2c4:	002a      	movs	r2, r5
 800c2c6:	0023      	movs	r3, r4
 800c2c8:	3250      	adds	r2, #80	@ 0x50
 800c2ca:	e6da      	b.n	800c082 <_printf_float+0x202>
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	e7f6      	b.n	800c2be <_printf_float+0x43e>
 800c2d0:	003a      	movs	r2, r7
 800c2d2:	e7e2      	b.n	800c29a <_printf_float+0x41a>
 800c2d4:	002a      	movs	r2, r5
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c2de:	3219      	adds	r2, #25
 800c2e0:	47b0      	blx	r6
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	d100      	bne.n	800c2e8 <_printf_float+0x468>
 800c2e6:	e627      	b.n	800bf38 <_printf_float+0xb8>
 800c2e8:	3401      	adds	r4, #1
 800c2ea:	68eb      	ldr	r3, [r5, #12]
 800c2ec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c2ee:	1a9b      	subs	r3, r3, r2
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	dcef      	bgt.n	800c2d4 <_printf_float+0x454>
 800c2f4:	e6f9      	b.n	800c0ea <_printf_float+0x26a>
 800c2f6:	2400      	movs	r4, #0
 800c2f8:	e7f7      	b.n	800c2ea <_printf_float+0x46a>
 800c2fa:	46c0      	nop			@ (mov r8, r8)

0800c2fc <_printf_common>:
 800c2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2fe:	0016      	movs	r6, r2
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	688a      	ldr	r2, [r1, #8]
 800c304:	690b      	ldr	r3, [r1, #16]
 800c306:	000c      	movs	r4, r1
 800c308:	9000      	str	r0, [sp, #0]
 800c30a:	4293      	cmp	r3, r2
 800c30c:	da00      	bge.n	800c310 <_printf_common+0x14>
 800c30e:	0013      	movs	r3, r2
 800c310:	0022      	movs	r2, r4
 800c312:	6033      	str	r3, [r6, #0]
 800c314:	3243      	adds	r2, #67	@ 0x43
 800c316:	7812      	ldrb	r2, [r2, #0]
 800c318:	2a00      	cmp	r2, #0
 800c31a:	d001      	beq.n	800c320 <_printf_common+0x24>
 800c31c:	3301      	adds	r3, #1
 800c31e:	6033      	str	r3, [r6, #0]
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	069b      	lsls	r3, r3, #26
 800c324:	d502      	bpl.n	800c32c <_printf_common+0x30>
 800c326:	6833      	ldr	r3, [r6, #0]
 800c328:	3302      	adds	r3, #2
 800c32a:	6033      	str	r3, [r6, #0]
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	2306      	movs	r3, #6
 800c330:	0015      	movs	r5, r2
 800c332:	401d      	ands	r5, r3
 800c334:	421a      	tst	r2, r3
 800c336:	d027      	beq.n	800c388 <_printf_common+0x8c>
 800c338:	0023      	movs	r3, r4
 800c33a:	3343      	adds	r3, #67	@ 0x43
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	1e5a      	subs	r2, r3, #1
 800c340:	4193      	sbcs	r3, r2
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	0692      	lsls	r2, r2, #26
 800c346:	d430      	bmi.n	800c3aa <_printf_common+0xae>
 800c348:	0022      	movs	r2, r4
 800c34a:	9901      	ldr	r1, [sp, #4]
 800c34c:	9800      	ldr	r0, [sp, #0]
 800c34e:	9d08      	ldr	r5, [sp, #32]
 800c350:	3243      	adds	r2, #67	@ 0x43
 800c352:	47a8      	blx	r5
 800c354:	3001      	adds	r0, #1
 800c356:	d025      	beq.n	800c3a4 <_printf_common+0xa8>
 800c358:	2206      	movs	r2, #6
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	2500      	movs	r5, #0
 800c35e:	4013      	ands	r3, r2
 800c360:	2b04      	cmp	r3, #4
 800c362:	d105      	bne.n	800c370 <_printf_common+0x74>
 800c364:	6833      	ldr	r3, [r6, #0]
 800c366:	68e5      	ldr	r5, [r4, #12]
 800c368:	1aed      	subs	r5, r5, r3
 800c36a:	43eb      	mvns	r3, r5
 800c36c:	17db      	asrs	r3, r3, #31
 800c36e:	401d      	ands	r5, r3
 800c370:	68a3      	ldr	r3, [r4, #8]
 800c372:	6922      	ldr	r2, [r4, #16]
 800c374:	4293      	cmp	r3, r2
 800c376:	dd01      	ble.n	800c37c <_printf_common+0x80>
 800c378:	1a9b      	subs	r3, r3, r2
 800c37a:	18ed      	adds	r5, r5, r3
 800c37c:	2600      	movs	r6, #0
 800c37e:	42b5      	cmp	r5, r6
 800c380:	d120      	bne.n	800c3c4 <_printf_common+0xc8>
 800c382:	2000      	movs	r0, #0
 800c384:	e010      	b.n	800c3a8 <_printf_common+0xac>
 800c386:	3501      	adds	r5, #1
 800c388:	68e3      	ldr	r3, [r4, #12]
 800c38a:	6832      	ldr	r2, [r6, #0]
 800c38c:	1a9b      	subs	r3, r3, r2
 800c38e:	42ab      	cmp	r3, r5
 800c390:	ddd2      	ble.n	800c338 <_printf_common+0x3c>
 800c392:	0022      	movs	r2, r4
 800c394:	2301      	movs	r3, #1
 800c396:	9901      	ldr	r1, [sp, #4]
 800c398:	9800      	ldr	r0, [sp, #0]
 800c39a:	9f08      	ldr	r7, [sp, #32]
 800c39c:	3219      	adds	r2, #25
 800c39e:	47b8      	blx	r7
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	d1f0      	bne.n	800c386 <_printf_common+0x8a>
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	4240      	negs	r0, r0
 800c3a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3aa:	2030      	movs	r0, #48	@ 0x30
 800c3ac:	18e1      	adds	r1, r4, r3
 800c3ae:	3143      	adds	r1, #67	@ 0x43
 800c3b0:	7008      	strb	r0, [r1, #0]
 800c3b2:	0021      	movs	r1, r4
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	3145      	adds	r1, #69	@ 0x45
 800c3b8:	7809      	ldrb	r1, [r1, #0]
 800c3ba:	18a2      	adds	r2, r4, r2
 800c3bc:	3243      	adds	r2, #67	@ 0x43
 800c3be:	3302      	adds	r3, #2
 800c3c0:	7011      	strb	r1, [r2, #0]
 800c3c2:	e7c1      	b.n	800c348 <_printf_common+0x4c>
 800c3c4:	0022      	movs	r2, r4
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	9901      	ldr	r1, [sp, #4]
 800c3ca:	9800      	ldr	r0, [sp, #0]
 800c3cc:	9f08      	ldr	r7, [sp, #32]
 800c3ce:	321a      	adds	r2, #26
 800c3d0:	47b8      	blx	r7
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	d0e6      	beq.n	800c3a4 <_printf_common+0xa8>
 800c3d6:	3601      	adds	r6, #1
 800c3d8:	e7d1      	b.n	800c37e <_printf_common+0x82>
	...

0800c3dc <_printf_i>:
 800c3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3de:	b08b      	sub	sp, #44	@ 0x2c
 800c3e0:	9206      	str	r2, [sp, #24]
 800c3e2:	000a      	movs	r2, r1
 800c3e4:	3243      	adds	r2, #67	@ 0x43
 800c3e6:	9307      	str	r3, [sp, #28]
 800c3e8:	9005      	str	r0, [sp, #20]
 800c3ea:	9203      	str	r2, [sp, #12]
 800c3ec:	7e0a      	ldrb	r2, [r1, #24]
 800c3ee:	000c      	movs	r4, r1
 800c3f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c3f2:	2a78      	cmp	r2, #120	@ 0x78
 800c3f4:	d809      	bhi.n	800c40a <_printf_i+0x2e>
 800c3f6:	2a62      	cmp	r2, #98	@ 0x62
 800c3f8:	d80b      	bhi.n	800c412 <_printf_i+0x36>
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	d100      	bne.n	800c400 <_printf_i+0x24>
 800c3fe:	e0bc      	b.n	800c57a <_printf_i+0x19e>
 800c400:	497b      	ldr	r1, [pc, #492]	@ (800c5f0 <_printf_i+0x214>)
 800c402:	9104      	str	r1, [sp, #16]
 800c404:	2a58      	cmp	r2, #88	@ 0x58
 800c406:	d100      	bne.n	800c40a <_printf_i+0x2e>
 800c408:	e090      	b.n	800c52c <_printf_i+0x150>
 800c40a:	0025      	movs	r5, r4
 800c40c:	3542      	adds	r5, #66	@ 0x42
 800c40e:	702a      	strb	r2, [r5, #0]
 800c410:	e022      	b.n	800c458 <_printf_i+0x7c>
 800c412:	0010      	movs	r0, r2
 800c414:	3863      	subs	r0, #99	@ 0x63
 800c416:	2815      	cmp	r0, #21
 800c418:	d8f7      	bhi.n	800c40a <_printf_i+0x2e>
 800c41a:	f7f3 fe87 	bl	800012c <__gnu_thumb1_case_shi>
 800c41e:	0016      	.short	0x0016
 800c420:	fff6001f 	.word	0xfff6001f
 800c424:	fff6fff6 	.word	0xfff6fff6
 800c428:	001ffff6 	.word	0x001ffff6
 800c42c:	fff6fff6 	.word	0xfff6fff6
 800c430:	fff6fff6 	.word	0xfff6fff6
 800c434:	003600a1 	.word	0x003600a1
 800c438:	fff60080 	.word	0xfff60080
 800c43c:	00b2fff6 	.word	0x00b2fff6
 800c440:	0036fff6 	.word	0x0036fff6
 800c444:	fff6fff6 	.word	0xfff6fff6
 800c448:	0084      	.short	0x0084
 800c44a:	0025      	movs	r5, r4
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	3542      	adds	r5, #66	@ 0x42
 800c450:	1d11      	adds	r1, r2, #4
 800c452:	6019      	str	r1, [r3, #0]
 800c454:	6813      	ldr	r3, [r2, #0]
 800c456:	702b      	strb	r3, [r5, #0]
 800c458:	2301      	movs	r3, #1
 800c45a:	e0a0      	b.n	800c59e <_printf_i+0x1c2>
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	6809      	ldr	r1, [r1, #0]
 800c460:	1d02      	adds	r2, r0, #4
 800c462:	060d      	lsls	r5, r1, #24
 800c464:	d50b      	bpl.n	800c47e <_printf_i+0xa2>
 800c466:	6806      	ldr	r6, [r0, #0]
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	2e00      	cmp	r6, #0
 800c46c:	da03      	bge.n	800c476 <_printf_i+0x9a>
 800c46e:	232d      	movs	r3, #45	@ 0x2d
 800c470:	9a03      	ldr	r2, [sp, #12]
 800c472:	4276      	negs	r6, r6
 800c474:	7013      	strb	r3, [r2, #0]
 800c476:	4b5e      	ldr	r3, [pc, #376]	@ (800c5f0 <_printf_i+0x214>)
 800c478:	270a      	movs	r7, #10
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	e018      	b.n	800c4b0 <_printf_i+0xd4>
 800c47e:	6806      	ldr	r6, [r0, #0]
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	0649      	lsls	r1, r1, #25
 800c484:	d5f1      	bpl.n	800c46a <_printf_i+0x8e>
 800c486:	b236      	sxth	r6, r6
 800c488:	e7ef      	b.n	800c46a <_printf_i+0x8e>
 800c48a:	6808      	ldr	r0, [r1, #0]
 800c48c:	6819      	ldr	r1, [r3, #0]
 800c48e:	c940      	ldmia	r1!, {r6}
 800c490:	0605      	lsls	r5, r0, #24
 800c492:	d402      	bmi.n	800c49a <_printf_i+0xbe>
 800c494:	0640      	lsls	r0, r0, #25
 800c496:	d500      	bpl.n	800c49a <_printf_i+0xbe>
 800c498:	b2b6      	uxth	r6, r6
 800c49a:	6019      	str	r1, [r3, #0]
 800c49c:	4b54      	ldr	r3, [pc, #336]	@ (800c5f0 <_printf_i+0x214>)
 800c49e:	270a      	movs	r7, #10
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	2a6f      	cmp	r2, #111	@ 0x6f
 800c4a4:	d100      	bne.n	800c4a8 <_printf_i+0xcc>
 800c4a6:	3f02      	subs	r7, #2
 800c4a8:	0023      	movs	r3, r4
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	3343      	adds	r3, #67	@ 0x43
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	60a3      	str	r3, [r4, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	db03      	blt.n	800c4c0 <_printf_i+0xe4>
 800c4b8:	2104      	movs	r1, #4
 800c4ba:	6822      	ldr	r2, [r4, #0]
 800c4bc:	438a      	bics	r2, r1
 800c4be:	6022      	str	r2, [r4, #0]
 800c4c0:	2e00      	cmp	r6, #0
 800c4c2:	d102      	bne.n	800c4ca <_printf_i+0xee>
 800c4c4:	9d03      	ldr	r5, [sp, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00c      	beq.n	800c4e4 <_printf_i+0x108>
 800c4ca:	9d03      	ldr	r5, [sp, #12]
 800c4cc:	0030      	movs	r0, r6
 800c4ce:	0039      	movs	r1, r7
 800c4d0:	f7f3 febc 	bl	800024c <__aeabi_uidivmod>
 800c4d4:	9b04      	ldr	r3, [sp, #16]
 800c4d6:	3d01      	subs	r5, #1
 800c4d8:	5c5b      	ldrb	r3, [r3, r1]
 800c4da:	702b      	strb	r3, [r5, #0]
 800c4dc:	0033      	movs	r3, r6
 800c4de:	0006      	movs	r6, r0
 800c4e0:	429f      	cmp	r7, r3
 800c4e2:	d9f3      	bls.n	800c4cc <_printf_i+0xf0>
 800c4e4:	2f08      	cmp	r7, #8
 800c4e6:	d109      	bne.n	800c4fc <_printf_i+0x120>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	07db      	lsls	r3, r3, #31
 800c4ec:	d506      	bpl.n	800c4fc <_printf_i+0x120>
 800c4ee:	6862      	ldr	r2, [r4, #4]
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	dc02      	bgt.n	800c4fc <_printf_i+0x120>
 800c4f6:	2330      	movs	r3, #48	@ 0x30
 800c4f8:	3d01      	subs	r5, #1
 800c4fa:	702b      	strb	r3, [r5, #0]
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	1b5b      	subs	r3, r3, r5
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	9b07      	ldr	r3, [sp, #28]
 800c504:	0021      	movs	r1, r4
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	9805      	ldr	r0, [sp, #20]
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	aa09      	add	r2, sp, #36	@ 0x24
 800c50e:	f7ff fef5 	bl	800c2fc <_printf_common>
 800c512:	3001      	adds	r0, #1
 800c514:	d148      	bne.n	800c5a8 <_printf_i+0x1cc>
 800c516:	2001      	movs	r0, #1
 800c518:	4240      	negs	r0, r0
 800c51a:	b00b      	add	sp, #44	@ 0x2c
 800c51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c51e:	2220      	movs	r2, #32
 800c520:	6809      	ldr	r1, [r1, #0]
 800c522:	430a      	orrs	r2, r1
 800c524:	6022      	str	r2, [r4, #0]
 800c526:	2278      	movs	r2, #120	@ 0x78
 800c528:	4932      	ldr	r1, [pc, #200]	@ (800c5f4 <_printf_i+0x218>)
 800c52a:	9104      	str	r1, [sp, #16]
 800c52c:	0021      	movs	r1, r4
 800c52e:	3145      	adds	r1, #69	@ 0x45
 800c530:	700a      	strb	r2, [r1, #0]
 800c532:	6819      	ldr	r1, [r3, #0]
 800c534:	6822      	ldr	r2, [r4, #0]
 800c536:	c940      	ldmia	r1!, {r6}
 800c538:	0610      	lsls	r0, r2, #24
 800c53a:	d402      	bmi.n	800c542 <_printf_i+0x166>
 800c53c:	0650      	lsls	r0, r2, #25
 800c53e:	d500      	bpl.n	800c542 <_printf_i+0x166>
 800c540:	b2b6      	uxth	r6, r6
 800c542:	6019      	str	r1, [r3, #0]
 800c544:	07d3      	lsls	r3, r2, #31
 800c546:	d502      	bpl.n	800c54e <_printf_i+0x172>
 800c548:	2320      	movs	r3, #32
 800c54a:	4313      	orrs	r3, r2
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	2e00      	cmp	r6, #0
 800c550:	d001      	beq.n	800c556 <_printf_i+0x17a>
 800c552:	2710      	movs	r7, #16
 800c554:	e7a8      	b.n	800c4a8 <_printf_i+0xcc>
 800c556:	2220      	movs	r2, #32
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	4393      	bics	r3, r2
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	e7f8      	b.n	800c552 <_printf_i+0x176>
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	680d      	ldr	r5, [r1, #0]
 800c564:	1d10      	adds	r0, r2, #4
 800c566:	6949      	ldr	r1, [r1, #20]
 800c568:	6018      	str	r0, [r3, #0]
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	062e      	lsls	r6, r5, #24
 800c56e:	d501      	bpl.n	800c574 <_printf_i+0x198>
 800c570:	6019      	str	r1, [r3, #0]
 800c572:	e002      	b.n	800c57a <_printf_i+0x19e>
 800c574:	066d      	lsls	r5, r5, #25
 800c576:	d5fb      	bpl.n	800c570 <_printf_i+0x194>
 800c578:	8019      	strh	r1, [r3, #0]
 800c57a:	2300      	movs	r3, #0
 800c57c:	9d03      	ldr	r5, [sp, #12]
 800c57e:	6123      	str	r3, [r4, #16]
 800c580:	e7bf      	b.n	800c502 <_printf_i+0x126>
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	1d11      	adds	r1, r2, #4
 800c586:	6019      	str	r1, [r3, #0]
 800c588:	6815      	ldr	r5, [r2, #0]
 800c58a:	2100      	movs	r1, #0
 800c58c:	0028      	movs	r0, r5
 800c58e:	6862      	ldr	r2, [r4, #4]
 800c590:	f000 fbf7 	bl	800cd82 <memchr>
 800c594:	2800      	cmp	r0, #0
 800c596:	d001      	beq.n	800c59c <_printf_i+0x1c0>
 800c598:	1b40      	subs	r0, r0, r5
 800c59a:	6060      	str	r0, [r4, #4]
 800c59c:	6863      	ldr	r3, [r4, #4]
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	9a03      	ldr	r2, [sp, #12]
 800c5a4:	7013      	strb	r3, [r2, #0]
 800c5a6:	e7ac      	b.n	800c502 <_printf_i+0x126>
 800c5a8:	002a      	movs	r2, r5
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	9906      	ldr	r1, [sp, #24]
 800c5ae:	9805      	ldr	r0, [sp, #20]
 800c5b0:	9d07      	ldr	r5, [sp, #28]
 800c5b2:	47a8      	blx	r5
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d0ae      	beq.n	800c516 <_printf_i+0x13a>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	079b      	lsls	r3, r3, #30
 800c5bc:	d415      	bmi.n	800c5ea <_printf_i+0x20e>
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	68e0      	ldr	r0, [r4, #12]
 800c5c2:	4298      	cmp	r0, r3
 800c5c4:	daa9      	bge.n	800c51a <_printf_i+0x13e>
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	e7a7      	b.n	800c51a <_printf_i+0x13e>
 800c5ca:	0022      	movs	r2, r4
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	9906      	ldr	r1, [sp, #24]
 800c5d0:	9805      	ldr	r0, [sp, #20]
 800c5d2:	9e07      	ldr	r6, [sp, #28]
 800c5d4:	3219      	adds	r2, #25
 800c5d6:	47b0      	blx	r6
 800c5d8:	3001      	adds	r0, #1
 800c5da:	d09c      	beq.n	800c516 <_printf_i+0x13a>
 800c5dc:	3501      	adds	r5, #1
 800c5de:	68e3      	ldr	r3, [r4, #12]
 800c5e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5e2:	1a9b      	subs	r3, r3, r2
 800c5e4:	42ab      	cmp	r3, r5
 800c5e6:	dcf0      	bgt.n	800c5ca <_printf_i+0x1ee>
 800c5e8:	e7e9      	b.n	800c5be <_printf_i+0x1e2>
 800c5ea:	2500      	movs	r5, #0
 800c5ec:	e7f7      	b.n	800c5de <_printf_i+0x202>
 800c5ee:	46c0      	nop			@ (mov r8, r8)
 800c5f0:	08010e1e 	.word	0x08010e1e
 800c5f4:	08010e2f 	.word	0x08010e2f

0800c5f8 <_scanf_float>:
 800c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fa:	b08b      	sub	sp, #44	@ 0x2c
 800c5fc:	0016      	movs	r6, r2
 800c5fe:	9003      	str	r0, [sp, #12]
 800c600:	22ae      	movs	r2, #174	@ 0xae
 800c602:	2000      	movs	r0, #0
 800c604:	9307      	str	r3, [sp, #28]
 800c606:	688b      	ldr	r3, [r1, #8]
 800c608:	000c      	movs	r4, r1
 800c60a:	1e59      	subs	r1, r3, #1
 800c60c:	0052      	lsls	r2, r2, #1
 800c60e:	9006      	str	r0, [sp, #24]
 800c610:	4291      	cmp	r1, r2
 800c612:	d905      	bls.n	800c620 <_scanf_float+0x28>
 800c614:	3b5e      	subs	r3, #94	@ 0x5e
 800c616:	3bff      	subs	r3, #255	@ 0xff
 800c618:	9306      	str	r3, [sp, #24]
 800c61a:	235e      	movs	r3, #94	@ 0x5e
 800c61c:	33ff      	adds	r3, #255	@ 0xff
 800c61e:	60a3      	str	r3, [r4, #8]
 800c620:	23f0      	movs	r3, #240	@ 0xf0
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	4313      	orrs	r3, r2
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	0023      	movs	r3, r4
 800c62c:	2500      	movs	r5, #0
 800c62e:	331c      	adds	r3, #28
 800c630:	001f      	movs	r7, r3
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	9502      	str	r5, [sp, #8]
 800c636:	9509      	str	r5, [sp, #36]	@ 0x24
 800c638:	9508      	str	r5, [sp, #32]
 800c63a:	9501      	str	r5, [sp, #4]
 800c63c:	9505      	str	r5, [sp, #20]
 800c63e:	68a2      	ldr	r2, [r4, #8]
 800c640:	2a00      	cmp	r2, #0
 800c642:	d00a      	beq.n	800c65a <_scanf_float+0x62>
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b4e      	cmp	r3, #78	@ 0x4e
 800c64a:	d844      	bhi.n	800c6d6 <_scanf_float+0xde>
 800c64c:	0018      	movs	r0, r3
 800c64e:	2b40      	cmp	r3, #64	@ 0x40
 800c650:	d82c      	bhi.n	800c6ac <_scanf_float+0xb4>
 800c652:	382b      	subs	r0, #43	@ 0x2b
 800c654:	b2c1      	uxtb	r1, r0
 800c656:	290e      	cmp	r1, #14
 800c658:	d92a      	bls.n	800c6b0 <_scanf_float+0xb8>
 800c65a:	9b01      	ldr	r3, [sp, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d003      	beq.n	800c668 <_scanf_float+0x70>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	4aa6      	ldr	r2, [pc, #664]	@ (800c8fc <_scanf_float+0x304>)
 800c664:	4013      	ands	r3, r2
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	9b02      	ldr	r3, [sp, #8]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d900      	bls.n	800c672 <_scanf_float+0x7a>
 800c670:	e0fe      	b.n	800c870 <_scanf_float+0x278>
 800c672:	25be      	movs	r5, #190	@ 0xbe
 800c674:	006d      	lsls	r5, r5, #1
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	429f      	cmp	r7, r3
 800c67a:	d900      	bls.n	800c67e <_scanf_float+0x86>
 800c67c:	e0ee      	b.n	800c85c <_scanf_float+0x264>
 800c67e:	2001      	movs	r0, #1
 800c680:	b00b      	add	sp, #44	@ 0x2c
 800c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c684:	0018      	movs	r0, r3
 800c686:	3861      	subs	r0, #97	@ 0x61
 800c688:	280d      	cmp	r0, #13
 800c68a:	d8e6      	bhi.n	800c65a <_scanf_float+0x62>
 800c68c:	f7f3 fd4e 	bl	800012c <__gnu_thumb1_case_shi>
 800c690:	ffe50089 	.word	0xffe50089
 800c694:	ffe5ffe5 	.word	0xffe5ffe5
 800c698:	00a700bb 	.word	0x00a700bb
 800c69c:	ffe5ffe5 	.word	0xffe5ffe5
 800c6a0:	ffe5008f 	.word	0xffe5008f
 800c6a4:	ffe5ffe5 	.word	0xffe5ffe5
 800c6a8:	006bffe5 	.word	0x006bffe5
 800c6ac:	3841      	subs	r0, #65	@ 0x41
 800c6ae:	e7eb      	b.n	800c688 <_scanf_float+0x90>
 800c6b0:	280e      	cmp	r0, #14
 800c6b2:	d8d2      	bhi.n	800c65a <_scanf_float+0x62>
 800c6b4:	f7f3 fd3a 	bl	800012c <__gnu_thumb1_case_shi>
 800c6b8:	ffd1004f 	.word	0xffd1004f
 800c6bc:	009d004f 	.word	0x009d004f
 800c6c0:	0021ffd1 	.word	0x0021ffd1
 800c6c4:	00410041 	.word	0x00410041
 800c6c8:	00410041 	.word	0x00410041
 800c6cc:	00410041 	.word	0x00410041
 800c6d0:	00410041 	.word	0x00410041
 800c6d4:	0041      	.short	0x0041
 800c6d6:	2b6e      	cmp	r3, #110	@ 0x6e
 800c6d8:	d80a      	bhi.n	800c6f0 <_scanf_float+0xf8>
 800c6da:	2b60      	cmp	r3, #96	@ 0x60
 800c6dc:	d8d2      	bhi.n	800c684 <_scanf_float+0x8c>
 800c6de:	2b54      	cmp	r3, #84	@ 0x54
 800c6e0:	d100      	bne.n	800c6e4 <_scanf_float+0xec>
 800c6e2:	e081      	b.n	800c7e8 <_scanf_float+0x1f0>
 800c6e4:	2b59      	cmp	r3, #89	@ 0x59
 800c6e6:	d1b8      	bne.n	800c65a <_scanf_float+0x62>
 800c6e8:	2d07      	cmp	r5, #7
 800c6ea:	d1b6      	bne.n	800c65a <_scanf_float+0x62>
 800c6ec:	2508      	movs	r5, #8
 800c6ee:	e02f      	b.n	800c750 <_scanf_float+0x158>
 800c6f0:	2b74      	cmp	r3, #116	@ 0x74
 800c6f2:	d079      	beq.n	800c7e8 <_scanf_float+0x1f0>
 800c6f4:	2b79      	cmp	r3, #121	@ 0x79
 800c6f6:	d0f7      	beq.n	800c6e8 <_scanf_float+0xf0>
 800c6f8:	e7af      	b.n	800c65a <_scanf_float+0x62>
 800c6fa:	6821      	ldr	r1, [r4, #0]
 800c6fc:	05c8      	lsls	r0, r1, #23
 800c6fe:	d51c      	bpl.n	800c73a <_scanf_float+0x142>
 800c700:	2380      	movs	r3, #128	@ 0x80
 800c702:	4399      	bics	r1, r3
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	6021      	str	r1, [r4, #0]
 800c708:	3301      	adds	r3, #1
 800c70a:	9301      	str	r3, [sp, #4]
 800c70c:	9b06      	ldr	r3, [sp, #24]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <_scanf_float+0x122>
 800c712:	3b01      	subs	r3, #1
 800c714:	3201      	adds	r2, #1
 800c716:	9306      	str	r3, [sp, #24]
 800c718:	60a2      	str	r2, [r4, #8]
 800c71a:	68a3      	ldr	r3, [r4, #8]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	60a3      	str	r3, [r4, #8]
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	3301      	adds	r3, #1
 800c724:	6123      	str	r3, [r4, #16]
 800c726:	6873      	ldr	r3, [r6, #4]
 800c728:	3b01      	subs	r3, #1
 800c72a:	6073      	str	r3, [r6, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dc00      	bgt.n	800c732 <_scanf_float+0x13a>
 800c730:	e08a      	b.n	800c848 <_scanf_float+0x250>
 800c732:	6833      	ldr	r3, [r6, #0]
 800c734:	3301      	adds	r3, #1
 800c736:	6033      	str	r3, [r6, #0]
 800c738:	e781      	b.n	800c63e <_scanf_float+0x46>
 800c73a:	9a02      	ldr	r2, [sp, #8]
 800c73c:	1951      	adds	r1, r2, r5
 800c73e:	2900      	cmp	r1, #0
 800c740:	d000      	beq.n	800c744 <_scanf_float+0x14c>
 800c742:	e78a      	b.n	800c65a <_scanf_float+0x62>
 800c744:	000d      	movs	r5, r1
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	486d      	ldr	r0, [pc, #436]	@ (800c900 <_scanf_float+0x308>)
 800c74a:	9102      	str	r1, [sp, #8]
 800c74c:	4002      	ands	r2, r0
 800c74e:	6022      	str	r2, [r4, #0]
 800c750:	703b      	strb	r3, [r7, #0]
 800c752:	3701      	adds	r7, #1
 800c754:	e7e1      	b.n	800c71a <_scanf_float+0x122>
 800c756:	2180      	movs	r1, #128	@ 0x80
 800c758:	6822      	ldr	r2, [r4, #0]
 800c75a:	420a      	tst	r2, r1
 800c75c:	d100      	bne.n	800c760 <_scanf_float+0x168>
 800c75e:	e77c      	b.n	800c65a <_scanf_float+0x62>
 800c760:	438a      	bics	r2, r1
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	e7f4      	b.n	800c750 <_scanf_float+0x158>
 800c766:	9a02      	ldr	r2, [sp, #8]
 800c768:	2a00      	cmp	r2, #0
 800c76a:	d10f      	bne.n	800c78c <_scanf_float+0x194>
 800c76c:	9a01      	ldr	r2, [sp, #4]
 800c76e:	2a00      	cmp	r2, #0
 800c770:	d10f      	bne.n	800c792 <_scanf_float+0x19a>
 800c772:	6822      	ldr	r2, [r4, #0]
 800c774:	21e0      	movs	r1, #224	@ 0xe0
 800c776:	0010      	movs	r0, r2
 800c778:	00c9      	lsls	r1, r1, #3
 800c77a:	4008      	ands	r0, r1
 800c77c:	4288      	cmp	r0, r1
 800c77e:	d108      	bne.n	800c792 <_scanf_float+0x19a>
 800c780:	4960      	ldr	r1, [pc, #384]	@ (800c904 <_scanf_float+0x30c>)
 800c782:	400a      	ands	r2, r1
 800c784:	6022      	str	r2, [r4, #0]
 800c786:	2201      	movs	r2, #1
 800c788:	9202      	str	r2, [sp, #8]
 800c78a:	e7e1      	b.n	800c750 <_scanf_float+0x158>
 800c78c:	9a02      	ldr	r2, [sp, #8]
 800c78e:	2a02      	cmp	r2, #2
 800c790:	d058      	beq.n	800c844 <_scanf_float+0x24c>
 800c792:	2d01      	cmp	r5, #1
 800c794:	d002      	beq.n	800c79c <_scanf_float+0x1a4>
 800c796:	2d04      	cmp	r5, #4
 800c798:	d000      	beq.n	800c79c <_scanf_float+0x1a4>
 800c79a:	e75e      	b.n	800c65a <_scanf_float+0x62>
 800c79c:	3501      	adds	r5, #1
 800c79e:	b2ed      	uxtb	r5, r5
 800c7a0:	e7d6      	b.n	800c750 <_scanf_float+0x158>
 800c7a2:	9a02      	ldr	r2, [sp, #8]
 800c7a4:	2a01      	cmp	r2, #1
 800c7a6:	d000      	beq.n	800c7aa <_scanf_float+0x1b2>
 800c7a8:	e757      	b.n	800c65a <_scanf_float+0x62>
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	e7ec      	b.n	800c788 <_scanf_float+0x190>
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	d110      	bne.n	800c7d4 <_scanf_float+0x1dc>
 800c7b2:	9a01      	ldr	r2, [sp, #4]
 800c7b4:	2a00      	cmp	r2, #0
 800c7b6:	d000      	beq.n	800c7ba <_scanf_float+0x1c2>
 800c7b8:	e752      	b.n	800c660 <_scanf_float+0x68>
 800c7ba:	6822      	ldr	r2, [r4, #0]
 800c7bc:	21e0      	movs	r1, #224	@ 0xe0
 800c7be:	0010      	movs	r0, r2
 800c7c0:	00c9      	lsls	r1, r1, #3
 800c7c2:	4008      	ands	r0, r1
 800c7c4:	4288      	cmp	r0, r1
 800c7c6:	d000      	beq.n	800c7ca <_scanf_float+0x1d2>
 800c7c8:	e11d      	b.n	800ca06 <_scanf_float+0x40e>
 800c7ca:	494e      	ldr	r1, [pc, #312]	@ (800c904 <_scanf_float+0x30c>)
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	400a      	ands	r2, r1
 800c7d0:	6022      	str	r2, [r4, #0]
 800c7d2:	e7bd      	b.n	800c750 <_scanf_float+0x158>
 800c7d4:	21fd      	movs	r1, #253	@ 0xfd
 800c7d6:	1eea      	subs	r2, r5, #3
 800c7d8:	420a      	tst	r2, r1
 800c7da:	d0df      	beq.n	800c79c <_scanf_float+0x1a4>
 800c7dc:	e73d      	b.n	800c65a <_scanf_float+0x62>
 800c7de:	2d02      	cmp	r5, #2
 800c7e0:	d000      	beq.n	800c7e4 <_scanf_float+0x1ec>
 800c7e2:	e73a      	b.n	800c65a <_scanf_float+0x62>
 800c7e4:	2503      	movs	r5, #3
 800c7e6:	e7b3      	b.n	800c750 <_scanf_float+0x158>
 800c7e8:	2d06      	cmp	r5, #6
 800c7ea:	d000      	beq.n	800c7ee <_scanf_float+0x1f6>
 800c7ec:	e735      	b.n	800c65a <_scanf_float+0x62>
 800c7ee:	2507      	movs	r5, #7
 800c7f0:	e7ae      	b.n	800c750 <_scanf_float+0x158>
 800c7f2:	6822      	ldr	r2, [r4, #0]
 800c7f4:	0591      	lsls	r1, r2, #22
 800c7f6:	d400      	bmi.n	800c7fa <_scanf_float+0x202>
 800c7f8:	e72f      	b.n	800c65a <_scanf_float+0x62>
 800c7fa:	4943      	ldr	r1, [pc, #268]	@ (800c908 <_scanf_float+0x310>)
 800c7fc:	400a      	ands	r2, r1
 800c7fe:	6022      	str	r2, [r4, #0]
 800c800:	9a01      	ldr	r2, [sp, #4]
 800c802:	9205      	str	r2, [sp, #20]
 800c804:	e7a4      	b.n	800c750 <_scanf_float+0x158>
 800c806:	21a0      	movs	r1, #160	@ 0xa0
 800c808:	2080      	movs	r0, #128	@ 0x80
 800c80a:	6822      	ldr	r2, [r4, #0]
 800c80c:	00c9      	lsls	r1, r1, #3
 800c80e:	4011      	ands	r1, r2
 800c810:	00c0      	lsls	r0, r0, #3
 800c812:	4281      	cmp	r1, r0
 800c814:	d006      	beq.n	800c824 <_scanf_float+0x22c>
 800c816:	4202      	tst	r2, r0
 800c818:	d100      	bne.n	800c81c <_scanf_float+0x224>
 800c81a:	e71e      	b.n	800c65a <_scanf_float+0x62>
 800c81c:	9901      	ldr	r1, [sp, #4]
 800c81e:	2900      	cmp	r1, #0
 800c820:	d100      	bne.n	800c824 <_scanf_float+0x22c>
 800c822:	e0f0      	b.n	800ca06 <_scanf_float+0x40e>
 800c824:	0591      	lsls	r1, r2, #22
 800c826:	d404      	bmi.n	800c832 <_scanf_float+0x23a>
 800c828:	9901      	ldr	r1, [sp, #4]
 800c82a:	9805      	ldr	r0, [sp, #20]
 800c82c:	9709      	str	r7, [sp, #36]	@ 0x24
 800c82e:	1a09      	subs	r1, r1, r0
 800c830:	9108      	str	r1, [sp, #32]
 800c832:	4934      	ldr	r1, [pc, #208]	@ (800c904 <_scanf_float+0x30c>)
 800c834:	400a      	ands	r2, r1
 800c836:	21c0      	movs	r1, #192	@ 0xc0
 800c838:	0049      	lsls	r1, r1, #1
 800c83a:	430a      	orrs	r2, r1
 800c83c:	6022      	str	r2, [r4, #0]
 800c83e:	2200      	movs	r2, #0
 800c840:	9201      	str	r2, [sp, #4]
 800c842:	e785      	b.n	800c750 <_scanf_float+0x158>
 800c844:	2203      	movs	r2, #3
 800c846:	e79f      	b.n	800c788 <_scanf_float+0x190>
 800c848:	23c0      	movs	r3, #192	@ 0xc0
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	0031      	movs	r1, r6
 800c84e:	58e3      	ldr	r3, [r4, r3]
 800c850:	9803      	ldr	r0, [sp, #12]
 800c852:	4798      	blx	r3
 800c854:	2800      	cmp	r0, #0
 800c856:	d100      	bne.n	800c85a <_scanf_float+0x262>
 800c858:	e6f1      	b.n	800c63e <_scanf_float+0x46>
 800c85a:	e6fe      	b.n	800c65a <_scanf_float+0x62>
 800c85c:	3f01      	subs	r7, #1
 800c85e:	5963      	ldr	r3, [r4, r5]
 800c860:	0032      	movs	r2, r6
 800c862:	7839      	ldrb	r1, [r7, #0]
 800c864:	9803      	ldr	r0, [sp, #12]
 800c866:	4798      	blx	r3
 800c868:	6923      	ldr	r3, [r4, #16]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	6123      	str	r3, [r4, #16]
 800c86e:	e702      	b.n	800c676 <_scanf_float+0x7e>
 800c870:	1e6b      	subs	r3, r5, #1
 800c872:	2b06      	cmp	r3, #6
 800c874:	d80e      	bhi.n	800c894 <_scanf_float+0x29c>
 800c876:	9702      	str	r7, [sp, #8]
 800c878:	2d02      	cmp	r5, #2
 800c87a:	d920      	bls.n	800c8be <_scanf_float+0x2c6>
 800c87c:	1beb      	subs	r3, r5, r7
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	9306      	str	r3, [sp, #24]
 800c882:	9b02      	ldr	r3, [sp, #8]
 800c884:	9a06      	ldr	r2, [sp, #24]
 800c886:	189b      	adds	r3, r3, r2
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d127      	bne.n	800c8de <_scanf_float+0x2e6>
 800c88e:	3d03      	subs	r5, #3
 800c890:	b2ed      	uxtb	r5, r5
 800c892:	1b7f      	subs	r7, r7, r5
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	05da      	lsls	r2, r3, #23
 800c898:	d553      	bpl.n	800c942 <_scanf_float+0x34a>
 800c89a:	055b      	lsls	r3, r3, #21
 800c89c:	d536      	bpl.n	800c90c <_scanf_float+0x314>
 800c89e:	25be      	movs	r5, #190	@ 0xbe
 800c8a0:	006d      	lsls	r5, r5, #1
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	429f      	cmp	r7, r3
 800c8a6:	d800      	bhi.n	800c8aa <_scanf_float+0x2b2>
 800c8a8:	e6e9      	b.n	800c67e <_scanf_float+0x86>
 800c8aa:	3f01      	subs	r7, #1
 800c8ac:	5963      	ldr	r3, [r4, r5]
 800c8ae:	0032      	movs	r2, r6
 800c8b0:	7839      	ldrb	r1, [r7, #0]
 800c8b2:	9803      	ldr	r0, [sp, #12]
 800c8b4:	4798      	blx	r3
 800c8b6:	6923      	ldr	r3, [r4, #16]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	e7f1      	b.n	800c8a2 <_scanf_float+0x2aa>
 800c8be:	25be      	movs	r5, #190	@ 0xbe
 800c8c0:	006d      	lsls	r5, r5, #1
 800c8c2:	9b04      	ldr	r3, [sp, #16]
 800c8c4:	429f      	cmp	r7, r3
 800c8c6:	d800      	bhi.n	800c8ca <_scanf_float+0x2d2>
 800c8c8:	e6d9      	b.n	800c67e <_scanf_float+0x86>
 800c8ca:	3f01      	subs	r7, #1
 800c8cc:	5963      	ldr	r3, [r4, r5]
 800c8ce:	0032      	movs	r2, r6
 800c8d0:	7839      	ldrb	r1, [r7, #0]
 800c8d2:	9803      	ldr	r0, [sp, #12]
 800c8d4:	4798      	blx	r3
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	6123      	str	r3, [r4, #16]
 800c8dc:	e7f1      	b.n	800c8c2 <_scanf_float+0x2ca>
 800c8de:	9b02      	ldr	r3, [sp, #8]
 800c8e0:	0032      	movs	r2, r6
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	7819      	ldrb	r1, [r3, #0]
 800c8e6:	9302      	str	r3, [sp, #8]
 800c8e8:	23be      	movs	r3, #190	@ 0xbe
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	58e3      	ldr	r3, [r4, r3]
 800c8ee:	9803      	ldr	r0, [sp, #12]
 800c8f0:	4798      	blx	r3
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	6123      	str	r3, [r4, #16]
 800c8f8:	e7c3      	b.n	800c882 <_scanf_float+0x28a>
 800c8fa:	46c0      	nop			@ (mov r8, r8)
 800c8fc:	fffffeff 	.word	0xfffffeff
 800c900:	fffffe7f 	.word	0xfffffe7f
 800c904:	fffff87f 	.word	0xfffff87f
 800c908:	fffffd7f 	.word	0xfffffd7f
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	1e7d      	subs	r5, r7, #1
 800c910:	7829      	ldrb	r1, [r5, #0]
 800c912:	3b01      	subs	r3, #1
 800c914:	6123      	str	r3, [r4, #16]
 800c916:	2965      	cmp	r1, #101	@ 0x65
 800c918:	d00c      	beq.n	800c934 <_scanf_float+0x33c>
 800c91a:	2945      	cmp	r1, #69	@ 0x45
 800c91c:	d00a      	beq.n	800c934 <_scanf_float+0x33c>
 800c91e:	23be      	movs	r3, #190	@ 0xbe
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	58e3      	ldr	r3, [r4, r3]
 800c924:	0032      	movs	r2, r6
 800c926:	9803      	ldr	r0, [sp, #12]
 800c928:	4798      	blx	r3
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	1ebd      	subs	r5, r7, #2
 800c92e:	3b01      	subs	r3, #1
 800c930:	7829      	ldrb	r1, [r5, #0]
 800c932:	6123      	str	r3, [r4, #16]
 800c934:	23be      	movs	r3, #190	@ 0xbe
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	0032      	movs	r2, r6
 800c93a:	58e3      	ldr	r3, [r4, r3]
 800c93c:	9803      	ldr	r0, [sp, #12]
 800c93e:	4798      	blx	r3
 800c940:	002f      	movs	r7, r5
 800c942:	6821      	ldr	r1, [r4, #0]
 800c944:	2310      	movs	r3, #16
 800c946:	000a      	movs	r2, r1
 800c948:	401a      	ands	r2, r3
 800c94a:	4219      	tst	r1, r3
 800c94c:	d001      	beq.n	800c952 <_scanf_float+0x35a>
 800c94e:	2000      	movs	r0, #0
 800c950:	e696      	b.n	800c680 <_scanf_float+0x88>
 800c952:	21c0      	movs	r1, #192	@ 0xc0
 800c954:	703a      	strb	r2, [r7, #0]
 800c956:	6823      	ldr	r3, [r4, #0]
 800c958:	00c9      	lsls	r1, r1, #3
 800c95a:	400b      	ands	r3, r1
 800c95c:	2180      	movs	r1, #128	@ 0x80
 800c95e:	00c9      	lsls	r1, r1, #3
 800c960:	428b      	cmp	r3, r1
 800c962:	d11c      	bne.n	800c99e <_scanf_float+0x3a6>
 800c964:	9b05      	ldr	r3, [sp, #20]
 800c966:	9a01      	ldr	r2, [sp, #4]
 800c968:	9905      	ldr	r1, [sp, #20]
 800c96a:	1a9a      	subs	r2, r3, r2
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	428b      	cmp	r3, r1
 800c970:	d121      	bne.n	800c9b6 <_scanf_float+0x3be>
 800c972:	2200      	movs	r2, #0
 800c974:	9904      	ldr	r1, [sp, #16]
 800c976:	9803      	ldr	r0, [sp, #12]
 800c978:	f002 fc6e 	bl	800f258 <_strtod_r>
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	0006      	movs	r6, r0
 800c982:	000f      	movs	r7, r1
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	0791      	lsls	r1, r2, #30
 800c988:	d522      	bpl.n	800c9d0 <_scanf_float+0x3d8>
 800c98a:	9907      	ldr	r1, [sp, #28]
 800c98c:	1d1a      	adds	r2, r3, #4
 800c98e:	600a      	str	r2, [r1, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	601e      	str	r6, [r3, #0]
 800c994:	605f      	str	r7, [r3, #4]
 800c996:	68e3      	ldr	r3, [r4, #12]
 800c998:	3301      	adds	r3, #1
 800c99a:	60e3      	str	r3, [r4, #12]
 800c99c:	e7d7      	b.n	800c94e <_scanf_float+0x356>
 800c99e:	9b08      	ldr	r3, [sp, #32]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0e6      	beq.n	800c972 <_scanf_float+0x37a>
 800c9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a6:	9803      	ldr	r0, [sp, #12]
 800c9a8:	1c59      	adds	r1, r3, #1
 800c9aa:	230a      	movs	r3, #10
 800c9ac:	f002 fce6 	bl	800f37c <_strtol_r>
 800c9b0:	9b08      	ldr	r3, [sp, #32]
 800c9b2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800c9b4:	1ac2      	subs	r2, r0, r3
 800c9b6:	0023      	movs	r3, r4
 800c9b8:	3370      	adds	r3, #112	@ 0x70
 800c9ba:	33ff      	adds	r3, #255	@ 0xff
 800c9bc:	429f      	cmp	r7, r3
 800c9be:	d302      	bcc.n	800c9c6 <_scanf_float+0x3ce>
 800c9c0:	0027      	movs	r7, r4
 800c9c2:	376f      	adds	r7, #111	@ 0x6f
 800c9c4:	37ff      	adds	r7, #255	@ 0xff
 800c9c6:	0038      	movs	r0, r7
 800c9c8:	4910      	ldr	r1, [pc, #64]	@ (800ca0c <_scanf_float+0x414>)
 800c9ca:	f000 f8e7 	bl	800cb9c <siprintf>
 800c9ce:	e7d0      	b.n	800c972 <_scanf_float+0x37a>
 800c9d0:	1d19      	adds	r1, r3, #4
 800c9d2:	0752      	lsls	r2, r2, #29
 800c9d4:	d502      	bpl.n	800c9dc <_scanf_float+0x3e4>
 800c9d6:	9a07      	ldr	r2, [sp, #28]
 800c9d8:	6011      	str	r1, [r2, #0]
 800c9da:	e7d9      	b.n	800c990 <_scanf_float+0x398>
 800c9dc:	9a07      	ldr	r2, [sp, #28]
 800c9de:	0030      	movs	r0, r6
 800c9e0:	6011      	str	r1, [r2, #0]
 800c9e2:	681d      	ldr	r5, [r3, #0]
 800c9e4:	0032      	movs	r2, r6
 800c9e6:	003b      	movs	r3, r7
 800c9e8:	0039      	movs	r1, r7
 800c9ea:	f7f6 fb3f 	bl	800306c <__aeabi_dcmpun>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d004      	beq.n	800c9fc <_scanf_float+0x404>
 800c9f2:	4807      	ldr	r0, [pc, #28]	@ (800ca10 <_scanf_float+0x418>)
 800c9f4:	f000 f9d0 	bl	800cd98 <nanf>
 800c9f8:	6028      	str	r0, [r5, #0]
 800c9fa:	e7cc      	b.n	800c996 <_scanf_float+0x39e>
 800c9fc:	0030      	movs	r0, r6
 800c9fe:	0039      	movs	r1, r7
 800ca00:	f7f6 fc2c 	bl	800325c <__aeabi_d2f>
 800ca04:	e7f8      	b.n	800c9f8 <_scanf_float+0x400>
 800ca06:	2300      	movs	r3, #0
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	e62d      	b.n	800c668 <_scanf_float+0x70>
 800ca0c:	08010e40 	.word	0x08010e40
 800ca10:	080111d5 	.word	0x080111d5

0800ca14 <std>:
 800ca14:	2300      	movs	r3, #0
 800ca16:	b510      	push	{r4, lr}
 800ca18:	0004      	movs	r4, r0
 800ca1a:	6003      	str	r3, [r0, #0]
 800ca1c:	6043      	str	r3, [r0, #4]
 800ca1e:	6083      	str	r3, [r0, #8]
 800ca20:	8181      	strh	r1, [r0, #12]
 800ca22:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca24:	81c2      	strh	r2, [r0, #14]
 800ca26:	6103      	str	r3, [r0, #16]
 800ca28:	6143      	str	r3, [r0, #20]
 800ca2a:	6183      	str	r3, [r0, #24]
 800ca2c:	0019      	movs	r1, r3
 800ca2e:	2208      	movs	r2, #8
 800ca30:	305c      	adds	r0, #92	@ 0x5c
 800ca32:	f000 f91f 	bl	800cc74 <memset>
 800ca36:	4b0b      	ldr	r3, [pc, #44]	@ (800ca64 <std+0x50>)
 800ca38:	6224      	str	r4, [r4, #32]
 800ca3a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca68 <std+0x54>)
 800ca3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca40:	4b0a      	ldr	r3, [pc, #40]	@ (800ca6c <std+0x58>)
 800ca42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca44:	4b0a      	ldr	r3, [pc, #40]	@ (800ca70 <std+0x5c>)
 800ca46:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca48:	4b0a      	ldr	r3, [pc, #40]	@ (800ca74 <std+0x60>)
 800ca4a:	429c      	cmp	r4, r3
 800ca4c:	d005      	beq.n	800ca5a <std+0x46>
 800ca4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca78 <std+0x64>)
 800ca50:	429c      	cmp	r4, r3
 800ca52:	d002      	beq.n	800ca5a <std+0x46>
 800ca54:	4b09      	ldr	r3, [pc, #36]	@ (800ca7c <std+0x68>)
 800ca56:	429c      	cmp	r4, r3
 800ca58:	d103      	bne.n	800ca62 <std+0x4e>
 800ca5a:	0020      	movs	r0, r4
 800ca5c:	3058      	adds	r0, #88	@ 0x58
 800ca5e:	f000 f98d 	bl	800cd7c <__retarget_lock_init_recursive>
 800ca62:	bd10      	pop	{r4, pc}
 800ca64:	0800cbdd 	.word	0x0800cbdd
 800ca68:	0800cc05 	.word	0x0800cc05
 800ca6c:	0800cc3d 	.word	0x0800cc3d
 800ca70:	0800cc69 	.word	0x0800cc69
 800ca74:	200006a0 	.word	0x200006a0
 800ca78:	20000708 	.word	0x20000708
 800ca7c:	20000770 	.word	0x20000770

0800ca80 <stdio_exit_handler>:
 800ca80:	b510      	push	{r4, lr}
 800ca82:	4a03      	ldr	r2, [pc, #12]	@ (800ca90 <stdio_exit_handler+0x10>)
 800ca84:	4903      	ldr	r1, [pc, #12]	@ (800ca94 <stdio_exit_handler+0x14>)
 800ca86:	4804      	ldr	r0, [pc, #16]	@ (800ca98 <stdio_exit_handler+0x18>)
 800ca88:	f000 f86c 	bl	800cb64 <_fwalk_sglue>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	46c0      	nop			@ (mov r8, r8)
 800ca90:	20000030 	.word	0x20000030
 800ca94:	0800f74d 	.word	0x0800f74d
 800ca98:	20000040 	.word	0x20000040

0800ca9c <cleanup_stdio>:
 800ca9c:	6841      	ldr	r1, [r0, #4]
 800ca9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cacc <cleanup_stdio+0x30>)
 800caa0:	b510      	push	{r4, lr}
 800caa2:	0004      	movs	r4, r0
 800caa4:	4299      	cmp	r1, r3
 800caa6:	d001      	beq.n	800caac <cleanup_stdio+0x10>
 800caa8:	f002 fe50 	bl	800f74c <_fflush_r>
 800caac:	68a1      	ldr	r1, [r4, #8]
 800caae:	4b08      	ldr	r3, [pc, #32]	@ (800cad0 <cleanup_stdio+0x34>)
 800cab0:	4299      	cmp	r1, r3
 800cab2:	d002      	beq.n	800caba <cleanup_stdio+0x1e>
 800cab4:	0020      	movs	r0, r4
 800cab6:	f002 fe49 	bl	800f74c <_fflush_r>
 800caba:	68e1      	ldr	r1, [r4, #12]
 800cabc:	4b05      	ldr	r3, [pc, #20]	@ (800cad4 <cleanup_stdio+0x38>)
 800cabe:	4299      	cmp	r1, r3
 800cac0:	d002      	beq.n	800cac8 <cleanup_stdio+0x2c>
 800cac2:	0020      	movs	r0, r4
 800cac4:	f002 fe42 	bl	800f74c <_fflush_r>
 800cac8:	bd10      	pop	{r4, pc}
 800caca:	46c0      	nop			@ (mov r8, r8)
 800cacc:	200006a0 	.word	0x200006a0
 800cad0:	20000708 	.word	0x20000708
 800cad4:	20000770 	.word	0x20000770

0800cad8 <global_stdio_init.part.0>:
 800cad8:	b510      	push	{r4, lr}
 800cada:	4b09      	ldr	r3, [pc, #36]	@ (800cb00 <global_stdio_init.part.0+0x28>)
 800cadc:	4a09      	ldr	r2, [pc, #36]	@ (800cb04 <global_stdio_init.part.0+0x2c>)
 800cade:	2104      	movs	r1, #4
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	4809      	ldr	r0, [pc, #36]	@ (800cb08 <global_stdio_init.part.0+0x30>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	f7ff ff95 	bl	800ca14 <std>
 800caea:	2201      	movs	r2, #1
 800caec:	2109      	movs	r1, #9
 800caee:	4807      	ldr	r0, [pc, #28]	@ (800cb0c <global_stdio_init.part.0+0x34>)
 800caf0:	f7ff ff90 	bl	800ca14 <std>
 800caf4:	2202      	movs	r2, #2
 800caf6:	2112      	movs	r1, #18
 800caf8:	4805      	ldr	r0, [pc, #20]	@ (800cb10 <global_stdio_init.part.0+0x38>)
 800cafa:	f7ff ff8b 	bl	800ca14 <std>
 800cafe:	bd10      	pop	{r4, pc}
 800cb00:	200007d8 	.word	0x200007d8
 800cb04:	0800ca81 	.word	0x0800ca81
 800cb08:	200006a0 	.word	0x200006a0
 800cb0c:	20000708 	.word	0x20000708
 800cb10:	20000770 	.word	0x20000770

0800cb14 <__sfp_lock_acquire>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	4802      	ldr	r0, [pc, #8]	@ (800cb20 <__sfp_lock_acquire+0xc>)
 800cb18:	f000 f931 	bl	800cd7e <__retarget_lock_acquire_recursive>
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	46c0      	nop			@ (mov r8, r8)
 800cb20:	200007e1 	.word	0x200007e1

0800cb24 <__sfp_lock_release>:
 800cb24:	b510      	push	{r4, lr}
 800cb26:	4802      	ldr	r0, [pc, #8]	@ (800cb30 <__sfp_lock_release+0xc>)
 800cb28:	f000 f92a 	bl	800cd80 <__retarget_lock_release_recursive>
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	46c0      	nop			@ (mov r8, r8)
 800cb30:	200007e1 	.word	0x200007e1

0800cb34 <__sinit>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	0004      	movs	r4, r0
 800cb38:	f7ff ffec 	bl	800cb14 <__sfp_lock_acquire>
 800cb3c:	6a23      	ldr	r3, [r4, #32]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <__sinit+0x14>
 800cb42:	f7ff ffef 	bl	800cb24 <__sfp_lock_release>
 800cb46:	bd10      	pop	{r4, pc}
 800cb48:	4b04      	ldr	r3, [pc, #16]	@ (800cb5c <__sinit+0x28>)
 800cb4a:	6223      	str	r3, [r4, #32]
 800cb4c:	4b04      	ldr	r3, [pc, #16]	@ (800cb60 <__sinit+0x2c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1f6      	bne.n	800cb42 <__sinit+0xe>
 800cb54:	f7ff ffc0 	bl	800cad8 <global_stdio_init.part.0>
 800cb58:	e7f3      	b.n	800cb42 <__sinit+0xe>
 800cb5a:	46c0      	nop			@ (mov r8, r8)
 800cb5c:	0800ca9d 	.word	0x0800ca9d
 800cb60:	200007d8 	.word	0x200007d8

0800cb64 <_fwalk_sglue>:
 800cb64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb66:	0014      	movs	r4, r2
 800cb68:	2600      	movs	r6, #0
 800cb6a:	9000      	str	r0, [sp, #0]
 800cb6c:	9101      	str	r1, [sp, #4]
 800cb6e:	68a5      	ldr	r5, [r4, #8]
 800cb70:	6867      	ldr	r7, [r4, #4]
 800cb72:	3f01      	subs	r7, #1
 800cb74:	d504      	bpl.n	800cb80 <_fwalk_sglue+0x1c>
 800cb76:	6824      	ldr	r4, [r4, #0]
 800cb78:	2c00      	cmp	r4, #0
 800cb7a:	d1f8      	bne.n	800cb6e <_fwalk_sglue+0xa>
 800cb7c:	0030      	movs	r0, r6
 800cb7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb80:	89ab      	ldrh	r3, [r5, #12]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d908      	bls.n	800cb98 <_fwalk_sglue+0x34>
 800cb86:	220e      	movs	r2, #14
 800cb88:	5eab      	ldrsh	r3, [r5, r2]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	d004      	beq.n	800cb98 <_fwalk_sglue+0x34>
 800cb8e:	0029      	movs	r1, r5
 800cb90:	9800      	ldr	r0, [sp, #0]
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	4798      	blx	r3
 800cb96:	4306      	orrs	r6, r0
 800cb98:	3568      	adds	r5, #104	@ 0x68
 800cb9a:	e7ea      	b.n	800cb72 <_fwalk_sglue+0xe>

0800cb9c <siprintf>:
 800cb9c:	b40e      	push	{r1, r2, r3}
 800cb9e:	b500      	push	{lr}
 800cba0:	490b      	ldr	r1, [pc, #44]	@ (800cbd0 <siprintf+0x34>)
 800cba2:	b09c      	sub	sp, #112	@ 0x70
 800cba4:	ab1d      	add	r3, sp, #116	@ 0x74
 800cba6:	9002      	str	r0, [sp, #8]
 800cba8:	9006      	str	r0, [sp, #24]
 800cbaa:	9107      	str	r1, [sp, #28]
 800cbac:	9104      	str	r1, [sp, #16]
 800cbae:	4809      	ldr	r0, [pc, #36]	@ (800cbd4 <siprintf+0x38>)
 800cbb0:	4909      	ldr	r1, [pc, #36]	@ (800cbd8 <siprintf+0x3c>)
 800cbb2:	cb04      	ldmia	r3!, {r2}
 800cbb4:	9105      	str	r1, [sp, #20]
 800cbb6:	6800      	ldr	r0, [r0, #0]
 800cbb8:	a902      	add	r1, sp, #8
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	f002 fc42 	bl	800f444 <_svfiprintf_r>
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	9b02      	ldr	r3, [sp, #8]
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	b01c      	add	sp, #112	@ 0x70
 800cbc8:	bc08      	pop	{r3}
 800cbca:	b003      	add	sp, #12
 800cbcc:	4718      	bx	r3
 800cbce:	46c0      	nop			@ (mov r8, r8)
 800cbd0:	7fffffff 	.word	0x7fffffff
 800cbd4:	2000003c 	.word	0x2000003c
 800cbd8:	ffff0208 	.word	0xffff0208

0800cbdc <__sread>:
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	000c      	movs	r4, r1
 800cbe0:	250e      	movs	r5, #14
 800cbe2:	5f49      	ldrsh	r1, [r1, r5]
 800cbe4:	f000 f878 	bl	800ccd8 <_read_r>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	db03      	blt.n	800cbf4 <__sread+0x18>
 800cbec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cbee:	181b      	adds	r3, r3, r0
 800cbf0:	6563      	str	r3, [r4, #84]	@ 0x54
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	4a02      	ldr	r2, [pc, #8]	@ (800cc00 <__sread+0x24>)
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	e7f9      	b.n	800cbf2 <__sread+0x16>
 800cbfe:	46c0      	nop			@ (mov r8, r8)
 800cc00:	ffffefff 	.word	0xffffefff

0800cc04 <__swrite>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	001f      	movs	r7, r3
 800cc08:	898b      	ldrh	r3, [r1, #12]
 800cc0a:	0005      	movs	r5, r0
 800cc0c:	000c      	movs	r4, r1
 800cc0e:	0016      	movs	r6, r2
 800cc10:	05db      	lsls	r3, r3, #23
 800cc12:	d505      	bpl.n	800cc20 <__swrite+0x1c>
 800cc14:	230e      	movs	r3, #14
 800cc16:	5ec9      	ldrsh	r1, [r1, r3]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	f000 f848 	bl	800ccb0 <_lseek_r>
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	4a05      	ldr	r2, [pc, #20]	@ (800cc38 <__swrite+0x34>)
 800cc24:	0028      	movs	r0, r5
 800cc26:	4013      	ands	r3, r2
 800cc28:	81a3      	strh	r3, [r4, #12]
 800cc2a:	0032      	movs	r2, r6
 800cc2c:	230e      	movs	r3, #14
 800cc2e:	5ee1      	ldrsh	r1, [r4, r3]
 800cc30:	003b      	movs	r3, r7
 800cc32:	f000 f865 	bl	800cd00 <_write_r>
 800cc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc38:	ffffefff 	.word	0xffffefff

0800cc3c <__sseek>:
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	000c      	movs	r4, r1
 800cc40:	250e      	movs	r5, #14
 800cc42:	5f49      	ldrsh	r1, [r1, r5]
 800cc44:	f000 f834 	bl	800ccb0 <_lseek_r>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	1c42      	adds	r2, r0, #1
 800cc4c:	d103      	bne.n	800cc56 <__sseek+0x1a>
 800cc4e:	4a05      	ldr	r2, [pc, #20]	@ (800cc64 <__sseek+0x28>)
 800cc50:	4013      	ands	r3, r2
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	bd70      	pop	{r4, r5, r6, pc}
 800cc56:	2280      	movs	r2, #128	@ 0x80
 800cc58:	0152      	lsls	r2, r2, #5
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc60:	e7f8      	b.n	800cc54 <__sseek+0x18>
 800cc62:	46c0      	nop			@ (mov r8, r8)
 800cc64:	ffffefff 	.word	0xffffefff

0800cc68 <__sclose>:
 800cc68:	b510      	push	{r4, lr}
 800cc6a:	230e      	movs	r3, #14
 800cc6c:	5ec9      	ldrsh	r1, [r1, r3]
 800cc6e:	f000 f80d 	bl	800cc8c <_close_r>
 800cc72:	bd10      	pop	{r4, pc}

0800cc74 <memset>:
 800cc74:	0003      	movs	r3, r0
 800cc76:	1882      	adds	r2, r0, r2
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d100      	bne.n	800cc7e <memset+0xa>
 800cc7c:	4770      	bx	lr
 800cc7e:	7019      	strb	r1, [r3, #0]
 800cc80:	3301      	adds	r3, #1
 800cc82:	e7f9      	b.n	800cc78 <memset+0x4>

0800cc84 <_localeconv_r>:
 800cc84:	4800      	ldr	r0, [pc, #0]	@ (800cc88 <_localeconv_r+0x4>)
 800cc86:	4770      	bx	lr
 800cc88:	2000017c 	.word	0x2000017c

0800cc8c <_close_r>:
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	b570      	push	{r4, r5, r6, lr}
 800cc90:	4d06      	ldr	r5, [pc, #24]	@ (800ccac <_close_r+0x20>)
 800cc92:	0004      	movs	r4, r0
 800cc94:	0008      	movs	r0, r1
 800cc96:	602b      	str	r3, [r5, #0]
 800cc98:	f7f9 fd6a 	bl	8006770 <_close>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d103      	bne.n	800cca8 <_close_r+0x1c>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d000      	beq.n	800cca8 <_close_r+0x1c>
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	bd70      	pop	{r4, r5, r6, pc}
 800ccaa:	46c0      	nop			@ (mov r8, r8)
 800ccac:	200007dc 	.word	0x200007dc

0800ccb0 <_lseek_r>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	0004      	movs	r4, r0
 800ccb4:	0008      	movs	r0, r1
 800ccb6:	0011      	movs	r1, r2
 800ccb8:	001a      	movs	r2, r3
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4d05      	ldr	r5, [pc, #20]	@ (800ccd4 <_lseek_r+0x24>)
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f9 fd77 	bl	80067b2 <_lseek>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d103      	bne.n	800ccd0 <_lseek_r+0x20>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d000      	beq.n	800ccd0 <_lseek_r+0x20>
 800ccce:	6023      	str	r3, [r4, #0]
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}
 800ccd2:	46c0      	nop			@ (mov r8, r8)
 800ccd4:	200007dc 	.word	0x200007dc

0800ccd8 <_read_r>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	0004      	movs	r4, r0
 800ccdc:	0008      	movs	r0, r1
 800ccde:	0011      	movs	r1, r2
 800cce0:	001a      	movs	r2, r3
 800cce2:	2300      	movs	r3, #0
 800cce4:	4d05      	ldr	r5, [pc, #20]	@ (800ccfc <_read_r+0x24>)
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f9 fd09 	bl	80066fe <_read>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d103      	bne.n	800ccf8 <_read_r+0x20>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d000      	beq.n	800ccf8 <_read_r+0x20>
 800ccf6:	6023      	str	r3, [r4, #0]
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
 800ccfa:	46c0      	nop			@ (mov r8, r8)
 800ccfc:	200007dc 	.word	0x200007dc

0800cd00 <_write_r>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	0004      	movs	r4, r0
 800cd04:	0008      	movs	r0, r1
 800cd06:	0011      	movs	r1, r2
 800cd08:	001a      	movs	r2, r3
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	4d05      	ldr	r5, [pc, #20]	@ (800cd24 <_write_r+0x24>)
 800cd0e:	602b      	str	r3, [r5, #0]
 800cd10:	f7f9 fd12 	bl	8006738 <_write>
 800cd14:	1c43      	adds	r3, r0, #1
 800cd16:	d103      	bne.n	800cd20 <_write_r+0x20>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d000      	beq.n	800cd20 <_write_r+0x20>
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	bd70      	pop	{r4, r5, r6, pc}
 800cd22:	46c0      	nop			@ (mov r8, r8)
 800cd24:	200007dc 	.word	0x200007dc

0800cd28 <__errno>:
 800cd28:	4b01      	ldr	r3, [pc, #4]	@ (800cd30 <__errno+0x8>)
 800cd2a:	6818      	ldr	r0, [r3, #0]
 800cd2c:	4770      	bx	lr
 800cd2e:	46c0      	nop			@ (mov r8, r8)
 800cd30:	2000003c 	.word	0x2000003c

0800cd34 <__libc_init_array>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	2600      	movs	r6, #0
 800cd38:	4c0c      	ldr	r4, [pc, #48]	@ (800cd6c <__libc_init_array+0x38>)
 800cd3a:	4d0d      	ldr	r5, [pc, #52]	@ (800cd70 <__libc_init_array+0x3c>)
 800cd3c:	1b64      	subs	r4, r4, r5
 800cd3e:	10a4      	asrs	r4, r4, #2
 800cd40:	42a6      	cmp	r6, r4
 800cd42:	d109      	bne.n	800cd58 <__libc_init_array+0x24>
 800cd44:	2600      	movs	r6, #0
 800cd46:	f003 ffd1 	bl	8010cec <_init>
 800cd4a:	4c0a      	ldr	r4, [pc, #40]	@ (800cd74 <__libc_init_array+0x40>)
 800cd4c:	4d0a      	ldr	r5, [pc, #40]	@ (800cd78 <__libc_init_array+0x44>)
 800cd4e:	1b64      	subs	r4, r4, r5
 800cd50:	10a4      	asrs	r4, r4, #2
 800cd52:	42a6      	cmp	r6, r4
 800cd54:	d105      	bne.n	800cd62 <__libc_init_array+0x2e>
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
 800cd58:	00b3      	lsls	r3, r6, #2
 800cd5a:	58eb      	ldr	r3, [r5, r3]
 800cd5c:	4798      	blx	r3
 800cd5e:	3601      	adds	r6, #1
 800cd60:	e7ee      	b.n	800cd40 <__libc_init_array+0xc>
 800cd62:	00b3      	lsls	r3, r6, #2
 800cd64:	58eb      	ldr	r3, [r5, r3]
 800cd66:	4798      	blx	r3
 800cd68:	3601      	adds	r6, #1
 800cd6a:	e7f2      	b.n	800cd52 <__libc_init_array+0x1e>
 800cd6c:	08011270 	.word	0x08011270
 800cd70:	08011270 	.word	0x08011270
 800cd74:	08011274 	.word	0x08011274
 800cd78:	08011270 	.word	0x08011270

0800cd7c <__retarget_lock_init_recursive>:
 800cd7c:	4770      	bx	lr

0800cd7e <__retarget_lock_acquire_recursive>:
 800cd7e:	4770      	bx	lr

0800cd80 <__retarget_lock_release_recursive>:
 800cd80:	4770      	bx	lr

0800cd82 <memchr>:
 800cd82:	b2c9      	uxtb	r1, r1
 800cd84:	1882      	adds	r2, r0, r2
 800cd86:	4290      	cmp	r0, r2
 800cd88:	d101      	bne.n	800cd8e <memchr+0xc>
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	4770      	bx	lr
 800cd8e:	7803      	ldrb	r3, [r0, #0]
 800cd90:	428b      	cmp	r3, r1
 800cd92:	d0fb      	beq.n	800cd8c <memchr+0xa>
 800cd94:	3001      	adds	r0, #1
 800cd96:	e7f6      	b.n	800cd86 <memchr+0x4>

0800cd98 <nanf>:
 800cd98:	4800      	ldr	r0, [pc, #0]	@ (800cd9c <nanf+0x4>)
 800cd9a:	4770      	bx	lr
 800cd9c:	7fc00000 	.word	0x7fc00000

0800cda0 <quorem>:
 800cda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda2:	6902      	ldr	r2, [r0, #16]
 800cda4:	690f      	ldr	r7, [r1, #16]
 800cda6:	b087      	sub	sp, #28
 800cda8:	0006      	movs	r6, r0
 800cdaa:	000b      	movs	r3, r1
 800cdac:	2000      	movs	r0, #0
 800cdae:	9102      	str	r1, [sp, #8]
 800cdb0:	42ba      	cmp	r2, r7
 800cdb2:	db6d      	blt.n	800ce90 <quorem+0xf0>
 800cdb4:	3f01      	subs	r7, #1
 800cdb6:	00bc      	lsls	r4, r7, #2
 800cdb8:	3314      	adds	r3, #20
 800cdba:	9305      	str	r3, [sp, #20]
 800cdbc:	191b      	adds	r3, r3, r4
 800cdbe:	9303      	str	r3, [sp, #12]
 800cdc0:	0033      	movs	r3, r6
 800cdc2:	3314      	adds	r3, #20
 800cdc4:	191c      	adds	r4, r3, r4
 800cdc6:	9301      	str	r3, [sp, #4]
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	9804      	ldr	r0, [sp, #16]
 800cdd0:	681d      	ldr	r5, [r3, #0]
 800cdd2:	3501      	adds	r5, #1
 800cdd4:	0029      	movs	r1, r5
 800cdd6:	f7f3 f9b3 	bl	8000140 <__udivsi3>
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	9000      	str	r0, [sp, #0]
 800cdde:	42ab      	cmp	r3, r5
 800cde0:	d32b      	bcc.n	800ce3a <quorem+0x9a>
 800cde2:	9b05      	ldr	r3, [sp, #20]
 800cde4:	9d01      	ldr	r5, [sp, #4]
 800cde6:	469c      	mov	ip, r3
 800cde8:	2300      	movs	r3, #0
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	4662      	mov	r2, ip
 800cdf0:	ca08      	ldmia	r2!, {r3}
 800cdf2:	6828      	ldr	r0, [r5, #0]
 800cdf4:	4694      	mov	ip, r2
 800cdf6:	9a00      	ldr	r2, [sp, #0]
 800cdf8:	b299      	uxth	r1, r3
 800cdfa:	4351      	muls	r1, r2
 800cdfc:	9a05      	ldr	r2, [sp, #20]
 800cdfe:	0c1b      	lsrs	r3, r3, #16
 800ce00:	1889      	adds	r1, r1, r2
 800ce02:	9a00      	ldr	r2, [sp, #0]
 800ce04:	4353      	muls	r3, r2
 800ce06:	0c0a      	lsrs	r2, r1, #16
 800ce08:	189b      	adds	r3, r3, r2
 800ce0a:	0c1a      	lsrs	r2, r3, #16
 800ce0c:	b289      	uxth	r1, r1
 800ce0e:	9205      	str	r2, [sp, #20]
 800ce10:	b282      	uxth	r2, r0
 800ce12:	1a52      	subs	r2, r2, r1
 800ce14:	9904      	ldr	r1, [sp, #16]
 800ce16:	0c00      	lsrs	r0, r0, #16
 800ce18:	1852      	adds	r2, r2, r1
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	1411      	asrs	r1, r2, #16
 800ce1e:	1ac3      	subs	r3, r0, r3
 800ce20:	185b      	adds	r3, r3, r1
 800ce22:	1419      	asrs	r1, r3, #16
 800ce24:	b292      	uxth	r2, r2
 800ce26:	041b      	lsls	r3, r3, #16
 800ce28:	431a      	orrs	r2, r3
 800ce2a:	9b03      	ldr	r3, [sp, #12]
 800ce2c:	9104      	str	r1, [sp, #16]
 800ce2e:	c504      	stmia	r5!, {r2}
 800ce30:	4563      	cmp	r3, ip
 800ce32:	d2dc      	bcs.n	800cdee <quorem+0x4e>
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d030      	beq.n	800ce9c <quorem+0xfc>
 800ce3a:	0030      	movs	r0, r6
 800ce3c:	9902      	ldr	r1, [sp, #8]
 800ce3e:	f001 fa11 	bl	800e264 <__mcmp>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	db23      	blt.n	800ce8e <quorem+0xee>
 800ce46:	0034      	movs	r4, r6
 800ce48:	2500      	movs	r5, #0
 800ce4a:	9902      	ldr	r1, [sp, #8]
 800ce4c:	3414      	adds	r4, #20
 800ce4e:	3114      	adds	r1, #20
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	c901      	ldmia	r1!, {r0}
 800ce54:	9302      	str	r3, [sp, #8]
 800ce56:	466b      	mov	r3, sp
 800ce58:	891b      	ldrh	r3, [r3, #8]
 800ce5a:	b282      	uxth	r2, r0
 800ce5c:	1a9a      	subs	r2, r3, r2
 800ce5e:	9b02      	ldr	r3, [sp, #8]
 800ce60:	1952      	adds	r2, r2, r5
 800ce62:	0c00      	lsrs	r0, r0, #16
 800ce64:	0c1b      	lsrs	r3, r3, #16
 800ce66:	1a1b      	subs	r3, r3, r0
 800ce68:	1410      	asrs	r0, r2, #16
 800ce6a:	181b      	adds	r3, r3, r0
 800ce6c:	141d      	asrs	r5, r3, #16
 800ce6e:	b292      	uxth	r2, r2
 800ce70:	041b      	lsls	r3, r3, #16
 800ce72:	431a      	orrs	r2, r3
 800ce74:	9b03      	ldr	r3, [sp, #12]
 800ce76:	c404      	stmia	r4!, {r2}
 800ce78:	428b      	cmp	r3, r1
 800ce7a:	d2e9      	bcs.n	800ce50 <quorem+0xb0>
 800ce7c:	9a01      	ldr	r2, [sp, #4]
 800ce7e:	00bb      	lsls	r3, r7, #2
 800ce80:	18d3      	adds	r3, r2, r3
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	2a00      	cmp	r2, #0
 800ce86:	d013      	beq.n	800ceb0 <quorem+0x110>
 800ce88:	9b00      	ldr	r3, [sp, #0]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	9800      	ldr	r0, [sp, #0]
 800ce90:	b007      	add	sp, #28
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d104      	bne.n	800cea4 <quorem+0x104>
 800ce9a:	3f01      	subs	r7, #1
 800ce9c:	9b01      	ldr	r3, [sp, #4]
 800ce9e:	3c04      	subs	r4, #4
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	d3f7      	bcc.n	800ce94 <quorem+0xf4>
 800cea4:	6137      	str	r7, [r6, #16]
 800cea6:	e7c8      	b.n	800ce3a <quorem+0x9a>
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	2a00      	cmp	r2, #0
 800ceac:	d104      	bne.n	800ceb8 <quorem+0x118>
 800ceae:	3f01      	subs	r7, #1
 800ceb0:	9a01      	ldr	r2, [sp, #4]
 800ceb2:	3b04      	subs	r3, #4
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d3f7      	bcc.n	800cea8 <quorem+0x108>
 800ceb8:	6137      	str	r7, [r6, #16]
 800ceba:	e7e5      	b.n	800ce88 <quorem+0xe8>

0800cebc <_dtoa_r>:
 800cebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cebe:	0014      	movs	r4, r2
 800cec0:	001d      	movs	r5, r3
 800cec2:	69c6      	ldr	r6, [r0, #28]
 800cec4:	b09d      	sub	sp, #116	@ 0x74
 800cec6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cec8:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ceca:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800cecc:	9003      	str	r0, [sp, #12]
 800cece:	2e00      	cmp	r6, #0
 800ced0:	d10f      	bne.n	800cef2 <_dtoa_r+0x36>
 800ced2:	2010      	movs	r0, #16
 800ced4:	f000 fe30 	bl	800db38 <malloc>
 800ced8:	9b03      	ldr	r3, [sp, #12]
 800ceda:	1e02      	subs	r2, r0, #0
 800cedc:	61d8      	str	r0, [r3, #28]
 800cede:	d104      	bne.n	800ceea <_dtoa_r+0x2e>
 800cee0:	21ef      	movs	r1, #239	@ 0xef
 800cee2:	4bc7      	ldr	r3, [pc, #796]	@ (800d200 <_dtoa_r+0x344>)
 800cee4:	48c7      	ldr	r0, [pc, #796]	@ (800d204 <_dtoa_r+0x348>)
 800cee6:	f002 fca3 	bl	800f830 <__assert_func>
 800ceea:	6046      	str	r6, [r0, #4]
 800ceec:	6086      	str	r6, [r0, #8]
 800ceee:	6006      	str	r6, [r0, #0]
 800cef0:	60c6      	str	r6, [r0, #12]
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	69db      	ldr	r3, [r3, #28]
 800cef6:	6819      	ldr	r1, [r3, #0]
 800cef8:	2900      	cmp	r1, #0
 800cefa:	d00b      	beq.n	800cf14 <_dtoa_r+0x58>
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	2301      	movs	r3, #1
 800cf00:	4093      	lsls	r3, r2
 800cf02:	604a      	str	r2, [r1, #4]
 800cf04:	608b      	str	r3, [r1, #8]
 800cf06:	9803      	ldr	r0, [sp, #12]
 800cf08:	f000 ff16 	bl	800dd38 <_Bfree>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	9b03      	ldr	r3, [sp, #12]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	da1e      	bge.n	800cf56 <_dtoa_r+0x9a>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	603b      	str	r3, [r7, #0]
 800cf1c:	006b      	lsls	r3, r5, #1
 800cf1e:	085b      	lsrs	r3, r3, #1
 800cf20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf22:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cf24:	4bb8      	ldr	r3, [pc, #736]	@ (800d208 <_dtoa_r+0x34c>)
 800cf26:	4ab8      	ldr	r2, [pc, #736]	@ (800d208 <_dtoa_r+0x34c>)
 800cf28:	403b      	ands	r3, r7
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d116      	bne.n	800cf5c <_dtoa_r+0xa0>
 800cf2e:	4bb7      	ldr	r3, [pc, #732]	@ (800d20c <_dtoa_r+0x350>)
 800cf30:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	033b      	lsls	r3, r7, #12
 800cf36:	0b1b      	lsrs	r3, r3, #12
 800cf38:	4323      	orrs	r3, r4
 800cf3a:	d101      	bne.n	800cf40 <_dtoa_r+0x84>
 800cf3c:	f000 fd83 	bl	800da46 <_dtoa_r+0xb8a>
 800cf40:	4bb3      	ldr	r3, [pc, #716]	@ (800d210 <_dtoa_r+0x354>)
 800cf42:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cf44:	9308      	str	r3, [sp, #32]
 800cf46:	2a00      	cmp	r2, #0
 800cf48:	d002      	beq.n	800cf50 <_dtoa_r+0x94>
 800cf4a:	4bb2      	ldr	r3, [pc, #712]	@ (800d214 <_dtoa_r+0x358>)
 800cf4c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cf4e:	6013      	str	r3, [r2, #0]
 800cf50:	9808      	ldr	r0, [sp, #32]
 800cf52:	b01d      	add	sp, #116	@ 0x74
 800cf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf56:	2300      	movs	r3, #0
 800cf58:	603b      	str	r3, [r7, #0]
 800cf5a:	e7e2      	b.n	800cf22 <_dtoa_r+0x66>
 800cf5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf60:	9212      	str	r2, [sp, #72]	@ 0x48
 800cf62:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf64:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cf66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f7f3 fa6e 	bl	800044c <__aeabi_dcmpeq>
 800cf70:	1e06      	subs	r6, r0, #0
 800cf72:	d00b      	beq.n	800cf8c <_dtoa_r+0xd0>
 800cf74:	2301      	movs	r3, #1
 800cf76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <_dtoa_r+0xca>
 800cf80:	4ba5      	ldr	r3, [pc, #660]	@ (800d218 <_dtoa_r+0x35c>)
 800cf82:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cf84:	6013      	str	r3, [r2, #0]
 800cf86:	4ba5      	ldr	r3, [pc, #660]	@ (800d21c <_dtoa_r+0x360>)
 800cf88:	9308      	str	r3, [sp, #32]
 800cf8a:	e7e1      	b.n	800cf50 <_dtoa_r+0x94>
 800cf8c:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	9803      	ldr	r0, [sp, #12]
 800cf96:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf9a:	f001 fa85 	bl	800e4a8 <__d2b>
 800cf9e:	007a      	lsls	r2, r7, #1
 800cfa0:	9005      	str	r0, [sp, #20]
 800cfa2:	0d52      	lsrs	r2, r2, #21
 800cfa4:	d100      	bne.n	800cfa8 <_dtoa_r+0xec>
 800cfa6:	e07b      	b.n	800d0a0 <_dtoa_r+0x1e4>
 800cfa8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfaa:	9618      	str	r6, [sp, #96]	@ 0x60
 800cfac:	0319      	lsls	r1, r3, #12
 800cfae:	4b9c      	ldr	r3, [pc, #624]	@ (800d220 <_dtoa_r+0x364>)
 800cfb0:	0b09      	lsrs	r1, r1, #12
 800cfb2:	430b      	orrs	r3, r1
 800cfb4:	499b      	ldr	r1, [pc, #620]	@ (800d224 <_dtoa_r+0x368>)
 800cfb6:	1857      	adds	r7, r2, r1
 800cfb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cfba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4b99      	ldr	r3, [pc, #612]	@ (800d228 <_dtoa_r+0x36c>)
 800cfc2:	f7f5 fcb7 	bl	8002934 <__aeabi_dsub>
 800cfc6:	4a99      	ldr	r2, [pc, #612]	@ (800d22c <_dtoa_r+0x370>)
 800cfc8:	4b99      	ldr	r3, [pc, #612]	@ (800d230 <_dtoa_r+0x374>)
 800cfca:	f7f5 f9eb 	bl	80023a4 <__aeabi_dmul>
 800cfce:	4a99      	ldr	r2, [pc, #612]	@ (800d234 <_dtoa_r+0x378>)
 800cfd0:	4b99      	ldr	r3, [pc, #612]	@ (800d238 <_dtoa_r+0x37c>)
 800cfd2:	f7f4 fa3f 	bl	8001454 <__aeabi_dadd>
 800cfd6:	0004      	movs	r4, r0
 800cfd8:	0038      	movs	r0, r7
 800cfda:	000d      	movs	r5, r1
 800cfdc:	f7f6 f8a4 	bl	8003128 <__aeabi_i2d>
 800cfe0:	4a96      	ldr	r2, [pc, #600]	@ (800d23c <_dtoa_r+0x380>)
 800cfe2:	4b97      	ldr	r3, [pc, #604]	@ (800d240 <_dtoa_r+0x384>)
 800cfe4:	f7f5 f9de 	bl	80023a4 <__aeabi_dmul>
 800cfe8:	0002      	movs	r2, r0
 800cfea:	000b      	movs	r3, r1
 800cfec:	0020      	movs	r0, r4
 800cfee:	0029      	movs	r1, r5
 800cff0:	f7f4 fa30 	bl	8001454 <__aeabi_dadd>
 800cff4:	0004      	movs	r4, r0
 800cff6:	000d      	movs	r5, r1
 800cff8:	f7f6 f85a 	bl	80030b0 <__aeabi_d2iz>
 800cffc:	2200      	movs	r2, #0
 800cffe:	9004      	str	r0, [sp, #16]
 800d000:	2300      	movs	r3, #0
 800d002:	0020      	movs	r0, r4
 800d004:	0029      	movs	r1, r5
 800d006:	f7f3 fa27 	bl	8000458 <__aeabi_dcmplt>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d00b      	beq.n	800d026 <_dtoa_r+0x16a>
 800d00e:	9804      	ldr	r0, [sp, #16]
 800d010:	f7f6 f88a 	bl	8003128 <__aeabi_i2d>
 800d014:	002b      	movs	r3, r5
 800d016:	0022      	movs	r2, r4
 800d018:	f7f3 fa18 	bl	800044c <__aeabi_dcmpeq>
 800d01c:	4243      	negs	r3, r0
 800d01e:	4158      	adcs	r0, r3
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	1a1b      	subs	r3, r3, r0
 800d024:	9304      	str	r3, [sp, #16]
 800d026:	2301      	movs	r3, #1
 800d028:	9315      	str	r3, [sp, #84]	@ 0x54
 800d02a:	9b04      	ldr	r3, [sp, #16]
 800d02c:	2b16      	cmp	r3, #22
 800d02e:	d810      	bhi.n	800d052 <_dtoa_r+0x196>
 800d030:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d032:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d034:	9a04      	ldr	r2, [sp, #16]
 800d036:	4b83      	ldr	r3, [pc, #524]	@ (800d244 <_dtoa_r+0x388>)
 800d038:	00d2      	lsls	r2, r2, #3
 800d03a:	189b      	adds	r3, r3, r2
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	f7f3 fa0a 	bl	8000458 <__aeabi_dcmplt>
 800d044:	2800      	cmp	r0, #0
 800d046:	d047      	beq.n	800d0d8 <_dtoa_r+0x21c>
 800d048:	9b04      	ldr	r3, [sp, #16]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	2300      	movs	r3, #0
 800d050:	9315      	str	r3, [sp, #84]	@ 0x54
 800d052:	2200      	movs	r2, #0
 800d054:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d056:	9206      	str	r2, [sp, #24]
 800d058:	1bdb      	subs	r3, r3, r7
 800d05a:	1e5a      	subs	r2, r3, #1
 800d05c:	d53e      	bpl.n	800d0dc <_dtoa_r+0x220>
 800d05e:	2201      	movs	r2, #1
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	9306      	str	r3, [sp, #24]
 800d064:	2300      	movs	r3, #0
 800d066:	930d      	str	r3, [sp, #52]	@ 0x34
 800d068:	9b04      	ldr	r3, [sp, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	db38      	blt.n	800d0e0 <_dtoa_r+0x224>
 800d06e:	9a04      	ldr	r2, [sp, #16]
 800d070:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d072:	4694      	mov	ip, r2
 800d074:	4463      	add	r3, ip
 800d076:	930d      	str	r3, [sp, #52]	@ 0x34
 800d078:	2300      	movs	r3, #0
 800d07a:	9214      	str	r2, [sp, #80]	@ 0x50
 800d07c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d07e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d080:	2401      	movs	r4, #1
 800d082:	2b09      	cmp	r3, #9
 800d084:	d867      	bhi.n	800d156 <_dtoa_r+0x29a>
 800d086:	2b05      	cmp	r3, #5
 800d088:	dd02      	ble.n	800d090 <_dtoa_r+0x1d4>
 800d08a:	2400      	movs	r4, #0
 800d08c:	3b04      	subs	r3, #4
 800d08e:	9322      	str	r3, [sp, #136]	@ 0x88
 800d090:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d092:	1e98      	subs	r0, r3, #2
 800d094:	2803      	cmp	r0, #3
 800d096:	d867      	bhi.n	800d168 <_dtoa_r+0x2ac>
 800d098:	f7f3 f83e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800d09c:	5b383a2b 	.word	0x5b383a2b
 800d0a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d0a2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800d0a4:	18f6      	adds	r6, r6, r3
 800d0a6:	4b68      	ldr	r3, [pc, #416]	@ (800d248 <_dtoa_r+0x38c>)
 800d0a8:	18f2      	adds	r2, r6, r3
 800d0aa:	2a20      	cmp	r2, #32
 800d0ac:	dd0f      	ble.n	800d0ce <_dtoa_r+0x212>
 800d0ae:	2340      	movs	r3, #64	@ 0x40
 800d0b0:	1a9b      	subs	r3, r3, r2
 800d0b2:	409f      	lsls	r7, r3
 800d0b4:	4b65      	ldr	r3, [pc, #404]	@ (800d24c <_dtoa_r+0x390>)
 800d0b6:	0038      	movs	r0, r7
 800d0b8:	18f3      	adds	r3, r6, r3
 800d0ba:	40dc      	lsrs	r4, r3
 800d0bc:	4320      	orrs	r0, r4
 800d0be:	f7f6 f861 	bl	8003184 <__aeabi_ui2d>
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	4b62      	ldr	r3, [pc, #392]	@ (800d250 <_dtoa_r+0x394>)
 800d0c6:	1e77      	subs	r7, r6, #1
 800d0c8:	18cb      	adds	r3, r1, r3
 800d0ca:	9218      	str	r2, [sp, #96]	@ 0x60
 800d0cc:	e776      	b.n	800cfbc <_dtoa_r+0x100>
 800d0ce:	2320      	movs	r3, #32
 800d0d0:	0020      	movs	r0, r4
 800d0d2:	1a9b      	subs	r3, r3, r2
 800d0d4:	4098      	lsls	r0, r3
 800d0d6:	e7f2      	b.n	800d0be <_dtoa_r+0x202>
 800d0d8:	9015      	str	r0, [sp, #84]	@ 0x54
 800d0da:	e7ba      	b.n	800d052 <_dtoa_r+0x196>
 800d0dc:	920d      	str	r2, [sp, #52]	@ 0x34
 800d0de:	e7c3      	b.n	800d068 <_dtoa_r+0x1ac>
 800d0e0:	9b06      	ldr	r3, [sp, #24]
 800d0e2:	9a04      	ldr	r2, [sp, #16]
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	9306      	str	r3, [sp, #24]
 800d0e8:	4253      	negs	r3, r2
 800d0ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	9314      	str	r3, [sp, #80]	@ 0x50
 800d0f0:	e7c5      	b.n	800d07e <_dtoa_r+0x1c2>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	dc13      	bgt.n	800d128 <_dtoa_r+0x26c>
 800d100:	2301      	movs	r3, #1
 800d102:	001a      	movs	r2, r3
 800d104:	930e      	str	r3, [sp, #56]	@ 0x38
 800d106:	9309      	str	r3, [sp, #36]	@ 0x24
 800d108:	9223      	str	r2, [sp, #140]	@ 0x8c
 800d10a:	e00d      	b.n	800d128 <_dtoa_r+0x26c>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e7f1      	b.n	800d0f4 <_dtoa_r+0x238>
 800d110:	2300      	movs	r3, #0
 800d112:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d114:	9310      	str	r3, [sp, #64]	@ 0x40
 800d116:	4694      	mov	ip, r2
 800d118:	9b04      	ldr	r3, [sp, #16]
 800d11a:	4463      	add	r3, ip
 800d11c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d11e:	3301      	adds	r3, #1
 800d120:	9309      	str	r3, [sp, #36]	@ 0x24
 800d122:	2b00      	cmp	r3, #0
 800d124:	dc00      	bgt.n	800d128 <_dtoa_r+0x26c>
 800d126:	2301      	movs	r3, #1
 800d128:	9a03      	ldr	r2, [sp, #12]
 800d12a:	2100      	movs	r1, #0
 800d12c:	69d0      	ldr	r0, [r2, #28]
 800d12e:	2204      	movs	r2, #4
 800d130:	0015      	movs	r5, r2
 800d132:	3514      	adds	r5, #20
 800d134:	429d      	cmp	r5, r3
 800d136:	d91b      	bls.n	800d170 <_dtoa_r+0x2b4>
 800d138:	6041      	str	r1, [r0, #4]
 800d13a:	9803      	ldr	r0, [sp, #12]
 800d13c:	f000 fdb8 	bl	800dcb0 <_Balloc>
 800d140:	9008      	str	r0, [sp, #32]
 800d142:	2800      	cmp	r0, #0
 800d144:	d117      	bne.n	800d176 <_dtoa_r+0x2ba>
 800d146:	21b0      	movs	r1, #176	@ 0xb0
 800d148:	4b42      	ldr	r3, [pc, #264]	@ (800d254 <_dtoa_r+0x398>)
 800d14a:	482e      	ldr	r0, [pc, #184]	@ (800d204 <_dtoa_r+0x348>)
 800d14c:	9a08      	ldr	r2, [sp, #32]
 800d14e:	31ff      	adds	r1, #255	@ 0xff
 800d150:	e6c9      	b.n	800cee6 <_dtoa_r+0x2a>
 800d152:	2301      	movs	r3, #1
 800d154:	e7dd      	b.n	800d112 <_dtoa_r+0x256>
 800d156:	2300      	movs	r3, #0
 800d158:	9410      	str	r4, [sp, #64]	@ 0x40
 800d15a:	9322      	str	r3, [sp, #136]	@ 0x88
 800d15c:	3b01      	subs	r3, #1
 800d15e:	930e      	str	r3, [sp, #56]	@ 0x38
 800d160:	9309      	str	r3, [sp, #36]	@ 0x24
 800d162:	2200      	movs	r2, #0
 800d164:	3313      	adds	r3, #19
 800d166:	e7cf      	b.n	800d108 <_dtoa_r+0x24c>
 800d168:	2301      	movs	r3, #1
 800d16a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d16c:	3b02      	subs	r3, #2
 800d16e:	e7f6      	b.n	800d15e <_dtoa_r+0x2a2>
 800d170:	3101      	adds	r1, #1
 800d172:	0052      	lsls	r2, r2, #1
 800d174:	e7dc      	b.n	800d130 <_dtoa_r+0x274>
 800d176:	9b03      	ldr	r3, [sp, #12]
 800d178:	9a08      	ldr	r2, [sp, #32]
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d180:	2b0e      	cmp	r3, #14
 800d182:	d900      	bls.n	800d186 <_dtoa_r+0x2ca>
 800d184:	e0d9      	b.n	800d33a <_dtoa_r+0x47e>
 800d186:	2c00      	cmp	r4, #0
 800d188:	d100      	bne.n	800d18c <_dtoa_r+0x2d0>
 800d18a:	e0d6      	b.n	800d33a <_dtoa_r+0x47e>
 800d18c:	9b04      	ldr	r3, [sp, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dd64      	ble.n	800d25c <_dtoa_r+0x3a0>
 800d192:	210f      	movs	r1, #15
 800d194:	9a04      	ldr	r2, [sp, #16]
 800d196:	4b2b      	ldr	r3, [pc, #172]	@ (800d244 <_dtoa_r+0x388>)
 800d198:	400a      	ands	r2, r1
 800d19a:	00d2      	lsls	r2, r2, #3
 800d19c:	189b      	adds	r3, r3, r2
 800d19e:	681e      	ldr	r6, [r3, #0]
 800d1a0:	685f      	ldr	r7, [r3, #4]
 800d1a2:	9b04      	ldr	r3, [sp, #16]
 800d1a4:	2402      	movs	r4, #2
 800d1a6:	111d      	asrs	r5, r3, #4
 800d1a8:	05db      	lsls	r3, r3, #23
 800d1aa:	d50a      	bpl.n	800d1c2 <_dtoa_r+0x306>
 800d1ac:	4b2a      	ldr	r3, [pc, #168]	@ (800d258 <_dtoa_r+0x39c>)
 800d1ae:	400d      	ands	r5, r1
 800d1b0:	6a1a      	ldr	r2, [r3, #32]
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d1b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d1b8:	f7f4 fcb0 	bl	8001b1c <__aeabi_ddiv>
 800d1bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1be:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d1c0:	3401      	adds	r4, #1
 800d1c2:	4b25      	ldr	r3, [pc, #148]	@ (800d258 <_dtoa_r+0x39c>)
 800d1c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1c6:	2d00      	cmp	r5, #0
 800d1c8:	d108      	bne.n	800d1dc <_dtoa_r+0x320>
 800d1ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1ce:	0032      	movs	r2, r6
 800d1d0:	003b      	movs	r3, r7
 800d1d2:	f7f4 fca3 	bl	8001b1c <__aeabi_ddiv>
 800d1d6:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d1da:	e05a      	b.n	800d292 <_dtoa_r+0x3d6>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	421d      	tst	r5, r3
 800d1e0:	d009      	beq.n	800d1f6 <_dtoa_r+0x33a>
 800d1e2:	18e4      	adds	r4, r4, r3
 800d1e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1e6:	0030      	movs	r0, r6
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	0039      	movs	r1, r7
 800d1ee:	f7f5 f8d9 	bl	80023a4 <__aeabi_dmul>
 800d1f2:	0006      	movs	r6, r0
 800d1f4:	000f      	movs	r7, r1
 800d1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1f8:	106d      	asrs	r5, r5, #1
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	e7e2      	b.n	800d1c4 <_dtoa_r+0x308>
 800d1fe:	46c0      	nop			@ (mov r8, r8)
 800d200:	08010e52 	.word	0x08010e52
 800d204:	08010e69 	.word	0x08010e69
 800d208:	7ff00000 	.word	0x7ff00000
 800d20c:	0000270f 	.word	0x0000270f
 800d210:	08010e4e 	.word	0x08010e4e
 800d214:	08010e51 	.word	0x08010e51
 800d218:	08010e1d 	.word	0x08010e1d
 800d21c:	08010e1c 	.word	0x08010e1c
 800d220:	3ff00000 	.word	0x3ff00000
 800d224:	fffffc01 	.word	0xfffffc01
 800d228:	3ff80000 	.word	0x3ff80000
 800d22c:	636f4361 	.word	0x636f4361
 800d230:	3fd287a7 	.word	0x3fd287a7
 800d234:	8b60c8b3 	.word	0x8b60c8b3
 800d238:	3fc68a28 	.word	0x3fc68a28
 800d23c:	509f79fb 	.word	0x509f79fb
 800d240:	3fd34413 	.word	0x3fd34413
 800d244:	08010f60 	.word	0x08010f60
 800d248:	00000432 	.word	0x00000432
 800d24c:	00000412 	.word	0x00000412
 800d250:	fe100000 	.word	0xfe100000
 800d254:	08010ec1 	.word	0x08010ec1
 800d258:	08010f38 	.word	0x08010f38
 800d25c:	9b04      	ldr	r3, [sp, #16]
 800d25e:	2402      	movs	r4, #2
 800d260:	2b00      	cmp	r3, #0
 800d262:	d016      	beq.n	800d292 <_dtoa_r+0x3d6>
 800d264:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d266:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d268:	220f      	movs	r2, #15
 800d26a:	425d      	negs	r5, r3
 800d26c:	402a      	ands	r2, r5
 800d26e:	4bd7      	ldr	r3, [pc, #860]	@ (800d5cc <_dtoa_r+0x710>)
 800d270:	00d2      	lsls	r2, r2, #3
 800d272:	189b      	adds	r3, r3, r2
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	f7f5 f894 	bl	80023a4 <__aeabi_dmul>
 800d27c:	2701      	movs	r7, #1
 800d27e:	2300      	movs	r3, #0
 800d280:	900a      	str	r0, [sp, #40]	@ 0x28
 800d282:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d284:	4ed2      	ldr	r6, [pc, #840]	@ (800d5d0 <_dtoa_r+0x714>)
 800d286:	112d      	asrs	r5, r5, #4
 800d288:	2d00      	cmp	r5, #0
 800d28a:	d000      	beq.n	800d28e <_dtoa_r+0x3d2>
 800d28c:	e0ba      	b.n	800d404 <_dtoa_r+0x548>
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1a1      	bne.n	800d1d6 <_dtoa_r+0x31a>
 800d292:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d294:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d296:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d100      	bne.n	800d29e <_dtoa_r+0x3e2>
 800d29c:	e0bd      	b.n	800d41a <_dtoa_r+0x55e>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	0030      	movs	r0, r6
 800d2a2:	0039      	movs	r1, r7
 800d2a4:	4bcb      	ldr	r3, [pc, #812]	@ (800d5d4 <_dtoa_r+0x718>)
 800d2a6:	f7f3 f8d7 	bl	8000458 <__aeabi_dcmplt>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d100      	bne.n	800d2b0 <_dtoa_r+0x3f4>
 800d2ae:	e0b4      	b.n	800d41a <_dtoa_r+0x55e>
 800d2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d100      	bne.n	800d2b8 <_dtoa_r+0x3fc>
 800d2b6:	e0b0      	b.n	800d41a <_dtoa_r+0x55e>
 800d2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dd39      	ble.n	800d332 <_dtoa_r+0x476>
 800d2be:	9b04      	ldr	r3, [sp, #16]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2c6:	0030      	movs	r0, r6
 800d2c8:	4bc3      	ldr	r3, [pc, #780]	@ (800d5d8 <_dtoa_r+0x71c>)
 800d2ca:	0039      	movs	r1, r7
 800d2cc:	f7f5 f86a 	bl	80023a4 <__aeabi_dmul>
 800d2d0:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2d6:	3401      	adds	r4, #1
 800d2d8:	0020      	movs	r0, r4
 800d2da:	9311      	str	r3, [sp, #68]	@ 0x44
 800d2dc:	f7f5 ff24 	bl	8003128 <__aeabi_i2d>
 800d2e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2e4:	f7f5 f85e 	bl	80023a4 <__aeabi_dmul>
 800d2e8:	4bbc      	ldr	r3, [pc, #752]	@ (800d5dc <_dtoa_r+0x720>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f7f4 f8b2 	bl	8001454 <__aeabi_dadd>
 800d2f0:	4bbb      	ldr	r3, [pc, #748]	@ (800d5e0 <_dtoa_r+0x724>)
 800d2f2:	0006      	movs	r6, r0
 800d2f4:	18cf      	adds	r7, r1, r3
 800d2f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d000      	beq.n	800d2fe <_dtoa_r+0x442>
 800d2fc:	e091      	b.n	800d422 <_dtoa_r+0x566>
 800d2fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d302:	2200      	movs	r2, #0
 800d304:	4bb7      	ldr	r3, [pc, #732]	@ (800d5e4 <_dtoa_r+0x728>)
 800d306:	f7f5 fb15 	bl	8002934 <__aeabi_dsub>
 800d30a:	0032      	movs	r2, r6
 800d30c:	003b      	movs	r3, r7
 800d30e:	0004      	movs	r4, r0
 800d310:	000d      	movs	r5, r1
 800d312:	f7f3 f8b5 	bl	8000480 <__aeabi_dcmpgt>
 800d316:	2800      	cmp	r0, #0
 800d318:	d000      	beq.n	800d31c <_dtoa_r+0x460>
 800d31a:	e29d      	b.n	800d858 <_dtoa_r+0x99c>
 800d31c:	2180      	movs	r1, #128	@ 0x80
 800d31e:	0609      	lsls	r1, r1, #24
 800d320:	187b      	adds	r3, r7, r1
 800d322:	0032      	movs	r2, r6
 800d324:	0020      	movs	r0, r4
 800d326:	0029      	movs	r1, r5
 800d328:	f7f3 f896 	bl	8000458 <__aeabi_dcmplt>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d000      	beq.n	800d332 <_dtoa_r+0x476>
 800d330:	e130      	b.n	800d594 <_dtoa_r+0x6d8>
 800d332:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d334:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d336:	930a      	str	r3, [sp, #40]	@ 0x28
 800d338:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d33a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	da00      	bge.n	800d342 <_dtoa_r+0x486>
 800d340:	e177      	b.n	800d632 <_dtoa_r+0x776>
 800d342:	9a04      	ldr	r2, [sp, #16]
 800d344:	2a0e      	cmp	r2, #14
 800d346:	dd00      	ble.n	800d34a <_dtoa_r+0x48e>
 800d348:	e173      	b.n	800d632 <_dtoa_r+0x776>
 800d34a:	4ba0      	ldr	r3, [pc, #640]	@ (800d5cc <_dtoa_r+0x710>)
 800d34c:	00d2      	lsls	r2, r2, #3
 800d34e:	189b      	adds	r3, r3, r2
 800d350:	685c      	ldr	r4, [r3, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	9306      	str	r3, [sp, #24]
 800d356:	9407      	str	r4, [sp, #28]
 800d358:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	da03      	bge.n	800d366 <_dtoa_r+0x4aa>
 800d35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	dc00      	bgt.n	800d366 <_dtoa_r+0x4aa>
 800d364:	e106      	b.n	800d574 <_dtoa_r+0x6b8>
 800d366:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d368:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d36c:	9d08      	ldr	r5, [sp, #32]
 800d36e:	3b01      	subs	r3, #1
 800d370:	195b      	adds	r3, r3, r5
 800d372:	930a      	str	r3, [sp, #40]	@ 0x28
 800d374:	9a06      	ldr	r2, [sp, #24]
 800d376:	9b07      	ldr	r3, [sp, #28]
 800d378:	0030      	movs	r0, r6
 800d37a:	0039      	movs	r1, r7
 800d37c:	f7f4 fbce 	bl	8001b1c <__aeabi_ddiv>
 800d380:	f7f5 fe96 	bl	80030b0 <__aeabi_d2iz>
 800d384:	9009      	str	r0, [sp, #36]	@ 0x24
 800d386:	f7f5 fecf 	bl	8003128 <__aeabi_i2d>
 800d38a:	9a06      	ldr	r2, [sp, #24]
 800d38c:	9b07      	ldr	r3, [sp, #28]
 800d38e:	f7f5 f809 	bl	80023a4 <__aeabi_dmul>
 800d392:	0002      	movs	r2, r0
 800d394:	000b      	movs	r3, r1
 800d396:	0030      	movs	r0, r6
 800d398:	0039      	movs	r1, r7
 800d39a:	f7f5 facb 	bl	8002934 <__aeabi_dsub>
 800d39e:	002b      	movs	r3, r5
 800d3a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3a2:	3501      	adds	r5, #1
 800d3a4:	3230      	adds	r2, #48	@ 0x30
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3aa:	002c      	movs	r4, r5
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d000      	beq.n	800d3b2 <_dtoa_r+0x4f6>
 800d3b0:	e131      	b.n	800d616 <_dtoa_r+0x75a>
 800d3b2:	0002      	movs	r2, r0
 800d3b4:	000b      	movs	r3, r1
 800d3b6:	f7f4 f84d 	bl	8001454 <__aeabi_dadd>
 800d3ba:	9a06      	ldr	r2, [sp, #24]
 800d3bc:	9b07      	ldr	r3, [sp, #28]
 800d3be:	0006      	movs	r6, r0
 800d3c0:	000f      	movs	r7, r1
 800d3c2:	f7f3 f85d 	bl	8000480 <__aeabi_dcmpgt>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d000      	beq.n	800d3cc <_dtoa_r+0x510>
 800d3ca:	e10f      	b.n	800d5ec <_dtoa_r+0x730>
 800d3cc:	9a06      	ldr	r2, [sp, #24]
 800d3ce:	9b07      	ldr	r3, [sp, #28]
 800d3d0:	0030      	movs	r0, r6
 800d3d2:	0039      	movs	r1, r7
 800d3d4:	f7f3 f83a 	bl	800044c <__aeabi_dcmpeq>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d003      	beq.n	800d3e4 <_dtoa_r+0x528>
 800d3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3de:	07dd      	lsls	r5, r3, #31
 800d3e0:	d500      	bpl.n	800d3e4 <_dtoa_r+0x528>
 800d3e2:	e103      	b.n	800d5ec <_dtoa_r+0x730>
 800d3e4:	9905      	ldr	r1, [sp, #20]
 800d3e6:	9803      	ldr	r0, [sp, #12]
 800d3e8:	f000 fca6 	bl	800dd38 <_Bfree>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	7023      	strb	r3, [r4, #0]
 800d3f0:	9b04      	ldr	r3, [sp, #16]
 800d3f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d100      	bne.n	800d400 <_dtoa_r+0x544>
 800d3fe:	e5a7      	b.n	800cf50 <_dtoa_r+0x94>
 800d400:	601c      	str	r4, [r3, #0]
 800d402:	e5a5      	b.n	800cf50 <_dtoa_r+0x94>
 800d404:	423d      	tst	r5, r7
 800d406:	d005      	beq.n	800d414 <_dtoa_r+0x558>
 800d408:	6832      	ldr	r2, [r6, #0]
 800d40a:	6873      	ldr	r3, [r6, #4]
 800d40c:	f7f4 ffca 	bl	80023a4 <__aeabi_dmul>
 800d410:	003b      	movs	r3, r7
 800d412:	3401      	adds	r4, #1
 800d414:	106d      	asrs	r5, r5, #1
 800d416:	3608      	adds	r6, #8
 800d418:	e736      	b.n	800d288 <_dtoa_r+0x3cc>
 800d41a:	9b04      	ldr	r3, [sp, #16]
 800d41c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d420:	e75a      	b.n	800d2d8 <_dtoa_r+0x41c>
 800d422:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d424:	4b69      	ldr	r3, [pc, #420]	@ (800d5cc <_dtoa_r+0x710>)
 800d426:	3a01      	subs	r2, #1
 800d428:	00d2      	lsls	r2, r2, #3
 800d42a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d42c:	189b      	adds	r3, r3, r2
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	2900      	cmp	r1, #0
 800d434:	d04c      	beq.n	800d4d0 <_dtoa_r+0x614>
 800d436:	2000      	movs	r0, #0
 800d438:	496b      	ldr	r1, [pc, #428]	@ (800d5e8 <_dtoa_r+0x72c>)
 800d43a:	f7f4 fb6f 	bl	8001b1c <__aeabi_ddiv>
 800d43e:	0032      	movs	r2, r6
 800d440:	003b      	movs	r3, r7
 800d442:	f7f5 fa77 	bl	8002934 <__aeabi_dsub>
 800d446:	9a08      	ldr	r2, [sp, #32]
 800d448:	0006      	movs	r6, r0
 800d44a:	4694      	mov	ip, r2
 800d44c:	000f      	movs	r7, r1
 800d44e:	9b08      	ldr	r3, [sp, #32]
 800d450:	9316      	str	r3, [sp, #88]	@ 0x58
 800d452:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d454:	4463      	add	r3, ip
 800d456:	9311      	str	r3, [sp, #68]	@ 0x44
 800d458:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d45a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d45c:	f7f5 fe28 	bl	80030b0 <__aeabi_d2iz>
 800d460:	0005      	movs	r5, r0
 800d462:	f7f5 fe61 	bl	8003128 <__aeabi_i2d>
 800d466:	0002      	movs	r2, r0
 800d468:	000b      	movs	r3, r1
 800d46a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d46c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d46e:	f7f5 fa61 	bl	8002934 <__aeabi_dsub>
 800d472:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d474:	3530      	adds	r5, #48	@ 0x30
 800d476:	1c5c      	adds	r4, r3, #1
 800d478:	701d      	strb	r5, [r3, #0]
 800d47a:	0032      	movs	r2, r6
 800d47c:	003b      	movs	r3, r7
 800d47e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d480:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d482:	f7f2 ffe9 	bl	8000458 <__aeabi_dcmplt>
 800d486:	2800      	cmp	r0, #0
 800d488:	d16a      	bne.n	800d560 <_dtoa_r+0x6a4>
 800d48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d48c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d48e:	2000      	movs	r0, #0
 800d490:	4950      	ldr	r1, [pc, #320]	@ (800d5d4 <_dtoa_r+0x718>)
 800d492:	f7f5 fa4f 	bl	8002934 <__aeabi_dsub>
 800d496:	0032      	movs	r2, r6
 800d498:	003b      	movs	r3, r7
 800d49a:	f7f2 ffdd 	bl	8000458 <__aeabi_dcmplt>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d000      	beq.n	800d4a4 <_dtoa_r+0x5e8>
 800d4a2:	e0a5      	b.n	800d5f0 <_dtoa_r+0x734>
 800d4a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4a6:	42a3      	cmp	r3, r4
 800d4a8:	d100      	bne.n	800d4ac <_dtoa_r+0x5f0>
 800d4aa:	e742      	b.n	800d332 <_dtoa_r+0x476>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	0030      	movs	r0, r6
 800d4b0:	0039      	movs	r1, r7
 800d4b2:	4b49      	ldr	r3, [pc, #292]	@ (800d5d8 <_dtoa_r+0x71c>)
 800d4b4:	f7f4 ff76 	bl	80023a4 <__aeabi_dmul>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	0006      	movs	r6, r0
 800d4bc:	000f      	movs	r7, r1
 800d4be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4c2:	4b45      	ldr	r3, [pc, #276]	@ (800d5d8 <_dtoa_r+0x71c>)
 800d4c4:	f7f4 ff6e 	bl	80023a4 <__aeabi_dmul>
 800d4c8:	9416      	str	r4, [sp, #88]	@ 0x58
 800d4ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800d4cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d4ce:	e7c3      	b.n	800d458 <_dtoa_r+0x59c>
 800d4d0:	0030      	movs	r0, r6
 800d4d2:	0039      	movs	r1, r7
 800d4d4:	f7f4 ff66 	bl	80023a4 <__aeabi_dmul>
 800d4d8:	9d08      	ldr	r5, [sp, #32]
 800d4da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d4dc:	002b      	movs	r3, r5
 800d4de:	4694      	mov	ip, r2
 800d4e0:	9016      	str	r0, [sp, #88]	@ 0x58
 800d4e2:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d4e4:	4463      	add	r3, ip
 800d4e6:	9319      	str	r3, [sp, #100]	@ 0x64
 800d4e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4ec:	f7f5 fde0 	bl	80030b0 <__aeabi_d2iz>
 800d4f0:	0004      	movs	r4, r0
 800d4f2:	f7f5 fe19 	bl	8003128 <__aeabi_i2d>
 800d4f6:	000b      	movs	r3, r1
 800d4f8:	0002      	movs	r2, r0
 800d4fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4fe:	f7f5 fa19 	bl	8002934 <__aeabi_dsub>
 800d502:	3430      	adds	r4, #48	@ 0x30
 800d504:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d506:	702c      	strb	r4, [r5, #0]
 800d508:	3501      	adds	r5, #1
 800d50a:	0006      	movs	r6, r0
 800d50c:	000f      	movs	r7, r1
 800d50e:	42ab      	cmp	r3, r5
 800d510:	d129      	bne.n	800d566 <_dtoa_r+0x6aa>
 800d512:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d514:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d516:	9b08      	ldr	r3, [sp, #32]
 800d518:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800d51a:	469c      	mov	ip, r3
 800d51c:	2200      	movs	r2, #0
 800d51e:	4b32      	ldr	r3, [pc, #200]	@ (800d5e8 <_dtoa_r+0x72c>)
 800d520:	4464      	add	r4, ip
 800d522:	f7f3 ff97 	bl	8001454 <__aeabi_dadd>
 800d526:	0002      	movs	r2, r0
 800d528:	000b      	movs	r3, r1
 800d52a:	0030      	movs	r0, r6
 800d52c:	0039      	movs	r1, r7
 800d52e:	f7f2 ffa7 	bl	8000480 <__aeabi_dcmpgt>
 800d532:	2800      	cmp	r0, #0
 800d534:	d15c      	bne.n	800d5f0 <_dtoa_r+0x734>
 800d536:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d538:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d53a:	2000      	movs	r0, #0
 800d53c:	492a      	ldr	r1, [pc, #168]	@ (800d5e8 <_dtoa_r+0x72c>)
 800d53e:	f7f5 f9f9 	bl	8002934 <__aeabi_dsub>
 800d542:	0002      	movs	r2, r0
 800d544:	000b      	movs	r3, r1
 800d546:	0030      	movs	r0, r6
 800d548:	0039      	movs	r1, r7
 800d54a:	f7f2 ff85 	bl	8000458 <__aeabi_dcmplt>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d100      	bne.n	800d554 <_dtoa_r+0x698>
 800d552:	e6ee      	b.n	800d332 <_dtoa_r+0x476>
 800d554:	0023      	movs	r3, r4
 800d556:	3c01      	subs	r4, #1
 800d558:	7822      	ldrb	r2, [r4, #0]
 800d55a:	2a30      	cmp	r2, #48	@ 0x30
 800d55c:	d0fa      	beq.n	800d554 <_dtoa_r+0x698>
 800d55e:	001c      	movs	r4, r3
 800d560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	e73e      	b.n	800d3e4 <_dtoa_r+0x528>
 800d566:	2200      	movs	r2, #0
 800d568:	4b1b      	ldr	r3, [pc, #108]	@ (800d5d8 <_dtoa_r+0x71c>)
 800d56a:	f7f4 ff1b 	bl	80023a4 <__aeabi_dmul>
 800d56e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d570:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d572:	e7b9      	b.n	800d4e8 <_dtoa_r+0x62c>
 800d574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10c      	bne.n	800d594 <_dtoa_r+0x6d8>
 800d57a:	9806      	ldr	r0, [sp, #24]
 800d57c:	9907      	ldr	r1, [sp, #28]
 800d57e:	2200      	movs	r2, #0
 800d580:	4b18      	ldr	r3, [pc, #96]	@ (800d5e4 <_dtoa_r+0x728>)
 800d582:	f7f4 ff0f 	bl	80023a4 <__aeabi_dmul>
 800d586:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d58a:	f7f2 ff83 	bl	8000494 <__aeabi_dcmpge>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d100      	bne.n	800d594 <_dtoa_r+0x6d8>
 800d592:	e164      	b.n	800d85e <_dtoa_r+0x9a2>
 800d594:	2600      	movs	r6, #0
 800d596:	0037      	movs	r7, r6
 800d598:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d59a:	9c08      	ldr	r4, [sp, #32]
 800d59c:	43db      	mvns	r3, r3
 800d59e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	9304      	str	r3, [sp, #16]
 800d5a4:	0031      	movs	r1, r6
 800d5a6:	9803      	ldr	r0, [sp, #12]
 800d5a8:	f000 fbc6 	bl	800dd38 <_Bfree>
 800d5ac:	2f00      	cmp	r7, #0
 800d5ae:	d0d7      	beq.n	800d560 <_dtoa_r+0x6a4>
 800d5b0:	9b04      	ldr	r3, [sp, #16]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d005      	beq.n	800d5c2 <_dtoa_r+0x706>
 800d5b6:	42bb      	cmp	r3, r7
 800d5b8:	d003      	beq.n	800d5c2 <_dtoa_r+0x706>
 800d5ba:	0019      	movs	r1, r3
 800d5bc:	9803      	ldr	r0, [sp, #12]
 800d5be:	f000 fbbb 	bl	800dd38 <_Bfree>
 800d5c2:	0039      	movs	r1, r7
 800d5c4:	9803      	ldr	r0, [sp, #12]
 800d5c6:	f000 fbb7 	bl	800dd38 <_Bfree>
 800d5ca:	e7c9      	b.n	800d560 <_dtoa_r+0x6a4>
 800d5cc:	08010f60 	.word	0x08010f60
 800d5d0:	08010f38 	.word	0x08010f38
 800d5d4:	3ff00000 	.word	0x3ff00000
 800d5d8:	40240000 	.word	0x40240000
 800d5dc:	401c0000 	.word	0x401c0000
 800d5e0:	fcc00000 	.word	0xfcc00000
 800d5e4:	40140000 	.word	0x40140000
 800d5e8:	3fe00000 	.word	0x3fe00000
 800d5ec:	9b04      	ldr	r3, [sp, #16]
 800d5ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5f0:	0023      	movs	r3, r4
 800d5f2:	001c      	movs	r4, r3
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	781a      	ldrb	r2, [r3, #0]
 800d5f8:	2a39      	cmp	r2, #57	@ 0x39
 800d5fa:	d108      	bne.n	800d60e <_dtoa_r+0x752>
 800d5fc:	9a08      	ldr	r2, [sp, #32]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d1f7      	bne.n	800d5f2 <_dtoa_r+0x736>
 800d602:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d604:	9908      	ldr	r1, [sp, #32]
 800d606:	3201      	adds	r2, #1
 800d608:	920c      	str	r2, [sp, #48]	@ 0x30
 800d60a:	2230      	movs	r2, #48	@ 0x30
 800d60c:	700a      	strb	r2, [r1, #0]
 800d60e:	781a      	ldrb	r2, [r3, #0]
 800d610:	3201      	adds	r2, #1
 800d612:	701a      	strb	r2, [r3, #0]
 800d614:	e7a4      	b.n	800d560 <_dtoa_r+0x6a4>
 800d616:	2200      	movs	r2, #0
 800d618:	4bc6      	ldr	r3, [pc, #792]	@ (800d934 <_dtoa_r+0xa78>)
 800d61a:	f7f4 fec3 	bl	80023a4 <__aeabi_dmul>
 800d61e:	2200      	movs	r2, #0
 800d620:	2300      	movs	r3, #0
 800d622:	0006      	movs	r6, r0
 800d624:	000f      	movs	r7, r1
 800d626:	f7f2 ff11 	bl	800044c <__aeabi_dcmpeq>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d100      	bne.n	800d630 <_dtoa_r+0x774>
 800d62e:	e6a1      	b.n	800d374 <_dtoa_r+0x4b8>
 800d630:	e6d8      	b.n	800d3e4 <_dtoa_r+0x528>
 800d632:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d634:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d636:	9c06      	ldr	r4, [sp, #24]
 800d638:	2f00      	cmp	r7, #0
 800d63a:	d014      	beq.n	800d666 <_dtoa_r+0x7aa>
 800d63c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d63e:	2a01      	cmp	r2, #1
 800d640:	dd00      	ble.n	800d644 <_dtoa_r+0x788>
 800d642:	e0c8      	b.n	800d7d6 <_dtoa_r+0x91a>
 800d644:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d646:	2a00      	cmp	r2, #0
 800d648:	d100      	bne.n	800d64c <_dtoa_r+0x790>
 800d64a:	e0be      	b.n	800d7ca <_dtoa_r+0x90e>
 800d64c:	4aba      	ldr	r2, [pc, #744]	@ (800d938 <_dtoa_r+0xa7c>)
 800d64e:	189b      	adds	r3, r3, r2
 800d650:	9a06      	ldr	r2, [sp, #24]
 800d652:	2101      	movs	r1, #1
 800d654:	18d2      	adds	r2, r2, r3
 800d656:	9206      	str	r2, [sp, #24]
 800d658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d65a:	9803      	ldr	r0, [sp, #12]
 800d65c:	18d3      	adds	r3, r2, r3
 800d65e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d660:	f000 fc6e 	bl	800df40 <__i2b>
 800d664:	0007      	movs	r7, r0
 800d666:	2c00      	cmp	r4, #0
 800d668:	d00e      	beq.n	800d688 <_dtoa_r+0x7cc>
 800d66a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	dd0b      	ble.n	800d688 <_dtoa_r+0x7cc>
 800d670:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d672:	0023      	movs	r3, r4
 800d674:	4294      	cmp	r4, r2
 800d676:	dd00      	ble.n	800d67a <_dtoa_r+0x7be>
 800d678:	0013      	movs	r3, r2
 800d67a:	9a06      	ldr	r2, [sp, #24]
 800d67c:	1ae4      	subs	r4, r4, r3
 800d67e:	1ad2      	subs	r2, r2, r3
 800d680:	9206      	str	r2, [sp, #24]
 800d682:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	930d      	str	r3, [sp, #52]	@ 0x34
 800d688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d01f      	beq.n	800d6ce <_dtoa_r+0x812>
 800d68e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d690:	2b00      	cmp	r3, #0
 800d692:	d100      	bne.n	800d696 <_dtoa_r+0x7da>
 800d694:	e0b5      	b.n	800d802 <_dtoa_r+0x946>
 800d696:	2d00      	cmp	r5, #0
 800d698:	d010      	beq.n	800d6bc <_dtoa_r+0x800>
 800d69a:	0039      	movs	r1, r7
 800d69c:	002a      	movs	r2, r5
 800d69e:	9803      	ldr	r0, [sp, #12]
 800d6a0:	f000 fd18 	bl	800e0d4 <__pow5mult>
 800d6a4:	9a05      	ldr	r2, [sp, #20]
 800d6a6:	0001      	movs	r1, r0
 800d6a8:	0007      	movs	r7, r0
 800d6aa:	9803      	ldr	r0, [sp, #12]
 800d6ac:	f000 fc60 	bl	800df70 <__multiply>
 800d6b0:	0006      	movs	r6, r0
 800d6b2:	9905      	ldr	r1, [sp, #20]
 800d6b4:	9803      	ldr	r0, [sp, #12]
 800d6b6:	f000 fb3f 	bl	800dd38 <_Bfree>
 800d6ba:	9605      	str	r6, [sp, #20]
 800d6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6be:	1b5a      	subs	r2, r3, r5
 800d6c0:	42ab      	cmp	r3, r5
 800d6c2:	d004      	beq.n	800d6ce <_dtoa_r+0x812>
 800d6c4:	9905      	ldr	r1, [sp, #20]
 800d6c6:	9803      	ldr	r0, [sp, #12]
 800d6c8:	f000 fd04 	bl	800e0d4 <__pow5mult>
 800d6cc:	9005      	str	r0, [sp, #20]
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	9803      	ldr	r0, [sp, #12]
 800d6d2:	f000 fc35 	bl	800df40 <__i2b>
 800d6d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d6d8:	0006      	movs	r6, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d100      	bne.n	800d6e0 <_dtoa_r+0x824>
 800d6de:	e1bc      	b.n	800da5a <_dtoa_r+0xb9e>
 800d6e0:	001a      	movs	r2, r3
 800d6e2:	0001      	movs	r1, r0
 800d6e4:	9803      	ldr	r0, [sp, #12]
 800d6e6:	f000 fcf5 	bl	800e0d4 <__pow5mult>
 800d6ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d6ec:	0006      	movs	r6, r0
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	dc16      	bgt.n	800d722 <_dtoa_r+0x866>
 800d6f4:	2500      	movs	r5, #0
 800d6f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6f8:	42ab      	cmp	r3, r5
 800d6fa:	d10e      	bne.n	800d71a <_dtoa_r+0x85e>
 800d6fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6fe:	031b      	lsls	r3, r3, #12
 800d700:	42ab      	cmp	r3, r5
 800d702:	d10a      	bne.n	800d71a <_dtoa_r+0x85e>
 800d704:	4b8d      	ldr	r3, [pc, #564]	@ (800d93c <_dtoa_r+0xa80>)
 800d706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d708:	4213      	tst	r3, r2
 800d70a:	d006      	beq.n	800d71a <_dtoa_r+0x85e>
 800d70c:	9b06      	ldr	r3, [sp, #24]
 800d70e:	3501      	adds	r5, #1
 800d710:	3301      	adds	r3, #1
 800d712:	9306      	str	r3, [sp, #24]
 800d714:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d716:	3301      	adds	r3, #1
 800d718:	930d      	str	r3, [sp, #52]	@ 0x34
 800d71a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d71c:	2001      	movs	r0, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d008      	beq.n	800d734 <_dtoa_r+0x878>
 800d722:	6933      	ldr	r3, [r6, #16]
 800d724:	3303      	adds	r3, #3
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	18f3      	adds	r3, r6, r3
 800d72a:	6858      	ldr	r0, [r3, #4]
 800d72c:	f000 fbb8 	bl	800dea0 <__hi0bits>
 800d730:	2320      	movs	r3, #32
 800d732:	1a18      	subs	r0, r3, r0
 800d734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d736:	1818      	adds	r0, r3, r0
 800d738:	0002      	movs	r2, r0
 800d73a:	231f      	movs	r3, #31
 800d73c:	401a      	ands	r2, r3
 800d73e:	4218      	tst	r0, r3
 800d740:	d065      	beq.n	800d80e <_dtoa_r+0x952>
 800d742:	3301      	adds	r3, #1
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	2b04      	cmp	r3, #4
 800d748:	dd5d      	ble.n	800d806 <_dtoa_r+0x94a>
 800d74a:	231c      	movs	r3, #28
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	9a06      	ldr	r2, [sp, #24]
 800d750:	18e4      	adds	r4, r4, r3
 800d752:	18d2      	adds	r2, r2, r3
 800d754:	9206      	str	r2, [sp, #24]
 800d756:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d758:	18d3      	adds	r3, r2, r3
 800d75a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d75c:	9b06      	ldr	r3, [sp, #24]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	dd05      	ble.n	800d76e <_dtoa_r+0x8b2>
 800d762:	001a      	movs	r2, r3
 800d764:	9905      	ldr	r1, [sp, #20]
 800d766:	9803      	ldr	r0, [sp, #12]
 800d768:	f000 fd10 	bl	800e18c <__lshift>
 800d76c:	9005      	str	r0, [sp, #20]
 800d76e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d770:	2b00      	cmp	r3, #0
 800d772:	dd05      	ble.n	800d780 <_dtoa_r+0x8c4>
 800d774:	0031      	movs	r1, r6
 800d776:	001a      	movs	r2, r3
 800d778:	9803      	ldr	r0, [sp, #12]
 800d77a:	f000 fd07 	bl	800e18c <__lshift>
 800d77e:	0006      	movs	r6, r0
 800d780:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d782:	2b00      	cmp	r3, #0
 800d784:	d045      	beq.n	800d812 <_dtoa_r+0x956>
 800d786:	0031      	movs	r1, r6
 800d788:	9805      	ldr	r0, [sp, #20]
 800d78a:	f000 fd6b 	bl	800e264 <__mcmp>
 800d78e:	2800      	cmp	r0, #0
 800d790:	da3f      	bge.n	800d812 <_dtoa_r+0x956>
 800d792:	9b04      	ldr	r3, [sp, #16]
 800d794:	220a      	movs	r2, #10
 800d796:	3b01      	subs	r3, #1
 800d798:	930c      	str	r3, [sp, #48]	@ 0x30
 800d79a:	9905      	ldr	r1, [sp, #20]
 800d79c:	2300      	movs	r3, #0
 800d79e:	9803      	ldr	r0, [sp, #12]
 800d7a0:	f000 faee 	bl	800dd80 <__multadd>
 800d7a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d7a6:	9005      	str	r0, [sp, #20]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d100      	bne.n	800d7ae <_dtoa_r+0x8f2>
 800d7ac:	e15c      	b.n	800da68 <_dtoa_r+0xbac>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	0039      	movs	r1, r7
 800d7b2:	220a      	movs	r2, #10
 800d7b4:	9803      	ldr	r0, [sp, #12]
 800d7b6:	f000 fae3 	bl	800dd80 <__multadd>
 800d7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7bc:	0007      	movs	r7, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	dc55      	bgt.n	800d86e <_dtoa_r+0x9b2>
 800d7c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	dc2d      	bgt.n	800d824 <_dtoa_r+0x968>
 800d7c8:	e051      	b.n	800d86e <_dtoa_r+0x9b2>
 800d7ca:	2336      	movs	r3, #54	@ 0x36
 800d7cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d7ce:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d7d0:	9c06      	ldr	r4, [sp, #24]
 800d7d2:	1a9b      	subs	r3, r3, r2
 800d7d4:	e73c      	b.n	800d650 <_dtoa_r+0x794>
 800d7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7d8:	1e5d      	subs	r5, r3, #1
 800d7da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	db08      	blt.n	800d7f2 <_dtoa_r+0x936>
 800d7e0:	1b5d      	subs	r5, r3, r5
 800d7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e4:	9c06      	ldr	r4, [sp, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	db00      	blt.n	800d7ec <_dtoa_r+0x930>
 800d7ea:	e731      	b.n	800d650 <_dtoa_r+0x794>
 800d7ec:	1ae4      	subs	r4, r4, r3
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e72e      	b.n	800d650 <_dtoa_r+0x794>
 800d7f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d7f6:	1aeb      	subs	r3, r5, r3
 800d7f8:	18d3      	adds	r3, r2, r3
 800d7fa:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d7fc:	9314      	str	r3, [sp, #80]	@ 0x50
 800d7fe:	2500      	movs	r5, #0
 800d800:	e7ef      	b.n	800d7e2 <_dtoa_r+0x926>
 800d802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d804:	e75e      	b.n	800d6c4 <_dtoa_r+0x808>
 800d806:	2b04      	cmp	r3, #4
 800d808:	d0a8      	beq.n	800d75c <_dtoa_r+0x8a0>
 800d80a:	331c      	adds	r3, #28
 800d80c:	e79f      	b.n	800d74e <_dtoa_r+0x892>
 800d80e:	0013      	movs	r3, r2
 800d810:	e7fb      	b.n	800d80a <_dtoa_r+0x94e>
 800d812:	9b04      	ldr	r3, [sp, #16]
 800d814:	930c      	str	r3, [sp, #48]	@ 0x30
 800d816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d818:	930e      	str	r3, [sp, #56]	@ 0x38
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	dc23      	bgt.n	800d866 <_dtoa_r+0x9aa>
 800d81e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d820:	2b02      	cmp	r3, #2
 800d822:	dd20      	ble.n	800d866 <_dtoa_r+0x9aa>
 800d824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d826:	2b00      	cmp	r3, #0
 800d828:	d000      	beq.n	800d82c <_dtoa_r+0x970>
 800d82a:	e6b5      	b.n	800d598 <_dtoa_r+0x6dc>
 800d82c:	0031      	movs	r1, r6
 800d82e:	2205      	movs	r2, #5
 800d830:	9803      	ldr	r0, [sp, #12]
 800d832:	f000 faa5 	bl	800dd80 <__multadd>
 800d836:	0006      	movs	r6, r0
 800d838:	0001      	movs	r1, r0
 800d83a:	9805      	ldr	r0, [sp, #20]
 800d83c:	f000 fd12 	bl	800e264 <__mcmp>
 800d840:	2800      	cmp	r0, #0
 800d842:	dc00      	bgt.n	800d846 <_dtoa_r+0x98a>
 800d844:	e6a8      	b.n	800d598 <_dtoa_r+0x6dc>
 800d846:	9b08      	ldr	r3, [sp, #32]
 800d848:	9a08      	ldr	r2, [sp, #32]
 800d84a:	1c5c      	adds	r4, r3, #1
 800d84c:	2331      	movs	r3, #49	@ 0x31
 800d84e:	7013      	strb	r3, [r2, #0]
 800d850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d852:	3301      	adds	r3, #1
 800d854:	930c      	str	r3, [sp, #48]	@ 0x30
 800d856:	e6a3      	b.n	800d5a0 <_dtoa_r+0x6e4>
 800d858:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d85a:	0037      	movs	r7, r6
 800d85c:	e7f3      	b.n	800d846 <_dtoa_r+0x98a>
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d862:	930c      	str	r3, [sp, #48]	@ 0x30
 800d864:	e7f9      	b.n	800d85a <_dtoa_r+0x99e>
 800d866:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d100      	bne.n	800d86e <_dtoa_r+0x9b2>
 800d86c:	e100      	b.n	800da70 <_dtoa_r+0xbb4>
 800d86e:	2c00      	cmp	r4, #0
 800d870:	dd05      	ble.n	800d87e <_dtoa_r+0x9c2>
 800d872:	0039      	movs	r1, r7
 800d874:	0022      	movs	r2, r4
 800d876:	9803      	ldr	r0, [sp, #12]
 800d878:	f000 fc88 	bl	800e18c <__lshift>
 800d87c:	0007      	movs	r7, r0
 800d87e:	0038      	movs	r0, r7
 800d880:	2d00      	cmp	r5, #0
 800d882:	d018      	beq.n	800d8b6 <_dtoa_r+0x9fa>
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	9803      	ldr	r0, [sp, #12]
 800d888:	f000 fa12 	bl	800dcb0 <_Balloc>
 800d88c:	1e04      	subs	r4, r0, #0
 800d88e:	d105      	bne.n	800d89c <_dtoa_r+0x9e0>
 800d890:	0022      	movs	r2, r4
 800d892:	4b2b      	ldr	r3, [pc, #172]	@ (800d940 <_dtoa_r+0xa84>)
 800d894:	482b      	ldr	r0, [pc, #172]	@ (800d944 <_dtoa_r+0xa88>)
 800d896:	492c      	ldr	r1, [pc, #176]	@ (800d948 <_dtoa_r+0xa8c>)
 800d898:	f7ff fb25 	bl	800cee6 <_dtoa_r+0x2a>
 800d89c:	0039      	movs	r1, r7
 800d89e:	693a      	ldr	r2, [r7, #16]
 800d8a0:	310c      	adds	r1, #12
 800d8a2:	3202      	adds	r2, #2
 800d8a4:	0092      	lsls	r2, r2, #2
 800d8a6:	300c      	adds	r0, #12
 800d8a8:	f001 ffb2 	bl	800f810 <memcpy>
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	0021      	movs	r1, r4
 800d8b0:	9803      	ldr	r0, [sp, #12]
 800d8b2:	f000 fc6b 	bl	800e18c <__lshift>
 800d8b6:	9b08      	ldr	r3, [sp, #32]
 800d8b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8ba:	9306      	str	r3, [sp, #24]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	189b      	adds	r3, r3, r2
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	9704      	str	r7, [sp, #16]
 800d8c4:	0007      	movs	r7, r0
 800d8c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d8ce:	0031      	movs	r1, r6
 800d8d0:	9805      	ldr	r0, [sp, #20]
 800d8d2:	f7ff fa65 	bl	800cda0 <quorem>
 800d8d6:	9904      	ldr	r1, [sp, #16]
 800d8d8:	0005      	movs	r5, r0
 800d8da:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8dc:	9805      	ldr	r0, [sp, #20]
 800d8de:	f000 fcc1 	bl	800e264 <__mcmp>
 800d8e2:	003a      	movs	r2, r7
 800d8e4:	900d      	str	r0, [sp, #52]	@ 0x34
 800d8e6:	0031      	movs	r1, r6
 800d8e8:	9803      	ldr	r0, [sp, #12]
 800d8ea:	f000 fcd7 	bl	800e29c <__mdiff>
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	68c3      	ldr	r3, [r0, #12]
 800d8f2:	0004      	movs	r4, r0
 800d8f4:	3530      	adds	r5, #48	@ 0x30
 800d8f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d104      	bne.n	800d906 <_dtoa_r+0xa4a>
 800d8fc:	0001      	movs	r1, r0
 800d8fe:	9805      	ldr	r0, [sp, #20]
 800d900:	f000 fcb0 	bl	800e264 <__mcmp>
 800d904:	9009      	str	r0, [sp, #36]	@ 0x24
 800d906:	0021      	movs	r1, r4
 800d908:	9803      	ldr	r0, [sp, #12]
 800d90a:	f000 fa15 	bl	800dd38 <_Bfree>
 800d90e:	9b06      	ldr	r3, [sp, #24]
 800d910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d912:	1c5c      	adds	r4, r3, #1
 800d914:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d916:	4313      	orrs	r3, r2
 800d918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d91a:	4313      	orrs	r3, r2
 800d91c:	d116      	bne.n	800d94c <_dtoa_r+0xa90>
 800d91e:	2d39      	cmp	r5, #57	@ 0x39
 800d920:	d02f      	beq.n	800d982 <_dtoa_r+0xac6>
 800d922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d924:	2b00      	cmp	r3, #0
 800d926:	dd01      	ble.n	800d92c <_dtoa_r+0xa70>
 800d928:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d92a:	3531      	adds	r5, #49	@ 0x31
 800d92c:	9b06      	ldr	r3, [sp, #24]
 800d92e:	701d      	strb	r5, [r3, #0]
 800d930:	e638      	b.n	800d5a4 <_dtoa_r+0x6e8>
 800d932:	46c0      	nop			@ (mov r8, r8)
 800d934:	40240000 	.word	0x40240000
 800d938:	00000433 	.word	0x00000433
 800d93c:	7ff00000 	.word	0x7ff00000
 800d940:	08010ec1 	.word	0x08010ec1
 800d944:	08010e69 	.word	0x08010e69
 800d948:	000002ef 	.word	0x000002ef
 800d94c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d94e:	2b00      	cmp	r3, #0
 800d950:	db04      	blt.n	800d95c <_dtoa_r+0xaa0>
 800d952:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d954:	4313      	orrs	r3, r2
 800d956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d958:	4313      	orrs	r3, r2
 800d95a:	d11e      	bne.n	800d99a <_dtoa_r+0xade>
 800d95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d95e:	2b00      	cmp	r3, #0
 800d960:	dde4      	ble.n	800d92c <_dtoa_r+0xa70>
 800d962:	9905      	ldr	r1, [sp, #20]
 800d964:	2201      	movs	r2, #1
 800d966:	9803      	ldr	r0, [sp, #12]
 800d968:	f000 fc10 	bl	800e18c <__lshift>
 800d96c:	0031      	movs	r1, r6
 800d96e:	9005      	str	r0, [sp, #20]
 800d970:	f000 fc78 	bl	800e264 <__mcmp>
 800d974:	2800      	cmp	r0, #0
 800d976:	dc02      	bgt.n	800d97e <_dtoa_r+0xac2>
 800d978:	d1d8      	bne.n	800d92c <_dtoa_r+0xa70>
 800d97a:	07eb      	lsls	r3, r5, #31
 800d97c:	d5d6      	bpl.n	800d92c <_dtoa_r+0xa70>
 800d97e:	2d39      	cmp	r5, #57	@ 0x39
 800d980:	d1d2      	bne.n	800d928 <_dtoa_r+0xa6c>
 800d982:	2339      	movs	r3, #57	@ 0x39
 800d984:	9a06      	ldr	r2, [sp, #24]
 800d986:	7013      	strb	r3, [r2, #0]
 800d988:	0023      	movs	r3, r4
 800d98a:	001c      	movs	r4, r3
 800d98c:	3b01      	subs	r3, #1
 800d98e:	781a      	ldrb	r2, [r3, #0]
 800d990:	2a39      	cmp	r2, #57	@ 0x39
 800d992:	d04f      	beq.n	800da34 <_dtoa_r+0xb78>
 800d994:	3201      	adds	r2, #1
 800d996:	701a      	strb	r2, [r3, #0]
 800d998:	e604      	b.n	800d5a4 <_dtoa_r+0x6e8>
 800d99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd03      	ble.n	800d9a8 <_dtoa_r+0xaec>
 800d9a0:	2d39      	cmp	r5, #57	@ 0x39
 800d9a2:	d0ee      	beq.n	800d982 <_dtoa_r+0xac6>
 800d9a4:	3501      	adds	r5, #1
 800d9a6:	e7c1      	b.n	800d92c <_dtoa_r+0xa70>
 800d9a8:	9b06      	ldr	r3, [sp, #24]
 800d9aa:	9a06      	ldr	r2, [sp, #24]
 800d9ac:	701d      	strb	r5, [r3, #0]
 800d9ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d02a      	beq.n	800da0a <_dtoa_r+0xb4e>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	220a      	movs	r2, #10
 800d9b8:	9905      	ldr	r1, [sp, #20]
 800d9ba:	9803      	ldr	r0, [sp, #12]
 800d9bc:	f000 f9e0 	bl	800dd80 <__multadd>
 800d9c0:	9b04      	ldr	r3, [sp, #16]
 800d9c2:	9005      	str	r0, [sp, #20]
 800d9c4:	42bb      	cmp	r3, r7
 800d9c6:	d109      	bne.n	800d9dc <_dtoa_r+0xb20>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	220a      	movs	r2, #10
 800d9cc:	9904      	ldr	r1, [sp, #16]
 800d9ce:	9803      	ldr	r0, [sp, #12]
 800d9d0:	f000 f9d6 	bl	800dd80 <__multadd>
 800d9d4:	9004      	str	r0, [sp, #16]
 800d9d6:	0007      	movs	r7, r0
 800d9d8:	9406      	str	r4, [sp, #24]
 800d9da:	e778      	b.n	800d8ce <_dtoa_r+0xa12>
 800d9dc:	9904      	ldr	r1, [sp, #16]
 800d9de:	2300      	movs	r3, #0
 800d9e0:	220a      	movs	r2, #10
 800d9e2:	9803      	ldr	r0, [sp, #12]
 800d9e4:	f000 f9cc 	bl	800dd80 <__multadd>
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	9004      	str	r0, [sp, #16]
 800d9ec:	220a      	movs	r2, #10
 800d9ee:	0039      	movs	r1, r7
 800d9f0:	9803      	ldr	r0, [sp, #12]
 800d9f2:	f000 f9c5 	bl	800dd80 <__multadd>
 800d9f6:	e7ee      	b.n	800d9d6 <_dtoa_r+0xb1a>
 800d9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9fa:	2401      	movs	r4, #1
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dd00      	ble.n	800da02 <_dtoa_r+0xb46>
 800da00:	001c      	movs	r4, r3
 800da02:	9b08      	ldr	r3, [sp, #32]
 800da04:	191c      	adds	r4, r3, r4
 800da06:	2300      	movs	r3, #0
 800da08:	9304      	str	r3, [sp, #16]
 800da0a:	9905      	ldr	r1, [sp, #20]
 800da0c:	2201      	movs	r2, #1
 800da0e:	9803      	ldr	r0, [sp, #12]
 800da10:	f000 fbbc 	bl	800e18c <__lshift>
 800da14:	0031      	movs	r1, r6
 800da16:	9005      	str	r0, [sp, #20]
 800da18:	f000 fc24 	bl	800e264 <__mcmp>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	dcb3      	bgt.n	800d988 <_dtoa_r+0xacc>
 800da20:	d101      	bne.n	800da26 <_dtoa_r+0xb6a>
 800da22:	07ed      	lsls	r5, r5, #31
 800da24:	d4b0      	bmi.n	800d988 <_dtoa_r+0xacc>
 800da26:	0023      	movs	r3, r4
 800da28:	001c      	movs	r4, r3
 800da2a:	3b01      	subs	r3, #1
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	2a30      	cmp	r2, #48	@ 0x30
 800da30:	d0fa      	beq.n	800da28 <_dtoa_r+0xb6c>
 800da32:	e5b7      	b.n	800d5a4 <_dtoa_r+0x6e8>
 800da34:	9a08      	ldr	r2, [sp, #32]
 800da36:	429a      	cmp	r2, r3
 800da38:	d1a7      	bne.n	800d98a <_dtoa_r+0xace>
 800da3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da3c:	3301      	adds	r3, #1
 800da3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800da40:	2331      	movs	r3, #49	@ 0x31
 800da42:	7013      	strb	r3, [r2, #0]
 800da44:	e5ae      	b.n	800d5a4 <_dtoa_r+0x6e8>
 800da46:	4b15      	ldr	r3, [pc, #84]	@ (800da9c <_dtoa_r+0xbe0>)
 800da48:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800da4a:	9308      	str	r3, [sp, #32]
 800da4c:	4b14      	ldr	r3, [pc, #80]	@ (800daa0 <_dtoa_r+0xbe4>)
 800da4e:	2a00      	cmp	r2, #0
 800da50:	d001      	beq.n	800da56 <_dtoa_r+0xb9a>
 800da52:	f7ff fa7b 	bl	800cf4c <_dtoa_r+0x90>
 800da56:	f7ff fa7b 	bl	800cf50 <_dtoa_r+0x94>
 800da5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	dc00      	bgt.n	800da62 <_dtoa_r+0xba6>
 800da60:	e648      	b.n	800d6f4 <_dtoa_r+0x838>
 800da62:	2001      	movs	r0, #1
 800da64:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800da66:	e665      	b.n	800d734 <_dtoa_r+0x878>
 800da68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	dc00      	bgt.n	800da70 <_dtoa_r+0xbb4>
 800da6e:	e6d6      	b.n	800d81e <_dtoa_r+0x962>
 800da70:	2400      	movs	r4, #0
 800da72:	0031      	movs	r1, r6
 800da74:	9805      	ldr	r0, [sp, #20]
 800da76:	f7ff f993 	bl	800cda0 <quorem>
 800da7a:	9b08      	ldr	r3, [sp, #32]
 800da7c:	3030      	adds	r0, #48	@ 0x30
 800da7e:	5518      	strb	r0, [r3, r4]
 800da80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da82:	3401      	adds	r4, #1
 800da84:	0005      	movs	r5, r0
 800da86:	429c      	cmp	r4, r3
 800da88:	dab6      	bge.n	800d9f8 <_dtoa_r+0xb3c>
 800da8a:	2300      	movs	r3, #0
 800da8c:	220a      	movs	r2, #10
 800da8e:	9905      	ldr	r1, [sp, #20]
 800da90:	9803      	ldr	r0, [sp, #12]
 800da92:	f000 f975 	bl	800dd80 <__multadd>
 800da96:	9005      	str	r0, [sp, #20]
 800da98:	e7eb      	b.n	800da72 <_dtoa_r+0xbb6>
 800da9a:	46c0      	nop			@ (mov r8, r8)
 800da9c:	08010e45 	.word	0x08010e45
 800daa0:	08010e4d 	.word	0x08010e4d

0800daa4 <_free_r>:
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	0005      	movs	r5, r0
 800daa8:	1e0c      	subs	r4, r1, #0
 800daaa:	d010      	beq.n	800dace <_free_r+0x2a>
 800daac:	3c04      	subs	r4, #4
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	da00      	bge.n	800dab6 <_free_r+0x12>
 800dab4:	18e4      	adds	r4, r4, r3
 800dab6:	0028      	movs	r0, r5
 800dab8:	f000 f8ea 	bl	800dc90 <__malloc_lock>
 800dabc:	4a1d      	ldr	r2, [pc, #116]	@ (800db34 <_free_r+0x90>)
 800dabe:	6813      	ldr	r3, [r2, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d105      	bne.n	800dad0 <_free_r+0x2c>
 800dac4:	6063      	str	r3, [r4, #4]
 800dac6:	6014      	str	r4, [r2, #0]
 800dac8:	0028      	movs	r0, r5
 800daca:	f000 f8e9 	bl	800dca0 <__malloc_unlock>
 800dace:	bd70      	pop	{r4, r5, r6, pc}
 800dad0:	42a3      	cmp	r3, r4
 800dad2:	d908      	bls.n	800dae6 <_free_r+0x42>
 800dad4:	6820      	ldr	r0, [r4, #0]
 800dad6:	1821      	adds	r1, r4, r0
 800dad8:	428b      	cmp	r3, r1
 800dada:	d1f3      	bne.n	800dac4 <_free_r+0x20>
 800dadc:	6819      	ldr	r1, [r3, #0]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	1809      	adds	r1, r1, r0
 800dae2:	6021      	str	r1, [r4, #0]
 800dae4:	e7ee      	b.n	800dac4 <_free_r+0x20>
 800dae6:	001a      	movs	r2, r3
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <_free_r+0x4e>
 800daee:	42a3      	cmp	r3, r4
 800daf0:	d9f9      	bls.n	800dae6 <_free_r+0x42>
 800daf2:	6811      	ldr	r1, [r2, #0]
 800daf4:	1850      	adds	r0, r2, r1
 800daf6:	42a0      	cmp	r0, r4
 800daf8:	d10b      	bne.n	800db12 <_free_r+0x6e>
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	1809      	adds	r1, r1, r0
 800dafe:	1850      	adds	r0, r2, r1
 800db00:	6011      	str	r1, [r2, #0]
 800db02:	4283      	cmp	r3, r0
 800db04:	d1e0      	bne.n	800dac8 <_free_r+0x24>
 800db06:	6818      	ldr	r0, [r3, #0]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	1841      	adds	r1, r0, r1
 800db0c:	6011      	str	r1, [r2, #0]
 800db0e:	6053      	str	r3, [r2, #4]
 800db10:	e7da      	b.n	800dac8 <_free_r+0x24>
 800db12:	42a0      	cmp	r0, r4
 800db14:	d902      	bls.n	800db1c <_free_r+0x78>
 800db16:	230c      	movs	r3, #12
 800db18:	602b      	str	r3, [r5, #0]
 800db1a:	e7d5      	b.n	800dac8 <_free_r+0x24>
 800db1c:	6820      	ldr	r0, [r4, #0]
 800db1e:	1821      	adds	r1, r4, r0
 800db20:	428b      	cmp	r3, r1
 800db22:	d103      	bne.n	800db2c <_free_r+0x88>
 800db24:	6819      	ldr	r1, [r3, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	1809      	adds	r1, r1, r0
 800db2a:	6021      	str	r1, [r4, #0]
 800db2c:	6063      	str	r3, [r4, #4]
 800db2e:	6054      	str	r4, [r2, #4]
 800db30:	e7ca      	b.n	800dac8 <_free_r+0x24>
 800db32:	46c0      	nop			@ (mov r8, r8)
 800db34:	200007e8 	.word	0x200007e8

0800db38 <malloc>:
 800db38:	b510      	push	{r4, lr}
 800db3a:	4b03      	ldr	r3, [pc, #12]	@ (800db48 <malloc+0x10>)
 800db3c:	0001      	movs	r1, r0
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	f000 f826 	bl	800db90 <_malloc_r>
 800db44:	bd10      	pop	{r4, pc}
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	2000003c 	.word	0x2000003c

0800db4c <sbrk_aligned>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	4e0f      	ldr	r6, [pc, #60]	@ (800db8c <sbrk_aligned+0x40>)
 800db50:	000d      	movs	r5, r1
 800db52:	6831      	ldr	r1, [r6, #0]
 800db54:	0004      	movs	r4, r0
 800db56:	2900      	cmp	r1, #0
 800db58:	d102      	bne.n	800db60 <sbrk_aligned+0x14>
 800db5a:	f001 fe47 	bl	800f7ec <_sbrk_r>
 800db5e:	6030      	str	r0, [r6, #0]
 800db60:	0029      	movs	r1, r5
 800db62:	0020      	movs	r0, r4
 800db64:	f001 fe42 	bl	800f7ec <_sbrk_r>
 800db68:	1c43      	adds	r3, r0, #1
 800db6a:	d103      	bne.n	800db74 <sbrk_aligned+0x28>
 800db6c:	2501      	movs	r5, #1
 800db6e:	426d      	negs	r5, r5
 800db70:	0028      	movs	r0, r5
 800db72:	bd70      	pop	{r4, r5, r6, pc}
 800db74:	2303      	movs	r3, #3
 800db76:	1cc5      	adds	r5, r0, #3
 800db78:	439d      	bics	r5, r3
 800db7a:	42a8      	cmp	r0, r5
 800db7c:	d0f8      	beq.n	800db70 <sbrk_aligned+0x24>
 800db7e:	1a29      	subs	r1, r5, r0
 800db80:	0020      	movs	r0, r4
 800db82:	f001 fe33 	bl	800f7ec <_sbrk_r>
 800db86:	3001      	adds	r0, #1
 800db88:	d1f2      	bne.n	800db70 <sbrk_aligned+0x24>
 800db8a:	e7ef      	b.n	800db6c <sbrk_aligned+0x20>
 800db8c:	200007e4 	.word	0x200007e4

0800db90 <_malloc_r>:
 800db90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db92:	2203      	movs	r2, #3
 800db94:	1ccb      	adds	r3, r1, #3
 800db96:	4393      	bics	r3, r2
 800db98:	3308      	adds	r3, #8
 800db9a:	0005      	movs	r5, r0
 800db9c:	001f      	movs	r7, r3
 800db9e:	2b0c      	cmp	r3, #12
 800dba0:	d234      	bcs.n	800dc0c <_malloc_r+0x7c>
 800dba2:	270c      	movs	r7, #12
 800dba4:	42b9      	cmp	r1, r7
 800dba6:	d833      	bhi.n	800dc10 <_malloc_r+0x80>
 800dba8:	0028      	movs	r0, r5
 800dbaa:	f000 f871 	bl	800dc90 <__malloc_lock>
 800dbae:	4e37      	ldr	r6, [pc, #220]	@ (800dc8c <_malloc_r+0xfc>)
 800dbb0:	6833      	ldr	r3, [r6, #0]
 800dbb2:	001c      	movs	r4, r3
 800dbb4:	2c00      	cmp	r4, #0
 800dbb6:	d12f      	bne.n	800dc18 <_malloc_r+0x88>
 800dbb8:	0039      	movs	r1, r7
 800dbba:	0028      	movs	r0, r5
 800dbbc:	f7ff ffc6 	bl	800db4c <sbrk_aligned>
 800dbc0:	0004      	movs	r4, r0
 800dbc2:	1c43      	adds	r3, r0, #1
 800dbc4:	d15f      	bne.n	800dc86 <_malloc_r+0xf6>
 800dbc6:	6834      	ldr	r4, [r6, #0]
 800dbc8:	9400      	str	r4, [sp, #0]
 800dbca:	9b00      	ldr	r3, [sp, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d14a      	bne.n	800dc66 <_malloc_r+0xd6>
 800dbd0:	2c00      	cmp	r4, #0
 800dbd2:	d052      	beq.n	800dc7a <_malloc_r+0xea>
 800dbd4:	6823      	ldr	r3, [r4, #0]
 800dbd6:	0028      	movs	r0, r5
 800dbd8:	18e3      	adds	r3, r4, r3
 800dbda:	9900      	ldr	r1, [sp, #0]
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	f001 fe05 	bl	800f7ec <_sbrk_r>
 800dbe2:	9b01      	ldr	r3, [sp, #4]
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	d148      	bne.n	800dc7a <_malloc_r+0xea>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	0028      	movs	r0, r5
 800dbec:	1aff      	subs	r7, r7, r3
 800dbee:	0039      	movs	r1, r7
 800dbf0:	f7ff ffac 	bl	800db4c <sbrk_aligned>
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	d040      	beq.n	800dc7a <_malloc_r+0xea>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	19db      	adds	r3, r3, r7
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	6833      	ldr	r3, [r6, #0]
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	2a00      	cmp	r2, #0
 800dc04:	d133      	bne.n	800dc6e <_malloc_r+0xde>
 800dc06:	9b00      	ldr	r3, [sp, #0]
 800dc08:	6033      	str	r3, [r6, #0]
 800dc0a:	e019      	b.n	800dc40 <_malloc_r+0xb0>
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dac9      	bge.n	800dba4 <_malloc_r+0x14>
 800dc10:	230c      	movs	r3, #12
 800dc12:	602b      	str	r3, [r5, #0]
 800dc14:	2000      	movs	r0, #0
 800dc16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc18:	6821      	ldr	r1, [r4, #0]
 800dc1a:	1bc9      	subs	r1, r1, r7
 800dc1c:	d420      	bmi.n	800dc60 <_malloc_r+0xd0>
 800dc1e:	290b      	cmp	r1, #11
 800dc20:	d90a      	bls.n	800dc38 <_malloc_r+0xa8>
 800dc22:	19e2      	adds	r2, r4, r7
 800dc24:	6027      	str	r7, [r4, #0]
 800dc26:	42a3      	cmp	r3, r4
 800dc28:	d104      	bne.n	800dc34 <_malloc_r+0xa4>
 800dc2a:	6032      	str	r2, [r6, #0]
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	6011      	str	r1, [r2, #0]
 800dc30:	6053      	str	r3, [r2, #4]
 800dc32:	e005      	b.n	800dc40 <_malloc_r+0xb0>
 800dc34:	605a      	str	r2, [r3, #4]
 800dc36:	e7f9      	b.n	800dc2c <_malloc_r+0x9c>
 800dc38:	6862      	ldr	r2, [r4, #4]
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	d10e      	bne.n	800dc5c <_malloc_r+0xcc>
 800dc3e:	6032      	str	r2, [r6, #0]
 800dc40:	0028      	movs	r0, r5
 800dc42:	f000 f82d 	bl	800dca0 <__malloc_unlock>
 800dc46:	0020      	movs	r0, r4
 800dc48:	2207      	movs	r2, #7
 800dc4a:	300b      	adds	r0, #11
 800dc4c:	1d23      	adds	r3, r4, #4
 800dc4e:	4390      	bics	r0, r2
 800dc50:	1ac2      	subs	r2, r0, r3
 800dc52:	4298      	cmp	r0, r3
 800dc54:	d0df      	beq.n	800dc16 <_malloc_r+0x86>
 800dc56:	1a1b      	subs	r3, r3, r0
 800dc58:	50a3      	str	r3, [r4, r2]
 800dc5a:	e7dc      	b.n	800dc16 <_malloc_r+0x86>
 800dc5c:	605a      	str	r2, [r3, #4]
 800dc5e:	e7ef      	b.n	800dc40 <_malloc_r+0xb0>
 800dc60:	0023      	movs	r3, r4
 800dc62:	6864      	ldr	r4, [r4, #4]
 800dc64:	e7a6      	b.n	800dbb4 <_malloc_r+0x24>
 800dc66:	9c00      	ldr	r4, [sp, #0]
 800dc68:	6863      	ldr	r3, [r4, #4]
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	e7ad      	b.n	800dbca <_malloc_r+0x3a>
 800dc6e:	001a      	movs	r2, r3
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	42a3      	cmp	r3, r4
 800dc74:	d1fb      	bne.n	800dc6e <_malloc_r+0xde>
 800dc76:	2300      	movs	r3, #0
 800dc78:	e7da      	b.n	800dc30 <_malloc_r+0xa0>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	0028      	movs	r0, r5
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	f000 f80e 	bl	800dca0 <__malloc_unlock>
 800dc84:	e7c6      	b.n	800dc14 <_malloc_r+0x84>
 800dc86:	6007      	str	r7, [r0, #0]
 800dc88:	e7da      	b.n	800dc40 <_malloc_r+0xb0>
 800dc8a:	46c0      	nop			@ (mov r8, r8)
 800dc8c:	200007e8 	.word	0x200007e8

0800dc90 <__malloc_lock>:
 800dc90:	b510      	push	{r4, lr}
 800dc92:	4802      	ldr	r0, [pc, #8]	@ (800dc9c <__malloc_lock+0xc>)
 800dc94:	f7ff f873 	bl	800cd7e <__retarget_lock_acquire_recursive>
 800dc98:	bd10      	pop	{r4, pc}
 800dc9a:	46c0      	nop			@ (mov r8, r8)
 800dc9c:	200007e0 	.word	0x200007e0

0800dca0 <__malloc_unlock>:
 800dca0:	b510      	push	{r4, lr}
 800dca2:	4802      	ldr	r0, [pc, #8]	@ (800dcac <__malloc_unlock+0xc>)
 800dca4:	f7ff f86c 	bl	800cd80 <__retarget_lock_release_recursive>
 800dca8:	bd10      	pop	{r4, pc}
 800dcaa:	46c0      	nop			@ (mov r8, r8)
 800dcac:	200007e0 	.word	0x200007e0

0800dcb0 <_Balloc>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	69c5      	ldr	r5, [r0, #28]
 800dcb4:	0006      	movs	r6, r0
 800dcb6:	000c      	movs	r4, r1
 800dcb8:	2d00      	cmp	r5, #0
 800dcba:	d10e      	bne.n	800dcda <_Balloc+0x2a>
 800dcbc:	2010      	movs	r0, #16
 800dcbe:	f7ff ff3b 	bl	800db38 <malloc>
 800dcc2:	1e02      	subs	r2, r0, #0
 800dcc4:	61f0      	str	r0, [r6, #28]
 800dcc6:	d104      	bne.n	800dcd2 <_Balloc+0x22>
 800dcc8:	216b      	movs	r1, #107	@ 0x6b
 800dcca:	4b19      	ldr	r3, [pc, #100]	@ (800dd30 <_Balloc+0x80>)
 800dccc:	4819      	ldr	r0, [pc, #100]	@ (800dd34 <_Balloc+0x84>)
 800dcce:	f001 fdaf 	bl	800f830 <__assert_func>
 800dcd2:	6045      	str	r5, [r0, #4]
 800dcd4:	6085      	str	r5, [r0, #8]
 800dcd6:	6005      	str	r5, [r0, #0]
 800dcd8:	60c5      	str	r5, [r0, #12]
 800dcda:	69f5      	ldr	r5, [r6, #28]
 800dcdc:	68eb      	ldr	r3, [r5, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d013      	beq.n	800dd0a <_Balloc+0x5a>
 800dce2:	69f3      	ldr	r3, [r6, #28]
 800dce4:	00a2      	lsls	r2, r4, #2
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	189b      	adds	r3, r3, r2
 800dcea:	6818      	ldr	r0, [r3, #0]
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d118      	bne.n	800dd22 <_Balloc+0x72>
 800dcf0:	2101      	movs	r1, #1
 800dcf2:	000d      	movs	r5, r1
 800dcf4:	40a5      	lsls	r5, r4
 800dcf6:	1d6a      	adds	r2, r5, #5
 800dcf8:	0030      	movs	r0, r6
 800dcfa:	0092      	lsls	r2, r2, #2
 800dcfc:	f001 fdb6 	bl	800f86c <_calloc_r>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d00c      	beq.n	800dd1e <_Balloc+0x6e>
 800dd04:	6044      	str	r4, [r0, #4]
 800dd06:	6085      	str	r5, [r0, #8]
 800dd08:	e00d      	b.n	800dd26 <_Balloc+0x76>
 800dd0a:	2221      	movs	r2, #33	@ 0x21
 800dd0c:	2104      	movs	r1, #4
 800dd0e:	0030      	movs	r0, r6
 800dd10:	f001 fdac 	bl	800f86c <_calloc_r>
 800dd14:	69f3      	ldr	r3, [r6, #28]
 800dd16:	60e8      	str	r0, [r5, #12]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1e1      	bne.n	800dce2 <_Balloc+0x32>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	bd70      	pop	{r4, r5, r6, pc}
 800dd22:	6802      	ldr	r2, [r0, #0]
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	2300      	movs	r3, #0
 800dd28:	6103      	str	r3, [r0, #16]
 800dd2a:	60c3      	str	r3, [r0, #12]
 800dd2c:	e7f8      	b.n	800dd20 <_Balloc+0x70>
 800dd2e:	46c0      	nop			@ (mov r8, r8)
 800dd30:	08010e52 	.word	0x08010e52
 800dd34:	08010ed2 	.word	0x08010ed2

0800dd38 <_Bfree>:
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	69c6      	ldr	r6, [r0, #28]
 800dd3c:	0005      	movs	r5, r0
 800dd3e:	000c      	movs	r4, r1
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	d10e      	bne.n	800dd62 <_Bfree+0x2a>
 800dd44:	2010      	movs	r0, #16
 800dd46:	f7ff fef7 	bl	800db38 <malloc>
 800dd4a:	1e02      	subs	r2, r0, #0
 800dd4c:	61e8      	str	r0, [r5, #28]
 800dd4e:	d104      	bne.n	800dd5a <_Bfree+0x22>
 800dd50:	218f      	movs	r1, #143	@ 0x8f
 800dd52:	4b09      	ldr	r3, [pc, #36]	@ (800dd78 <_Bfree+0x40>)
 800dd54:	4809      	ldr	r0, [pc, #36]	@ (800dd7c <_Bfree+0x44>)
 800dd56:	f001 fd6b 	bl	800f830 <__assert_func>
 800dd5a:	6046      	str	r6, [r0, #4]
 800dd5c:	6086      	str	r6, [r0, #8]
 800dd5e:	6006      	str	r6, [r0, #0]
 800dd60:	60c6      	str	r6, [r0, #12]
 800dd62:	2c00      	cmp	r4, #0
 800dd64:	d007      	beq.n	800dd76 <_Bfree+0x3e>
 800dd66:	69eb      	ldr	r3, [r5, #28]
 800dd68:	6862      	ldr	r2, [r4, #4]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	0092      	lsls	r2, r2, #2
 800dd6e:	189b      	adds	r3, r3, r2
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	6022      	str	r2, [r4, #0]
 800dd74:	601c      	str	r4, [r3, #0]
 800dd76:	bd70      	pop	{r4, r5, r6, pc}
 800dd78:	08010e52 	.word	0x08010e52
 800dd7c:	08010ed2 	.word	0x08010ed2

0800dd80 <__multadd>:
 800dd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd82:	000f      	movs	r7, r1
 800dd84:	9001      	str	r0, [sp, #4]
 800dd86:	000c      	movs	r4, r1
 800dd88:	001e      	movs	r6, r3
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	690d      	ldr	r5, [r1, #16]
 800dd8e:	3714      	adds	r7, #20
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	3001      	adds	r0, #1
 800dd94:	b299      	uxth	r1, r3
 800dd96:	4351      	muls	r1, r2
 800dd98:	0c1b      	lsrs	r3, r3, #16
 800dd9a:	4353      	muls	r3, r2
 800dd9c:	1989      	adds	r1, r1, r6
 800dd9e:	0c0e      	lsrs	r6, r1, #16
 800dda0:	199b      	adds	r3, r3, r6
 800dda2:	0c1e      	lsrs	r6, r3, #16
 800dda4:	b289      	uxth	r1, r1
 800dda6:	041b      	lsls	r3, r3, #16
 800dda8:	185b      	adds	r3, r3, r1
 800ddaa:	c708      	stmia	r7!, {r3}
 800ddac:	4285      	cmp	r5, r0
 800ddae:	dcef      	bgt.n	800dd90 <__multadd+0x10>
 800ddb0:	2e00      	cmp	r6, #0
 800ddb2:	d022      	beq.n	800ddfa <__multadd+0x7a>
 800ddb4:	68a3      	ldr	r3, [r4, #8]
 800ddb6:	42ab      	cmp	r3, r5
 800ddb8:	dc19      	bgt.n	800ddee <__multadd+0x6e>
 800ddba:	6861      	ldr	r1, [r4, #4]
 800ddbc:	9801      	ldr	r0, [sp, #4]
 800ddbe:	3101      	adds	r1, #1
 800ddc0:	f7ff ff76 	bl	800dcb0 <_Balloc>
 800ddc4:	1e07      	subs	r7, r0, #0
 800ddc6:	d105      	bne.n	800ddd4 <__multadd+0x54>
 800ddc8:	003a      	movs	r2, r7
 800ddca:	21ba      	movs	r1, #186	@ 0xba
 800ddcc:	4b0c      	ldr	r3, [pc, #48]	@ (800de00 <__multadd+0x80>)
 800ddce:	480d      	ldr	r0, [pc, #52]	@ (800de04 <__multadd+0x84>)
 800ddd0:	f001 fd2e 	bl	800f830 <__assert_func>
 800ddd4:	0021      	movs	r1, r4
 800ddd6:	6922      	ldr	r2, [r4, #16]
 800ddd8:	310c      	adds	r1, #12
 800ddda:	3202      	adds	r2, #2
 800dddc:	0092      	lsls	r2, r2, #2
 800ddde:	300c      	adds	r0, #12
 800dde0:	f001 fd16 	bl	800f810 <memcpy>
 800dde4:	0021      	movs	r1, r4
 800dde6:	9801      	ldr	r0, [sp, #4]
 800dde8:	f7ff ffa6 	bl	800dd38 <_Bfree>
 800ddec:	003c      	movs	r4, r7
 800ddee:	1d2b      	adds	r3, r5, #4
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	18e3      	adds	r3, r4, r3
 800ddf4:	3501      	adds	r5, #1
 800ddf6:	605e      	str	r6, [r3, #4]
 800ddf8:	6125      	str	r5, [r4, #16]
 800ddfa:	0020      	movs	r0, r4
 800ddfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ddfe:	46c0      	nop			@ (mov r8, r8)
 800de00:	08010ec1 	.word	0x08010ec1
 800de04:	08010ed2 	.word	0x08010ed2

0800de08 <__s2b>:
 800de08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de0a:	0007      	movs	r7, r0
 800de0c:	0018      	movs	r0, r3
 800de0e:	000c      	movs	r4, r1
 800de10:	3008      	adds	r0, #8
 800de12:	2109      	movs	r1, #9
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	0015      	movs	r5, r2
 800de18:	f7f2 fa1c 	bl	8000254 <__divsi3>
 800de1c:	2301      	movs	r3, #1
 800de1e:	2100      	movs	r1, #0
 800de20:	4283      	cmp	r3, r0
 800de22:	db0a      	blt.n	800de3a <__s2b+0x32>
 800de24:	0038      	movs	r0, r7
 800de26:	f7ff ff43 	bl	800dcb0 <_Balloc>
 800de2a:	1e01      	subs	r1, r0, #0
 800de2c:	d108      	bne.n	800de40 <__s2b+0x38>
 800de2e:	000a      	movs	r2, r1
 800de30:	4b19      	ldr	r3, [pc, #100]	@ (800de98 <__s2b+0x90>)
 800de32:	481a      	ldr	r0, [pc, #104]	@ (800de9c <__s2b+0x94>)
 800de34:	31d3      	adds	r1, #211	@ 0xd3
 800de36:	f001 fcfb 	bl	800f830 <__assert_func>
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	3101      	adds	r1, #1
 800de3e:	e7ef      	b.n	800de20 <__s2b+0x18>
 800de40:	9b08      	ldr	r3, [sp, #32]
 800de42:	6143      	str	r3, [r0, #20]
 800de44:	2301      	movs	r3, #1
 800de46:	6103      	str	r3, [r0, #16]
 800de48:	2d09      	cmp	r5, #9
 800de4a:	dd18      	ble.n	800de7e <__s2b+0x76>
 800de4c:	0023      	movs	r3, r4
 800de4e:	3309      	adds	r3, #9
 800de50:	001e      	movs	r6, r3
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	1964      	adds	r4, r4, r5
 800de56:	7833      	ldrb	r3, [r6, #0]
 800de58:	220a      	movs	r2, #10
 800de5a:	0038      	movs	r0, r7
 800de5c:	3b30      	subs	r3, #48	@ 0x30
 800de5e:	f7ff ff8f 	bl	800dd80 <__multadd>
 800de62:	3601      	adds	r6, #1
 800de64:	0001      	movs	r1, r0
 800de66:	42a6      	cmp	r6, r4
 800de68:	d1f5      	bne.n	800de56 <__s2b+0x4e>
 800de6a:	002c      	movs	r4, r5
 800de6c:	9b00      	ldr	r3, [sp, #0]
 800de6e:	3c08      	subs	r4, #8
 800de70:	191c      	adds	r4, r3, r4
 800de72:	002e      	movs	r6, r5
 800de74:	9b01      	ldr	r3, [sp, #4]
 800de76:	429e      	cmp	r6, r3
 800de78:	db04      	blt.n	800de84 <__s2b+0x7c>
 800de7a:	0008      	movs	r0, r1
 800de7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de7e:	2509      	movs	r5, #9
 800de80:	340a      	adds	r4, #10
 800de82:	e7f6      	b.n	800de72 <__s2b+0x6a>
 800de84:	1b63      	subs	r3, r4, r5
 800de86:	5d9b      	ldrb	r3, [r3, r6]
 800de88:	220a      	movs	r2, #10
 800de8a:	0038      	movs	r0, r7
 800de8c:	3b30      	subs	r3, #48	@ 0x30
 800de8e:	f7ff ff77 	bl	800dd80 <__multadd>
 800de92:	3601      	adds	r6, #1
 800de94:	0001      	movs	r1, r0
 800de96:	e7ed      	b.n	800de74 <__s2b+0x6c>
 800de98:	08010ec1 	.word	0x08010ec1
 800de9c:	08010ed2 	.word	0x08010ed2

0800dea0 <__hi0bits>:
 800dea0:	2280      	movs	r2, #128	@ 0x80
 800dea2:	0003      	movs	r3, r0
 800dea4:	0252      	lsls	r2, r2, #9
 800dea6:	2000      	movs	r0, #0
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d201      	bcs.n	800deb0 <__hi0bits+0x10>
 800deac:	041b      	lsls	r3, r3, #16
 800deae:	3010      	adds	r0, #16
 800deb0:	2280      	movs	r2, #128	@ 0x80
 800deb2:	0452      	lsls	r2, r2, #17
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d201      	bcs.n	800debc <__hi0bits+0x1c>
 800deb8:	3008      	adds	r0, #8
 800deba:	021b      	lsls	r3, r3, #8
 800debc:	2280      	movs	r2, #128	@ 0x80
 800debe:	0552      	lsls	r2, r2, #21
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d201      	bcs.n	800dec8 <__hi0bits+0x28>
 800dec4:	3004      	adds	r0, #4
 800dec6:	011b      	lsls	r3, r3, #4
 800dec8:	2280      	movs	r2, #128	@ 0x80
 800deca:	05d2      	lsls	r2, r2, #23
 800decc:	4293      	cmp	r3, r2
 800dece:	d201      	bcs.n	800ded4 <__hi0bits+0x34>
 800ded0:	3002      	adds	r0, #2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	db03      	blt.n	800dee0 <__hi0bits+0x40>
 800ded8:	3001      	adds	r0, #1
 800deda:	4213      	tst	r3, r2
 800dedc:	d100      	bne.n	800dee0 <__hi0bits+0x40>
 800dede:	2020      	movs	r0, #32
 800dee0:	4770      	bx	lr

0800dee2 <__lo0bits>:
 800dee2:	6803      	ldr	r3, [r0, #0]
 800dee4:	0001      	movs	r1, r0
 800dee6:	2207      	movs	r2, #7
 800dee8:	0018      	movs	r0, r3
 800deea:	4010      	ands	r0, r2
 800deec:	4213      	tst	r3, r2
 800deee:	d00d      	beq.n	800df0c <__lo0bits+0x2a>
 800def0:	3a06      	subs	r2, #6
 800def2:	2000      	movs	r0, #0
 800def4:	4213      	tst	r3, r2
 800def6:	d105      	bne.n	800df04 <__lo0bits+0x22>
 800def8:	3002      	adds	r0, #2
 800defa:	4203      	tst	r3, r0
 800defc:	d003      	beq.n	800df06 <__lo0bits+0x24>
 800defe:	40d3      	lsrs	r3, r2
 800df00:	0010      	movs	r0, r2
 800df02:	600b      	str	r3, [r1, #0]
 800df04:	4770      	bx	lr
 800df06:	089b      	lsrs	r3, r3, #2
 800df08:	600b      	str	r3, [r1, #0]
 800df0a:	e7fb      	b.n	800df04 <__lo0bits+0x22>
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	2a00      	cmp	r2, #0
 800df10:	d101      	bne.n	800df16 <__lo0bits+0x34>
 800df12:	2010      	movs	r0, #16
 800df14:	0c1b      	lsrs	r3, r3, #16
 800df16:	b2da      	uxtb	r2, r3
 800df18:	2a00      	cmp	r2, #0
 800df1a:	d101      	bne.n	800df20 <__lo0bits+0x3e>
 800df1c:	3008      	adds	r0, #8
 800df1e:	0a1b      	lsrs	r3, r3, #8
 800df20:	071a      	lsls	r2, r3, #28
 800df22:	d101      	bne.n	800df28 <__lo0bits+0x46>
 800df24:	3004      	adds	r0, #4
 800df26:	091b      	lsrs	r3, r3, #4
 800df28:	079a      	lsls	r2, r3, #30
 800df2a:	d101      	bne.n	800df30 <__lo0bits+0x4e>
 800df2c:	3002      	adds	r0, #2
 800df2e:	089b      	lsrs	r3, r3, #2
 800df30:	07da      	lsls	r2, r3, #31
 800df32:	d4e9      	bmi.n	800df08 <__lo0bits+0x26>
 800df34:	3001      	adds	r0, #1
 800df36:	085b      	lsrs	r3, r3, #1
 800df38:	d1e6      	bne.n	800df08 <__lo0bits+0x26>
 800df3a:	2020      	movs	r0, #32
 800df3c:	e7e2      	b.n	800df04 <__lo0bits+0x22>
	...

0800df40 <__i2b>:
 800df40:	b510      	push	{r4, lr}
 800df42:	000c      	movs	r4, r1
 800df44:	2101      	movs	r1, #1
 800df46:	f7ff feb3 	bl	800dcb0 <_Balloc>
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d107      	bne.n	800df5e <__i2b+0x1e>
 800df4e:	2146      	movs	r1, #70	@ 0x46
 800df50:	4c05      	ldr	r4, [pc, #20]	@ (800df68 <__i2b+0x28>)
 800df52:	0002      	movs	r2, r0
 800df54:	4b05      	ldr	r3, [pc, #20]	@ (800df6c <__i2b+0x2c>)
 800df56:	0020      	movs	r0, r4
 800df58:	31ff      	adds	r1, #255	@ 0xff
 800df5a:	f001 fc69 	bl	800f830 <__assert_func>
 800df5e:	2301      	movs	r3, #1
 800df60:	6144      	str	r4, [r0, #20]
 800df62:	6103      	str	r3, [r0, #16]
 800df64:	bd10      	pop	{r4, pc}
 800df66:	46c0      	nop			@ (mov r8, r8)
 800df68:	08010ed2 	.word	0x08010ed2
 800df6c:	08010ec1 	.word	0x08010ec1

0800df70 <__multiply>:
 800df70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df72:	0014      	movs	r4, r2
 800df74:	690a      	ldr	r2, [r1, #16]
 800df76:	6923      	ldr	r3, [r4, #16]
 800df78:	000d      	movs	r5, r1
 800df7a:	b08b      	sub	sp, #44	@ 0x2c
 800df7c:	429a      	cmp	r2, r3
 800df7e:	db02      	blt.n	800df86 <__multiply+0x16>
 800df80:	0023      	movs	r3, r4
 800df82:	000c      	movs	r4, r1
 800df84:	001d      	movs	r5, r3
 800df86:	6927      	ldr	r7, [r4, #16]
 800df88:	692e      	ldr	r6, [r5, #16]
 800df8a:	6861      	ldr	r1, [r4, #4]
 800df8c:	19bb      	adds	r3, r7, r6
 800df8e:	9303      	str	r3, [sp, #12]
 800df90:	68a3      	ldr	r3, [r4, #8]
 800df92:	19ba      	adds	r2, r7, r6
 800df94:	4293      	cmp	r3, r2
 800df96:	da00      	bge.n	800df9a <__multiply+0x2a>
 800df98:	3101      	adds	r1, #1
 800df9a:	f7ff fe89 	bl	800dcb0 <_Balloc>
 800df9e:	9002      	str	r0, [sp, #8]
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d106      	bne.n	800dfb2 <__multiply+0x42>
 800dfa4:	21b1      	movs	r1, #177	@ 0xb1
 800dfa6:	4b49      	ldr	r3, [pc, #292]	@ (800e0cc <__multiply+0x15c>)
 800dfa8:	4849      	ldr	r0, [pc, #292]	@ (800e0d0 <__multiply+0x160>)
 800dfaa:	9a02      	ldr	r2, [sp, #8]
 800dfac:	0049      	lsls	r1, r1, #1
 800dfae:	f001 fc3f 	bl	800f830 <__assert_func>
 800dfb2:	9b02      	ldr	r3, [sp, #8]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	3314      	adds	r3, #20
 800dfb8:	469c      	mov	ip, r3
 800dfba:	19bb      	adds	r3, r7, r6
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	4463      	add	r3, ip
 800dfc0:	9304      	str	r3, [sp, #16]
 800dfc2:	4663      	mov	r3, ip
 800dfc4:	9904      	ldr	r1, [sp, #16]
 800dfc6:	428b      	cmp	r3, r1
 800dfc8:	d32a      	bcc.n	800e020 <__multiply+0xb0>
 800dfca:	0023      	movs	r3, r4
 800dfcc:	00bf      	lsls	r7, r7, #2
 800dfce:	3314      	adds	r3, #20
 800dfd0:	3514      	adds	r5, #20
 800dfd2:	9308      	str	r3, [sp, #32]
 800dfd4:	00b6      	lsls	r6, r6, #2
 800dfd6:	19db      	adds	r3, r3, r7
 800dfd8:	9305      	str	r3, [sp, #20]
 800dfda:	19ab      	adds	r3, r5, r6
 800dfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfde:	2304      	movs	r3, #4
 800dfe0:	9306      	str	r3, [sp, #24]
 800dfe2:	0023      	movs	r3, r4
 800dfe4:	9a05      	ldr	r2, [sp, #20]
 800dfe6:	3315      	adds	r3, #21
 800dfe8:	9501      	str	r5, [sp, #4]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d305      	bcc.n	800dffa <__multiply+0x8a>
 800dfee:	1b13      	subs	r3, r2, r4
 800dff0:	3b15      	subs	r3, #21
 800dff2:	089b      	lsrs	r3, r3, #2
 800dff4:	3301      	adds	r3, #1
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	9306      	str	r3, [sp, #24]
 800dffa:	9b01      	ldr	r3, [sp, #4]
 800dffc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dffe:	4293      	cmp	r3, r2
 800e000:	d310      	bcc.n	800e024 <__multiply+0xb4>
 800e002:	9b03      	ldr	r3, [sp, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	dd05      	ble.n	800e014 <__multiply+0xa4>
 800e008:	9b04      	ldr	r3, [sp, #16]
 800e00a:	3b04      	subs	r3, #4
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d056      	beq.n	800e0c2 <__multiply+0x152>
 800e014:	9b02      	ldr	r3, [sp, #8]
 800e016:	9a03      	ldr	r2, [sp, #12]
 800e018:	0018      	movs	r0, r3
 800e01a:	611a      	str	r2, [r3, #16]
 800e01c:	b00b      	add	sp, #44	@ 0x2c
 800e01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e020:	c304      	stmia	r3!, {r2}
 800e022:	e7cf      	b.n	800dfc4 <__multiply+0x54>
 800e024:	9b01      	ldr	r3, [sp, #4]
 800e026:	6818      	ldr	r0, [r3, #0]
 800e028:	b280      	uxth	r0, r0
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d01e      	beq.n	800e06c <__multiply+0xfc>
 800e02e:	4667      	mov	r7, ip
 800e030:	2500      	movs	r5, #0
 800e032:	9e08      	ldr	r6, [sp, #32]
 800e034:	ce02      	ldmia	r6!, {r1}
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	b28b      	uxth	r3, r1
 800e03c:	4343      	muls	r3, r0
 800e03e:	001a      	movs	r2, r3
 800e040:	466b      	mov	r3, sp
 800e042:	0c09      	lsrs	r1, r1, #16
 800e044:	8b9b      	ldrh	r3, [r3, #28]
 800e046:	4341      	muls	r1, r0
 800e048:	18d3      	adds	r3, r2, r3
 800e04a:	9a07      	ldr	r2, [sp, #28]
 800e04c:	195b      	adds	r3, r3, r5
 800e04e:	0c12      	lsrs	r2, r2, #16
 800e050:	1889      	adds	r1, r1, r2
 800e052:	0c1a      	lsrs	r2, r3, #16
 800e054:	188a      	adds	r2, r1, r2
 800e056:	b29b      	uxth	r3, r3
 800e058:	0c15      	lsrs	r5, r2, #16
 800e05a:	0412      	lsls	r2, r2, #16
 800e05c:	431a      	orrs	r2, r3
 800e05e:	9b05      	ldr	r3, [sp, #20]
 800e060:	c704      	stmia	r7!, {r2}
 800e062:	42b3      	cmp	r3, r6
 800e064:	d8e6      	bhi.n	800e034 <__multiply+0xc4>
 800e066:	4663      	mov	r3, ip
 800e068:	9a06      	ldr	r2, [sp, #24]
 800e06a:	509d      	str	r5, [r3, r2]
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	0c00      	lsrs	r0, r0, #16
 800e072:	d020      	beq.n	800e0b6 <__multiply+0x146>
 800e074:	4663      	mov	r3, ip
 800e076:	0025      	movs	r5, r4
 800e078:	4661      	mov	r1, ip
 800e07a:	2700      	movs	r7, #0
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3514      	adds	r5, #20
 800e080:	682a      	ldr	r2, [r5, #0]
 800e082:	680e      	ldr	r6, [r1, #0]
 800e084:	b292      	uxth	r2, r2
 800e086:	4342      	muls	r2, r0
 800e088:	0c36      	lsrs	r6, r6, #16
 800e08a:	1992      	adds	r2, r2, r6
 800e08c:	19d2      	adds	r2, r2, r7
 800e08e:	0416      	lsls	r6, r2, #16
 800e090:	b29b      	uxth	r3, r3
 800e092:	431e      	orrs	r6, r3
 800e094:	600e      	str	r6, [r1, #0]
 800e096:	cd40      	ldmia	r5!, {r6}
 800e098:	684b      	ldr	r3, [r1, #4]
 800e09a:	0c36      	lsrs	r6, r6, #16
 800e09c:	4346      	muls	r6, r0
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	0c12      	lsrs	r2, r2, #16
 800e0a2:	18f3      	adds	r3, r6, r3
 800e0a4:	189b      	adds	r3, r3, r2
 800e0a6:	9a05      	ldr	r2, [sp, #20]
 800e0a8:	0c1f      	lsrs	r7, r3, #16
 800e0aa:	3104      	adds	r1, #4
 800e0ac:	42aa      	cmp	r2, r5
 800e0ae:	d8e7      	bhi.n	800e080 <__multiply+0x110>
 800e0b0:	4662      	mov	r2, ip
 800e0b2:	9906      	ldr	r1, [sp, #24]
 800e0b4:	5053      	str	r3, [r2, r1]
 800e0b6:	9b01      	ldr	r3, [sp, #4]
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	2304      	movs	r3, #4
 800e0be:	449c      	add	ip, r3
 800e0c0:	e79b      	b.n	800dffa <__multiply+0x8a>
 800e0c2:	9b03      	ldr	r3, [sp, #12]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	9303      	str	r3, [sp, #12]
 800e0c8:	e79b      	b.n	800e002 <__multiply+0x92>
 800e0ca:	46c0      	nop			@ (mov r8, r8)
 800e0cc:	08010ec1 	.word	0x08010ec1
 800e0d0:	08010ed2 	.word	0x08010ed2

0800e0d4 <__pow5mult>:
 800e0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	0015      	movs	r5, r2
 800e0da:	0007      	movs	r7, r0
 800e0dc:	000e      	movs	r6, r1
 800e0de:	401a      	ands	r2, r3
 800e0e0:	421d      	tst	r5, r3
 800e0e2:	d008      	beq.n	800e0f6 <__pow5mult+0x22>
 800e0e4:	4925      	ldr	r1, [pc, #148]	@ (800e17c <__pow5mult+0xa8>)
 800e0e6:	3a01      	subs	r2, #1
 800e0e8:	0092      	lsls	r2, r2, #2
 800e0ea:	5852      	ldr	r2, [r2, r1]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	0031      	movs	r1, r6
 800e0f0:	f7ff fe46 	bl	800dd80 <__multadd>
 800e0f4:	0006      	movs	r6, r0
 800e0f6:	10ad      	asrs	r5, r5, #2
 800e0f8:	d03d      	beq.n	800e176 <__pow5mult+0xa2>
 800e0fa:	69fc      	ldr	r4, [r7, #28]
 800e0fc:	2c00      	cmp	r4, #0
 800e0fe:	d10f      	bne.n	800e120 <__pow5mult+0x4c>
 800e100:	2010      	movs	r0, #16
 800e102:	f7ff fd19 	bl	800db38 <malloc>
 800e106:	1e02      	subs	r2, r0, #0
 800e108:	61f8      	str	r0, [r7, #28]
 800e10a:	d105      	bne.n	800e118 <__pow5mult+0x44>
 800e10c:	21b4      	movs	r1, #180	@ 0xb4
 800e10e:	4b1c      	ldr	r3, [pc, #112]	@ (800e180 <__pow5mult+0xac>)
 800e110:	481c      	ldr	r0, [pc, #112]	@ (800e184 <__pow5mult+0xb0>)
 800e112:	31ff      	adds	r1, #255	@ 0xff
 800e114:	f001 fb8c 	bl	800f830 <__assert_func>
 800e118:	6044      	str	r4, [r0, #4]
 800e11a:	6084      	str	r4, [r0, #8]
 800e11c:	6004      	str	r4, [r0, #0]
 800e11e:	60c4      	str	r4, [r0, #12]
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	689c      	ldr	r4, [r3, #8]
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	2c00      	cmp	r4, #0
 800e128:	d108      	bne.n	800e13c <__pow5mult+0x68>
 800e12a:	0038      	movs	r0, r7
 800e12c:	4916      	ldr	r1, [pc, #88]	@ (800e188 <__pow5mult+0xb4>)
 800e12e:	f7ff ff07 	bl	800df40 <__i2b>
 800e132:	9b01      	ldr	r3, [sp, #4]
 800e134:	0004      	movs	r4, r0
 800e136:	6098      	str	r0, [r3, #8]
 800e138:	2300      	movs	r3, #0
 800e13a:	6003      	str	r3, [r0, #0]
 800e13c:	2301      	movs	r3, #1
 800e13e:	421d      	tst	r5, r3
 800e140:	d00a      	beq.n	800e158 <__pow5mult+0x84>
 800e142:	0031      	movs	r1, r6
 800e144:	0022      	movs	r2, r4
 800e146:	0038      	movs	r0, r7
 800e148:	f7ff ff12 	bl	800df70 <__multiply>
 800e14c:	0031      	movs	r1, r6
 800e14e:	9001      	str	r0, [sp, #4]
 800e150:	0038      	movs	r0, r7
 800e152:	f7ff fdf1 	bl	800dd38 <_Bfree>
 800e156:	9e01      	ldr	r6, [sp, #4]
 800e158:	106d      	asrs	r5, r5, #1
 800e15a:	d00c      	beq.n	800e176 <__pow5mult+0xa2>
 800e15c:	6820      	ldr	r0, [r4, #0]
 800e15e:	2800      	cmp	r0, #0
 800e160:	d107      	bne.n	800e172 <__pow5mult+0x9e>
 800e162:	0022      	movs	r2, r4
 800e164:	0021      	movs	r1, r4
 800e166:	0038      	movs	r0, r7
 800e168:	f7ff ff02 	bl	800df70 <__multiply>
 800e16c:	2300      	movs	r3, #0
 800e16e:	6020      	str	r0, [r4, #0]
 800e170:	6003      	str	r3, [r0, #0]
 800e172:	0004      	movs	r4, r0
 800e174:	e7e2      	b.n	800e13c <__pow5mult+0x68>
 800e176:	0030      	movs	r0, r6
 800e178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e17a:	46c0      	nop			@ (mov r8, r8)
 800e17c:	08010f2c 	.word	0x08010f2c
 800e180:	08010e52 	.word	0x08010e52
 800e184:	08010ed2 	.word	0x08010ed2
 800e188:	00000271 	.word	0x00000271

0800e18c <__lshift>:
 800e18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e18e:	000c      	movs	r4, r1
 800e190:	0016      	movs	r6, r2
 800e192:	6923      	ldr	r3, [r4, #16]
 800e194:	1157      	asrs	r7, r2, #5
 800e196:	b085      	sub	sp, #20
 800e198:	18fb      	adds	r3, r7, r3
 800e19a:	9301      	str	r3, [sp, #4]
 800e19c:	3301      	adds	r3, #1
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	6849      	ldr	r1, [r1, #4]
 800e1a2:	68a3      	ldr	r3, [r4, #8]
 800e1a4:	9002      	str	r0, [sp, #8]
 800e1a6:	9a00      	ldr	r2, [sp, #0]
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	db10      	blt.n	800e1ce <__lshift+0x42>
 800e1ac:	9802      	ldr	r0, [sp, #8]
 800e1ae:	f7ff fd7f 	bl	800dcb0 <_Balloc>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	0001      	movs	r1, r0
 800e1b6:	0005      	movs	r5, r0
 800e1b8:	001a      	movs	r2, r3
 800e1ba:	3114      	adds	r1, #20
 800e1bc:	4298      	cmp	r0, r3
 800e1be:	d10c      	bne.n	800e1da <__lshift+0x4e>
 800e1c0:	21ef      	movs	r1, #239	@ 0xef
 800e1c2:	002a      	movs	r2, r5
 800e1c4:	4b25      	ldr	r3, [pc, #148]	@ (800e25c <__lshift+0xd0>)
 800e1c6:	4826      	ldr	r0, [pc, #152]	@ (800e260 <__lshift+0xd4>)
 800e1c8:	0049      	lsls	r1, r1, #1
 800e1ca:	f001 fb31 	bl	800f830 <__assert_func>
 800e1ce:	3101      	adds	r1, #1
 800e1d0:	005b      	lsls	r3, r3, #1
 800e1d2:	e7e8      	b.n	800e1a6 <__lshift+0x1a>
 800e1d4:	0098      	lsls	r0, r3, #2
 800e1d6:	500a      	str	r2, [r1, r0]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	42bb      	cmp	r3, r7
 800e1dc:	dbfa      	blt.n	800e1d4 <__lshift+0x48>
 800e1de:	43fb      	mvns	r3, r7
 800e1e0:	17db      	asrs	r3, r3, #31
 800e1e2:	401f      	ands	r7, r3
 800e1e4:	00bf      	lsls	r7, r7, #2
 800e1e6:	0023      	movs	r3, r4
 800e1e8:	201f      	movs	r0, #31
 800e1ea:	19c9      	adds	r1, r1, r7
 800e1ec:	0037      	movs	r7, r6
 800e1ee:	6922      	ldr	r2, [r4, #16]
 800e1f0:	3314      	adds	r3, #20
 800e1f2:	0092      	lsls	r2, r2, #2
 800e1f4:	189a      	adds	r2, r3, r2
 800e1f6:	4007      	ands	r7, r0
 800e1f8:	4206      	tst	r6, r0
 800e1fa:	d029      	beq.n	800e250 <__lshift+0xc4>
 800e1fc:	3001      	adds	r0, #1
 800e1fe:	1bc0      	subs	r0, r0, r7
 800e200:	9003      	str	r0, [sp, #12]
 800e202:	468c      	mov	ip, r1
 800e204:	2000      	movs	r0, #0
 800e206:	681e      	ldr	r6, [r3, #0]
 800e208:	40be      	lsls	r6, r7
 800e20a:	4306      	orrs	r6, r0
 800e20c:	4660      	mov	r0, ip
 800e20e:	c040      	stmia	r0!, {r6}
 800e210:	4684      	mov	ip, r0
 800e212:	9e03      	ldr	r6, [sp, #12]
 800e214:	cb01      	ldmia	r3!, {r0}
 800e216:	40f0      	lsrs	r0, r6
 800e218:	429a      	cmp	r2, r3
 800e21a:	d8f4      	bhi.n	800e206 <__lshift+0x7a>
 800e21c:	0026      	movs	r6, r4
 800e21e:	3615      	adds	r6, #21
 800e220:	2304      	movs	r3, #4
 800e222:	42b2      	cmp	r2, r6
 800e224:	d304      	bcc.n	800e230 <__lshift+0xa4>
 800e226:	1b13      	subs	r3, r2, r4
 800e228:	3b15      	subs	r3, #21
 800e22a:	089b      	lsrs	r3, r3, #2
 800e22c:	3301      	adds	r3, #1
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	50c8      	str	r0, [r1, r3]
 800e232:	2800      	cmp	r0, #0
 800e234:	d002      	beq.n	800e23c <__lshift+0xb0>
 800e236:	9b01      	ldr	r3, [sp, #4]
 800e238:	3302      	adds	r3, #2
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	9b00      	ldr	r3, [sp, #0]
 800e23e:	9802      	ldr	r0, [sp, #8]
 800e240:	3b01      	subs	r3, #1
 800e242:	0021      	movs	r1, r4
 800e244:	612b      	str	r3, [r5, #16]
 800e246:	f7ff fd77 	bl	800dd38 <_Bfree>
 800e24a:	0028      	movs	r0, r5
 800e24c:	b005      	add	sp, #20
 800e24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e250:	cb01      	ldmia	r3!, {r0}
 800e252:	c101      	stmia	r1!, {r0}
 800e254:	429a      	cmp	r2, r3
 800e256:	d8fb      	bhi.n	800e250 <__lshift+0xc4>
 800e258:	e7f0      	b.n	800e23c <__lshift+0xb0>
 800e25a:	46c0      	nop			@ (mov r8, r8)
 800e25c:	08010ec1 	.word	0x08010ec1
 800e260:	08010ed2 	.word	0x08010ed2

0800e264 <__mcmp>:
 800e264:	b530      	push	{r4, r5, lr}
 800e266:	690b      	ldr	r3, [r1, #16]
 800e268:	6904      	ldr	r4, [r0, #16]
 800e26a:	0002      	movs	r2, r0
 800e26c:	1ae0      	subs	r0, r4, r3
 800e26e:	429c      	cmp	r4, r3
 800e270:	d10f      	bne.n	800e292 <__mcmp+0x2e>
 800e272:	3214      	adds	r2, #20
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	3114      	adds	r1, #20
 800e278:	0014      	movs	r4, r2
 800e27a:	18c9      	adds	r1, r1, r3
 800e27c:	18d2      	adds	r2, r2, r3
 800e27e:	3a04      	subs	r2, #4
 800e280:	3904      	subs	r1, #4
 800e282:	6815      	ldr	r5, [r2, #0]
 800e284:	680b      	ldr	r3, [r1, #0]
 800e286:	429d      	cmp	r5, r3
 800e288:	d004      	beq.n	800e294 <__mcmp+0x30>
 800e28a:	2001      	movs	r0, #1
 800e28c:	429d      	cmp	r5, r3
 800e28e:	d200      	bcs.n	800e292 <__mcmp+0x2e>
 800e290:	3802      	subs	r0, #2
 800e292:	bd30      	pop	{r4, r5, pc}
 800e294:	4294      	cmp	r4, r2
 800e296:	d3f2      	bcc.n	800e27e <__mcmp+0x1a>
 800e298:	e7fb      	b.n	800e292 <__mcmp+0x2e>
	...

0800e29c <__mdiff>:
 800e29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29e:	000c      	movs	r4, r1
 800e2a0:	b087      	sub	sp, #28
 800e2a2:	9000      	str	r0, [sp, #0]
 800e2a4:	0011      	movs	r1, r2
 800e2a6:	0020      	movs	r0, r4
 800e2a8:	0017      	movs	r7, r2
 800e2aa:	f7ff ffdb 	bl	800e264 <__mcmp>
 800e2ae:	1e05      	subs	r5, r0, #0
 800e2b0:	d110      	bne.n	800e2d4 <__mdiff+0x38>
 800e2b2:	0001      	movs	r1, r0
 800e2b4:	9800      	ldr	r0, [sp, #0]
 800e2b6:	f7ff fcfb 	bl	800dcb0 <_Balloc>
 800e2ba:	1e02      	subs	r2, r0, #0
 800e2bc:	d104      	bne.n	800e2c8 <__mdiff+0x2c>
 800e2be:	4b40      	ldr	r3, [pc, #256]	@ (800e3c0 <__mdiff+0x124>)
 800e2c0:	4840      	ldr	r0, [pc, #256]	@ (800e3c4 <__mdiff+0x128>)
 800e2c2:	4941      	ldr	r1, [pc, #260]	@ (800e3c8 <__mdiff+0x12c>)
 800e2c4:	f001 fab4 	bl	800f830 <__assert_func>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	6145      	str	r5, [r0, #20]
 800e2cc:	6103      	str	r3, [r0, #16]
 800e2ce:	0010      	movs	r0, r2
 800e2d0:	b007      	add	sp, #28
 800e2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2d4:	2600      	movs	r6, #0
 800e2d6:	42b0      	cmp	r0, r6
 800e2d8:	da03      	bge.n	800e2e2 <__mdiff+0x46>
 800e2da:	0023      	movs	r3, r4
 800e2dc:	003c      	movs	r4, r7
 800e2de:	001f      	movs	r7, r3
 800e2e0:	3601      	adds	r6, #1
 800e2e2:	6861      	ldr	r1, [r4, #4]
 800e2e4:	9800      	ldr	r0, [sp, #0]
 800e2e6:	f7ff fce3 	bl	800dcb0 <_Balloc>
 800e2ea:	1e02      	subs	r2, r0, #0
 800e2ec:	d103      	bne.n	800e2f6 <__mdiff+0x5a>
 800e2ee:	4b34      	ldr	r3, [pc, #208]	@ (800e3c0 <__mdiff+0x124>)
 800e2f0:	4834      	ldr	r0, [pc, #208]	@ (800e3c4 <__mdiff+0x128>)
 800e2f2:	4936      	ldr	r1, [pc, #216]	@ (800e3cc <__mdiff+0x130>)
 800e2f4:	e7e6      	b.n	800e2c4 <__mdiff+0x28>
 800e2f6:	6923      	ldr	r3, [r4, #16]
 800e2f8:	3414      	adds	r4, #20
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	18e3      	adds	r3, r4, r3
 800e300:	0021      	movs	r1, r4
 800e302:	9401      	str	r4, [sp, #4]
 800e304:	003c      	movs	r4, r7
 800e306:	9302      	str	r3, [sp, #8]
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	3414      	adds	r4, #20
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	18e3      	adds	r3, r4, r3
 800e310:	9303      	str	r3, [sp, #12]
 800e312:	0003      	movs	r3, r0
 800e314:	60c6      	str	r6, [r0, #12]
 800e316:	468c      	mov	ip, r1
 800e318:	2000      	movs	r0, #0
 800e31a:	3314      	adds	r3, #20
 800e31c:	9304      	str	r3, [sp, #16]
 800e31e:	9305      	str	r3, [sp, #20]
 800e320:	4663      	mov	r3, ip
 800e322:	cb20      	ldmia	r3!, {r5}
 800e324:	b2a9      	uxth	r1, r5
 800e326:	000e      	movs	r6, r1
 800e328:	469c      	mov	ip, r3
 800e32a:	cc08      	ldmia	r4!, {r3}
 800e32c:	0c2d      	lsrs	r5, r5, #16
 800e32e:	b299      	uxth	r1, r3
 800e330:	1a71      	subs	r1, r6, r1
 800e332:	1809      	adds	r1, r1, r0
 800e334:	0c1b      	lsrs	r3, r3, #16
 800e336:	1408      	asrs	r0, r1, #16
 800e338:	1aeb      	subs	r3, r5, r3
 800e33a:	181b      	adds	r3, r3, r0
 800e33c:	1418      	asrs	r0, r3, #16
 800e33e:	b289      	uxth	r1, r1
 800e340:	041b      	lsls	r3, r3, #16
 800e342:	4319      	orrs	r1, r3
 800e344:	9b05      	ldr	r3, [sp, #20]
 800e346:	c302      	stmia	r3!, {r1}
 800e348:	9305      	str	r3, [sp, #20]
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	42a3      	cmp	r3, r4
 800e34e:	d8e7      	bhi.n	800e320 <__mdiff+0x84>
 800e350:	0039      	movs	r1, r7
 800e352:	9c03      	ldr	r4, [sp, #12]
 800e354:	3115      	adds	r1, #21
 800e356:	2304      	movs	r3, #4
 800e358:	428c      	cmp	r4, r1
 800e35a:	d304      	bcc.n	800e366 <__mdiff+0xca>
 800e35c:	1be3      	subs	r3, r4, r7
 800e35e:	3b15      	subs	r3, #21
 800e360:	089b      	lsrs	r3, r3, #2
 800e362:	3301      	adds	r3, #1
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	9901      	ldr	r1, [sp, #4]
 800e368:	18cd      	adds	r5, r1, r3
 800e36a:	9904      	ldr	r1, [sp, #16]
 800e36c:	002e      	movs	r6, r5
 800e36e:	18cb      	adds	r3, r1, r3
 800e370:	001f      	movs	r7, r3
 800e372:	9902      	ldr	r1, [sp, #8]
 800e374:	428e      	cmp	r6, r1
 800e376:	d311      	bcc.n	800e39c <__mdiff+0x100>
 800e378:	9c02      	ldr	r4, [sp, #8]
 800e37a:	1ee9      	subs	r1, r5, #3
 800e37c:	2000      	movs	r0, #0
 800e37e:	428c      	cmp	r4, r1
 800e380:	d304      	bcc.n	800e38c <__mdiff+0xf0>
 800e382:	0021      	movs	r1, r4
 800e384:	3103      	adds	r1, #3
 800e386:	1b49      	subs	r1, r1, r5
 800e388:	0889      	lsrs	r1, r1, #2
 800e38a:	0088      	lsls	r0, r1, #2
 800e38c:	181b      	adds	r3, r3, r0
 800e38e:	3b04      	subs	r3, #4
 800e390:	6819      	ldr	r1, [r3, #0]
 800e392:	2900      	cmp	r1, #0
 800e394:	d010      	beq.n	800e3b8 <__mdiff+0x11c>
 800e396:	9b00      	ldr	r3, [sp, #0]
 800e398:	6113      	str	r3, [r2, #16]
 800e39a:	e798      	b.n	800e2ce <__mdiff+0x32>
 800e39c:	4684      	mov	ip, r0
 800e39e:	ce02      	ldmia	r6!, {r1}
 800e3a0:	b288      	uxth	r0, r1
 800e3a2:	4460      	add	r0, ip
 800e3a4:	1400      	asrs	r0, r0, #16
 800e3a6:	0c0c      	lsrs	r4, r1, #16
 800e3a8:	1904      	adds	r4, r0, r4
 800e3aa:	4461      	add	r1, ip
 800e3ac:	1420      	asrs	r0, r4, #16
 800e3ae:	b289      	uxth	r1, r1
 800e3b0:	0424      	lsls	r4, r4, #16
 800e3b2:	4321      	orrs	r1, r4
 800e3b4:	c702      	stmia	r7!, {r1}
 800e3b6:	e7dc      	b.n	800e372 <__mdiff+0xd6>
 800e3b8:	9900      	ldr	r1, [sp, #0]
 800e3ba:	3901      	subs	r1, #1
 800e3bc:	9100      	str	r1, [sp, #0]
 800e3be:	e7e6      	b.n	800e38e <__mdiff+0xf2>
 800e3c0:	08010ec1 	.word	0x08010ec1
 800e3c4:	08010ed2 	.word	0x08010ed2
 800e3c8:	00000237 	.word	0x00000237
 800e3cc:	00000245 	.word	0x00000245

0800e3d0 <__ulp>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	2400      	movs	r4, #0
 800e3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e408 <__ulp+0x38>)
 800e3d6:	4a0d      	ldr	r2, [pc, #52]	@ (800e40c <__ulp+0x3c>)
 800e3d8:	400b      	ands	r3, r1
 800e3da:	189b      	adds	r3, r3, r2
 800e3dc:	42a3      	cmp	r3, r4
 800e3de:	dc06      	bgt.n	800e3ee <__ulp+0x1e>
 800e3e0:	425b      	negs	r3, r3
 800e3e2:	151a      	asrs	r2, r3, #20
 800e3e4:	2a13      	cmp	r2, #19
 800e3e6:	dc05      	bgt.n	800e3f4 <__ulp+0x24>
 800e3e8:	2380      	movs	r3, #128	@ 0x80
 800e3ea:	031b      	lsls	r3, r3, #12
 800e3ec:	4113      	asrs	r3, r2
 800e3ee:	0019      	movs	r1, r3
 800e3f0:	0020      	movs	r0, r4
 800e3f2:	bd10      	pop	{r4, pc}
 800e3f4:	3a14      	subs	r2, #20
 800e3f6:	2401      	movs	r4, #1
 800e3f8:	2a1e      	cmp	r2, #30
 800e3fa:	dc02      	bgt.n	800e402 <__ulp+0x32>
 800e3fc:	2480      	movs	r4, #128	@ 0x80
 800e3fe:	0624      	lsls	r4, r4, #24
 800e400:	40d4      	lsrs	r4, r2
 800e402:	2300      	movs	r3, #0
 800e404:	e7f3      	b.n	800e3ee <__ulp+0x1e>
 800e406:	46c0      	nop			@ (mov r8, r8)
 800e408:	7ff00000 	.word	0x7ff00000
 800e40c:	fcc00000 	.word	0xfcc00000

0800e410 <__b2d>:
 800e410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e412:	0006      	movs	r6, r0
 800e414:	6903      	ldr	r3, [r0, #16]
 800e416:	3614      	adds	r6, #20
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	18f3      	adds	r3, r6, r3
 800e41c:	1f1d      	subs	r5, r3, #4
 800e41e:	682c      	ldr	r4, [r5, #0]
 800e420:	000f      	movs	r7, r1
 800e422:	0020      	movs	r0, r4
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	f7ff fd3b 	bl	800dea0 <__hi0bits>
 800e42a:	2220      	movs	r2, #32
 800e42c:	1a12      	subs	r2, r2, r0
 800e42e:	603a      	str	r2, [r7, #0]
 800e430:	0003      	movs	r3, r0
 800e432:	4a1c      	ldr	r2, [pc, #112]	@ (800e4a4 <__b2d+0x94>)
 800e434:	280a      	cmp	r0, #10
 800e436:	dc15      	bgt.n	800e464 <__b2d+0x54>
 800e438:	210b      	movs	r1, #11
 800e43a:	0027      	movs	r7, r4
 800e43c:	1a09      	subs	r1, r1, r0
 800e43e:	40cf      	lsrs	r7, r1
 800e440:	433a      	orrs	r2, r7
 800e442:	468c      	mov	ip, r1
 800e444:	0011      	movs	r1, r2
 800e446:	2200      	movs	r2, #0
 800e448:	42ae      	cmp	r6, r5
 800e44a:	d202      	bcs.n	800e452 <__b2d+0x42>
 800e44c:	9a01      	ldr	r2, [sp, #4]
 800e44e:	3a08      	subs	r2, #8
 800e450:	6812      	ldr	r2, [r2, #0]
 800e452:	3315      	adds	r3, #21
 800e454:	409c      	lsls	r4, r3
 800e456:	4663      	mov	r3, ip
 800e458:	0027      	movs	r7, r4
 800e45a:	40da      	lsrs	r2, r3
 800e45c:	4317      	orrs	r7, r2
 800e45e:	0038      	movs	r0, r7
 800e460:	b003      	add	sp, #12
 800e462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e464:	2700      	movs	r7, #0
 800e466:	42ae      	cmp	r6, r5
 800e468:	d202      	bcs.n	800e470 <__b2d+0x60>
 800e46a:	9d01      	ldr	r5, [sp, #4]
 800e46c:	3d08      	subs	r5, #8
 800e46e:	682f      	ldr	r7, [r5, #0]
 800e470:	210b      	movs	r1, #11
 800e472:	4249      	negs	r1, r1
 800e474:	468c      	mov	ip, r1
 800e476:	449c      	add	ip, r3
 800e478:	2b0b      	cmp	r3, #11
 800e47a:	d010      	beq.n	800e49e <__b2d+0x8e>
 800e47c:	4661      	mov	r1, ip
 800e47e:	2320      	movs	r3, #32
 800e480:	408c      	lsls	r4, r1
 800e482:	1a5b      	subs	r3, r3, r1
 800e484:	0039      	movs	r1, r7
 800e486:	40d9      	lsrs	r1, r3
 800e488:	430c      	orrs	r4, r1
 800e48a:	4322      	orrs	r2, r4
 800e48c:	0011      	movs	r1, r2
 800e48e:	2200      	movs	r2, #0
 800e490:	42b5      	cmp	r5, r6
 800e492:	d901      	bls.n	800e498 <__b2d+0x88>
 800e494:	3d04      	subs	r5, #4
 800e496:	682a      	ldr	r2, [r5, #0]
 800e498:	4664      	mov	r4, ip
 800e49a:	40a7      	lsls	r7, r4
 800e49c:	e7dd      	b.n	800e45a <__b2d+0x4a>
 800e49e:	4322      	orrs	r2, r4
 800e4a0:	0011      	movs	r1, r2
 800e4a2:	e7dc      	b.n	800e45e <__b2d+0x4e>
 800e4a4:	3ff00000 	.word	0x3ff00000

0800e4a8 <__d2b>:
 800e4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	0016      	movs	r6, r2
 800e4ae:	001f      	movs	r7, r3
 800e4b0:	f7ff fbfe 	bl	800dcb0 <_Balloc>
 800e4b4:	1e04      	subs	r4, r0, #0
 800e4b6:	d105      	bne.n	800e4c4 <__d2b+0x1c>
 800e4b8:	0022      	movs	r2, r4
 800e4ba:	4b25      	ldr	r3, [pc, #148]	@ (800e550 <__d2b+0xa8>)
 800e4bc:	4825      	ldr	r0, [pc, #148]	@ (800e554 <__d2b+0xac>)
 800e4be:	4926      	ldr	r1, [pc, #152]	@ (800e558 <__d2b+0xb0>)
 800e4c0:	f001 f9b6 	bl	800f830 <__assert_func>
 800e4c4:	033b      	lsls	r3, r7, #12
 800e4c6:	007d      	lsls	r5, r7, #1
 800e4c8:	0b1b      	lsrs	r3, r3, #12
 800e4ca:	0d6d      	lsrs	r5, r5, #21
 800e4cc:	d002      	beq.n	800e4d4 <__d2b+0x2c>
 800e4ce:	2280      	movs	r2, #128	@ 0x80
 800e4d0:	0352      	lsls	r2, r2, #13
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	9301      	str	r3, [sp, #4]
 800e4d6:	2e00      	cmp	r6, #0
 800e4d8:	d025      	beq.n	800e526 <__d2b+0x7e>
 800e4da:	4668      	mov	r0, sp
 800e4dc:	9600      	str	r6, [sp, #0]
 800e4de:	f7ff fd00 	bl	800dee2 <__lo0bits>
 800e4e2:	9b01      	ldr	r3, [sp, #4]
 800e4e4:	9900      	ldr	r1, [sp, #0]
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d01b      	beq.n	800e522 <__d2b+0x7a>
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	001e      	movs	r6, r3
 800e4ee:	1a12      	subs	r2, r2, r0
 800e4f0:	4096      	lsls	r6, r2
 800e4f2:	0032      	movs	r2, r6
 800e4f4:	40c3      	lsrs	r3, r0
 800e4f6:	430a      	orrs	r2, r1
 800e4f8:	6162      	str	r2, [r4, #20]
 800e4fa:	9301      	str	r3, [sp, #4]
 800e4fc:	9e01      	ldr	r6, [sp, #4]
 800e4fe:	61a6      	str	r6, [r4, #24]
 800e500:	1e73      	subs	r3, r6, #1
 800e502:	419e      	sbcs	r6, r3
 800e504:	3601      	adds	r6, #1
 800e506:	6126      	str	r6, [r4, #16]
 800e508:	2d00      	cmp	r5, #0
 800e50a:	d014      	beq.n	800e536 <__d2b+0x8e>
 800e50c:	2635      	movs	r6, #53	@ 0x35
 800e50e:	4b13      	ldr	r3, [pc, #76]	@ (800e55c <__d2b+0xb4>)
 800e510:	18ed      	adds	r5, r5, r3
 800e512:	9b08      	ldr	r3, [sp, #32]
 800e514:	182d      	adds	r5, r5, r0
 800e516:	601d      	str	r5, [r3, #0]
 800e518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e51a:	1a36      	subs	r6, r6, r0
 800e51c:	601e      	str	r6, [r3, #0]
 800e51e:	0020      	movs	r0, r4
 800e520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e522:	6161      	str	r1, [r4, #20]
 800e524:	e7ea      	b.n	800e4fc <__d2b+0x54>
 800e526:	a801      	add	r0, sp, #4
 800e528:	f7ff fcdb 	bl	800dee2 <__lo0bits>
 800e52c:	9b01      	ldr	r3, [sp, #4]
 800e52e:	2601      	movs	r6, #1
 800e530:	6163      	str	r3, [r4, #20]
 800e532:	3020      	adds	r0, #32
 800e534:	e7e7      	b.n	800e506 <__d2b+0x5e>
 800e536:	4b0a      	ldr	r3, [pc, #40]	@ (800e560 <__d2b+0xb8>)
 800e538:	18c0      	adds	r0, r0, r3
 800e53a:	9b08      	ldr	r3, [sp, #32]
 800e53c:	6018      	str	r0, [r3, #0]
 800e53e:	4b09      	ldr	r3, [pc, #36]	@ (800e564 <__d2b+0xbc>)
 800e540:	18f3      	adds	r3, r6, r3
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	18e3      	adds	r3, r4, r3
 800e546:	6958      	ldr	r0, [r3, #20]
 800e548:	f7ff fcaa 	bl	800dea0 <__hi0bits>
 800e54c:	0176      	lsls	r6, r6, #5
 800e54e:	e7e3      	b.n	800e518 <__d2b+0x70>
 800e550:	08010ec1 	.word	0x08010ec1
 800e554:	08010ed2 	.word	0x08010ed2
 800e558:	0000030f 	.word	0x0000030f
 800e55c:	fffffbcd 	.word	0xfffffbcd
 800e560:	fffffbce 	.word	0xfffffbce
 800e564:	3fffffff 	.word	0x3fffffff

0800e568 <__ratio>:
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	b087      	sub	sp, #28
 800e56c:	000f      	movs	r7, r1
 800e56e:	a904      	add	r1, sp, #16
 800e570:	0006      	movs	r6, r0
 800e572:	f7ff ff4d 	bl	800e410 <__b2d>
 800e576:	9000      	str	r0, [sp, #0]
 800e578:	9101      	str	r1, [sp, #4]
 800e57a:	9b00      	ldr	r3, [sp, #0]
 800e57c:	9c01      	ldr	r4, [sp, #4]
 800e57e:	0038      	movs	r0, r7
 800e580:	a905      	add	r1, sp, #20
 800e582:	9302      	str	r3, [sp, #8]
 800e584:	9403      	str	r4, [sp, #12]
 800e586:	f7ff ff43 	bl	800e410 <__b2d>
 800e58a:	000d      	movs	r5, r1
 800e58c:	0002      	movs	r2, r0
 800e58e:	000b      	movs	r3, r1
 800e590:	6930      	ldr	r0, [r6, #16]
 800e592:	6939      	ldr	r1, [r7, #16]
 800e594:	9e04      	ldr	r6, [sp, #16]
 800e596:	1a40      	subs	r0, r0, r1
 800e598:	9905      	ldr	r1, [sp, #20]
 800e59a:	0140      	lsls	r0, r0, #5
 800e59c:	1a71      	subs	r1, r6, r1
 800e59e:	1841      	adds	r1, r0, r1
 800e5a0:	0508      	lsls	r0, r1, #20
 800e5a2:	2900      	cmp	r1, #0
 800e5a4:	dd08      	ble.n	800e5b8 <__ratio+0x50>
 800e5a6:	9901      	ldr	r1, [sp, #4]
 800e5a8:	1841      	adds	r1, r0, r1
 800e5aa:	9103      	str	r1, [sp, #12]
 800e5ac:	9802      	ldr	r0, [sp, #8]
 800e5ae:	9903      	ldr	r1, [sp, #12]
 800e5b0:	f7f3 fab4 	bl	8001b1c <__aeabi_ddiv>
 800e5b4:	b007      	add	sp, #28
 800e5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b8:	1a2b      	subs	r3, r5, r0
 800e5ba:	e7f7      	b.n	800e5ac <__ratio+0x44>

0800e5bc <__copybits>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	0014      	movs	r4, r2
 800e5c0:	0005      	movs	r5, r0
 800e5c2:	3901      	subs	r1, #1
 800e5c4:	6913      	ldr	r3, [r2, #16]
 800e5c6:	1149      	asrs	r1, r1, #5
 800e5c8:	3101      	adds	r1, #1
 800e5ca:	0089      	lsls	r1, r1, #2
 800e5cc:	3414      	adds	r4, #20
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	1841      	adds	r1, r0, r1
 800e5d2:	18e3      	adds	r3, r4, r3
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	d80d      	bhi.n	800e5f4 <__copybits+0x38>
 800e5d8:	0014      	movs	r4, r2
 800e5da:	3411      	adds	r4, #17
 800e5dc:	2500      	movs	r5, #0
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	d803      	bhi.n	800e5ea <__copybits+0x2e>
 800e5e2:	1a9b      	subs	r3, r3, r2
 800e5e4:	3b11      	subs	r3, #17
 800e5e6:	089b      	lsrs	r3, r3, #2
 800e5e8:	009d      	lsls	r5, r3, #2
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	1940      	adds	r0, r0, r5
 800e5ee:	4281      	cmp	r1, r0
 800e5f0:	d803      	bhi.n	800e5fa <__copybits+0x3e>
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}
 800e5f4:	cc40      	ldmia	r4!, {r6}
 800e5f6:	c540      	stmia	r5!, {r6}
 800e5f8:	e7ec      	b.n	800e5d4 <__copybits+0x18>
 800e5fa:	c008      	stmia	r0!, {r3}
 800e5fc:	e7f7      	b.n	800e5ee <__copybits+0x32>

0800e5fe <__any_on>:
 800e5fe:	0002      	movs	r2, r0
 800e600:	6900      	ldr	r0, [r0, #16]
 800e602:	b510      	push	{r4, lr}
 800e604:	3214      	adds	r2, #20
 800e606:	114b      	asrs	r3, r1, #5
 800e608:	4298      	cmp	r0, r3
 800e60a:	db13      	blt.n	800e634 <__any_on+0x36>
 800e60c:	dd0c      	ble.n	800e628 <__any_on+0x2a>
 800e60e:	241f      	movs	r4, #31
 800e610:	0008      	movs	r0, r1
 800e612:	4020      	ands	r0, r4
 800e614:	4221      	tst	r1, r4
 800e616:	d007      	beq.n	800e628 <__any_on+0x2a>
 800e618:	0099      	lsls	r1, r3, #2
 800e61a:	588c      	ldr	r4, [r1, r2]
 800e61c:	0021      	movs	r1, r4
 800e61e:	40c1      	lsrs	r1, r0
 800e620:	4081      	lsls	r1, r0
 800e622:	2001      	movs	r0, #1
 800e624:	428c      	cmp	r4, r1
 800e626:	d104      	bne.n	800e632 <__any_on+0x34>
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	18d3      	adds	r3, r2, r3
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d803      	bhi.n	800e638 <__any_on+0x3a>
 800e630:	2000      	movs	r0, #0
 800e632:	bd10      	pop	{r4, pc}
 800e634:	0003      	movs	r3, r0
 800e636:	e7f7      	b.n	800e628 <__any_on+0x2a>
 800e638:	3b04      	subs	r3, #4
 800e63a:	6819      	ldr	r1, [r3, #0]
 800e63c:	2900      	cmp	r1, #0
 800e63e:	d0f5      	beq.n	800e62c <__any_on+0x2e>
 800e640:	2001      	movs	r0, #1
 800e642:	e7f6      	b.n	800e632 <__any_on+0x34>

0800e644 <sulp>:
 800e644:	b570      	push	{r4, r5, r6, lr}
 800e646:	0016      	movs	r6, r2
 800e648:	000d      	movs	r5, r1
 800e64a:	f7ff fec1 	bl	800e3d0 <__ulp>
 800e64e:	2e00      	cmp	r6, #0
 800e650:	d00d      	beq.n	800e66e <sulp+0x2a>
 800e652:	236b      	movs	r3, #107	@ 0x6b
 800e654:	006a      	lsls	r2, r5, #1
 800e656:	0d52      	lsrs	r2, r2, #21
 800e658:	1a9b      	subs	r3, r3, r2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dd07      	ble.n	800e66e <sulp+0x2a>
 800e65e:	2400      	movs	r4, #0
 800e660:	4a03      	ldr	r2, [pc, #12]	@ (800e670 <sulp+0x2c>)
 800e662:	051b      	lsls	r3, r3, #20
 800e664:	189d      	adds	r5, r3, r2
 800e666:	002b      	movs	r3, r5
 800e668:	0022      	movs	r2, r4
 800e66a:	f7f3 fe9b 	bl	80023a4 <__aeabi_dmul>
 800e66e:	bd70      	pop	{r4, r5, r6, pc}
 800e670:	3ff00000 	.word	0x3ff00000

0800e674 <_strtod_l>:
 800e674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e676:	b0a3      	sub	sp, #140	@ 0x8c
 800e678:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e67a:	2200      	movs	r2, #0
 800e67c:	2600      	movs	r6, #0
 800e67e:	2700      	movs	r7, #0
 800e680:	9005      	str	r0, [sp, #20]
 800e682:	9109      	str	r1, [sp, #36]	@ 0x24
 800e684:	921e      	str	r2, [sp, #120]	@ 0x78
 800e686:	911d      	str	r1, [sp, #116]	@ 0x74
 800e688:	780a      	ldrb	r2, [r1, #0]
 800e68a:	2a2b      	cmp	r2, #43	@ 0x2b
 800e68c:	d053      	beq.n	800e736 <_strtod_l+0xc2>
 800e68e:	d83f      	bhi.n	800e710 <_strtod_l+0x9c>
 800e690:	2a0d      	cmp	r2, #13
 800e692:	d839      	bhi.n	800e708 <_strtod_l+0x94>
 800e694:	2a08      	cmp	r2, #8
 800e696:	d839      	bhi.n	800e70c <_strtod_l+0x98>
 800e698:	2a00      	cmp	r2, #0
 800e69a:	d042      	beq.n	800e722 <_strtod_l+0xae>
 800e69c:	2200      	movs	r2, #0
 800e69e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800e6a4:	910c      	str	r1, [sp, #48]	@ 0x30
 800e6a6:	782a      	ldrb	r2, [r5, #0]
 800e6a8:	2a30      	cmp	r2, #48	@ 0x30
 800e6aa:	d000      	beq.n	800e6ae <_strtod_l+0x3a>
 800e6ac:	e083      	b.n	800e7b6 <_strtod_l+0x142>
 800e6ae:	786a      	ldrb	r2, [r5, #1]
 800e6b0:	3120      	adds	r1, #32
 800e6b2:	438a      	bics	r2, r1
 800e6b4:	2a58      	cmp	r2, #88	@ 0x58
 800e6b6:	d000      	beq.n	800e6ba <_strtod_l+0x46>
 800e6b8:	e073      	b.n	800e7a2 <_strtod_l+0x12e>
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6be:	4a95      	ldr	r2, [pc, #596]	@ (800e914 <_strtod_l+0x2a0>)
 800e6c0:	9301      	str	r3, [sp, #4]
 800e6c2:	ab1e      	add	r3, sp, #120	@ 0x78
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	9805      	ldr	r0, [sp, #20]
 800e6c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e6ca:	a91d      	add	r1, sp, #116	@ 0x74
 800e6cc:	f001 f964 	bl	800f998 <__gethex>
 800e6d0:	230f      	movs	r3, #15
 800e6d2:	0002      	movs	r2, r0
 800e6d4:	401a      	ands	r2, r3
 800e6d6:	0004      	movs	r4, r0
 800e6d8:	9206      	str	r2, [sp, #24]
 800e6da:	4218      	tst	r0, r3
 800e6dc:	d005      	beq.n	800e6ea <_strtod_l+0x76>
 800e6de:	2a06      	cmp	r2, #6
 800e6e0:	d12b      	bne.n	800e73a <_strtod_l+0xc6>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	3501      	adds	r5, #1
 800e6e6:	951d      	str	r5, [sp, #116]	@ 0x74
 800e6e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e6ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <_strtod_l+0x82>
 800e6f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e6f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d019      	beq.n	800e730 <_strtod_l+0xbc>
 800e6fc:	2380      	movs	r3, #128	@ 0x80
 800e6fe:	0030      	movs	r0, r6
 800e700:	061b      	lsls	r3, r3, #24
 800e702:	18f9      	adds	r1, r7, r3
 800e704:	b023      	add	sp, #140	@ 0x8c
 800e706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e708:	2a20      	cmp	r2, #32
 800e70a:	d1c7      	bne.n	800e69c <_strtod_l+0x28>
 800e70c:	3101      	adds	r1, #1
 800e70e:	e7ba      	b.n	800e686 <_strtod_l+0x12>
 800e710:	2a2d      	cmp	r2, #45	@ 0x2d
 800e712:	d1c3      	bne.n	800e69c <_strtod_l+0x28>
 800e714:	3a2c      	subs	r2, #44	@ 0x2c
 800e716:	9212      	str	r2, [sp, #72]	@ 0x48
 800e718:	1c4a      	adds	r2, r1, #1
 800e71a:	921d      	str	r2, [sp, #116]	@ 0x74
 800e71c:	784a      	ldrb	r2, [r1, #1]
 800e71e:	2a00      	cmp	r2, #0
 800e720:	d1be      	bne.n	800e6a0 <_strtod_l+0x2c>
 800e722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e724:	931d      	str	r3, [sp, #116]	@ 0x74
 800e726:	2300      	movs	r3, #0
 800e728:	9312      	str	r3, [sp, #72]	@ 0x48
 800e72a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1df      	bne.n	800e6f0 <_strtod_l+0x7c>
 800e730:	0030      	movs	r0, r6
 800e732:	0039      	movs	r1, r7
 800e734:	e7e6      	b.n	800e704 <_strtod_l+0x90>
 800e736:	2200      	movs	r2, #0
 800e738:	e7ed      	b.n	800e716 <_strtod_l+0xa2>
 800e73a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e73c:	2a00      	cmp	r2, #0
 800e73e:	d007      	beq.n	800e750 <_strtod_l+0xdc>
 800e740:	2135      	movs	r1, #53	@ 0x35
 800e742:	a820      	add	r0, sp, #128	@ 0x80
 800e744:	f7ff ff3a 	bl	800e5bc <__copybits>
 800e748:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e74a:	9805      	ldr	r0, [sp, #20]
 800e74c:	f7ff faf4 	bl	800dd38 <_Bfree>
 800e750:	9806      	ldr	r0, [sp, #24]
 800e752:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e754:	3801      	subs	r0, #1
 800e756:	2804      	cmp	r0, #4
 800e758:	d806      	bhi.n	800e768 <_strtod_l+0xf4>
 800e75a:	f7f1 fcdd 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e75e:	0312      	.short	0x0312
 800e760:	1e1c      	.short	0x1e1c
 800e762:	12          	.byte	0x12
 800e763:	00          	.byte	0x00
 800e764:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e766:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800e768:	05e4      	lsls	r4, r4, #23
 800e76a:	d502      	bpl.n	800e772 <_strtod_l+0xfe>
 800e76c:	2380      	movs	r3, #128	@ 0x80
 800e76e:	061b      	lsls	r3, r3, #24
 800e770:	431f      	orrs	r7, r3
 800e772:	4b69      	ldr	r3, [pc, #420]	@ (800e918 <_strtod_l+0x2a4>)
 800e774:	423b      	tst	r3, r7
 800e776:	d1b8      	bne.n	800e6ea <_strtod_l+0x76>
 800e778:	f7fe fad6 	bl	800cd28 <__errno>
 800e77c:	2322      	movs	r3, #34	@ 0x22
 800e77e:	6003      	str	r3, [r0, #0]
 800e780:	e7b3      	b.n	800e6ea <_strtod_l+0x76>
 800e782:	4966      	ldr	r1, [pc, #408]	@ (800e91c <_strtod_l+0x2a8>)
 800e784:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e786:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e788:	400a      	ands	r2, r1
 800e78a:	4965      	ldr	r1, [pc, #404]	@ (800e920 <_strtod_l+0x2ac>)
 800e78c:	185b      	adds	r3, r3, r1
 800e78e:	051b      	lsls	r3, r3, #20
 800e790:	431a      	orrs	r2, r3
 800e792:	0017      	movs	r7, r2
 800e794:	e7e8      	b.n	800e768 <_strtod_l+0xf4>
 800e796:	4f60      	ldr	r7, [pc, #384]	@ (800e918 <_strtod_l+0x2a4>)
 800e798:	e7e6      	b.n	800e768 <_strtod_l+0xf4>
 800e79a:	2601      	movs	r6, #1
 800e79c:	4f61      	ldr	r7, [pc, #388]	@ (800e924 <_strtod_l+0x2b0>)
 800e79e:	4276      	negs	r6, r6
 800e7a0:	e7e2      	b.n	800e768 <_strtod_l+0xf4>
 800e7a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	921d      	str	r2, [sp, #116]	@ 0x74
 800e7a8:	785b      	ldrb	r3, [r3, #1]
 800e7aa:	2b30      	cmp	r3, #48	@ 0x30
 800e7ac:	d0f9      	beq.n	800e7a2 <_strtod_l+0x12e>
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d09b      	beq.n	800e6ea <_strtod_l+0x76>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e7b6:	2500      	movs	r5, #0
 800e7b8:	220a      	movs	r2, #10
 800e7ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e7bc:	950d      	str	r5, [sp, #52]	@ 0x34
 800e7be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7c0:	9508      	str	r5, [sp, #32]
 800e7c2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e7c4:	7804      	ldrb	r4, [r0, #0]
 800e7c6:	0023      	movs	r3, r4
 800e7c8:	3b30      	subs	r3, #48	@ 0x30
 800e7ca:	b2d9      	uxtb	r1, r3
 800e7cc:	2909      	cmp	r1, #9
 800e7ce:	d927      	bls.n	800e820 <_strtod_l+0x1ac>
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	4955      	ldr	r1, [pc, #340]	@ (800e928 <_strtod_l+0x2b4>)
 800e7d4:	f000 fff8 	bl	800f7c8 <strncmp>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d031      	beq.n	800e840 <_strtod_l+0x1cc>
 800e7dc:	2000      	movs	r0, #0
 800e7de:	0023      	movs	r3, r4
 800e7e0:	4684      	mov	ip, r0
 800e7e2:	9a08      	ldr	r2, [sp, #32]
 800e7e4:	900e      	str	r0, [sp, #56]	@ 0x38
 800e7e6:	9206      	str	r2, [sp, #24]
 800e7e8:	2220      	movs	r2, #32
 800e7ea:	0019      	movs	r1, r3
 800e7ec:	4391      	bics	r1, r2
 800e7ee:	000a      	movs	r2, r1
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	9107      	str	r1, [sp, #28]
 800e7f4:	2a45      	cmp	r2, #69	@ 0x45
 800e7f6:	d000      	beq.n	800e7fa <_strtod_l+0x186>
 800e7f8:	e0c0      	b.n	800e97c <_strtod_l+0x308>
 800e7fa:	9b06      	ldr	r3, [sp, #24]
 800e7fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e7fe:	4303      	orrs	r3, r0
 800e800:	4313      	orrs	r3, r2
 800e802:	428b      	cmp	r3, r1
 800e804:	d08d      	beq.n	800e722 <_strtod_l+0xae>
 800e806:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e808:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80a:	3301      	adds	r3, #1
 800e80c:	931d      	str	r3, [sp, #116]	@ 0x74
 800e80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e810:	785b      	ldrb	r3, [r3, #1]
 800e812:	2b2b      	cmp	r3, #43	@ 0x2b
 800e814:	d070      	beq.n	800e8f8 <_strtod_l+0x284>
 800e816:	000c      	movs	r4, r1
 800e818:	2b2d      	cmp	r3, #45	@ 0x2d
 800e81a:	d173      	bne.n	800e904 <_strtod_l+0x290>
 800e81c:	2401      	movs	r4, #1
 800e81e:	e06c      	b.n	800e8fa <_strtod_l+0x286>
 800e820:	9908      	ldr	r1, [sp, #32]
 800e822:	2908      	cmp	r1, #8
 800e824:	dc09      	bgt.n	800e83a <_strtod_l+0x1c6>
 800e826:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e828:	4351      	muls	r1, r2
 800e82a:	185b      	adds	r3, r3, r1
 800e82c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e82e:	9b08      	ldr	r3, [sp, #32]
 800e830:	3001      	adds	r0, #1
 800e832:	3301      	adds	r3, #1
 800e834:	9308      	str	r3, [sp, #32]
 800e836:	901d      	str	r0, [sp, #116]	@ 0x74
 800e838:	e7c3      	b.n	800e7c2 <_strtod_l+0x14e>
 800e83a:	4355      	muls	r5, r2
 800e83c:	195d      	adds	r5, r3, r5
 800e83e:	e7f6      	b.n	800e82e <_strtod_l+0x1ba>
 800e840:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	921d      	str	r2, [sp, #116]	@ 0x74
 800e846:	9a08      	ldr	r2, [sp, #32]
 800e848:	785b      	ldrb	r3, [r3, #1]
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	d03a      	beq.n	800e8c4 <_strtod_l+0x250>
 800e84e:	900e      	str	r0, [sp, #56]	@ 0x38
 800e850:	9206      	str	r2, [sp, #24]
 800e852:	001a      	movs	r2, r3
 800e854:	3a30      	subs	r2, #48	@ 0x30
 800e856:	2a09      	cmp	r2, #9
 800e858:	d912      	bls.n	800e880 <_strtod_l+0x20c>
 800e85a:	2201      	movs	r2, #1
 800e85c:	4694      	mov	ip, r2
 800e85e:	e7c3      	b.n	800e7e8 <_strtod_l+0x174>
 800e860:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e862:	3001      	adds	r0, #1
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	921d      	str	r2, [sp, #116]	@ 0x74
 800e868:	785b      	ldrb	r3, [r3, #1]
 800e86a:	2b30      	cmp	r3, #48	@ 0x30
 800e86c:	d0f8      	beq.n	800e860 <_strtod_l+0x1ec>
 800e86e:	001a      	movs	r2, r3
 800e870:	3a31      	subs	r2, #49	@ 0x31
 800e872:	2a08      	cmp	r2, #8
 800e874:	d83b      	bhi.n	800e8ee <_strtod_l+0x27a>
 800e876:	900e      	str	r0, [sp, #56]	@ 0x38
 800e878:	2000      	movs	r0, #0
 800e87a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e87c:	9006      	str	r0, [sp, #24]
 800e87e:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e880:	001a      	movs	r2, r3
 800e882:	1c41      	adds	r1, r0, #1
 800e884:	3a30      	subs	r2, #48	@ 0x30
 800e886:	2b30      	cmp	r3, #48	@ 0x30
 800e888:	d016      	beq.n	800e8b8 <_strtod_l+0x244>
 800e88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e88c:	185b      	adds	r3, r3, r1
 800e88e:	930e      	str	r3, [sp, #56]	@ 0x38
 800e890:	9b06      	ldr	r3, [sp, #24]
 800e892:	210a      	movs	r1, #10
 800e894:	469c      	mov	ip, r3
 800e896:	4484      	add	ip, r0
 800e898:	459c      	cmp	ip, r3
 800e89a:	d115      	bne.n	800e8c8 <_strtod_l+0x254>
 800e89c:	9906      	ldr	r1, [sp, #24]
 800e89e:	9b06      	ldr	r3, [sp, #24]
 800e8a0:	3101      	adds	r1, #1
 800e8a2:	1809      	adds	r1, r1, r0
 800e8a4:	181b      	adds	r3, r3, r0
 800e8a6:	9106      	str	r1, [sp, #24]
 800e8a8:	2b08      	cmp	r3, #8
 800e8aa:	dc19      	bgt.n	800e8e0 <_strtod_l+0x26c>
 800e8ac:	230a      	movs	r3, #10
 800e8ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e8b0:	434b      	muls	r3, r1
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	18d3      	adds	r3, r2, r3
 800e8b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e8ba:	0008      	movs	r0, r1
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	921d      	str	r2, [sp, #116]	@ 0x74
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	e7c6      	b.n	800e852 <_strtod_l+0x1de>
 800e8c4:	9808      	ldr	r0, [sp, #32]
 800e8c6:	e7d0      	b.n	800e86a <_strtod_l+0x1f6>
 800e8c8:	1c5c      	adds	r4, r3, #1
 800e8ca:	2b08      	cmp	r3, #8
 800e8cc:	dc04      	bgt.n	800e8d8 <_strtod_l+0x264>
 800e8ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8d0:	434b      	muls	r3, r1
 800e8d2:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8d4:	0023      	movs	r3, r4
 800e8d6:	e7df      	b.n	800e898 <_strtod_l+0x224>
 800e8d8:	2c10      	cmp	r4, #16
 800e8da:	dcfb      	bgt.n	800e8d4 <_strtod_l+0x260>
 800e8dc:	434d      	muls	r5, r1
 800e8de:	e7f9      	b.n	800e8d4 <_strtod_l+0x260>
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	2b0f      	cmp	r3, #15
 800e8e4:	dce8      	bgt.n	800e8b8 <_strtod_l+0x244>
 800e8e6:	230a      	movs	r3, #10
 800e8e8:	435d      	muls	r5, r3
 800e8ea:	1955      	adds	r5, r2, r5
 800e8ec:	e7e4      	b.n	800e8b8 <_strtod_l+0x244>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8f2:	9206      	str	r2, [sp, #24]
 800e8f4:	3201      	adds	r2, #1
 800e8f6:	e7b1      	b.n	800e85c <_strtod_l+0x1e8>
 800e8f8:	2400      	movs	r4, #0
 800e8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8fc:	3302      	adds	r3, #2
 800e8fe:	931d      	str	r3, [sp, #116]	@ 0x74
 800e900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e902:	789b      	ldrb	r3, [r3, #2]
 800e904:	001a      	movs	r2, r3
 800e906:	3a30      	subs	r2, #48	@ 0x30
 800e908:	2a09      	cmp	r2, #9
 800e90a:	d913      	bls.n	800e934 <_strtod_l+0x2c0>
 800e90c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e90e:	921d      	str	r2, [sp, #116]	@ 0x74
 800e910:	2200      	movs	r2, #0
 800e912:	e032      	b.n	800e97a <_strtod_l+0x306>
 800e914:	08011040 	.word	0x08011040
 800e918:	7ff00000 	.word	0x7ff00000
 800e91c:	ffefffff 	.word	0xffefffff
 800e920:	00000433 	.word	0x00000433
 800e924:	7fffffff 	.word	0x7fffffff
 800e928:	08011028 	.word	0x08011028
 800e92c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	921d      	str	r2, [sp, #116]	@ 0x74
 800e932:	785b      	ldrb	r3, [r3, #1]
 800e934:	2b30      	cmp	r3, #48	@ 0x30
 800e936:	d0f9      	beq.n	800e92c <_strtod_l+0x2b8>
 800e938:	2200      	movs	r2, #0
 800e93a:	9207      	str	r2, [sp, #28]
 800e93c:	001a      	movs	r2, r3
 800e93e:	3a31      	subs	r2, #49	@ 0x31
 800e940:	2a08      	cmp	r2, #8
 800e942:	d81b      	bhi.n	800e97c <_strtod_l+0x308>
 800e944:	3b30      	subs	r3, #48	@ 0x30
 800e946:	9310      	str	r3, [sp, #64]	@ 0x40
 800e948:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e94a:	9307      	str	r3, [sp, #28]
 800e94c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e94e:	1c59      	adds	r1, r3, #1
 800e950:	911d      	str	r1, [sp, #116]	@ 0x74
 800e952:	785b      	ldrb	r3, [r3, #1]
 800e954:	001a      	movs	r2, r3
 800e956:	3a30      	subs	r2, #48	@ 0x30
 800e958:	2a09      	cmp	r2, #9
 800e95a:	d93a      	bls.n	800e9d2 <_strtod_l+0x35e>
 800e95c:	9a07      	ldr	r2, [sp, #28]
 800e95e:	1a8a      	subs	r2, r1, r2
 800e960:	49b4      	ldr	r1, [pc, #720]	@ (800ec34 <_strtod_l+0x5c0>)
 800e962:	9107      	str	r1, [sp, #28]
 800e964:	2a08      	cmp	r2, #8
 800e966:	dc04      	bgt.n	800e972 <_strtod_l+0x2fe>
 800e968:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e96a:	9207      	str	r2, [sp, #28]
 800e96c:	428a      	cmp	r2, r1
 800e96e:	dd00      	ble.n	800e972 <_strtod_l+0x2fe>
 800e970:	9107      	str	r1, [sp, #28]
 800e972:	2c00      	cmp	r4, #0
 800e974:	d002      	beq.n	800e97c <_strtod_l+0x308>
 800e976:	9a07      	ldr	r2, [sp, #28]
 800e978:	4252      	negs	r2, r2
 800e97a:	9207      	str	r2, [sp, #28]
 800e97c:	9a06      	ldr	r2, [sp, #24]
 800e97e:	2a00      	cmp	r2, #0
 800e980:	d14d      	bne.n	800ea1e <_strtod_l+0x3aa>
 800e982:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e984:	4310      	orrs	r0, r2
 800e986:	d000      	beq.n	800e98a <_strtod_l+0x316>
 800e988:	e6af      	b.n	800e6ea <_strtod_l+0x76>
 800e98a:	4662      	mov	r2, ip
 800e98c:	2a00      	cmp	r2, #0
 800e98e:	d000      	beq.n	800e992 <_strtod_l+0x31e>
 800e990:	e6c7      	b.n	800e722 <_strtod_l+0xae>
 800e992:	2b69      	cmp	r3, #105	@ 0x69
 800e994:	d027      	beq.n	800e9e6 <_strtod_l+0x372>
 800e996:	dc23      	bgt.n	800e9e0 <_strtod_l+0x36c>
 800e998:	2b49      	cmp	r3, #73	@ 0x49
 800e99a:	d024      	beq.n	800e9e6 <_strtod_l+0x372>
 800e99c:	2b4e      	cmp	r3, #78	@ 0x4e
 800e99e:	d000      	beq.n	800e9a2 <_strtod_l+0x32e>
 800e9a0:	e6bf      	b.n	800e722 <_strtod_l+0xae>
 800e9a2:	49a5      	ldr	r1, [pc, #660]	@ (800ec38 <_strtod_l+0x5c4>)
 800e9a4:	a81d      	add	r0, sp, #116	@ 0x74
 800e9a6:	f001 fa2d 	bl	800fe04 <__match>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d100      	bne.n	800e9b0 <_strtod_l+0x33c>
 800e9ae:	e6b8      	b.n	800e722 <_strtod_l+0xae>
 800e9b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	2b28      	cmp	r3, #40	@ 0x28
 800e9b6:	d12c      	bne.n	800ea12 <_strtod_l+0x39e>
 800e9b8:	49a0      	ldr	r1, [pc, #640]	@ (800ec3c <_strtod_l+0x5c8>)
 800e9ba:	aa20      	add	r2, sp, #128	@ 0x80
 800e9bc:	a81d      	add	r0, sp, #116	@ 0x74
 800e9be:	f001 fa35 	bl	800fe2c <__hexnan>
 800e9c2:	2805      	cmp	r0, #5
 800e9c4:	d125      	bne.n	800ea12 <_strtod_l+0x39e>
 800e9c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9c8:	4a9d      	ldr	r2, [pc, #628]	@ (800ec40 <_strtod_l+0x5cc>)
 800e9ca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	0017      	movs	r7, r2
 800e9d0:	e68b      	b.n	800e6ea <_strtod_l+0x76>
 800e9d2:	220a      	movs	r2, #10
 800e9d4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e9d6:	434a      	muls	r2, r1
 800e9d8:	18d2      	adds	r2, r2, r3
 800e9da:	3a30      	subs	r2, #48	@ 0x30
 800e9dc:	9210      	str	r2, [sp, #64]	@ 0x40
 800e9de:	e7b5      	b.n	800e94c <_strtod_l+0x2d8>
 800e9e0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e9e2:	d0de      	beq.n	800e9a2 <_strtod_l+0x32e>
 800e9e4:	e69d      	b.n	800e722 <_strtod_l+0xae>
 800e9e6:	4997      	ldr	r1, [pc, #604]	@ (800ec44 <_strtod_l+0x5d0>)
 800e9e8:	a81d      	add	r0, sp, #116	@ 0x74
 800e9ea:	f001 fa0b 	bl	800fe04 <__match>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d100      	bne.n	800e9f4 <_strtod_l+0x380>
 800e9f2:	e696      	b.n	800e722 <_strtod_l+0xae>
 800e9f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9f6:	4994      	ldr	r1, [pc, #592]	@ (800ec48 <_strtod_l+0x5d4>)
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	a81d      	add	r0, sp, #116	@ 0x74
 800e9fc:	931d      	str	r3, [sp, #116]	@ 0x74
 800e9fe:	f001 fa01 	bl	800fe04 <__match>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d102      	bne.n	800ea0c <_strtod_l+0x398>
 800ea06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea08:	3301      	adds	r3, #1
 800ea0a:	931d      	str	r3, [sp, #116]	@ 0x74
 800ea0c:	2600      	movs	r6, #0
 800ea0e:	4f8c      	ldr	r7, [pc, #560]	@ (800ec40 <_strtod_l+0x5cc>)
 800ea10:	e66b      	b.n	800e6ea <_strtod_l+0x76>
 800ea12:	488e      	ldr	r0, [pc, #568]	@ (800ec4c <_strtod_l+0x5d8>)
 800ea14:	f000 ff06 	bl	800f824 <nan>
 800ea18:	0006      	movs	r6, r0
 800ea1a:	000f      	movs	r7, r1
 800ea1c:	e665      	b.n	800e6ea <_strtod_l+0x76>
 800ea1e:	9b07      	ldr	r3, [sp, #28]
 800ea20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea22:	1a9b      	subs	r3, r3, r2
 800ea24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea26:	9b08      	ldr	r3, [sp, #32]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <_strtod_l+0x3bc>
 800ea2c:	9b06      	ldr	r3, [sp, #24]
 800ea2e:	9308      	str	r3, [sp, #32]
 800ea30:	9c06      	ldr	r4, [sp, #24]
 800ea32:	2c10      	cmp	r4, #16
 800ea34:	dd00      	ble.n	800ea38 <_strtod_l+0x3c4>
 800ea36:	2410      	movs	r4, #16
 800ea38:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ea3a:	f7f4 fba3 	bl	8003184 <__aeabi_ui2d>
 800ea3e:	9b06      	ldr	r3, [sp, #24]
 800ea40:	0006      	movs	r6, r0
 800ea42:	000f      	movs	r7, r1
 800ea44:	2b09      	cmp	r3, #9
 800ea46:	dc13      	bgt.n	800ea70 <_strtod_l+0x3fc>
 800ea48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d100      	bne.n	800ea50 <_strtod_l+0x3dc>
 800ea4e:	e64c      	b.n	800e6ea <_strtod_l+0x76>
 800ea50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	dc00      	bgt.n	800ea58 <_strtod_l+0x3e4>
 800ea56:	e07e      	b.n	800eb56 <_strtod_l+0x4e2>
 800ea58:	2b16      	cmp	r3, #22
 800ea5a:	dc63      	bgt.n	800eb24 <_strtod_l+0x4b0>
 800ea5c:	497c      	ldr	r1, [pc, #496]	@ (800ec50 <_strtod_l+0x5dc>)
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	18c9      	adds	r1, r1, r3
 800ea62:	0032      	movs	r2, r6
 800ea64:	6808      	ldr	r0, [r1, #0]
 800ea66:	6849      	ldr	r1, [r1, #4]
 800ea68:	003b      	movs	r3, r7
 800ea6a:	f7f3 fc9b 	bl	80023a4 <__aeabi_dmul>
 800ea6e:	e7d3      	b.n	800ea18 <_strtod_l+0x3a4>
 800ea70:	0022      	movs	r2, r4
 800ea72:	4b77      	ldr	r3, [pc, #476]	@ (800ec50 <_strtod_l+0x5dc>)
 800ea74:	3a09      	subs	r2, #9
 800ea76:	00d2      	lsls	r2, r2, #3
 800ea78:	189b      	adds	r3, r3, r2
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	f7f3 fc91 	bl	80023a4 <__aeabi_dmul>
 800ea82:	0006      	movs	r6, r0
 800ea84:	0028      	movs	r0, r5
 800ea86:	000f      	movs	r7, r1
 800ea88:	f7f4 fb7c 	bl	8003184 <__aeabi_ui2d>
 800ea8c:	000b      	movs	r3, r1
 800ea8e:	0002      	movs	r2, r0
 800ea90:	0039      	movs	r1, r7
 800ea92:	0030      	movs	r0, r6
 800ea94:	f7f2 fcde 	bl	8001454 <__aeabi_dadd>
 800ea98:	9b06      	ldr	r3, [sp, #24]
 800ea9a:	0006      	movs	r6, r0
 800ea9c:	000f      	movs	r7, r1
 800ea9e:	2b0f      	cmp	r3, #15
 800eaa0:	ddd2      	ble.n	800ea48 <_strtod_l+0x3d4>
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	1b1c      	subs	r4, r3, r4
 800eaa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eaa8:	18e4      	adds	r4, r4, r3
 800eaaa:	2c00      	cmp	r4, #0
 800eaac:	dc00      	bgt.n	800eab0 <_strtod_l+0x43c>
 800eaae:	e09b      	b.n	800ebe8 <_strtod_l+0x574>
 800eab0:	220f      	movs	r2, #15
 800eab2:	0023      	movs	r3, r4
 800eab4:	4013      	ands	r3, r2
 800eab6:	4214      	tst	r4, r2
 800eab8:	d00a      	beq.n	800ead0 <_strtod_l+0x45c>
 800eaba:	4965      	ldr	r1, [pc, #404]	@ (800ec50 <_strtod_l+0x5dc>)
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	18c9      	adds	r1, r1, r3
 800eac0:	0032      	movs	r2, r6
 800eac2:	6808      	ldr	r0, [r1, #0]
 800eac4:	6849      	ldr	r1, [r1, #4]
 800eac6:	003b      	movs	r3, r7
 800eac8:	f7f3 fc6c 	bl	80023a4 <__aeabi_dmul>
 800eacc:	0006      	movs	r6, r0
 800eace:	000f      	movs	r7, r1
 800ead0:	230f      	movs	r3, #15
 800ead2:	439c      	bics	r4, r3
 800ead4:	d073      	beq.n	800ebbe <_strtod_l+0x54a>
 800ead6:	3326      	adds	r3, #38	@ 0x26
 800ead8:	33ff      	adds	r3, #255	@ 0xff
 800eada:	429c      	cmp	r4, r3
 800eadc:	dd4b      	ble.n	800eb76 <_strtod_l+0x502>
 800eade:	2300      	movs	r3, #0
 800eae0:	9306      	str	r3, [sp, #24]
 800eae2:	9307      	str	r3, [sp, #28]
 800eae4:	930d      	str	r3, [sp, #52]	@ 0x34
 800eae6:	9308      	str	r3, [sp, #32]
 800eae8:	2322      	movs	r3, #34	@ 0x22
 800eaea:	2600      	movs	r6, #0
 800eaec:	9a05      	ldr	r2, [sp, #20]
 800eaee:	4f54      	ldr	r7, [pc, #336]	@ (800ec40 <_strtod_l+0x5cc>)
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaf4:	42b3      	cmp	r3, r6
 800eaf6:	d100      	bne.n	800eafa <_strtod_l+0x486>
 800eaf8:	e5f7      	b.n	800e6ea <_strtod_l+0x76>
 800eafa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eafc:	9805      	ldr	r0, [sp, #20]
 800eafe:	f7ff f91b 	bl	800dd38 <_Bfree>
 800eb02:	9908      	ldr	r1, [sp, #32]
 800eb04:	9805      	ldr	r0, [sp, #20]
 800eb06:	f7ff f917 	bl	800dd38 <_Bfree>
 800eb0a:	9907      	ldr	r1, [sp, #28]
 800eb0c:	9805      	ldr	r0, [sp, #20]
 800eb0e:	f7ff f913 	bl	800dd38 <_Bfree>
 800eb12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800eb14:	9805      	ldr	r0, [sp, #20]
 800eb16:	f7ff f90f 	bl	800dd38 <_Bfree>
 800eb1a:	9906      	ldr	r1, [sp, #24]
 800eb1c:	9805      	ldr	r0, [sp, #20]
 800eb1e:	f7ff f90b 	bl	800dd38 <_Bfree>
 800eb22:	e5e2      	b.n	800e6ea <_strtod_l+0x76>
 800eb24:	2325      	movs	r3, #37	@ 0x25
 800eb26:	9a06      	ldr	r2, [sp, #24]
 800eb28:	1a9b      	subs	r3, r3, r2
 800eb2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	dbb8      	blt.n	800eaa2 <_strtod_l+0x42e>
 800eb30:	240f      	movs	r4, #15
 800eb32:	9b06      	ldr	r3, [sp, #24]
 800eb34:	4d46      	ldr	r5, [pc, #280]	@ (800ec50 <_strtod_l+0x5dc>)
 800eb36:	1ae4      	subs	r4, r4, r3
 800eb38:	00e1      	lsls	r1, r4, #3
 800eb3a:	1869      	adds	r1, r5, r1
 800eb3c:	0032      	movs	r2, r6
 800eb3e:	6808      	ldr	r0, [r1, #0]
 800eb40:	6849      	ldr	r1, [r1, #4]
 800eb42:	003b      	movs	r3, r7
 800eb44:	f7f3 fc2e 	bl	80023a4 <__aeabi_dmul>
 800eb48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb4a:	1b1c      	subs	r4, r3, r4
 800eb4c:	00e4      	lsls	r4, r4, #3
 800eb4e:	192d      	adds	r5, r5, r4
 800eb50:	682a      	ldr	r2, [r5, #0]
 800eb52:	686b      	ldr	r3, [r5, #4]
 800eb54:	e789      	b.n	800ea6a <_strtod_l+0x3f6>
 800eb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb58:	3316      	adds	r3, #22
 800eb5a:	dba2      	blt.n	800eaa2 <_strtod_l+0x42e>
 800eb5c:	9907      	ldr	r1, [sp, #28]
 800eb5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb60:	4b3b      	ldr	r3, [pc, #236]	@ (800ec50 <_strtod_l+0x5dc>)
 800eb62:	1a52      	subs	r2, r2, r1
 800eb64:	00d2      	lsls	r2, r2, #3
 800eb66:	189b      	adds	r3, r3, r2
 800eb68:	0030      	movs	r0, r6
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	0039      	movs	r1, r7
 800eb70:	f7f2 ffd4 	bl	8001b1c <__aeabi_ddiv>
 800eb74:	e750      	b.n	800ea18 <_strtod_l+0x3a4>
 800eb76:	2300      	movs	r3, #0
 800eb78:	0030      	movs	r0, r6
 800eb7a:	0039      	movs	r1, r7
 800eb7c:	4d35      	ldr	r5, [pc, #212]	@ (800ec54 <_strtod_l+0x5e0>)
 800eb7e:	1124      	asrs	r4, r4, #4
 800eb80:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb82:	2c01      	cmp	r4, #1
 800eb84:	dc1e      	bgt.n	800ebc4 <_strtod_l+0x550>
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <_strtod_l+0x51a>
 800eb8a:	0006      	movs	r6, r0
 800eb8c:	000f      	movs	r7, r1
 800eb8e:	4b32      	ldr	r3, [pc, #200]	@ (800ec58 <_strtod_l+0x5e4>)
 800eb90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb92:	18ff      	adds	r7, r7, r3
 800eb94:	4b2f      	ldr	r3, [pc, #188]	@ (800ec54 <_strtod_l+0x5e0>)
 800eb96:	00d5      	lsls	r5, r2, #3
 800eb98:	195d      	adds	r5, r3, r5
 800eb9a:	0032      	movs	r2, r6
 800eb9c:	6828      	ldr	r0, [r5, #0]
 800eb9e:	6869      	ldr	r1, [r5, #4]
 800eba0:	003b      	movs	r3, r7
 800eba2:	f7f3 fbff 	bl	80023a4 <__aeabi_dmul>
 800eba6:	4b26      	ldr	r3, [pc, #152]	@ (800ec40 <_strtod_l+0x5cc>)
 800eba8:	4a2c      	ldr	r2, [pc, #176]	@ (800ec5c <_strtod_l+0x5e8>)
 800ebaa:	0006      	movs	r6, r0
 800ebac:	400b      	ands	r3, r1
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d895      	bhi.n	800eade <_strtod_l+0x46a>
 800ebb2:	4a2b      	ldr	r2, [pc, #172]	@ (800ec60 <_strtod_l+0x5ec>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d913      	bls.n	800ebe0 <_strtod_l+0x56c>
 800ebb8:	2601      	movs	r6, #1
 800ebba:	4f2a      	ldr	r7, [pc, #168]	@ (800ec64 <_strtod_l+0x5f0>)
 800ebbc:	4276      	negs	r6, r6
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebc2:	e086      	b.n	800ecd2 <_strtod_l+0x65e>
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	4214      	tst	r4, r2
 800ebc8:	d004      	beq.n	800ebd4 <_strtod_l+0x560>
 800ebca:	682a      	ldr	r2, [r5, #0]
 800ebcc:	686b      	ldr	r3, [r5, #4]
 800ebce:	f7f3 fbe9 	bl	80023a4 <__aeabi_dmul>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebd6:	1064      	asrs	r4, r4, #1
 800ebd8:	3201      	adds	r2, #1
 800ebda:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebdc:	3508      	adds	r5, #8
 800ebde:	e7d0      	b.n	800eb82 <_strtod_l+0x50e>
 800ebe0:	23d4      	movs	r3, #212	@ 0xd4
 800ebe2:	049b      	lsls	r3, r3, #18
 800ebe4:	18cf      	adds	r7, r1, r3
 800ebe6:	e7ea      	b.n	800ebbe <_strtod_l+0x54a>
 800ebe8:	2c00      	cmp	r4, #0
 800ebea:	d0e8      	beq.n	800ebbe <_strtod_l+0x54a>
 800ebec:	4264      	negs	r4, r4
 800ebee:	230f      	movs	r3, #15
 800ebf0:	0022      	movs	r2, r4
 800ebf2:	401a      	ands	r2, r3
 800ebf4:	421c      	tst	r4, r3
 800ebf6:	d00a      	beq.n	800ec0e <_strtod_l+0x59a>
 800ebf8:	4b15      	ldr	r3, [pc, #84]	@ (800ec50 <_strtod_l+0x5dc>)
 800ebfa:	00d2      	lsls	r2, r2, #3
 800ebfc:	189b      	adds	r3, r3, r2
 800ebfe:	0030      	movs	r0, r6
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	0039      	movs	r1, r7
 800ec06:	f7f2 ff89 	bl	8001b1c <__aeabi_ddiv>
 800ec0a:	0006      	movs	r6, r0
 800ec0c:	000f      	movs	r7, r1
 800ec0e:	1124      	asrs	r4, r4, #4
 800ec10:	d0d5      	beq.n	800ebbe <_strtod_l+0x54a>
 800ec12:	2c1f      	cmp	r4, #31
 800ec14:	dd28      	ble.n	800ec68 <_strtod_l+0x5f4>
 800ec16:	2300      	movs	r3, #0
 800ec18:	9306      	str	r3, [sp, #24]
 800ec1a:	9307      	str	r3, [sp, #28]
 800ec1c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ec1e:	9308      	str	r3, [sp, #32]
 800ec20:	2322      	movs	r3, #34	@ 0x22
 800ec22:	9a05      	ldr	r2, [sp, #20]
 800ec24:	2600      	movs	r6, #0
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec2a:	2700      	movs	r7, #0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d000      	beq.n	800ec32 <_strtod_l+0x5be>
 800ec30:	e763      	b.n	800eafa <_strtod_l+0x486>
 800ec32:	e55a      	b.n	800e6ea <_strtod_l+0x76>
 800ec34:	00004e1f 	.word	0x00004e1f
 800ec38:	08010e19 	.word	0x08010e19
 800ec3c:	0801102c 	.word	0x0801102c
 800ec40:	7ff00000 	.word	0x7ff00000
 800ec44:	08010e11 	.word	0x08010e11
 800ec48:	08010e48 	.word	0x08010e48
 800ec4c:	080111d5 	.word	0x080111d5
 800ec50:	08010f60 	.word	0x08010f60
 800ec54:	08010f38 	.word	0x08010f38
 800ec58:	fcb00000 	.word	0xfcb00000
 800ec5c:	7ca00000 	.word	0x7ca00000
 800ec60:	7c900000 	.word	0x7c900000
 800ec64:	7fefffff 	.word	0x7fefffff
 800ec68:	2310      	movs	r3, #16
 800ec6a:	0022      	movs	r2, r4
 800ec6c:	401a      	ands	r2, r3
 800ec6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec70:	421c      	tst	r4, r3
 800ec72:	d001      	beq.n	800ec78 <_strtod_l+0x604>
 800ec74:	335a      	adds	r3, #90	@ 0x5a
 800ec76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec78:	0030      	movs	r0, r6
 800ec7a:	0039      	movs	r1, r7
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4dbf      	ldr	r5, [pc, #764]	@ (800ef7c <_strtod_l+0x908>)
 800ec80:	2201      	movs	r2, #1
 800ec82:	4214      	tst	r4, r2
 800ec84:	d004      	beq.n	800ec90 <_strtod_l+0x61c>
 800ec86:	682a      	ldr	r2, [r5, #0]
 800ec88:	686b      	ldr	r3, [r5, #4]
 800ec8a:	f7f3 fb8b 	bl	80023a4 <__aeabi_dmul>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	1064      	asrs	r4, r4, #1
 800ec92:	3508      	adds	r5, #8
 800ec94:	2c00      	cmp	r4, #0
 800ec96:	d1f3      	bne.n	800ec80 <_strtod_l+0x60c>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d001      	beq.n	800eca0 <_strtod_l+0x62c>
 800ec9c:	0006      	movs	r6, r0
 800ec9e:	000f      	movs	r7, r1
 800eca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00d      	beq.n	800ecc2 <_strtod_l+0x64e>
 800eca6:	236b      	movs	r3, #107	@ 0x6b
 800eca8:	007a      	lsls	r2, r7, #1
 800ecaa:	0d52      	lsrs	r2, r2, #21
 800ecac:	0039      	movs	r1, r7
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	dd06      	ble.n	800ecc2 <_strtod_l+0x64e>
 800ecb4:	2b1f      	cmp	r3, #31
 800ecb6:	dd5a      	ble.n	800ed6e <_strtod_l+0x6fa>
 800ecb8:	2600      	movs	r6, #0
 800ecba:	2b34      	cmp	r3, #52	@ 0x34
 800ecbc:	dd50      	ble.n	800ed60 <_strtod_l+0x6ec>
 800ecbe:	27dc      	movs	r7, #220	@ 0xdc
 800ecc0:	04bf      	lsls	r7, r7, #18
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	0030      	movs	r0, r6
 800ecc8:	0039      	movs	r1, r7
 800ecca:	f7f1 fbbf 	bl	800044c <__aeabi_dcmpeq>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d1a1      	bne.n	800ec16 <_strtod_l+0x5a2>
 800ecd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ecd4:	9a08      	ldr	r2, [sp, #32]
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ecda:	9b06      	ldr	r3, [sp, #24]
 800ecdc:	9805      	ldr	r0, [sp, #20]
 800ecde:	f7ff f893 	bl	800de08 <__s2b>
 800ece2:	900d      	str	r0, [sp, #52]	@ 0x34
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d100      	bne.n	800ecea <_strtod_l+0x676>
 800ece8:	e6f9      	b.n	800eade <_strtod_l+0x46a>
 800ecea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecec:	9907      	ldr	r1, [sp, #28]
 800ecee:	17da      	asrs	r2, r3, #31
 800ecf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecf2:	1a5b      	subs	r3, r3, r1
 800ecf4:	401a      	ands	r2, r3
 800ecf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ecfa:	43db      	mvns	r3, r3
 800ecfc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecfe:	17db      	asrs	r3, r3, #31
 800ed00:	401a      	ands	r2, r3
 800ed02:	2300      	movs	r3, #0
 800ed04:	921a      	str	r2, [sp, #104]	@ 0x68
 800ed06:	9306      	str	r3, [sp, #24]
 800ed08:	9307      	str	r3, [sp, #28]
 800ed0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed0c:	9805      	ldr	r0, [sp, #20]
 800ed0e:	6859      	ldr	r1, [r3, #4]
 800ed10:	f7fe ffce 	bl	800dcb0 <_Balloc>
 800ed14:	9008      	str	r0, [sp, #32]
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d100      	bne.n	800ed1c <_strtod_l+0x6a8>
 800ed1a:	e6e5      	b.n	800eae8 <_strtod_l+0x474>
 800ed1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed1e:	300c      	adds	r0, #12
 800ed20:	0019      	movs	r1, r3
 800ed22:	691a      	ldr	r2, [r3, #16]
 800ed24:	310c      	adds	r1, #12
 800ed26:	3202      	adds	r2, #2
 800ed28:	0092      	lsls	r2, r2, #2
 800ed2a:	f000 fd71 	bl	800f810 <memcpy>
 800ed2e:	ab20      	add	r3, sp, #128	@ 0x80
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	0032      	movs	r2, r6
 800ed38:	003b      	movs	r3, r7
 800ed3a:	9805      	ldr	r0, [sp, #20]
 800ed3c:	9610      	str	r6, [sp, #64]	@ 0x40
 800ed3e:	9711      	str	r7, [sp, #68]	@ 0x44
 800ed40:	f7ff fbb2 	bl	800e4a8 <__d2b>
 800ed44:	901e      	str	r0, [sp, #120]	@ 0x78
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d100      	bne.n	800ed4c <_strtod_l+0x6d8>
 800ed4a:	e6cd      	b.n	800eae8 <_strtod_l+0x474>
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	9805      	ldr	r0, [sp, #20]
 800ed50:	f7ff f8f6 	bl	800df40 <__i2b>
 800ed54:	9007      	str	r0, [sp, #28]
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d10e      	bne.n	800ed78 <_strtod_l+0x704>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	9307      	str	r3, [sp, #28]
 800ed5e:	e6c3      	b.n	800eae8 <_strtod_l+0x474>
 800ed60:	234b      	movs	r3, #75	@ 0x4b
 800ed62:	1a9a      	subs	r2, r3, r2
 800ed64:	3b4c      	subs	r3, #76	@ 0x4c
 800ed66:	4093      	lsls	r3, r2
 800ed68:	4019      	ands	r1, r3
 800ed6a:	000f      	movs	r7, r1
 800ed6c:	e7a9      	b.n	800ecc2 <_strtod_l+0x64e>
 800ed6e:	2201      	movs	r2, #1
 800ed70:	4252      	negs	r2, r2
 800ed72:	409a      	lsls	r2, r3
 800ed74:	4016      	ands	r6, r2
 800ed76:	e7a4      	b.n	800ecc2 <_strtod_l+0x64e>
 800ed78:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ed7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed7c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800ed7e:	1ad4      	subs	r4, r2, r3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	db01      	blt.n	800ed88 <_strtod_l+0x714>
 800ed84:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800ed86:	195d      	adds	r5, r3, r5
 800ed88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ed8c:	1a5b      	subs	r3, r3, r1
 800ed8e:	2136      	movs	r1, #54	@ 0x36
 800ed90:	189b      	adds	r3, r3, r2
 800ed92:	1a8a      	subs	r2, r1, r2
 800ed94:	497a      	ldr	r1, [pc, #488]	@ (800ef80 <_strtod_l+0x90c>)
 800ed96:	2001      	movs	r0, #1
 800ed98:	468c      	mov	ip, r1
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	9116      	str	r1, [sp, #88]	@ 0x58
 800eda0:	9014      	str	r0, [sp, #80]	@ 0x50
 800eda2:	4563      	cmp	r3, ip
 800eda4:	da06      	bge.n	800edb4 <_strtod_l+0x740>
 800eda6:	4661      	mov	r1, ip
 800eda8:	1ac9      	subs	r1, r1, r3
 800edaa:	1a52      	subs	r2, r2, r1
 800edac:	291f      	cmp	r1, #31
 800edae:	dc3f      	bgt.n	800ee30 <_strtod_l+0x7bc>
 800edb0:	4088      	lsls	r0, r1
 800edb2:	9014      	str	r0, [sp, #80]	@ 0x50
 800edb4:	18ab      	adds	r3, r5, r2
 800edb6:	930e      	str	r3, [sp, #56]	@ 0x38
 800edb8:	18a4      	adds	r4, r4, r2
 800edba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edbe:	191c      	adds	r4, r3, r4
 800edc0:	002b      	movs	r3, r5
 800edc2:	4295      	cmp	r5, r2
 800edc4:	dd00      	ble.n	800edc8 <_strtod_l+0x754>
 800edc6:	0013      	movs	r3, r2
 800edc8:	42a3      	cmp	r3, r4
 800edca:	dd00      	ble.n	800edce <_strtod_l+0x75a>
 800edcc:	0023      	movs	r3, r4
 800edce:	2b00      	cmp	r3, #0
 800edd0:	dd04      	ble.n	800eddc <_strtod_l+0x768>
 800edd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edd4:	1ae4      	subs	r4, r4, r3
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800edda:	1aed      	subs	r5, r5, r3
 800eddc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	dd16      	ble.n	800ee10 <_strtod_l+0x79c>
 800ede2:	001a      	movs	r2, r3
 800ede4:	9907      	ldr	r1, [sp, #28]
 800ede6:	9805      	ldr	r0, [sp, #20]
 800ede8:	f7ff f974 	bl	800e0d4 <__pow5mult>
 800edec:	9007      	str	r0, [sp, #28]
 800edee:	2800      	cmp	r0, #0
 800edf0:	d0b3      	beq.n	800ed5a <_strtod_l+0x6e6>
 800edf2:	0001      	movs	r1, r0
 800edf4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800edf6:	9805      	ldr	r0, [sp, #20]
 800edf8:	f7ff f8ba 	bl	800df70 <__multiply>
 800edfc:	9013      	str	r0, [sp, #76]	@ 0x4c
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d100      	bne.n	800ee04 <_strtod_l+0x790>
 800ee02:	e671      	b.n	800eae8 <_strtod_l+0x474>
 800ee04:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ee06:	9805      	ldr	r0, [sp, #20]
 800ee08:	f7fe ff96 	bl	800dd38 <_Bfree>
 800ee0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee0e:	931e      	str	r3, [sp, #120]	@ 0x78
 800ee10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	dc12      	bgt.n	800ee3c <_strtod_l+0x7c8>
 800ee16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dd18      	ble.n	800ee4e <_strtod_l+0x7da>
 800ee1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ee1e:	9908      	ldr	r1, [sp, #32]
 800ee20:	9805      	ldr	r0, [sp, #20]
 800ee22:	f7ff f957 	bl	800e0d4 <__pow5mult>
 800ee26:	9008      	str	r0, [sp, #32]
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d110      	bne.n	800ee4e <_strtod_l+0x7da>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e65a      	b.n	800eae6 <_strtod_l+0x472>
 800ee30:	4954      	ldr	r1, [pc, #336]	@ (800ef84 <_strtod_l+0x910>)
 800ee32:	1acb      	subs	r3, r1, r3
 800ee34:	0001      	movs	r1, r0
 800ee36:	4099      	lsls	r1, r3
 800ee38:	9116      	str	r1, [sp, #88]	@ 0x58
 800ee3a:	e7ba      	b.n	800edb2 <_strtod_l+0x73e>
 800ee3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee3e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ee40:	9805      	ldr	r0, [sp, #20]
 800ee42:	f7ff f9a3 	bl	800e18c <__lshift>
 800ee46:	901e      	str	r0, [sp, #120]	@ 0x78
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d1e4      	bne.n	800ee16 <_strtod_l+0x7a2>
 800ee4c:	e64c      	b.n	800eae8 <_strtod_l+0x474>
 800ee4e:	2c00      	cmp	r4, #0
 800ee50:	dd07      	ble.n	800ee62 <_strtod_l+0x7ee>
 800ee52:	0022      	movs	r2, r4
 800ee54:	9908      	ldr	r1, [sp, #32]
 800ee56:	9805      	ldr	r0, [sp, #20]
 800ee58:	f7ff f998 	bl	800e18c <__lshift>
 800ee5c:	9008      	str	r0, [sp, #32]
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d0e4      	beq.n	800ee2c <_strtod_l+0x7b8>
 800ee62:	2d00      	cmp	r5, #0
 800ee64:	dd08      	ble.n	800ee78 <_strtod_l+0x804>
 800ee66:	002a      	movs	r2, r5
 800ee68:	9907      	ldr	r1, [sp, #28]
 800ee6a:	9805      	ldr	r0, [sp, #20]
 800ee6c:	f7ff f98e 	bl	800e18c <__lshift>
 800ee70:	9007      	str	r0, [sp, #28]
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d100      	bne.n	800ee78 <_strtod_l+0x804>
 800ee76:	e637      	b.n	800eae8 <_strtod_l+0x474>
 800ee78:	9a08      	ldr	r2, [sp, #32]
 800ee7a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ee7c:	9805      	ldr	r0, [sp, #20]
 800ee7e:	f7ff fa0d 	bl	800e29c <__mdiff>
 800ee82:	9006      	str	r0, [sp, #24]
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d100      	bne.n	800ee8a <_strtod_l+0x816>
 800ee88:	e62e      	b.n	800eae8 <_strtod_l+0x474>
 800ee8a:	68c3      	ldr	r3, [r0, #12]
 800ee8c:	9907      	ldr	r1, [sp, #28]
 800ee8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee90:	2300      	movs	r3, #0
 800ee92:	60c3      	str	r3, [r0, #12]
 800ee94:	f7ff f9e6 	bl	800e264 <__mcmp>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	da3b      	bge.n	800ef14 <_strtod_l+0x8a0>
 800ee9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee9e:	4333      	orrs	r3, r6
 800eea0:	d167      	bne.n	800ef72 <_strtod_l+0x8fe>
 800eea2:	033b      	lsls	r3, r7, #12
 800eea4:	d165      	bne.n	800ef72 <_strtod_l+0x8fe>
 800eea6:	22d6      	movs	r2, #214	@ 0xd6
 800eea8:	4b37      	ldr	r3, [pc, #220]	@ (800ef88 <_strtod_l+0x914>)
 800eeaa:	04d2      	lsls	r2, r2, #19
 800eeac:	403b      	ands	r3, r7
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d95f      	bls.n	800ef72 <_strtod_l+0x8fe>
 800eeb2:	9b06      	ldr	r3, [sp, #24]
 800eeb4:	695b      	ldr	r3, [r3, #20]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d103      	bne.n	800eec2 <_strtod_l+0x84e>
 800eeba:	9b06      	ldr	r3, [sp, #24]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	dd57      	ble.n	800ef72 <_strtod_l+0x8fe>
 800eec2:	9906      	ldr	r1, [sp, #24]
 800eec4:	2201      	movs	r2, #1
 800eec6:	9805      	ldr	r0, [sp, #20]
 800eec8:	f7ff f960 	bl	800e18c <__lshift>
 800eecc:	9907      	ldr	r1, [sp, #28]
 800eece:	9006      	str	r0, [sp, #24]
 800eed0:	f7ff f9c8 	bl	800e264 <__mcmp>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	dd4c      	ble.n	800ef72 <_strtod_l+0x8fe>
 800eed8:	4b2b      	ldr	r3, [pc, #172]	@ (800ef88 <_strtod_l+0x914>)
 800eeda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eedc:	403b      	ands	r3, r7
 800eede:	2a00      	cmp	r2, #0
 800eee0:	d074      	beq.n	800efcc <_strtod_l+0x958>
 800eee2:	22d6      	movs	r2, #214	@ 0xd6
 800eee4:	04d2      	lsls	r2, r2, #19
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d870      	bhi.n	800efcc <_strtod_l+0x958>
 800eeea:	22dc      	movs	r2, #220	@ 0xdc
 800eeec:	0492      	lsls	r2, r2, #18
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d800      	bhi.n	800eef4 <_strtod_l+0x880>
 800eef2:	e695      	b.n	800ec20 <_strtod_l+0x5ac>
 800eef4:	0030      	movs	r0, r6
 800eef6:	0039      	movs	r1, r7
 800eef8:	4b24      	ldr	r3, [pc, #144]	@ (800ef8c <_strtod_l+0x918>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	f7f3 fa52 	bl	80023a4 <__aeabi_dmul>
 800ef00:	4b21      	ldr	r3, [pc, #132]	@ (800ef88 <_strtod_l+0x914>)
 800ef02:	0006      	movs	r6, r0
 800ef04:	000f      	movs	r7, r1
 800ef06:	420b      	tst	r3, r1
 800ef08:	d000      	beq.n	800ef0c <_strtod_l+0x898>
 800ef0a:	e5f6      	b.n	800eafa <_strtod_l+0x486>
 800ef0c:	2322      	movs	r3, #34	@ 0x22
 800ef0e:	9a05      	ldr	r2, [sp, #20]
 800ef10:	6013      	str	r3, [r2, #0]
 800ef12:	e5f2      	b.n	800eafa <_strtod_l+0x486>
 800ef14:	970e      	str	r7, [sp, #56]	@ 0x38
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d175      	bne.n	800f006 <_strtod_l+0x992>
 800ef1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ef1c:	033b      	lsls	r3, r7, #12
 800ef1e:	0b1b      	lsrs	r3, r3, #12
 800ef20:	2a00      	cmp	r2, #0
 800ef22:	d039      	beq.n	800ef98 <_strtod_l+0x924>
 800ef24:	4a1a      	ldr	r2, [pc, #104]	@ (800ef90 <_strtod_l+0x91c>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d138      	bne.n	800ef9c <_strtod_l+0x928>
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef2e:	4249      	negs	r1, r1
 800ef30:	0032      	movs	r2, r6
 800ef32:	0008      	movs	r0, r1
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d00b      	beq.n	800ef50 <_strtod_l+0x8dc>
 800ef38:	24d4      	movs	r4, #212	@ 0xd4
 800ef3a:	4b13      	ldr	r3, [pc, #76]	@ (800ef88 <_strtod_l+0x914>)
 800ef3c:	0008      	movs	r0, r1
 800ef3e:	403b      	ands	r3, r7
 800ef40:	04e4      	lsls	r4, r4, #19
 800ef42:	42a3      	cmp	r3, r4
 800ef44:	d804      	bhi.n	800ef50 <_strtod_l+0x8dc>
 800ef46:	306c      	adds	r0, #108	@ 0x6c
 800ef48:	0d1b      	lsrs	r3, r3, #20
 800ef4a:	1ac3      	subs	r3, r0, r3
 800ef4c:	4099      	lsls	r1, r3
 800ef4e:	0008      	movs	r0, r1
 800ef50:	4282      	cmp	r2, r0
 800ef52:	d123      	bne.n	800ef9c <_strtod_l+0x928>
 800ef54:	4b0f      	ldr	r3, [pc, #60]	@ (800ef94 <_strtod_l+0x920>)
 800ef56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef58:	4299      	cmp	r1, r3
 800ef5a:	d102      	bne.n	800ef62 <_strtod_l+0x8ee>
 800ef5c:	3201      	adds	r2, #1
 800ef5e:	d100      	bne.n	800ef62 <_strtod_l+0x8ee>
 800ef60:	e5c2      	b.n	800eae8 <_strtod_l+0x474>
 800ef62:	4b09      	ldr	r3, [pc, #36]	@ (800ef88 <_strtod_l+0x914>)
 800ef64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef66:	2600      	movs	r6, #0
 800ef68:	401a      	ands	r2, r3
 800ef6a:	0013      	movs	r3, r2
 800ef6c:	2280      	movs	r2, #128	@ 0x80
 800ef6e:	0352      	lsls	r2, r2, #13
 800ef70:	189f      	adds	r7, r3, r2
 800ef72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1bd      	bne.n	800eef4 <_strtod_l+0x880>
 800ef78:	e5bf      	b.n	800eafa <_strtod_l+0x486>
 800ef7a:	46c0      	nop			@ (mov r8, r8)
 800ef7c:	08011058 	.word	0x08011058
 800ef80:	fffffc02 	.word	0xfffffc02
 800ef84:	fffffbe2 	.word	0xfffffbe2
 800ef88:	7ff00000 	.word	0x7ff00000
 800ef8c:	39500000 	.word	0x39500000
 800ef90:	000fffff 	.word	0x000fffff
 800ef94:	7fefffff 	.word	0x7fefffff
 800ef98:	4333      	orrs	r3, r6
 800ef9a:	d09d      	beq.n	800eed8 <_strtod_l+0x864>
 800ef9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d01c      	beq.n	800efdc <_strtod_l+0x968>
 800efa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efa4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800efa6:	4213      	tst	r3, r2
 800efa8:	d0e3      	beq.n	800ef72 <_strtod_l+0x8fe>
 800efaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800efac:	0030      	movs	r0, r6
 800efae:	0039      	movs	r1, r7
 800efb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d016      	beq.n	800efe4 <_strtod_l+0x970>
 800efb6:	f7ff fb45 	bl	800e644 <sulp>
 800efba:	0002      	movs	r2, r0
 800efbc:	000b      	movs	r3, r1
 800efbe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800efc0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800efc2:	f7f2 fa47 	bl	8001454 <__aeabi_dadd>
 800efc6:	0006      	movs	r6, r0
 800efc8:	000f      	movs	r7, r1
 800efca:	e7d2      	b.n	800ef72 <_strtod_l+0x8fe>
 800efcc:	2601      	movs	r6, #1
 800efce:	4a92      	ldr	r2, [pc, #584]	@ (800f218 <_strtod_l+0xba4>)
 800efd0:	4276      	negs	r6, r6
 800efd2:	189b      	adds	r3, r3, r2
 800efd4:	4a91      	ldr	r2, [pc, #580]	@ (800f21c <_strtod_l+0xba8>)
 800efd6:	431a      	orrs	r2, r3
 800efd8:	0017      	movs	r7, r2
 800efda:	e7ca      	b.n	800ef72 <_strtod_l+0x8fe>
 800efdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800efde:	4233      	tst	r3, r6
 800efe0:	d0c7      	beq.n	800ef72 <_strtod_l+0x8fe>
 800efe2:	e7e2      	b.n	800efaa <_strtod_l+0x936>
 800efe4:	f7ff fb2e 	bl	800e644 <sulp>
 800efe8:	0002      	movs	r2, r0
 800efea:	000b      	movs	r3, r1
 800efec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800efee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eff0:	f7f3 fca0 	bl	8002934 <__aeabi_dsub>
 800eff4:	2200      	movs	r2, #0
 800eff6:	2300      	movs	r3, #0
 800eff8:	0006      	movs	r6, r0
 800effa:	000f      	movs	r7, r1
 800effc:	f7f1 fa26 	bl	800044c <__aeabi_dcmpeq>
 800f000:	2800      	cmp	r0, #0
 800f002:	d0b6      	beq.n	800ef72 <_strtod_l+0x8fe>
 800f004:	e60c      	b.n	800ec20 <_strtod_l+0x5ac>
 800f006:	9907      	ldr	r1, [sp, #28]
 800f008:	9806      	ldr	r0, [sp, #24]
 800f00a:	f7ff faad 	bl	800e568 <__ratio>
 800f00e:	2380      	movs	r3, #128	@ 0x80
 800f010:	2200      	movs	r2, #0
 800f012:	05db      	lsls	r3, r3, #23
 800f014:	0004      	movs	r4, r0
 800f016:	000d      	movs	r5, r1
 800f018:	f7f1 fa28 	bl	800046c <__aeabi_dcmple>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d06c      	beq.n	800f0fa <_strtod_l+0xa86>
 800f020:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f022:	2b00      	cmp	r3, #0
 800f024:	d177      	bne.n	800f116 <_strtod_l+0xaa2>
 800f026:	2e00      	cmp	r6, #0
 800f028:	d157      	bne.n	800f0da <_strtod_l+0xa66>
 800f02a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f02c:	031b      	lsls	r3, r3, #12
 800f02e:	d15a      	bne.n	800f0e6 <_strtod_l+0xa72>
 800f030:	2200      	movs	r2, #0
 800f032:	0020      	movs	r0, r4
 800f034:	0029      	movs	r1, r5
 800f036:	4b7a      	ldr	r3, [pc, #488]	@ (800f220 <_strtod_l+0xbac>)
 800f038:	f7f1 fa0e 	bl	8000458 <__aeabi_dcmplt>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d159      	bne.n	800f0f4 <_strtod_l+0xa80>
 800f040:	0020      	movs	r0, r4
 800f042:	0029      	movs	r1, r5
 800f044:	2200      	movs	r2, #0
 800f046:	4b77      	ldr	r3, [pc, #476]	@ (800f224 <_strtod_l+0xbb0>)
 800f048:	f7f3 f9ac 	bl	80023a4 <__aeabi_dmul>
 800f04c:	0004      	movs	r4, r0
 800f04e:	000d      	movs	r5, r1
 800f050:	2380      	movs	r3, #128	@ 0x80
 800f052:	061b      	lsls	r3, r3, #24
 800f054:	18eb      	adds	r3, r5, r3
 800f056:	940a      	str	r4, [sp, #40]	@ 0x28
 800f058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f05a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f05e:	9214      	str	r2, [sp, #80]	@ 0x50
 800f060:	9315      	str	r3, [sp, #84]	@ 0x54
 800f062:	4a71      	ldr	r2, [pc, #452]	@ (800f228 <_strtod_l+0xbb4>)
 800f064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f066:	4013      	ands	r3, r2
 800f068:	9316      	str	r3, [sp, #88]	@ 0x58
 800f06a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f06c:	4b6f      	ldr	r3, [pc, #444]	@ (800f22c <_strtod_l+0xbb8>)
 800f06e:	429a      	cmp	r2, r3
 800f070:	d000      	beq.n	800f074 <_strtod_l+0xa00>
 800f072:	e087      	b.n	800f184 <_strtod_l+0xb10>
 800f074:	4a6e      	ldr	r2, [pc, #440]	@ (800f230 <_strtod_l+0xbbc>)
 800f076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f078:	4694      	mov	ip, r2
 800f07a:	4463      	add	r3, ip
 800f07c:	001f      	movs	r7, r3
 800f07e:	0030      	movs	r0, r6
 800f080:	0019      	movs	r1, r3
 800f082:	f7ff f9a5 	bl	800e3d0 <__ulp>
 800f086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f08a:	f7f3 f98b 	bl	80023a4 <__aeabi_dmul>
 800f08e:	0032      	movs	r2, r6
 800f090:	003b      	movs	r3, r7
 800f092:	f7f2 f9df 	bl	8001454 <__aeabi_dadd>
 800f096:	4a64      	ldr	r2, [pc, #400]	@ (800f228 <_strtod_l+0xbb4>)
 800f098:	4b66      	ldr	r3, [pc, #408]	@ (800f234 <_strtod_l+0xbc0>)
 800f09a:	0006      	movs	r6, r0
 800f09c:	400a      	ands	r2, r1
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d940      	bls.n	800f124 <_strtod_l+0xab0>
 800f0a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0a4:	4a64      	ldr	r2, [pc, #400]	@ (800f238 <_strtod_l+0xbc4>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d103      	bne.n	800f0b2 <_strtod_l+0xa3e>
 800f0aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	d100      	bne.n	800f0b2 <_strtod_l+0xa3e>
 800f0b0:	e51a      	b.n	800eae8 <_strtod_l+0x474>
 800f0b2:	2601      	movs	r6, #1
 800f0b4:	4f60      	ldr	r7, [pc, #384]	@ (800f238 <_strtod_l+0xbc4>)
 800f0b6:	4276      	negs	r6, r6
 800f0b8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f0ba:	9805      	ldr	r0, [sp, #20]
 800f0bc:	f7fe fe3c 	bl	800dd38 <_Bfree>
 800f0c0:	9908      	ldr	r1, [sp, #32]
 800f0c2:	9805      	ldr	r0, [sp, #20]
 800f0c4:	f7fe fe38 	bl	800dd38 <_Bfree>
 800f0c8:	9907      	ldr	r1, [sp, #28]
 800f0ca:	9805      	ldr	r0, [sp, #20]
 800f0cc:	f7fe fe34 	bl	800dd38 <_Bfree>
 800f0d0:	9906      	ldr	r1, [sp, #24]
 800f0d2:	9805      	ldr	r0, [sp, #20]
 800f0d4:	f7fe fe30 	bl	800dd38 <_Bfree>
 800f0d8:	e617      	b.n	800ed0a <_strtod_l+0x696>
 800f0da:	2e01      	cmp	r6, #1
 800f0dc:	d103      	bne.n	800f0e6 <_strtod_l+0xa72>
 800f0de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d100      	bne.n	800f0e6 <_strtod_l+0xa72>
 800f0e4:	e59c      	b.n	800ec20 <_strtod_l+0x5ac>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	4c54      	ldr	r4, [pc, #336]	@ (800f23c <_strtod_l+0xbc8>)
 800f0ea:	4d4d      	ldr	r5, [pc, #308]	@ (800f220 <_strtod_l+0xbac>)
 800f0ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f0f0:	2400      	movs	r4, #0
 800f0f2:	e7b2      	b.n	800f05a <_strtod_l+0x9e6>
 800f0f4:	2400      	movs	r4, #0
 800f0f6:	4d4b      	ldr	r5, [pc, #300]	@ (800f224 <_strtod_l+0xbb0>)
 800f0f8:	e7aa      	b.n	800f050 <_strtod_l+0x9dc>
 800f0fa:	0020      	movs	r0, r4
 800f0fc:	0029      	movs	r1, r5
 800f0fe:	4b49      	ldr	r3, [pc, #292]	@ (800f224 <_strtod_l+0xbb0>)
 800f100:	2200      	movs	r2, #0
 800f102:	f7f3 f94f 	bl	80023a4 <__aeabi_dmul>
 800f106:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f108:	0004      	movs	r4, r0
 800f10a:	000d      	movs	r5, r1
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d09f      	beq.n	800f050 <_strtod_l+0x9dc>
 800f110:	940a      	str	r4, [sp, #40]	@ 0x28
 800f112:	950b      	str	r5, [sp, #44]	@ 0x2c
 800f114:	e7a1      	b.n	800f05a <_strtod_l+0x9e6>
 800f116:	2300      	movs	r3, #0
 800f118:	4c41      	ldr	r4, [pc, #260]	@ (800f220 <_strtod_l+0xbac>)
 800f11a:	0025      	movs	r5, r4
 800f11c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f11e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f120:	001c      	movs	r4, r3
 800f122:	e79a      	b.n	800f05a <_strtod_l+0x9e6>
 800f124:	23d4      	movs	r3, #212	@ 0xd4
 800f126:	049b      	lsls	r3, r3, #18
 800f128:	18cf      	adds	r7, r1, r3
 800f12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f12c:	9710      	str	r7, [sp, #64]	@ 0x40
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1c2      	bne.n	800f0b8 <_strtod_l+0xa44>
 800f132:	4b3d      	ldr	r3, [pc, #244]	@ (800f228 <_strtod_l+0xbb4>)
 800f134:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f136:	403b      	ands	r3, r7
 800f138:	429a      	cmp	r2, r3
 800f13a:	d1bd      	bne.n	800f0b8 <_strtod_l+0xa44>
 800f13c:	0020      	movs	r0, r4
 800f13e:	0029      	movs	r1, r5
 800f140:	f7f1 fa22 	bl	8000588 <__aeabi_d2lz>
 800f144:	f7f1 fa5a 	bl	80005fc <__aeabi_l2d>
 800f148:	0002      	movs	r2, r0
 800f14a:	000b      	movs	r3, r1
 800f14c:	0020      	movs	r0, r4
 800f14e:	0029      	movs	r1, r5
 800f150:	f7f3 fbf0 	bl	8002934 <__aeabi_dsub>
 800f154:	033c      	lsls	r4, r7, #12
 800f156:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f158:	0b24      	lsrs	r4, r4, #12
 800f15a:	4334      	orrs	r4, r6
 800f15c:	900e      	str	r0, [sp, #56]	@ 0x38
 800f15e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f160:	4a37      	ldr	r2, [pc, #220]	@ (800f240 <_strtod_l+0xbcc>)
 800f162:	431c      	orrs	r4, r3
 800f164:	d052      	beq.n	800f20c <_strtod_l+0xb98>
 800f166:	4b37      	ldr	r3, [pc, #220]	@ (800f244 <_strtod_l+0xbd0>)
 800f168:	f7f1 f976 	bl	8000458 <__aeabi_dcmplt>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d000      	beq.n	800f172 <_strtod_l+0xafe>
 800f170:	e4c3      	b.n	800eafa <_strtod_l+0x486>
 800f172:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f174:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f176:	4a34      	ldr	r2, [pc, #208]	@ (800f248 <_strtod_l+0xbd4>)
 800f178:	4b2a      	ldr	r3, [pc, #168]	@ (800f224 <_strtod_l+0xbb0>)
 800f17a:	f7f1 f981 	bl	8000480 <__aeabi_dcmpgt>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d09a      	beq.n	800f0b8 <_strtod_l+0xa44>
 800f182:	e4ba      	b.n	800eafa <_strtod_l+0x486>
 800f184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f186:	2b00      	cmp	r3, #0
 800f188:	d02a      	beq.n	800f1e0 <_strtod_l+0xb6c>
 800f18a:	23d4      	movs	r3, #212	@ 0xd4
 800f18c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f18e:	04db      	lsls	r3, r3, #19
 800f190:	429a      	cmp	r2, r3
 800f192:	d825      	bhi.n	800f1e0 <_strtod_l+0xb6c>
 800f194:	0020      	movs	r0, r4
 800f196:	0029      	movs	r1, r5
 800f198:	4a2c      	ldr	r2, [pc, #176]	@ (800f24c <_strtod_l+0xbd8>)
 800f19a:	4b2d      	ldr	r3, [pc, #180]	@ (800f250 <_strtod_l+0xbdc>)
 800f19c:	f7f1 f966 	bl	800046c <__aeabi_dcmple>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d016      	beq.n	800f1d2 <_strtod_l+0xb5e>
 800f1a4:	0020      	movs	r0, r4
 800f1a6:	0029      	movs	r1, r5
 800f1a8:	f7f1 f9d0 	bl	800054c <__aeabi_d2uiz>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d100      	bne.n	800f1b2 <_strtod_l+0xb3e>
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	f7f3 ffe7 	bl	8003184 <__aeabi_ui2d>
 800f1b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1b8:	0004      	movs	r4, r0
 800f1ba:	000d      	movs	r5, r1
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d122      	bne.n	800f206 <_strtod_l+0xb92>
 800f1c0:	2380      	movs	r3, #128	@ 0x80
 800f1c2:	061b      	lsls	r3, r3, #24
 800f1c4:	18cb      	adds	r3, r1, r3
 800f1c6:	9018      	str	r0, [sp, #96]	@ 0x60
 800f1c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1ce:	9214      	str	r2, [sp, #80]	@ 0x50
 800f1d0:	9315      	str	r3, [sp, #84]	@ 0x54
 800f1d2:	22d6      	movs	r2, #214	@ 0xd6
 800f1d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f1d6:	04d2      	lsls	r2, r2, #19
 800f1d8:	189b      	adds	r3, r3, r2
 800f1da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f1dc:	1a9b      	subs	r3, r3, r2
 800f1de:	9315      	str	r3, [sp, #84]	@ 0x54
 800f1e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f1e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f1e4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f1e6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f1e8:	f7ff f8f2 	bl	800e3d0 <__ulp>
 800f1ec:	0002      	movs	r2, r0
 800f1ee:	000b      	movs	r3, r1
 800f1f0:	0030      	movs	r0, r6
 800f1f2:	0039      	movs	r1, r7
 800f1f4:	f7f3 f8d6 	bl	80023a4 <__aeabi_dmul>
 800f1f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f1fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f1fc:	f7f2 f92a 	bl	8001454 <__aeabi_dadd>
 800f200:	0006      	movs	r6, r0
 800f202:	000f      	movs	r7, r1
 800f204:	e791      	b.n	800f12a <_strtod_l+0xab6>
 800f206:	9418      	str	r4, [sp, #96]	@ 0x60
 800f208:	9519      	str	r5, [sp, #100]	@ 0x64
 800f20a:	e7de      	b.n	800f1ca <_strtod_l+0xb56>
 800f20c:	4b11      	ldr	r3, [pc, #68]	@ (800f254 <_strtod_l+0xbe0>)
 800f20e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f210:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f212:	f7f1 f921 	bl	8000458 <__aeabi_dcmplt>
 800f216:	e7b2      	b.n	800f17e <_strtod_l+0xb0a>
 800f218:	fff00000 	.word	0xfff00000
 800f21c:	000fffff 	.word	0x000fffff
 800f220:	3ff00000 	.word	0x3ff00000
 800f224:	3fe00000 	.word	0x3fe00000
 800f228:	7ff00000 	.word	0x7ff00000
 800f22c:	7fe00000 	.word	0x7fe00000
 800f230:	fcb00000 	.word	0xfcb00000
 800f234:	7c9fffff 	.word	0x7c9fffff
 800f238:	7fefffff 	.word	0x7fefffff
 800f23c:	bff00000 	.word	0xbff00000
 800f240:	94a03595 	.word	0x94a03595
 800f244:	3fdfffff 	.word	0x3fdfffff
 800f248:	35afe535 	.word	0x35afe535
 800f24c:	ffc00000 	.word	0xffc00000
 800f250:	41dfffff 	.word	0x41dfffff
 800f254:	3fcfffff 	.word	0x3fcfffff

0800f258 <_strtod_r>:
 800f258:	b510      	push	{r4, lr}
 800f25a:	4b02      	ldr	r3, [pc, #8]	@ (800f264 <_strtod_r+0xc>)
 800f25c:	f7ff fa0a 	bl	800e674 <_strtod_l>
 800f260:	bd10      	pop	{r4, pc}
 800f262:	46c0      	nop			@ (mov r8, r8)
 800f264:	2000008c 	.word	0x2000008c

0800f268 <_strtol_l.constprop.0>:
 800f268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f26a:	b085      	sub	sp, #20
 800f26c:	0017      	movs	r7, r2
 800f26e:	001e      	movs	r6, r3
 800f270:	9003      	str	r0, [sp, #12]
 800f272:	9101      	str	r1, [sp, #4]
 800f274:	2b24      	cmp	r3, #36	@ 0x24
 800f276:	d844      	bhi.n	800f302 <_strtol_l.constprop.0+0x9a>
 800f278:	000c      	movs	r4, r1
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d041      	beq.n	800f302 <_strtol_l.constprop.0+0x9a>
 800f27e:	4b3d      	ldr	r3, [pc, #244]	@ (800f374 <_strtol_l.constprop.0+0x10c>)
 800f280:	2208      	movs	r2, #8
 800f282:	469c      	mov	ip, r3
 800f284:	0023      	movs	r3, r4
 800f286:	4661      	mov	r1, ip
 800f288:	781d      	ldrb	r5, [r3, #0]
 800f28a:	3401      	adds	r4, #1
 800f28c:	5d48      	ldrb	r0, [r1, r5]
 800f28e:	0001      	movs	r1, r0
 800f290:	4011      	ands	r1, r2
 800f292:	4210      	tst	r0, r2
 800f294:	d1f6      	bne.n	800f284 <_strtol_l.constprop.0+0x1c>
 800f296:	2d2d      	cmp	r5, #45	@ 0x2d
 800f298:	d13a      	bne.n	800f310 <_strtol_l.constprop.0+0xa8>
 800f29a:	7825      	ldrb	r5, [r4, #0]
 800f29c:	1c9c      	adds	r4, r3, #2
 800f29e:	2301      	movs	r3, #1
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	2210      	movs	r2, #16
 800f2a4:	0033      	movs	r3, r6
 800f2a6:	4393      	bics	r3, r2
 800f2a8:	d109      	bne.n	800f2be <_strtol_l.constprop.0+0x56>
 800f2aa:	2d30      	cmp	r5, #48	@ 0x30
 800f2ac:	d136      	bne.n	800f31c <_strtol_l.constprop.0+0xb4>
 800f2ae:	2120      	movs	r1, #32
 800f2b0:	7823      	ldrb	r3, [r4, #0]
 800f2b2:	438b      	bics	r3, r1
 800f2b4:	2b58      	cmp	r3, #88	@ 0x58
 800f2b6:	d131      	bne.n	800f31c <_strtol_l.constprop.0+0xb4>
 800f2b8:	0016      	movs	r6, r2
 800f2ba:	7865      	ldrb	r5, [r4, #1]
 800f2bc:	3402      	adds	r4, #2
 800f2be:	4a2e      	ldr	r2, [pc, #184]	@ (800f378 <_strtol_l.constprop.0+0x110>)
 800f2c0:	9b00      	ldr	r3, [sp, #0]
 800f2c2:	4694      	mov	ip, r2
 800f2c4:	4463      	add	r3, ip
 800f2c6:	0031      	movs	r1, r6
 800f2c8:	0018      	movs	r0, r3
 800f2ca:	9302      	str	r3, [sp, #8]
 800f2cc:	f7f0 ffbe 	bl	800024c <__aeabi_uidivmod>
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4684      	mov	ip, r0
 800f2d4:	0010      	movs	r0, r2
 800f2d6:	002b      	movs	r3, r5
 800f2d8:	3b30      	subs	r3, #48	@ 0x30
 800f2da:	2b09      	cmp	r3, #9
 800f2dc:	d825      	bhi.n	800f32a <_strtol_l.constprop.0+0xc2>
 800f2de:	001d      	movs	r5, r3
 800f2e0:	42ae      	cmp	r6, r5
 800f2e2:	dd31      	ble.n	800f348 <_strtol_l.constprop.0+0xe0>
 800f2e4:	1c53      	adds	r3, r2, #1
 800f2e6:	d009      	beq.n	800f2fc <_strtol_l.constprop.0+0x94>
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	4252      	negs	r2, r2
 800f2ec:	4584      	cmp	ip, r0
 800f2ee:	d305      	bcc.n	800f2fc <_strtol_l.constprop.0+0x94>
 800f2f0:	d101      	bne.n	800f2f6 <_strtol_l.constprop.0+0x8e>
 800f2f2:	42a9      	cmp	r1, r5
 800f2f4:	db25      	blt.n	800f342 <_strtol_l.constprop.0+0xda>
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	4370      	muls	r0, r6
 800f2fa:	1828      	adds	r0, r5, r0
 800f2fc:	7825      	ldrb	r5, [r4, #0]
 800f2fe:	3401      	adds	r4, #1
 800f300:	e7e9      	b.n	800f2d6 <_strtol_l.constprop.0+0x6e>
 800f302:	f7fd fd11 	bl	800cd28 <__errno>
 800f306:	2316      	movs	r3, #22
 800f308:	6003      	str	r3, [r0, #0]
 800f30a:	2000      	movs	r0, #0
 800f30c:	b005      	add	sp, #20
 800f30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f310:	9100      	str	r1, [sp, #0]
 800f312:	2d2b      	cmp	r5, #43	@ 0x2b
 800f314:	d1c5      	bne.n	800f2a2 <_strtol_l.constprop.0+0x3a>
 800f316:	7825      	ldrb	r5, [r4, #0]
 800f318:	1c9c      	adds	r4, r3, #2
 800f31a:	e7c2      	b.n	800f2a2 <_strtol_l.constprop.0+0x3a>
 800f31c:	2e00      	cmp	r6, #0
 800f31e:	d1ce      	bne.n	800f2be <_strtol_l.constprop.0+0x56>
 800f320:	3608      	adds	r6, #8
 800f322:	2d30      	cmp	r5, #48	@ 0x30
 800f324:	d0cb      	beq.n	800f2be <_strtol_l.constprop.0+0x56>
 800f326:	3602      	adds	r6, #2
 800f328:	e7c9      	b.n	800f2be <_strtol_l.constprop.0+0x56>
 800f32a:	002b      	movs	r3, r5
 800f32c:	3b41      	subs	r3, #65	@ 0x41
 800f32e:	2b19      	cmp	r3, #25
 800f330:	d801      	bhi.n	800f336 <_strtol_l.constprop.0+0xce>
 800f332:	3d37      	subs	r5, #55	@ 0x37
 800f334:	e7d4      	b.n	800f2e0 <_strtol_l.constprop.0+0x78>
 800f336:	002b      	movs	r3, r5
 800f338:	3b61      	subs	r3, #97	@ 0x61
 800f33a:	2b19      	cmp	r3, #25
 800f33c:	d804      	bhi.n	800f348 <_strtol_l.constprop.0+0xe0>
 800f33e:	3d57      	subs	r5, #87	@ 0x57
 800f340:	e7ce      	b.n	800f2e0 <_strtol_l.constprop.0+0x78>
 800f342:	2201      	movs	r2, #1
 800f344:	4252      	negs	r2, r2
 800f346:	e7d9      	b.n	800f2fc <_strtol_l.constprop.0+0x94>
 800f348:	1c53      	adds	r3, r2, #1
 800f34a:	d108      	bne.n	800f35e <_strtol_l.constprop.0+0xf6>
 800f34c:	2322      	movs	r3, #34	@ 0x22
 800f34e:	9a03      	ldr	r2, [sp, #12]
 800f350:	9802      	ldr	r0, [sp, #8]
 800f352:	6013      	str	r3, [r2, #0]
 800f354:	2f00      	cmp	r7, #0
 800f356:	d0d9      	beq.n	800f30c <_strtol_l.constprop.0+0xa4>
 800f358:	1e63      	subs	r3, r4, #1
 800f35a:	9301      	str	r3, [sp, #4]
 800f35c:	e007      	b.n	800f36e <_strtol_l.constprop.0+0x106>
 800f35e:	9b00      	ldr	r3, [sp, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d000      	beq.n	800f366 <_strtol_l.constprop.0+0xfe>
 800f364:	4240      	negs	r0, r0
 800f366:	2f00      	cmp	r7, #0
 800f368:	d0d0      	beq.n	800f30c <_strtol_l.constprop.0+0xa4>
 800f36a:	2a00      	cmp	r2, #0
 800f36c:	d1f4      	bne.n	800f358 <_strtol_l.constprop.0+0xf0>
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	603b      	str	r3, [r7, #0]
 800f372:	e7cb      	b.n	800f30c <_strtol_l.constprop.0+0xa4>
 800f374:	08011081 	.word	0x08011081
 800f378:	7fffffff 	.word	0x7fffffff

0800f37c <_strtol_r>:
 800f37c:	b510      	push	{r4, lr}
 800f37e:	f7ff ff73 	bl	800f268 <_strtol_l.constprop.0>
 800f382:	bd10      	pop	{r4, pc}

0800f384 <__ssputs_r>:
 800f384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f386:	688e      	ldr	r6, [r1, #8]
 800f388:	b085      	sub	sp, #20
 800f38a:	001f      	movs	r7, r3
 800f38c:	000c      	movs	r4, r1
 800f38e:	680b      	ldr	r3, [r1, #0]
 800f390:	9002      	str	r0, [sp, #8]
 800f392:	9203      	str	r2, [sp, #12]
 800f394:	42be      	cmp	r6, r7
 800f396:	d830      	bhi.n	800f3fa <__ssputs_r+0x76>
 800f398:	210c      	movs	r1, #12
 800f39a:	5e62      	ldrsh	r2, [r4, r1]
 800f39c:	2190      	movs	r1, #144	@ 0x90
 800f39e:	00c9      	lsls	r1, r1, #3
 800f3a0:	420a      	tst	r2, r1
 800f3a2:	d028      	beq.n	800f3f6 <__ssputs_r+0x72>
 800f3a4:	2003      	movs	r0, #3
 800f3a6:	6921      	ldr	r1, [r4, #16]
 800f3a8:	1a5b      	subs	r3, r3, r1
 800f3aa:	9301      	str	r3, [sp, #4]
 800f3ac:	6963      	ldr	r3, [r4, #20]
 800f3ae:	4343      	muls	r3, r0
 800f3b0:	9801      	ldr	r0, [sp, #4]
 800f3b2:	0fdd      	lsrs	r5, r3, #31
 800f3b4:	18ed      	adds	r5, r5, r3
 800f3b6:	1c7b      	adds	r3, r7, #1
 800f3b8:	181b      	adds	r3, r3, r0
 800f3ba:	106d      	asrs	r5, r5, #1
 800f3bc:	42ab      	cmp	r3, r5
 800f3be:	d900      	bls.n	800f3c2 <__ssputs_r+0x3e>
 800f3c0:	001d      	movs	r5, r3
 800f3c2:	0552      	lsls	r2, r2, #21
 800f3c4:	d528      	bpl.n	800f418 <__ssputs_r+0x94>
 800f3c6:	0029      	movs	r1, r5
 800f3c8:	9802      	ldr	r0, [sp, #8]
 800f3ca:	f7fe fbe1 	bl	800db90 <_malloc_r>
 800f3ce:	1e06      	subs	r6, r0, #0
 800f3d0:	d02c      	beq.n	800f42c <__ssputs_r+0xa8>
 800f3d2:	9a01      	ldr	r2, [sp, #4]
 800f3d4:	6921      	ldr	r1, [r4, #16]
 800f3d6:	f000 fa1b 	bl	800f810 <memcpy>
 800f3da:	89a2      	ldrh	r2, [r4, #12]
 800f3dc:	4b18      	ldr	r3, [pc, #96]	@ (800f440 <__ssputs_r+0xbc>)
 800f3de:	401a      	ands	r2, r3
 800f3e0:	2380      	movs	r3, #128	@ 0x80
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	81a3      	strh	r3, [r4, #12]
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	6126      	str	r6, [r4, #16]
 800f3ea:	18f6      	adds	r6, r6, r3
 800f3ec:	6026      	str	r6, [r4, #0]
 800f3ee:	003e      	movs	r6, r7
 800f3f0:	6165      	str	r5, [r4, #20]
 800f3f2:	1aed      	subs	r5, r5, r3
 800f3f4:	60a5      	str	r5, [r4, #8]
 800f3f6:	42be      	cmp	r6, r7
 800f3f8:	d900      	bls.n	800f3fc <__ssputs_r+0x78>
 800f3fa:	003e      	movs	r6, r7
 800f3fc:	0032      	movs	r2, r6
 800f3fe:	9903      	ldr	r1, [sp, #12]
 800f400:	6820      	ldr	r0, [r4, #0]
 800f402:	f000 f9ce 	bl	800f7a2 <memmove>
 800f406:	2000      	movs	r0, #0
 800f408:	68a3      	ldr	r3, [r4, #8]
 800f40a:	1b9b      	subs	r3, r3, r6
 800f40c:	60a3      	str	r3, [r4, #8]
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	199b      	adds	r3, r3, r6
 800f412:	6023      	str	r3, [r4, #0]
 800f414:	b005      	add	sp, #20
 800f416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f418:	002a      	movs	r2, r5
 800f41a:	9802      	ldr	r0, [sp, #8]
 800f41c:	f000 fdc0 	bl	800ffa0 <_realloc_r>
 800f420:	1e06      	subs	r6, r0, #0
 800f422:	d1e0      	bne.n	800f3e6 <__ssputs_r+0x62>
 800f424:	6921      	ldr	r1, [r4, #16]
 800f426:	9802      	ldr	r0, [sp, #8]
 800f428:	f7fe fb3c 	bl	800daa4 <_free_r>
 800f42c:	230c      	movs	r3, #12
 800f42e:	2001      	movs	r0, #1
 800f430:	9a02      	ldr	r2, [sp, #8]
 800f432:	4240      	negs	r0, r0
 800f434:	6013      	str	r3, [r2, #0]
 800f436:	89a2      	ldrh	r2, [r4, #12]
 800f438:	3334      	adds	r3, #52	@ 0x34
 800f43a:	4313      	orrs	r3, r2
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	e7e9      	b.n	800f414 <__ssputs_r+0x90>
 800f440:	fffffb7f 	.word	0xfffffb7f

0800f444 <_svfiprintf_r>:
 800f444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f446:	b0a1      	sub	sp, #132	@ 0x84
 800f448:	9003      	str	r0, [sp, #12]
 800f44a:	001d      	movs	r5, r3
 800f44c:	898b      	ldrh	r3, [r1, #12]
 800f44e:	000f      	movs	r7, r1
 800f450:	0016      	movs	r6, r2
 800f452:	061b      	lsls	r3, r3, #24
 800f454:	d511      	bpl.n	800f47a <_svfiprintf_r+0x36>
 800f456:	690b      	ldr	r3, [r1, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10e      	bne.n	800f47a <_svfiprintf_r+0x36>
 800f45c:	2140      	movs	r1, #64	@ 0x40
 800f45e:	f7fe fb97 	bl	800db90 <_malloc_r>
 800f462:	6038      	str	r0, [r7, #0]
 800f464:	6138      	str	r0, [r7, #16]
 800f466:	2800      	cmp	r0, #0
 800f468:	d105      	bne.n	800f476 <_svfiprintf_r+0x32>
 800f46a:	230c      	movs	r3, #12
 800f46c:	9a03      	ldr	r2, [sp, #12]
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	2001      	movs	r0, #1
 800f472:	4240      	negs	r0, r0
 800f474:	e0cf      	b.n	800f616 <_svfiprintf_r+0x1d2>
 800f476:	2340      	movs	r3, #64	@ 0x40
 800f478:	617b      	str	r3, [r7, #20]
 800f47a:	2300      	movs	r3, #0
 800f47c:	ac08      	add	r4, sp, #32
 800f47e:	6163      	str	r3, [r4, #20]
 800f480:	3320      	adds	r3, #32
 800f482:	7663      	strb	r3, [r4, #25]
 800f484:	3310      	adds	r3, #16
 800f486:	76a3      	strb	r3, [r4, #26]
 800f488:	9507      	str	r5, [sp, #28]
 800f48a:	0035      	movs	r5, r6
 800f48c:	782b      	ldrb	r3, [r5, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <_svfiprintf_r+0x52>
 800f492:	2b25      	cmp	r3, #37	@ 0x25
 800f494:	d148      	bne.n	800f528 <_svfiprintf_r+0xe4>
 800f496:	1bab      	subs	r3, r5, r6
 800f498:	9305      	str	r3, [sp, #20]
 800f49a:	42b5      	cmp	r5, r6
 800f49c:	d00b      	beq.n	800f4b6 <_svfiprintf_r+0x72>
 800f49e:	0032      	movs	r2, r6
 800f4a0:	0039      	movs	r1, r7
 800f4a2:	9803      	ldr	r0, [sp, #12]
 800f4a4:	f7ff ff6e 	bl	800f384 <__ssputs_r>
 800f4a8:	3001      	adds	r0, #1
 800f4aa:	d100      	bne.n	800f4ae <_svfiprintf_r+0x6a>
 800f4ac:	e0ae      	b.n	800f60c <_svfiprintf_r+0x1c8>
 800f4ae:	6963      	ldr	r3, [r4, #20]
 800f4b0:	9a05      	ldr	r2, [sp, #20]
 800f4b2:	189b      	adds	r3, r3, r2
 800f4b4:	6163      	str	r3, [r4, #20]
 800f4b6:	782b      	ldrb	r3, [r5, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d100      	bne.n	800f4be <_svfiprintf_r+0x7a>
 800f4bc:	e0a6      	b.n	800f60c <_svfiprintf_r+0x1c8>
 800f4be:	2201      	movs	r2, #1
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4252      	negs	r2, r2
 800f4c4:	6062      	str	r2, [r4, #4]
 800f4c6:	a904      	add	r1, sp, #16
 800f4c8:	3254      	adds	r2, #84	@ 0x54
 800f4ca:	1852      	adds	r2, r2, r1
 800f4cc:	1c6e      	adds	r6, r5, #1
 800f4ce:	6023      	str	r3, [r4, #0]
 800f4d0:	60e3      	str	r3, [r4, #12]
 800f4d2:	60a3      	str	r3, [r4, #8]
 800f4d4:	7013      	strb	r3, [r2, #0]
 800f4d6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f4d8:	4b54      	ldr	r3, [pc, #336]	@ (800f62c <_svfiprintf_r+0x1e8>)
 800f4da:	2205      	movs	r2, #5
 800f4dc:	0018      	movs	r0, r3
 800f4de:	7831      	ldrb	r1, [r6, #0]
 800f4e0:	9305      	str	r3, [sp, #20]
 800f4e2:	f7fd fc4e 	bl	800cd82 <memchr>
 800f4e6:	1c75      	adds	r5, r6, #1
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d11f      	bne.n	800f52c <_svfiprintf_r+0xe8>
 800f4ec:	6822      	ldr	r2, [r4, #0]
 800f4ee:	06d3      	lsls	r3, r2, #27
 800f4f0:	d504      	bpl.n	800f4fc <_svfiprintf_r+0xb8>
 800f4f2:	2353      	movs	r3, #83	@ 0x53
 800f4f4:	a904      	add	r1, sp, #16
 800f4f6:	185b      	adds	r3, r3, r1
 800f4f8:	2120      	movs	r1, #32
 800f4fa:	7019      	strb	r1, [r3, #0]
 800f4fc:	0713      	lsls	r3, r2, #28
 800f4fe:	d504      	bpl.n	800f50a <_svfiprintf_r+0xc6>
 800f500:	2353      	movs	r3, #83	@ 0x53
 800f502:	a904      	add	r1, sp, #16
 800f504:	185b      	adds	r3, r3, r1
 800f506:	212b      	movs	r1, #43	@ 0x2b
 800f508:	7019      	strb	r1, [r3, #0]
 800f50a:	7833      	ldrb	r3, [r6, #0]
 800f50c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f50e:	d016      	beq.n	800f53e <_svfiprintf_r+0xfa>
 800f510:	0035      	movs	r5, r6
 800f512:	2100      	movs	r1, #0
 800f514:	200a      	movs	r0, #10
 800f516:	68e3      	ldr	r3, [r4, #12]
 800f518:	782a      	ldrb	r2, [r5, #0]
 800f51a:	1c6e      	adds	r6, r5, #1
 800f51c:	3a30      	subs	r2, #48	@ 0x30
 800f51e:	2a09      	cmp	r2, #9
 800f520:	d950      	bls.n	800f5c4 <_svfiprintf_r+0x180>
 800f522:	2900      	cmp	r1, #0
 800f524:	d111      	bne.n	800f54a <_svfiprintf_r+0x106>
 800f526:	e017      	b.n	800f558 <_svfiprintf_r+0x114>
 800f528:	3501      	adds	r5, #1
 800f52a:	e7af      	b.n	800f48c <_svfiprintf_r+0x48>
 800f52c:	9b05      	ldr	r3, [sp, #20]
 800f52e:	6822      	ldr	r2, [r4, #0]
 800f530:	1ac0      	subs	r0, r0, r3
 800f532:	2301      	movs	r3, #1
 800f534:	4083      	lsls	r3, r0
 800f536:	4313      	orrs	r3, r2
 800f538:	002e      	movs	r6, r5
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	e7cc      	b.n	800f4d8 <_svfiprintf_r+0x94>
 800f53e:	9b07      	ldr	r3, [sp, #28]
 800f540:	1d19      	adds	r1, r3, #4
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	9107      	str	r1, [sp, #28]
 800f546:	2b00      	cmp	r3, #0
 800f548:	db01      	blt.n	800f54e <_svfiprintf_r+0x10a>
 800f54a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f54c:	e004      	b.n	800f558 <_svfiprintf_r+0x114>
 800f54e:	425b      	negs	r3, r3
 800f550:	60e3      	str	r3, [r4, #12]
 800f552:	2302      	movs	r3, #2
 800f554:	4313      	orrs	r3, r2
 800f556:	6023      	str	r3, [r4, #0]
 800f558:	782b      	ldrb	r3, [r5, #0]
 800f55a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f55c:	d10c      	bne.n	800f578 <_svfiprintf_r+0x134>
 800f55e:	786b      	ldrb	r3, [r5, #1]
 800f560:	2b2a      	cmp	r3, #42	@ 0x2a
 800f562:	d134      	bne.n	800f5ce <_svfiprintf_r+0x18a>
 800f564:	9b07      	ldr	r3, [sp, #28]
 800f566:	3502      	adds	r5, #2
 800f568:	1d1a      	adds	r2, r3, #4
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	9207      	str	r2, [sp, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	da01      	bge.n	800f576 <_svfiprintf_r+0x132>
 800f572:	2301      	movs	r3, #1
 800f574:	425b      	negs	r3, r3
 800f576:	9309      	str	r3, [sp, #36]	@ 0x24
 800f578:	4e2d      	ldr	r6, [pc, #180]	@ (800f630 <_svfiprintf_r+0x1ec>)
 800f57a:	2203      	movs	r2, #3
 800f57c:	0030      	movs	r0, r6
 800f57e:	7829      	ldrb	r1, [r5, #0]
 800f580:	f7fd fbff 	bl	800cd82 <memchr>
 800f584:	2800      	cmp	r0, #0
 800f586:	d006      	beq.n	800f596 <_svfiprintf_r+0x152>
 800f588:	2340      	movs	r3, #64	@ 0x40
 800f58a:	1b80      	subs	r0, r0, r6
 800f58c:	4083      	lsls	r3, r0
 800f58e:	6822      	ldr	r2, [r4, #0]
 800f590:	3501      	adds	r5, #1
 800f592:	4313      	orrs	r3, r2
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	7829      	ldrb	r1, [r5, #0]
 800f598:	2206      	movs	r2, #6
 800f59a:	4826      	ldr	r0, [pc, #152]	@ (800f634 <_svfiprintf_r+0x1f0>)
 800f59c:	1c6e      	adds	r6, r5, #1
 800f59e:	7621      	strb	r1, [r4, #24]
 800f5a0:	f7fd fbef 	bl	800cd82 <memchr>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d038      	beq.n	800f61a <_svfiprintf_r+0x1d6>
 800f5a8:	4b23      	ldr	r3, [pc, #140]	@ (800f638 <_svfiprintf_r+0x1f4>)
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d122      	bne.n	800f5f4 <_svfiprintf_r+0x1b0>
 800f5ae:	2207      	movs	r2, #7
 800f5b0:	9b07      	ldr	r3, [sp, #28]
 800f5b2:	3307      	adds	r3, #7
 800f5b4:	4393      	bics	r3, r2
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	9307      	str	r3, [sp, #28]
 800f5ba:	6963      	ldr	r3, [r4, #20]
 800f5bc:	9a04      	ldr	r2, [sp, #16]
 800f5be:	189b      	adds	r3, r3, r2
 800f5c0:	6163      	str	r3, [r4, #20]
 800f5c2:	e762      	b.n	800f48a <_svfiprintf_r+0x46>
 800f5c4:	4343      	muls	r3, r0
 800f5c6:	0035      	movs	r5, r6
 800f5c8:	2101      	movs	r1, #1
 800f5ca:	189b      	adds	r3, r3, r2
 800f5cc:	e7a4      	b.n	800f518 <_svfiprintf_r+0xd4>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	200a      	movs	r0, #10
 800f5d2:	0019      	movs	r1, r3
 800f5d4:	3501      	adds	r5, #1
 800f5d6:	6063      	str	r3, [r4, #4]
 800f5d8:	782a      	ldrb	r2, [r5, #0]
 800f5da:	1c6e      	adds	r6, r5, #1
 800f5dc:	3a30      	subs	r2, #48	@ 0x30
 800f5de:	2a09      	cmp	r2, #9
 800f5e0:	d903      	bls.n	800f5ea <_svfiprintf_r+0x1a6>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0c8      	beq.n	800f578 <_svfiprintf_r+0x134>
 800f5e6:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5e8:	e7c6      	b.n	800f578 <_svfiprintf_r+0x134>
 800f5ea:	4341      	muls	r1, r0
 800f5ec:	0035      	movs	r5, r6
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	1889      	adds	r1, r1, r2
 800f5f2:	e7f1      	b.n	800f5d8 <_svfiprintf_r+0x194>
 800f5f4:	aa07      	add	r2, sp, #28
 800f5f6:	9200      	str	r2, [sp, #0]
 800f5f8:	0021      	movs	r1, r4
 800f5fa:	003a      	movs	r2, r7
 800f5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f63c <_svfiprintf_r+0x1f8>)
 800f5fe:	9803      	ldr	r0, [sp, #12]
 800f600:	f7fc fc3e 	bl	800be80 <_printf_float>
 800f604:	9004      	str	r0, [sp, #16]
 800f606:	9b04      	ldr	r3, [sp, #16]
 800f608:	3301      	adds	r3, #1
 800f60a:	d1d6      	bne.n	800f5ba <_svfiprintf_r+0x176>
 800f60c:	89bb      	ldrh	r3, [r7, #12]
 800f60e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f610:	065b      	lsls	r3, r3, #25
 800f612:	d500      	bpl.n	800f616 <_svfiprintf_r+0x1d2>
 800f614:	e72c      	b.n	800f470 <_svfiprintf_r+0x2c>
 800f616:	b021      	add	sp, #132	@ 0x84
 800f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61a:	aa07      	add	r2, sp, #28
 800f61c:	9200      	str	r2, [sp, #0]
 800f61e:	0021      	movs	r1, r4
 800f620:	003a      	movs	r2, r7
 800f622:	4b06      	ldr	r3, [pc, #24]	@ (800f63c <_svfiprintf_r+0x1f8>)
 800f624:	9803      	ldr	r0, [sp, #12]
 800f626:	f7fc fed9 	bl	800c3dc <_printf_i>
 800f62a:	e7eb      	b.n	800f604 <_svfiprintf_r+0x1c0>
 800f62c:	08011181 	.word	0x08011181
 800f630:	08011187 	.word	0x08011187
 800f634:	0801118b 	.word	0x0801118b
 800f638:	0800be81 	.word	0x0800be81
 800f63c:	0800f385 	.word	0x0800f385

0800f640 <__sflush_r>:
 800f640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f642:	220c      	movs	r2, #12
 800f644:	5e8b      	ldrsh	r3, [r1, r2]
 800f646:	0005      	movs	r5, r0
 800f648:	000c      	movs	r4, r1
 800f64a:	071a      	lsls	r2, r3, #28
 800f64c:	d456      	bmi.n	800f6fc <__sflush_r+0xbc>
 800f64e:	684a      	ldr	r2, [r1, #4]
 800f650:	2a00      	cmp	r2, #0
 800f652:	dc02      	bgt.n	800f65a <__sflush_r+0x1a>
 800f654:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f656:	2a00      	cmp	r2, #0
 800f658:	dd4e      	ble.n	800f6f8 <__sflush_r+0xb8>
 800f65a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f65c:	2f00      	cmp	r7, #0
 800f65e:	d04b      	beq.n	800f6f8 <__sflush_r+0xb8>
 800f660:	2200      	movs	r2, #0
 800f662:	2080      	movs	r0, #128	@ 0x80
 800f664:	682e      	ldr	r6, [r5, #0]
 800f666:	602a      	str	r2, [r5, #0]
 800f668:	001a      	movs	r2, r3
 800f66a:	0140      	lsls	r0, r0, #5
 800f66c:	6a21      	ldr	r1, [r4, #32]
 800f66e:	4002      	ands	r2, r0
 800f670:	4203      	tst	r3, r0
 800f672:	d033      	beq.n	800f6dc <__sflush_r+0x9c>
 800f674:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f676:	89a3      	ldrh	r3, [r4, #12]
 800f678:	075b      	lsls	r3, r3, #29
 800f67a:	d506      	bpl.n	800f68a <__sflush_r+0x4a>
 800f67c:	6863      	ldr	r3, [r4, #4]
 800f67e:	1ad2      	subs	r2, r2, r3
 800f680:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <__sflush_r+0x4a>
 800f686:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f688:	1ad2      	subs	r2, r2, r3
 800f68a:	2300      	movs	r3, #0
 800f68c:	0028      	movs	r0, r5
 800f68e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f690:	6a21      	ldr	r1, [r4, #32]
 800f692:	47b8      	blx	r7
 800f694:	89a2      	ldrh	r2, [r4, #12]
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d106      	bne.n	800f6a8 <__sflush_r+0x68>
 800f69a:	6829      	ldr	r1, [r5, #0]
 800f69c:	291d      	cmp	r1, #29
 800f69e:	d846      	bhi.n	800f72e <__sflush_r+0xee>
 800f6a0:	4b29      	ldr	r3, [pc, #164]	@ (800f748 <__sflush_r+0x108>)
 800f6a2:	410b      	asrs	r3, r1
 800f6a4:	07db      	lsls	r3, r3, #31
 800f6a6:	d442      	bmi.n	800f72e <__sflush_r+0xee>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	6063      	str	r3, [r4, #4]
 800f6ac:	6923      	ldr	r3, [r4, #16]
 800f6ae:	6023      	str	r3, [r4, #0]
 800f6b0:	04d2      	lsls	r2, r2, #19
 800f6b2:	d505      	bpl.n	800f6c0 <__sflush_r+0x80>
 800f6b4:	1c43      	adds	r3, r0, #1
 800f6b6:	d102      	bne.n	800f6be <__sflush_r+0x7e>
 800f6b8:	682b      	ldr	r3, [r5, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d100      	bne.n	800f6c0 <__sflush_r+0x80>
 800f6be:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6c2:	602e      	str	r6, [r5, #0]
 800f6c4:	2900      	cmp	r1, #0
 800f6c6:	d017      	beq.n	800f6f8 <__sflush_r+0xb8>
 800f6c8:	0023      	movs	r3, r4
 800f6ca:	3344      	adds	r3, #68	@ 0x44
 800f6cc:	4299      	cmp	r1, r3
 800f6ce:	d002      	beq.n	800f6d6 <__sflush_r+0x96>
 800f6d0:	0028      	movs	r0, r5
 800f6d2:	f7fe f9e7 	bl	800daa4 <_free_r>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6da:	e00d      	b.n	800f6f8 <__sflush_r+0xb8>
 800f6dc:	2301      	movs	r3, #1
 800f6de:	0028      	movs	r0, r5
 800f6e0:	47b8      	blx	r7
 800f6e2:	0002      	movs	r2, r0
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d1c6      	bne.n	800f676 <__sflush_r+0x36>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d0c3      	beq.n	800f676 <__sflush_r+0x36>
 800f6ee:	2b1d      	cmp	r3, #29
 800f6f0:	d001      	beq.n	800f6f6 <__sflush_r+0xb6>
 800f6f2:	2b16      	cmp	r3, #22
 800f6f4:	d11a      	bne.n	800f72c <__sflush_r+0xec>
 800f6f6:	602e      	str	r6, [r5, #0]
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	e01e      	b.n	800f73a <__sflush_r+0xfa>
 800f6fc:	690e      	ldr	r6, [r1, #16]
 800f6fe:	2e00      	cmp	r6, #0
 800f700:	d0fa      	beq.n	800f6f8 <__sflush_r+0xb8>
 800f702:	680f      	ldr	r7, [r1, #0]
 800f704:	600e      	str	r6, [r1, #0]
 800f706:	1bba      	subs	r2, r7, r6
 800f708:	9201      	str	r2, [sp, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	079b      	lsls	r3, r3, #30
 800f70e:	d100      	bne.n	800f712 <__sflush_r+0xd2>
 800f710:	694a      	ldr	r2, [r1, #20]
 800f712:	60a2      	str	r2, [r4, #8]
 800f714:	9b01      	ldr	r3, [sp, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	ddee      	ble.n	800f6f8 <__sflush_r+0xb8>
 800f71a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f71c:	0032      	movs	r2, r6
 800f71e:	001f      	movs	r7, r3
 800f720:	0028      	movs	r0, r5
 800f722:	9b01      	ldr	r3, [sp, #4]
 800f724:	6a21      	ldr	r1, [r4, #32]
 800f726:	47b8      	blx	r7
 800f728:	2800      	cmp	r0, #0
 800f72a:	dc07      	bgt.n	800f73c <__sflush_r+0xfc>
 800f72c:	89a2      	ldrh	r2, [r4, #12]
 800f72e:	2340      	movs	r3, #64	@ 0x40
 800f730:	2001      	movs	r0, #1
 800f732:	4313      	orrs	r3, r2
 800f734:	b21b      	sxth	r3, r3
 800f736:	81a3      	strh	r3, [r4, #12]
 800f738:	4240      	negs	r0, r0
 800f73a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f73c:	9b01      	ldr	r3, [sp, #4]
 800f73e:	1836      	adds	r6, r6, r0
 800f740:	1a1b      	subs	r3, r3, r0
 800f742:	9301      	str	r3, [sp, #4]
 800f744:	e7e6      	b.n	800f714 <__sflush_r+0xd4>
 800f746:	46c0      	nop			@ (mov r8, r8)
 800f748:	dfbffffe 	.word	0xdfbffffe

0800f74c <_fflush_r>:
 800f74c:	690b      	ldr	r3, [r1, #16]
 800f74e:	b570      	push	{r4, r5, r6, lr}
 800f750:	0005      	movs	r5, r0
 800f752:	000c      	movs	r4, r1
 800f754:	2b00      	cmp	r3, #0
 800f756:	d102      	bne.n	800f75e <_fflush_r+0x12>
 800f758:	2500      	movs	r5, #0
 800f75a:	0028      	movs	r0, r5
 800f75c:	bd70      	pop	{r4, r5, r6, pc}
 800f75e:	2800      	cmp	r0, #0
 800f760:	d004      	beq.n	800f76c <_fflush_r+0x20>
 800f762:	6a03      	ldr	r3, [r0, #32]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d101      	bne.n	800f76c <_fflush_r+0x20>
 800f768:	f7fd f9e4 	bl	800cb34 <__sinit>
 800f76c:	220c      	movs	r2, #12
 800f76e:	5ea3      	ldrsh	r3, [r4, r2]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d0f1      	beq.n	800f758 <_fflush_r+0xc>
 800f774:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f776:	07d2      	lsls	r2, r2, #31
 800f778:	d404      	bmi.n	800f784 <_fflush_r+0x38>
 800f77a:	059b      	lsls	r3, r3, #22
 800f77c:	d402      	bmi.n	800f784 <_fflush_r+0x38>
 800f77e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f780:	f7fd fafd 	bl	800cd7e <__retarget_lock_acquire_recursive>
 800f784:	0028      	movs	r0, r5
 800f786:	0021      	movs	r1, r4
 800f788:	f7ff ff5a 	bl	800f640 <__sflush_r>
 800f78c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f78e:	0005      	movs	r5, r0
 800f790:	07db      	lsls	r3, r3, #31
 800f792:	d4e2      	bmi.n	800f75a <_fflush_r+0xe>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	059b      	lsls	r3, r3, #22
 800f798:	d4df      	bmi.n	800f75a <_fflush_r+0xe>
 800f79a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f79c:	f7fd faf0 	bl	800cd80 <__retarget_lock_release_recursive>
 800f7a0:	e7db      	b.n	800f75a <_fflush_r+0xe>

0800f7a2 <memmove>:
 800f7a2:	b510      	push	{r4, lr}
 800f7a4:	4288      	cmp	r0, r1
 800f7a6:	d806      	bhi.n	800f7b6 <memmove+0x14>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d008      	beq.n	800f7c0 <memmove+0x1e>
 800f7ae:	5ccc      	ldrb	r4, [r1, r3]
 800f7b0:	54c4      	strb	r4, [r0, r3]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	e7f9      	b.n	800f7aa <memmove+0x8>
 800f7b6:	188b      	adds	r3, r1, r2
 800f7b8:	4298      	cmp	r0, r3
 800f7ba:	d2f5      	bcs.n	800f7a8 <memmove+0x6>
 800f7bc:	3a01      	subs	r2, #1
 800f7be:	d200      	bcs.n	800f7c2 <memmove+0x20>
 800f7c0:	bd10      	pop	{r4, pc}
 800f7c2:	5c8b      	ldrb	r3, [r1, r2]
 800f7c4:	5483      	strb	r3, [r0, r2]
 800f7c6:	e7f9      	b.n	800f7bc <memmove+0x1a>

0800f7c8 <strncmp>:
 800f7c8:	b530      	push	{r4, r5, lr}
 800f7ca:	0005      	movs	r5, r0
 800f7cc:	1e10      	subs	r0, r2, #0
 800f7ce:	d00b      	beq.n	800f7e8 <strncmp+0x20>
 800f7d0:	2400      	movs	r4, #0
 800f7d2:	3a01      	subs	r2, #1
 800f7d4:	5d2b      	ldrb	r3, [r5, r4]
 800f7d6:	5d08      	ldrb	r0, [r1, r4]
 800f7d8:	4283      	cmp	r3, r0
 800f7da:	d104      	bne.n	800f7e6 <strncmp+0x1e>
 800f7dc:	42a2      	cmp	r2, r4
 800f7de:	d002      	beq.n	800f7e6 <strncmp+0x1e>
 800f7e0:	3401      	adds	r4, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1f6      	bne.n	800f7d4 <strncmp+0xc>
 800f7e6:	1a18      	subs	r0, r3, r0
 800f7e8:	bd30      	pop	{r4, r5, pc}
	...

0800f7ec <_sbrk_r>:
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	b570      	push	{r4, r5, r6, lr}
 800f7f0:	4d06      	ldr	r5, [pc, #24]	@ (800f80c <_sbrk_r+0x20>)
 800f7f2:	0004      	movs	r4, r0
 800f7f4:	0008      	movs	r0, r1
 800f7f6:	602b      	str	r3, [r5, #0]
 800f7f8:	f7f6 ffe6 	bl	80067c8 <_sbrk>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d103      	bne.n	800f808 <_sbrk_r+0x1c>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d000      	beq.n	800f808 <_sbrk_r+0x1c>
 800f806:	6023      	str	r3, [r4, #0]
 800f808:	bd70      	pop	{r4, r5, r6, pc}
 800f80a:	46c0      	nop			@ (mov r8, r8)
 800f80c:	200007dc 	.word	0x200007dc

0800f810 <memcpy>:
 800f810:	2300      	movs	r3, #0
 800f812:	b510      	push	{r4, lr}
 800f814:	429a      	cmp	r2, r3
 800f816:	d100      	bne.n	800f81a <memcpy+0xa>
 800f818:	bd10      	pop	{r4, pc}
 800f81a:	5ccc      	ldrb	r4, [r1, r3]
 800f81c:	54c4      	strb	r4, [r0, r3]
 800f81e:	3301      	adds	r3, #1
 800f820:	e7f8      	b.n	800f814 <memcpy+0x4>
	...

0800f824 <nan>:
 800f824:	2000      	movs	r0, #0
 800f826:	4901      	ldr	r1, [pc, #4]	@ (800f82c <nan+0x8>)
 800f828:	4770      	bx	lr
 800f82a:	46c0      	nop			@ (mov r8, r8)
 800f82c:	7ff80000 	.word	0x7ff80000

0800f830 <__assert_func>:
 800f830:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f832:	0014      	movs	r4, r2
 800f834:	001a      	movs	r2, r3
 800f836:	4b09      	ldr	r3, [pc, #36]	@ (800f85c <__assert_func+0x2c>)
 800f838:	0005      	movs	r5, r0
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	000e      	movs	r6, r1
 800f83e:	68d8      	ldr	r0, [r3, #12]
 800f840:	4b07      	ldr	r3, [pc, #28]	@ (800f860 <__assert_func+0x30>)
 800f842:	2c00      	cmp	r4, #0
 800f844:	d101      	bne.n	800f84a <__assert_func+0x1a>
 800f846:	4b07      	ldr	r3, [pc, #28]	@ (800f864 <__assert_func+0x34>)
 800f848:	001c      	movs	r4, r3
 800f84a:	4907      	ldr	r1, [pc, #28]	@ (800f868 <__assert_func+0x38>)
 800f84c:	9301      	str	r3, [sp, #4]
 800f84e:	9402      	str	r4, [sp, #8]
 800f850:	002b      	movs	r3, r5
 800f852:	9600      	str	r6, [sp, #0]
 800f854:	f000 fbe0 	bl	8010018 <fiprintf>
 800f858:	f000 fbee 	bl	8010038 <abort>
 800f85c:	2000003c 	.word	0x2000003c
 800f860:	0801119a 	.word	0x0801119a
 800f864:	080111d5 	.word	0x080111d5
 800f868:	080111a7 	.word	0x080111a7

0800f86c <_calloc_r>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	0c0b      	lsrs	r3, r1, #16
 800f870:	0c15      	lsrs	r5, r2, #16
 800f872:	2b00      	cmp	r3, #0
 800f874:	d11e      	bne.n	800f8b4 <_calloc_r+0x48>
 800f876:	2d00      	cmp	r5, #0
 800f878:	d10c      	bne.n	800f894 <_calloc_r+0x28>
 800f87a:	b289      	uxth	r1, r1
 800f87c:	b294      	uxth	r4, r2
 800f87e:	434c      	muls	r4, r1
 800f880:	0021      	movs	r1, r4
 800f882:	f7fe f985 	bl	800db90 <_malloc_r>
 800f886:	1e05      	subs	r5, r0, #0
 800f888:	d01a      	beq.n	800f8c0 <_calloc_r+0x54>
 800f88a:	0022      	movs	r2, r4
 800f88c:	2100      	movs	r1, #0
 800f88e:	f7fd f9f1 	bl	800cc74 <memset>
 800f892:	e016      	b.n	800f8c2 <_calloc_r+0x56>
 800f894:	1c2b      	adds	r3, r5, #0
 800f896:	1c0c      	adds	r4, r1, #0
 800f898:	b289      	uxth	r1, r1
 800f89a:	b292      	uxth	r2, r2
 800f89c:	434a      	muls	r2, r1
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	b2a1      	uxth	r1, r4
 800f8a2:	4359      	muls	r1, r3
 800f8a4:	0c14      	lsrs	r4, r2, #16
 800f8a6:	190c      	adds	r4, r1, r4
 800f8a8:	0c23      	lsrs	r3, r4, #16
 800f8aa:	d107      	bne.n	800f8bc <_calloc_r+0x50>
 800f8ac:	0424      	lsls	r4, r4, #16
 800f8ae:	b292      	uxth	r2, r2
 800f8b0:	4314      	orrs	r4, r2
 800f8b2:	e7e5      	b.n	800f880 <_calloc_r+0x14>
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	d101      	bne.n	800f8bc <_calloc_r+0x50>
 800f8b8:	1c14      	adds	r4, r2, #0
 800f8ba:	e7ed      	b.n	800f898 <_calloc_r+0x2c>
 800f8bc:	230c      	movs	r3, #12
 800f8be:	6003      	str	r3, [r0, #0]
 800f8c0:	2500      	movs	r5, #0
 800f8c2:	0028      	movs	r0, r5
 800f8c4:	bd70      	pop	{r4, r5, r6, pc}

0800f8c6 <rshift>:
 800f8c6:	0002      	movs	r2, r0
 800f8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ca:	6904      	ldr	r4, [r0, #16]
 800f8cc:	b085      	sub	sp, #20
 800f8ce:	3214      	adds	r2, #20
 800f8d0:	114b      	asrs	r3, r1, #5
 800f8d2:	0016      	movs	r6, r2
 800f8d4:	9302      	str	r3, [sp, #8]
 800f8d6:	429c      	cmp	r4, r3
 800f8d8:	dd31      	ble.n	800f93e <rshift+0x78>
 800f8da:	261f      	movs	r6, #31
 800f8dc:	000f      	movs	r7, r1
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	00a5      	lsls	r5, r4, #2
 800f8e2:	18d3      	adds	r3, r2, r3
 800f8e4:	4037      	ands	r7, r6
 800f8e6:	1955      	adds	r5, r2, r5
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	9701      	str	r7, [sp, #4]
 800f8ec:	4231      	tst	r1, r6
 800f8ee:	d10d      	bne.n	800f90c <rshift+0x46>
 800f8f0:	0016      	movs	r6, r2
 800f8f2:	0019      	movs	r1, r3
 800f8f4:	428d      	cmp	r5, r1
 800f8f6:	d836      	bhi.n	800f966 <rshift+0xa0>
 800f8f8:	9b00      	ldr	r3, [sp, #0]
 800f8fa:	2600      	movs	r6, #0
 800f8fc:	3b03      	subs	r3, #3
 800f8fe:	429d      	cmp	r5, r3
 800f900:	d302      	bcc.n	800f908 <rshift+0x42>
 800f902:	9b02      	ldr	r3, [sp, #8]
 800f904:	1ae4      	subs	r4, r4, r3
 800f906:	00a6      	lsls	r6, r4, #2
 800f908:	1996      	adds	r6, r2, r6
 800f90a:	e018      	b.n	800f93e <rshift+0x78>
 800f90c:	2120      	movs	r1, #32
 800f90e:	9e01      	ldr	r6, [sp, #4]
 800f910:	9f01      	ldr	r7, [sp, #4]
 800f912:	1b89      	subs	r1, r1, r6
 800f914:	9e00      	ldr	r6, [sp, #0]
 800f916:	9103      	str	r1, [sp, #12]
 800f918:	ce02      	ldmia	r6!, {r1}
 800f91a:	4694      	mov	ip, r2
 800f91c:	40f9      	lsrs	r1, r7
 800f91e:	42b5      	cmp	r5, r6
 800f920:	d816      	bhi.n	800f950 <rshift+0x8a>
 800f922:	9b00      	ldr	r3, [sp, #0]
 800f924:	2600      	movs	r6, #0
 800f926:	3301      	adds	r3, #1
 800f928:	429d      	cmp	r5, r3
 800f92a:	d303      	bcc.n	800f934 <rshift+0x6e>
 800f92c:	9b02      	ldr	r3, [sp, #8]
 800f92e:	1ae4      	subs	r4, r4, r3
 800f930:	00a6      	lsls	r6, r4, #2
 800f932:	3e04      	subs	r6, #4
 800f934:	1996      	adds	r6, r2, r6
 800f936:	6031      	str	r1, [r6, #0]
 800f938:	2900      	cmp	r1, #0
 800f93a:	d000      	beq.n	800f93e <rshift+0x78>
 800f93c:	3604      	adds	r6, #4
 800f93e:	1ab1      	subs	r1, r6, r2
 800f940:	1089      	asrs	r1, r1, #2
 800f942:	6101      	str	r1, [r0, #16]
 800f944:	4296      	cmp	r6, r2
 800f946:	d101      	bne.n	800f94c <rshift+0x86>
 800f948:	2300      	movs	r3, #0
 800f94a:	6143      	str	r3, [r0, #20]
 800f94c:	b005      	add	sp, #20
 800f94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f950:	6837      	ldr	r7, [r6, #0]
 800f952:	9b03      	ldr	r3, [sp, #12]
 800f954:	409f      	lsls	r7, r3
 800f956:	430f      	orrs	r7, r1
 800f958:	4661      	mov	r1, ip
 800f95a:	c180      	stmia	r1!, {r7}
 800f95c:	468c      	mov	ip, r1
 800f95e:	9b01      	ldr	r3, [sp, #4]
 800f960:	ce02      	ldmia	r6!, {r1}
 800f962:	40d9      	lsrs	r1, r3
 800f964:	e7db      	b.n	800f91e <rshift+0x58>
 800f966:	c980      	ldmia	r1!, {r7}
 800f968:	c680      	stmia	r6!, {r7}
 800f96a:	e7c3      	b.n	800f8f4 <rshift+0x2e>

0800f96c <__hexdig_fun>:
 800f96c:	0002      	movs	r2, r0
 800f96e:	3a30      	subs	r2, #48	@ 0x30
 800f970:	0003      	movs	r3, r0
 800f972:	2a09      	cmp	r2, #9
 800f974:	d802      	bhi.n	800f97c <__hexdig_fun+0x10>
 800f976:	3b20      	subs	r3, #32
 800f978:	b2d8      	uxtb	r0, r3
 800f97a:	4770      	bx	lr
 800f97c:	0002      	movs	r2, r0
 800f97e:	3a61      	subs	r2, #97	@ 0x61
 800f980:	2a05      	cmp	r2, #5
 800f982:	d801      	bhi.n	800f988 <__hexdig_fun+0x1c>
 800f984:	3b47      	subs	r3, #71	@ 0x47
 800f986:	e7f7      	b.n	800f978 <__hexdig_fun+0xc>
 800f988:	001a      	movs	r2, r3
 800f98a:	3a41      	subs	r2, #65	@ 0x41
 800f98c:	2000      	movs	r0, #0
 800f98e:	2a05      	cmp	r2, #5
 800f990:	d8f3      	bhi.n	800f97a <__hexdig_fun+0xe>
 800f992:	3b27      	subs	r3, #39	@ 0x27
 800f994:	e7f0      	b.n	800f978 <__hexdig_fun+0xc>
	...

0800f998 <__gethex>:
 800f998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f99a:	b089      	sub	sp, #36	@ 0x24
 800f99c:	9307      	str	r3, [sp, #28]
 800f99e:	680b      	ldr	r3, [r1, #0]
 800f9a0:	9201      	str	r2, [sp, #4]
 800f9a2:	9003      	str	r0, [sp, #12]
 800f9a4:	9106      	str	r1, [sp, #24]
 800f9a6:	1c9a      	adds	r2, r3, #2
 800f9a8:	0011      	movs	r1, r2
 800f9aa:	3201      	adds	r2, #1
 800f9ac:	1e50      	subs	r0, r2, #1
 800f9ae:	7800      	ldrb	r0, [r0, #0]
 800f9b0:	2830      	cmp	r0, #48	@ 0x30
 800f9b2:	d0f9      	beq.n	800f9a8 <__gethex+0x10>
 800f9b4:	1acb      	subs	r3, r1, r3
 800f9b6:	3b02      	subs	r3, #2
 800f9b8:	9305      	str	r3, [sp, #20]
 800f9ba:	9100      	str	r1, [sp, #0]
 800f9bc:	f7ff ffd6 	bl	800f96c <__hexdig_fun>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	001d      	movs	r5, r3
 800f9c4:	9302      	str	r3, [sp, #8]
 800f9c6:	4298      	cmp	r0, r3
 800f9c8:	d11e      	bne.n	800fa08 <__gethex+0x70>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	49a6      	ldr	r1, [pc, #664]	@ (800fc68 <__gethex+0x2d0>)
 800f9ce:	9800      	ldr	r0, [sp, #0]
 800f9d0:	f7ff fefa 	bl	800f7c8 <strncmp>
 800f9d4:	0007      	movs	r7, r0
 800f9d6:	42a8      	cmp	r0, r5
 800f9d8:	d000      	beq.n	800f9dc <__gethex+0x44>
 800f9da:	e06a      	b.n	800fab2 <__gethex+0x11a>
 800f9dc:	9b00      	ldr	r3, [sp, #0]
 800f9de:	7858      	ldrb	r0, [r3, #1]
 800f9e0:	1c5c      	adds	r4, r3, #1
 800f9e2:	f7ff ffc3 	bl	800f96c <__hexdig_fun>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	9302      	str	r3, [sp, #8]
 800f9ea:	42a8      	cmp	r0, r5
 800f9ec:	d02f      	beq.n	800fa4e <__gethex+0xb6>
 800f9ee:	9400      	str	r4, [sp, #0]
 800f9f0:	9b00      	ldr	r3, [sp, #0]
 800f9f2:	7818      	ldrb	r0, [r3, #0]
 800f9f4:	2830      	cmp	r0, #48	@ 0x30
 800f9f6:	d009      	beq.n	800fa0c <__gethex+0x74>
 800f9f8:	f7ff ffb8 	bl	800f96c <__hexdig_fun>
 800f9fc:	4242      	negs	r2, r0
 800f9fe:	4142      	adcs	r2, r0
 800fa00:	2301      	movs	r3, #1
 800fa02:	0025      	movs	r5, r4
 800fa04:	9202      	str	r2, [sp, #8]
 800fa06:	9305      	str	r3, [sp, #20]
 800fa08:	9c00      	ldr	r4, [sp, #0]
 800fa0a:	e004      	b.n	800fa16 <__gethex+0x7e>
 800fa0c:	9b00      	ldr	r3, [sp, #0]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	e7ed      	b.n	800f9f0 <__gethex+0x58>
 800fa14:	3401      	adds	r4, #1
 800fa16:	7820      	ldrb	r0, [r4, #0]
 800fa18:	f7ff ffa8 	bl	800f96c <__hexdig_fun>
 800fa1c:	1e07      	subs	r7, r0, #0
 800fa1e:	d1f9      	bne.n	800fa14 <__gethex+0x7c>
 800fa20:	2201      	movs	r2, #1
 800fa22:	0020      	movs	r0, r4
 800fa24:	4990      	ldr	r1, [pc, #576]	@ (800fc68 <__gethex+0x2d0>)
 800fa26:	f7ff fecf 	bl	800f7c8 <strncmp>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d10d      	bne.n	800fa4a <__gethex+0xb2>
 800fa2e:	2d00      	cmp	r5, #0
 800fa30:	d106      	bne.n	800fa40 <__gethex+0xa8>
 800fa32:	3401      	adds	r4, #1
 800fa34:	0025      	movs	r5, r4
 800fa36:	7820      	ldrb	r0, [r4, #0]
 800fa38:	f7ff ff98 	bl	800f96c <__hexdig_fun>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d102      	bne.n	800fa46 <__gethex+0xae>
 800fa40:	1b2d      	subs	r5, r5, r4
 800fa42:	00af      	lsls	r7, r5, #2
 800fa44:	e003      	b.n	800fa4e <__gethex+0xb6>
 800fa46:	3401      	adds	r4, #1
 800fa48:	e7f5      	b.n	800fa36 <__gethex+0x9e>
 800fa4a:	2d00      	cmp	r5, #0
 800fa4c:	d1f8      	bne.n	800fa40 <__gethex+0xa8>
 800fa4e:	2220      	movs	r2, #32
 800fa50:	7823      	ldrb	r3, [r4, #0]
 800fa52:	0026      	movs	r6, r4
 800fa54:	4393      	bics	r3, r2
 800fa56:	2b50      	cmp	r3, #80	@ 0x50
 800fa58:	d11d      	bne.n	800fa96 <__gethex+0xfe>
 800fa5a:	7863      	ldrb	r3, [r4, #1]
 800fa5c:	2b2b      	cmp	r3, #43	@ 0x2b
 800fa5e:	d02d      	beq.n	800fabc <__gethex+0x124>
 800fa60:	2b2d      	cmp	r3, #45	@ 0x2d
 800fa62:	d02f      	beq.n	800fac4 <__gethex+0x12c>
 800fa64:	2300      	movs	r3, #0
 800fa66:	1c66      	adds	r6, r4, #1
 800fa68:	9304      	str	r3, [sp, #16]
 800fa6a:	7830      	ldrb	r0, [r6, #0]
 800fa6c:	f7ff ff7e 	bl	800f96c <__hexdig_fun>
 800fa70:	1e43      	subs	r3, r0, #1
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	0005      	movs	r5, r0
 800fa76:	2b18      	cmp	r3, #24
 800fa78:	d82a      	bhi.n	800fad0 <__gethex+0x138>
 800fa7a:	7870      	ldrb	r0, [r6, #1]
 800fa7c:	f7ff ff76 	bl	800f96c <__hexdig_fun>
 800fa80:	1e43      	subs	r3, r0, #1
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	3601      	adds	r6, #1
 800fa86:	3d10      	subs	r5, #16
 800fa88:	2b18      	cmp	r3, #24
 800fa8a:	d91d      	bls.n	800fac8 <__gethex+0x130>
 800fa8c:	9b04      	ldr	r3, [sp, #16]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d000      	beq.n	800fa94 <__gethex+0xfc>
 800fa92:	426d      	negs	r5, r5
 800fa94:	197f      	adds	r7, r7, r5
 800fa96:	9b06      	ldr	r3, [sp, #24]
 800fa98:	601e      	str	r6, [r3, #0]
 800fa9a:	9b02      	ldr	r3, [sp, #8]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d019      	beq.n	800fad4 <__gethex+0x13c>
 800faa0:	9b05      	ldr	r3, [sp, #20]
 800faa2:	2606      	movs	r6, #6
 800faa4:	425a      	negs	r2, r3
 800faa6:	4153      	adcs	r3, r2
 800faa8:	425b      	negs	r3, r3
 800faaa:	401e      	ands	r6, r3
 800faac:	0030      	movs	r0, r6
 800faae:	b009      	add	sp, #36	@ 0x24
 800fab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fab2:	2301      	movs	r3, #1
 800fab4:	2700      	movs	r7, #0
 800fab6:	9c00      	ldr	r4, [sp, #0]
 800fab8:	9302      	str	r3, [sp, #8]
 800faba:	e7c8      	b.n	800fa4e <__gethex+0xb6>
 800fabc:	2300      	movs	r3, #0
 800fabe:	9304      	str	r3, [sp, #16]
 800fac0:	1ca6      	adds	r6, r4, #2
 800fac2:	e7d2      	b.n	800fa6a <__gethex+0xd2>
 800fac4:	2301      	movs	r3, #1
 800fac6:	e7fa      	b.n	800fabe <__gethex+0x126>
 800fac8:	230a      	movs	r3, #10
 800faca:	435d      	muls	r5, r3
 800facc:	182d      	adds	r5, r5, r0
 800face:	e7d4      	b.n	800fa7a <__gethex+0xe2>
 800fad0:	0026      	movs	r6, r4
 800fad2:	e7e0      	b.n	800fa96 <__gethex+0xfe>
 800fad4:	9b00      	ldr	r3, [sp, #0]
 800fad6:	9902      	ldr	r1, [sp, #8]
 800fad8:	1ae3      	subs	r3, r4, r3
 800fada:	3b01      	subs	r3, #1
 800fadc:	2b07      	cmp	r3, #7
 800fade:	dc0a      	bgt.n	800faf6 <__gethex+0x15e>
 800fae0:	9803      	ldr	r0, [sp, #12]
 800fae2:	f7fe f8e5 	bl	800dcb0 <_Balloc>
 800fae6:	1e05      	subs	r5, r0, #0
 800fae8:	d108      	bne.n	800fafc <__gethex+0x164>
 800faea:	002a      	movs	r2, r5
 800faec:	21e4      	movs	r1, #228	@ 0xe4
 800faee:	4b5f      	ldr	r3, [pc, #380]	@ (800fc6c <__gethex+0x2d4>)
 800faf0:	485f      	ldr	r0, [pc, #380]	@ (800fc70 <__gethex+0x2d8>)
 800faf2:	f7ff fe9d 	bl	800f830 <__assert_func>
 800faf6:	3101      	adds	r1, #1
 800faf8:	105b      	asrs	r3, r3, #1
 800fafa:	e7ef      	b.n	800fadc <__gethex+0x144>
 800fafc:	0003      	movs	r3, r0
 800fafe:	3314      	adds	r3, #20
 800fb00:	9302      	str	r3, [sp, #8]
 800fb02:	9305      	str	r3, [sp, #20]
 800fb04:	2300      	movs	r3, #0
 800fb06:	001e      	movs	r6, r3
 800fb08:	9304      	str	r3, [sp, #16]
 800fb0a:	9b00      	ldr	r3, [sp, #0]
 800fb0c:	42a3      	cmp	r3, r4
 800fb0e:	d338      	bcc.n	800fb82 <__gethex+0x1ea>
 800fb10:	9c05      	ldr	r4, [sp, #20]
 800fb12:	9b02      	ldr	r3, [sp, #8]
 800fb14:	c440      	stmia	r4!, {r6}
 800fb16:	1ae4      	subs	r4, r4, r3
 800fb18:	10a4      	asrs	r4, r4, #2
 800fb1a:	0030      	movs	r0, r6
 800fb1c:	612c      	str	r4, [r5, #16]
 800fb1e:	f7fe f9bf 	bl	800dea0 <__hi0bits>
 800fb22:	9b01      	ldr	r3, [sp, #4]
 800fb24:	0164      	lsls	r4, r4, #5
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	1a26      	subs	r6, r4, r0
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	429e      	cmp	r6, r3
 800fb2e:	dd52      	ble.n	800fbd6 <__gethex+0x23e>
 800fb30:	1af6      	subs	r6, r6, r3
 800fb32:	0031      	movs	r1, r6
 800fb34:	0028      	movs	r0, r5
 800fb36:	f7fe fd62 	bl	800e5fe <__any_on>
 800fb3a:	1e04      	subs	r4, r0, #0
 800fb3c:	d00f      	beq.n	800fb5e <__gethex+0x1c6>
 800fb3e:	2401      	movs	r4, #1
 800fb40:	231f      	movs	r3, #31
 800fb42:	0020      	movs	r0, r4
 800fb44:	1e72      	subs	r2, r6, #1
 800fb46:	4013      	ands	r3, r2
 800fb48:	4098      	lsls	r0, r3
 800fb4a:	0003      	movs	r3, r0
 800fb4c:	1151      	asrs	r1, r2, #5
 800fb4e:	9802      	ldr	r0, [sp, #8]
 800fb50:	0089      	lsls	r1, r1, #2
 800fb52:	5809      	ldr	r1, [r1, r0]
 800fb54:	4219      	tst	r1, r3
 800fb56:	d002      	beq.n	800fb5e <__gethex+0x1c6>
 800fb58:	42a2      	cmp	r2, r4
 800fb5a:	dc34      	bgt.n	800fbc6 <__gethex+0x22e>
 800fb5c:	2402      	movs	r4, #2
 800fb5e:	0031      	movs	r1, r6
 800fb60:	0028      	movs	r0, r5
 800fb62:	f7ff feb0 	bl	800f8c6 <rshift>
 800fb66:	19bf      	adds	r7, r7, r6
 800fb68:	9b01      	ldr	r3, [sp, #4]
 800fb6a:	689b      	ldr	r3, [r3, #8]
 800fb6c:	42bb      	cmp	r3, r7
 800fb6e:	da42      	bge.n	800fbf6 <__gethex+0x25e>
 800fb70:	0029      	movs	r1, r5
 800fb72:	9803      	ldr	r0, [sp, #12]
 800fb74:	f7fe f8e0 	bl	800dd38 <_Bfree>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb7c:	26a3      	movs	r6, #163	@ 0xa3
 800fb7e:	6013      	str	r3, [r2, #0]
 800fb80:	e794      	b.n	800faac <__gethex+0x114>
 800fb82:	3c01      	subs	r4, #1
 800fb84:	7823      	ldrb	r3, [r4, #0]
 800fb86:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb88:	d012      	beq.n	800fbb0 <__gethex+0x218>
 800fb8a:	9b04      	ldr	r3, [sp, #16]
 800fb8c:	2b20      	cmp	r3, #32
 800fb8e:	d104      	bne.n	800fb9a <__gethex+0x202>
 800fb90:	9b05      	ldr	r3, [sp, #20]
 800fb92:	c340      	stmia	r3!, {r6}
 800fb94:	2600      	movs	r6, #0
 800fb96:	9305      	str	r3, [sp, #20]
 800fb98:	9604      	str	r6, [sp, #16]
 800fb9a:	7820      	ldrb	r0, [r4, #0]
 800fb9c:	f7ff fee6 	bl	800f96c <__hexdig_fun>
 800fba0:	230f      	movs	r3, #15
 800fba2:	4018      	ands	r0, r3
 800fba4:	9b04      	ldr	r3, [sp, #16]
 800fba6:	4098      	lsls	r0, r3
 800fba8:	3304      	adds	r3, #4
 800fbaa:	4306      	orrs	r6, r0
 800fbac:	9304      	str	r3, [sp, #16]
 800fbae:	e7ac      	b.n	800fb0a <__gethex+0x172>
 800fbb0:	9b00      	ldr	r3, [sp, #0]
 800fbb2:	42a3      	cmp	r3, r4
 800fbb4:	d8e9      	bhi.n	800fb8a <__gethex+0x1f2>
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	0020      	movs	r0, r4
 800fbba:	492b      	ldr	r1, [pc, #172]	@ (800fc68 <__gethex+0x2d0>)
 800fbbc:	f7ff fe04 	bl	800f7c8 <strncmp>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d1e2      	bne.n	800fb8a <__gethex+0x1f2>
 800fbc4:	e7a1      	b.n	800fb0a <__gethex+0x172>
 800fbc6:	0028      	movs	r0, r5
 800fbc8:	1eb1      	subs	r1, r6, #2
 800fbca:	f7fe fd18 	bl	800e5fe <__any_on>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d0c4      	beq.n	800fb5c <__gethex+0x1c4>
 800fbd2:	2403      	movs	r4, #3
 800fbd4:	e7c3      	b.n	800fb5e <__gethex+0x1c6>
 800fbd6:	9b00      	ldr	r3, [sp, #0]
 800fbd8:	2400      	movs	r4, #0
 800fbda:	429e      	cmp	r6, r3
 800fbdc:	dac4      	bge.n	800fb68 <__gethex+0x1d0>
 800fbde:	1b9e      	subs	r6, r3, r6
 800fbe0:	0029      	movs	r1, r5
 800fbe2:	0032      	movs	r2, r6
 800fbe4:	9803      	ldr	r0, [sp, #12]
 800fbe6:	f7fe fad1 	bl	800e18c <__lshift>
 800fbea:	0003      	movs	r3, r0
 800fbec:	3314      	adds	r3, #20
 800fbee:	0005      	movs	r5, r0
 800fbf0:	1bbf      	subs	r7, r7, r6
 800fbf2:	9302      	str	r3, [sp, #8]
 800fbf4:	e7b8      	b.n	800fb68 <__gethex+0x1d0>
 800fbf6:	9b01      	ldr	r3, [sp, #4]
 800fbf8:	685e      	ldr	r6, [r3, #4]
 800fbfa:	42be      	cmp	r6, r7
 800fbfc:	dd6f      	ble.n	800fcde <__gethex+0x346>
 800fbfe:	9b00      	ldr	r3, [sp, #0]
 800fc00:	1bf6      	subs	r6, r6, r7
 800fc02:	42b3      	cmp	r3, r6
 800fc04:	dc36      	bgt.n	800fc74 <__gethex+0x2dc>
 800fc06:	9b01      	ldr	r3, [sp, #4]
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d024      	beq.n	800fc58 <__gethex+0x2c0>
 800fc0e:	2b03      	cmp	r3, #3
 800fc10:	d026      	beq.n	800fc60 <__gethex+0x2c8>
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d117      	bne.n	800fc46 <__gethex+0x2ae>
 800fc16:	9b00      	ldr	r3, [sp, #0]
 800fc18:	42b3      	cmp	r3, r6
 800fc1a:	d114      	bne.n	800fc46 <__gethex+0x2ae>
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d10b      	bne.n	800fc38 <__gethex+0x2a0>
 800fc20:	9b01      	ldr	r3, [sp, #4]
 800fc22:	9a07      	ldr	r2, [sp, #28]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	2662      	movs	r6, #98	@ 0x62
 800fc28:	6013      	str	r3, [r2, #0]
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	9a02      	ldr	r2, [sp, #8]
 800fc2e:	612b      	str	r3, [r5, #16]
 800fc30:	6013      	str	r3, [r2, #0]
 800fc32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc34:	601d      	str	r5, [r3, #0]
 800fc36:	e739      	b.n	800faac <__gethex+0x114>
 800fc38:	9900      	ldr	r1, [sp, #0]
 800fc3a:	0028      	movs	r0, r5
 800fc3c:	3901      	subs	r1, #1
 800fc3e:	f7fe fcde 	bl	800e5fe <__any_on>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d1ec      	bne.n	800fc20 <__gethex+0x288>
 800fc46:	0029      	movs	r1, r5
 800fc48:	9803      	ldr	r0, [sp, #12]
 800fc4a:	f7fe f875 	bl	800dd38 <_Bfree>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc52:	2650      	movs	r6, #80	@ 0x50
 800fc54:	6013      	str	r3, [r2, #0]
 800fc56:	e729      	b.n	800faac <__gethex+0x114>
 800fc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1f3      	bne.n	800fc46 <__gethex+0x2ae>
 800fc5e:	e7df      	b.n	800fc20 <__gethex+0x288>
 800fc60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1dc      	bne.n	800fc20 <__gethex+0x288>
 800fc66:	e7ee      	b.n	800fc46 <__gethex+0x2ae>
 800fc68:	08011028 	.word	0x08011028
 800fc6c:	08010ec1 	.word	0x08010ec1
 800fc70:	080111d6 	.word	0x080111d6
 800fc74:	1e77      	subs	r7, r6, #1
 800fc76:	2c00      	cmp	r4, #0
 800fc78:	d12f      	bne.n	800fcda <__gethex+0x342>
 800fc7a:	2f00      	cmp	r7, #0
 800fc7c:	d004      	beq.n	800fc88 <__gethex+0x2f0>
 800fc7e:	0039      	movs	r1, r7
 800fc80:	0028      	movs	r0, r5
 800fc82:	f7fe fcbc 	bl	800e5fe <__any_on>
 800fc86:	0004      	movs	r4, r0
 800fc88:	231f      	movs	r3, #31
 800fc8a:	117a      	asrs	r2, r7, #5
 800fc8c:	401f      	ands	r7, r3
 800fc8e:	3b1e      	subs	r3, #30
 800fc90:	40bb      	lsls	r3, r7
 800fc92:	9902      	ldr	r1, [sp, #8]
 800fc94:	0092      	lsls	r2, r2, #2
 800fc96:	5852      	ldr	r2, [r2, r1]
 800fc98:	421a      	tst	r2, r3
 800fc9a:	d001      	beq.n	800fca0 <__gethex+0x308>
 800fc9c:	2302      	movs	r3, #2
 800fc9e:	431c      	orrs	r4, r3
 800fca0:	9b00      	ldr	r3, [sp, #0]
 800fca2:	0031      	movs	r1, r6
 800fca4:	1b9b      	subs	r3, r3, r6
 800fca6:	2602      	movs	r6, #2
 800fca8:	0028      	movs	r0, r5
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	f7ff fe0b 	bl	800f8c6 <rshift>
 800fcb0:	9b01      	ldr	r3, [sp, #4]
 800fcb2:	685f      	ldr	r7, [r3, #4]
 800fcb4:	2c00      	cmp	r4, #0
 800fcb6:	d03f      	beq.n	800fd38 <__gethex+0x3a0>
 800fcb8:	9b01      	ldr	r3, [sp, #4]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	2b02      	cmp	r3, #2
 800fcbe:	d010      	beq.n	800fce2 <__gethex+0x34a>
 800fcc0:	2b03      	cmp	r3, #3
 800fcc2:	d012      	beq.n	800fcea <__gethex+0x352>
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d106      	bne.n	800fcd6 <__gethex+0x33e>
 800fcc8:	07a2      	lsls	r2, r4, #30
 800fcca:	d504      	bpl.n	800fcd6 <__gethex+0x33e>
 800fccc:	9a02      	ldr	r2, [sp, #8]
 800fcce:	6812      	ldr	r2, [r2, #0]
 800fcd0:	4314      	orrs	r4, r2
 800fcd2:	421c      	tst	r4, r3
 800fcd4:	d10c      	bne.n	800fcf0 <__gethex+0x358>
 800fcd6:	2310      	movs	r3, #16
 800fcd8:	e02d      	b.n	800fd36 <__gethex+0x39e>
 800fcda:	2401      	movs	r4, #1
 800fcdc:	e7d4      	b.n	800fc88 <__gethex+0x2f0>
 800fcde:	2601      	movs	r6, #1
 800fce0:	e7e8      	b.n	800fcb4 <__gethex+0x31c>
 800fce2:	2301      	movs	r3, #1
 800fce4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fce6:	1a9b      	subs	r3, r3, r2
 800fce8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fcea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d0f2      	beq.n	800fcd6 <__gethex+0x33e>
 800fcf0:	692b      	ldr	r3, [r5, #16]
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	9302      	str	r3, [sp, #8]
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	9304      	str	r3, [sp, #16]
 800fcfa:	002b      	movs	r3, r5
 800fcfc:	9a04      	ldr	r2, [sp, #16]
 800fcfe:	3314      	adds	r3, #20
 800fd00:	1899      	adds	r1, r3, r2
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	1c54      	adds	r4, r2, #1
 800fd06:	d01c      	beq.n	800fd42 <__gethex+0x3aa>
 800fd08:	3201      	adds	r2, #1
 800fd0a:	601a      	str	r2, [r3, #0]
 800fd0c:	002b      	movs	r3, r5
 800fd0e:	3314      	adds	r3, #20
 800fd10:	2e02      	cmp	r6, #2
 800fd12:	d13f      	bne.n	800fd94 <__gethex+0x3fc>
 800fd14:	9a01      	ldr	r2, [sp, #4]
 800fd16:	9900      	ldr	r1, [sp, #0]
 800fd18:	6812      	ldr	r2, [r2, #0]
 800fd1a:	3a01      	subs	r2, #1
 800fd1c:	428a      	cmp	r2, r1
 800fd1e:	d109      	bne.n	800fd34 <__gethex+0x39c>
 800fd20:	000a      	movs	r2, r1
 800fd22:	201f      	movs	r0, #31
 800fd24:	4010      	ands	r0, r2
 800fd26:	2201      	movs	r2, #1
 800fd28:	4082      	lsls	r2, r0
 800fd2a:	1149      	asrs	r1, r1, #5
 800fd2c:	0089      	lsls	r1, r1, #2
 800fd2e:	58cb      	ldr	r3, [r1, r3]
 800fd30:	4213      	tst	r3, r2
 800fd32:	d13d      	bne.n	800fdb0 <__gethex+0x418>
 800fd34:	2320      	movs	r3, #32
 800fd36:	431e      	orrs	r6, r3
 800fd38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd3a:	601d      	str	r5, [r3, #0]
 800fd3c:	9b07      	ldr	r3, [sp, #28]
 800fd3e:	601f      	str	r7, [r3, #0]
 800fd40:	e6b4      	b.n	800faac <__gethex+0x114>
 800fd42:	c301      	stmia	r3!, {r0}
 800fd44:	4299      	cmp	r1, r3
 800fd46:	d8dc      	bhi.n	800fd02 <__gethex+0x36a>
 800fd48:	68ab      	ldr	r3, [r5, #8]
 800fd4a:	9a02      	ldr	r2, [sp, #8]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	db18      	blt.n	800fd82 <__gethex+0x3ea>
 800fd50:	6869      	ldr	r1, [r5, #4]
 800fd52:	9803      	ldr	r0, [sp, #12]
 800fd54:	3101      	adds	r1, #1
 800fd56:	f7fd ffab 	bl	800dcb0 <_Balloc>
 800fd5a:	1e04      	subs	r4, r0, #0
 800fd5c:	d104      	bne.n	800fd68 <__gethex+0x3d0>
 800fd5e:	0022      	movs	r2, r4
 800fd60:	2184      	movs	r1, #132	@ 0x84
 800fd62:	4b1d      	ldr	r3, [pc, #116]	@ (800fdd8 <__gethex+0x440>)
 800fd64:	481d      	ldr	r0, [pc, #116]	@ (800fddc <__gethex+0x444>)
 800fd66:	e6c4      	b.n	800faf2 <__gethex+0x15a>
 800fd68:	0029      	movs	r1, r5
 800fd6a:	692a      	ldr	r2, [r5, #16]
 800fd6c:	310c      	adds	r1, #12
 800fd6e:	3202      	adds	r2, #2
 800fd70:	0092      	lsls	r2, r2, #2
 800fd72:	300c      	adds	r0, #12
 800fd74:	f7ff fd4c 	bl	800f810 <memcpy>
 800fd78:	0029      	movs	r1, r5
 800fd7a:	9803      	ldr	r0, [sp, #12]
 800fd7c:	f7fd ffdc 	bl	800dd38 <_Bfree>
 800fd80:	0025      	movs	r5, r4
 800fd82:	692b      	ldr	r3, [r5, #16]
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	612a      	str	r2, [r5, #16]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	18eb      	adds	r3, r5, r3
 800fd90:	605a      	str	r2, [r3, #4]
 800fd92:	e7bb      	b.n	800fd0c <__gethex+0x374>
 800fd94:	692a      	ldr	r2, [r5, #16]
 800fd96:	9902      	ldr	r1, [sp, #8]
 800fd98:	428a      	cmp	r2, r1
 800fd9a:	dd0b      	ble.n	800fdb4 <__gethex+0x41c>
 800fd9c:	2101      	movs	r1, #1
 800fd9e:	0028      	movs	r0, r5
 800fda0:	f7ff fd91 	bl	800f8c6 <rshift>
 800fda4:	9b01      	ldr	r3, [sp, #4]
 800fda6:	3701      	adds	r7, #1
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	42bb      	cmp	r3, r7
 800fdac:	da00      	bge.n	800fdb0 <__gethex+0x418>
 800fdae:	e6df      	b.n	800fb70 <__gethex+0x1d8>
 800fdb0:	2601      	movs	r6, #1
 800fdb2:	e7bf      	b.n	800fd34 <__gethex+0x39c>
 800fdb4:	221f      	movs	r2, #31
 800fdb6:	9c00      	ldr	r4, [sp, #0]
 800fdb8:	9900      	ldr	r1, [sp, #0]
 800fdba:	4014      	ands	r4, r2
 800fdbc:	4211      	tst	r1, r2
 800fdbe:	d0f7      	beq.n	800fdb0 <__gethex+0x418>
 800fdc0:	9a04      	ldr	r2, [sp, #16]
 800fdc2:	189b      	adds	r3, r3, r2
 800fdc4:	3b04      	subs	r3, #4
 800fdc6:	6818      	ldr	r0, [r3, #0]
 800fdc8:	f7fe f86a 	bl	800dea0 <__hi0bits>
 800fdcc:	2320      	movs	r3, #32
 800fdce:	1b1b      	subs	r3, r3, r4
 800fdd0:	4298      	cmp	r0, r3
 800fdd2:	dbe3      	blt.n	800fd9c <__gethex+0x404>
 800fdd4:	e7ec      	b.n	800fdb0 <__gethex+0x418>
 800fdd6:	46c0      	nop			@ (mov r8, r8)
 800fdd8:	08010ec1 	.word	0x08010ec1
 800fddc:	080111d6 	.word	0x080111d6

0800fde0 <L_shift>:
 800fde0:	2308      	movs	r3, #8
 800fde2:	b570      	push	{r4, r5, r6, lr}
 800fde4:	2520      	movs	r5, #32
 800fde6:	1a9a      	subs	r2, r3, r2
 800fde8:	0092      	lsls	r2, r2, #2
 800fdea:	1aad      	subs	r5, r5, r2
 800fdec:	6843      	ldr	r3, [r0, #4]
 800fdee:	6804      	ldr	r4, [r0, #0]
 800fdf0:	001e      	movs	r6, r3
 800fdf2:	40ae      	lsls	r6, r5
 800fdf4:	40d3      	lsrs	r3, r2
 800fdf6:	4334      	orrs	r4, r6
 800fdf8:	6004      	str	r4, [r0, #0]
 800fdfa:	6043      	str	r3, [r0, #4]
 800fdfc:	3004      	adds	r0, #4
 800fdfe:	4288      	cmp	r0, r1
 800fe00:	d3f4      	bcc.n	800fdec <L_shift+0xc>
 800fe02:	bd70      	pop	{r4, r5, r6, pc}

0800fe04 <__match>:
 800fe04:	b530      	push	{r4, r5, lr}
 800fe06:	6803      	ldr	r3, [r0, #0]
 800fe08:	780c      	ldrb	r4, [r1, #0]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	2c00      	cmp	r4, #0
 800fe0e:	d102      	bne.n	800fe16 <__match+0x12>
 800fe10:	6003      	str	r3, [r0, #0]
 800fe12:	2001      	movs	r0, #1
 800fe14:	bd30      	pop	{r4, r5, pc}
 800fe16:	781a      	ldrb	r2, [r3, #0]
 800fe18:	0015      	movs	r5, r2
 800fe1a:	3d41      	subs	r5, #65	@ 0x41
 800fe1c:	2d19      	cmp	r5, #25
 800fe1e:	d800      	bhi.n	800fe22 <__match+0x1e>
 800fe20:	3220      	adds	r2, #32
 800fe22:	3101      	adds	r1, #1
 800fe24:	42a2      	cmp	r2, r4
 800fe26:	d0ef      	beq.n	800fe08 <__match+0x4>
 800fe28:	2000      	movs	r0, #0
 800fe2a:	e7f3      	b.n	800fe14 <__match+0x10>

0800fe2c <__hexnan>:
 800fe2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe2e:	680b      	ldr	r3, [r1, #0]
 800fe30:	b08b      	sub	sp, #44	@ 0x2c
 800fe32:	9201      	str	r2, [sp, #4]
 800fe34:	9901      	ldr	r1, [sp, #4]
 800fe36:	115a      	asrs	r2, r3, #5
 800fe38:	0092      	lsls	r2, r2, #2
 800fe3a:	188a      	adds	r2, r1, r2
 800fe3c:	9202      	str	r2, [sp, #8]
 800fe3e:	0019      	movs	r1, r3
 800fe40:	221f      	movs	r2, #31
 800fe42:	4011      	ands	r1, r2
 800fe44:	9008      	str	r0, [sp, #32]
 800fe46:	9106      	str	r1, [sp, #24]
 800fe48:	4213      	tst	r3, r2
 800fe4a:	d002      	beq.n	800fe52 <__hexnan+0x26>
 800fe4c:	9b02      	ldr	r3, [sp, #8]
 800fe4e:	3304      	adds	r3, #4
 800fe50:	9302      	str	r3, [sp, #8]
 800fe52:	9b02      	ldr	r3, [sp, #8]
 800fe54:	2500      	movs	r5, #0
 800fe56:	1f1f      	subs	r7, r3, #4
 800fe58:	003e      	movs	r6, r7
 800fe5a:	003c      	movs	r4, r7
 800fe5c:	9b08      	ldr	r3, [sp, #32]
 800fe5e:	603d      	str	r5, [r7, #0]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	9507      	str	r5, [sp, #28]
 800fe64:	9305      	str	r3, [sp, #20]
 800fe66:	9503      	str	r5, [sp, #12]
 800fe68:	9b05      	ldr	r3, [sp, #20]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe6e:	9b05      	ldr	r3, [sp, #20]
 800fe70:	785b      	ldrb	r3, [r3, #1]
 800fe72:	9304      	str	r3, [sp, #16]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d028      	beq.n	800feca <__hexnan+0x9e>
 800fe78:	9804      	ldr	r0, [sp, #16]
 800fe7a:	f7ff fd77 	bl	800f96c <__hexdig_fun>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d155      	bne.n	800ff2e <__hexnan+0x102>
 800fe82:	9b04      	ldr	r3, [sp, #16]
 800fe84:	2b20      	cmp	r3, #32
 800fe86:	d819      	bhi.n	800febc <__hexnan+0x90>
 800fe88:	9b03      	ldr	r3, [sp, #12]
 800fe8a:	9a07      	ldr	r2, [sp, #28]
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	dd12      	ble.n	800feb6 <__hexnan+0x8a>
 800fe90:	42b4      	cmp	r4, r6
 800fe92:	d206      	bcs.n	800fea2 <__hexnan+0x76>
 800fe94:	2d07      	cmp	r5, #7
 800fe96:	dc04      	bgt.n	800fea2 <__hexnan+0x76>
 800fe98:	002a      	movs	r2, r5
 800fe9a:	0031      	movs	r1, r6
 800fe9c:	0020      	movs	r0, r4
 800fe9e:	f7ff ff9f 	bl	800fde0 <L_shift>
 800fea2:	9b01      	ldr	r3, [sp, #4]
 800fea4:	2508      	movs	r5, #8
 800fea6:	429c      	cmp	r4, r3
 800fea8:	d905      	bls.n	800feb6 <__hexnan+0x8a>
 800feaa:	1f26      	subs	r6, r4, #4
 800feac:	2500      	movs	r5, #0
 800feae:	0034      	movs	r4, r6
 800feb0:	9b03      	ldr	r3, [sp, #12]
 800feb2:	6035      	str	r5, [r6, #0]
 800feb4:	9307      	str	r3, [sp, #28]
 800feb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feb8:	9305      	str	r3, [sp, #20]
 800feba:	e7d5      	b.n	800fe68 <__hexnan+0x3c>
 800febc:	9b04      	ldr	r3, [sp, #16]
 800febe:	2b29      	cmp	r3, #41	@ 0x29
 800fec0:	d15a      	bne.n	800ff78 <__hexnan+0x14c>
 800fec2:	9b05      	ldr	r3, [sp, #20]
 800fec4:	9a08      	ldr	r2, [sp, #32]
 800fec6:	3302      	adds	r3, #2
 800fec8:	6013      	str	r3, [r2, #0]
 800feca:	9b03      	ldr	r3, [sp, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d053      	beq.n	800ff78 <__hexnan+0x14c>
 800fed0:	42b4      	cmp	r4, r6
 800fed2:	d206      	bcs.n	800fee2 <__hexnan+0xb6>
 800fed4:	2d07      	cmp	r5, #7
 800fed6:	dc04      	bgt.n	800fee2 <__hexnan+0xb6>
 800fed8:	002a      	movs	r2, r5
 800feda:	0031      	movs	r1, r6
 800fedc:	0020      	movs	r0, r4
 800fede:	f7ff ff7f 	bl	800fde0 <L_shift>
 800fee2:	9b01      	ldr	r3, [sp, #4]
 800fee4:	429c      	cmp	r4, r3
 800fee6:	d936      	bls.n	800ff56 <__hexnan+0x12a>
 800fee8:	001a      	movs	r2, r3
 800feea:	0023      	movs	r3, r4
 800feec:	cb02      	ldmia	r3!, {r1}
 800feee:	c202      	stmia	r2!, {r1}
 800fef0:	429f      	cmp	r7, r3
 800fef2:	d2fb      	bcs.n	800feec <__hexnan+0xc0>
 800fef4:	9b02      	ldr	r3, [sp, #8]
 800fef6:	1c61      	adds	r1, r4, #1
 800fef8:	1eda      	subs	r2, r3, #3
 800fefa:	2304      	movs	r3, #4
 800fefc:	4291      	cmp	r1, r2
 800fefe:	d805      	bhi.n	800ff0c <__hexnan+0xe0>
 800ff00:	9b02      	ldr	r3, [sp, #8]
 800ff02:	3b04      	subs	r3, #4
 800ff04:	1b1b      	subs	r3, r3, r4
 800ff06:	089b      	lsrs	r3, r3, #2
 800ff08:	3301      	adds	r3, #1
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	9a01      	ldr	r2, [sp, #4]
 800ff0e:	18d3      	adds	r3, r2, r3
 800ff10:	2200      	movs	r2, #0
 800ff12:	c304      	stmia	r3!, {r2}
 800ff14:	429f      	cmp	r7, r3
 800ff16:	d2fc      	bcs.n	800ff12 <__hexnan+0xe6>
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d104      	bne.n	800ff28 <__hexnan+0xfc>
 800ff1e:	9b01      	ldr	r3, [sp, #4]
 800ff20:	429f      	cmp	r7, r3
 800ff22:	d127      	bne.n	800ff74 <__hexnan+0x148>
 800ff24:	2301      	movs	r3, #1
 800ff26:	603b      	str	r3, [r7, #0]
 800ff28:	2005      	movs	r0, #5
 800ff2a:	b00b      	add	sp, #44	@ 0x2c
 800ff2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff2e:	9b03      	ldr	r3, [sp, #12]
 800ff30:	3501      	adds	r5, #1
 800ff32:	3301      	adds	r3, #1
 800ff34:	9303      	str	r3, [sp, #12]
 800ff36:	2d08      	cmp	r5, #8
 800ff38:	dd06      	ble.n	800ff48 <__hexnan+0x11c>
 800ff3a:	9b01      	ldr	r3, [sp, #4]
 800ff3c:	429c      	cmp	r4, r3
 800ff3e:	d9ba      	bls.n	800feb6 <__hexnan+0x8a>
 800ff40:	2300      	movs	r3, #0
 800ff42:	2501      	movs	r5, #1
 800ff44:	3c04      	subs	r4, #4
 800ff46:	6023      	str	r3, [r4, #0]
 800ff48:	220f      	movs	r2, #15
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	4010      	ands	r0, r2
 800ff4e:	011b      	lsls	r3, r3, #4
 800ff50:	4303      	orrs	r3, r0
 800ff52:	6023      	str	r3, [r4, #0]
 800ff54:	e7af      	b.n	800feb6 <__hexnan+0x8a>
 800ff56:	9b06      	ldr	r3, [sp, #24]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d0dd      	beq.n	800ff18 <__hexnan+0xec>
 800ff5c:	2320      	movs	r3, #32
 800ff5e:	9a06      	ldr	r2, [sp, #24]
 800ff60:	9902      	ldr	r1, [sp, #8]
 800ff62:	1a9b      	subs	r3, r3, r2
 800ff64:	2201      	movs	r2, #1
 800ff66:	4252      	negs	r2, r2
 800ff68:	40da      	lsrs	r2, r3
 800ff6a:	3904      	subs	r1, #4
 800ff6c:	680b      	ldr	r3, [r1, #0]
 800ff6e:	4013      	ands	r3, r2
 800ff70:	600b      	str	r3, [r1, #0]
 800ff72:	e7d1      	b.n	800ff18 <__hexnan+0xec>
 800ff74:	3f04      	subs	r7, #4
 800ff76:	e7cf      	b.n	800ff18 <__hexnan+0xec>
 800ff78:	2004      	movs	r0, #4
 800ff7a:	e7d6      	b.n	800ff2a <__hexnan+0xfe>

0800ff7c <__ascii_mbtowc>:
 800ff7c:	b082      	sub	sp, #8
 800ff7e:	2900      	cmp	r1, #0
 800ff80:	d100      	bne.n	800ff84 <__ascii_mbtowc+0x8>
 800ff82:	a901      	add	r1, sp, #4
 800ff84:	1e10      	subs	r0, r2, #0
 800ff86:	d006      	beq.n	800ff96 <__ascii_mbtowc+0x1a>
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d006      	beq.n	800ff9a <__ascii_mbtowc+0x1e>
 800ff8c:	7813      	ldrb	r3, [r2, #0]
 800ff8e:	600b      	str	r3, [r1, #0]
 800ff90:	7810      	ldrb	r0, [r2, #0]
 800ff92:	1e43      	subs	r3, r0, #1
 800ff94:	4198      	sbcs	r0, r3
 800ff96:	b002      	add	sp, #8
 800ff98:	4770      	bx	lr
 800ff9a:	2002      	movs	r0, #2
 800ff9c:	4240      	negs	r0, r0
 800ff9e:	e7fa      	b.n	800ff96 <__ascii_mbtowc+0x1a>

0800ffa0 <_realloc_r>:
 800ffa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffa2:	0006      	movs	r6, r0
 800ffa4:	000c      	movs	r4, r1
 800ffa6:	0015      	movs	r5, r2
 800ffa8:	2900      	cmp	r1, #0
 800ffaa:	d105      	bne.n	800ffb8 <_realloc_r+0x18>
 800ffac:	0011      	movs	r1, r2
 800ffae:	f7fd fdef 	bl	800db90 <_malloc_r>
 800ffb2:	0004      	movs	r4, r0
 800ffb4:	0020      	movs	r0, r4
 800ffb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	d103      	bne.n	800ffc4 <_realloc_r+0x24>
 800ffbc:	f7fd fd72 	bl	800daa4 <_free_r>
 800ffc0:	2400      	movs	r4, #0
 800ffc2:	e7f7      	b.n	800ffb4 <_realloc_r+0x14>
 800ffc4:	f000 f83f 	bl	8010046 <_malloc_usable_size_r>
 800ffc8:	0007      	movs	r7, r0
 800ffca:	4285      	cmp	r5, r0
 800ffcc:	d802      	bhi.n	800ffd4 <_realloc_r+0x34>
 800ffce:	0843      	lsrs	r3, r0, #1
 800ffd0:	42ab      	cmp	r3, r5
 800ffd2:	d3ef      	bcc.n	800ffb4 <_realloc_r+0x14>
 800ffd4:	0029      	movs	r1, r5
 800ffd6:	0030      	movs	r0, r6
 800ffd8:	f7fd fdda 	bl	800db90 <_malloc_r>
 800ffdc:	9001      	str	r0, [sp, #4]
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d0ee      	beq.n	800ffc0 <_realloc_r+0x20>
 800ffe2:	002a      	movs	r2, r5
 800ffe4:	42bd      	cmp	r5, r7
 800ffe6:	d900      	bls.n	800ffea <_realloc_r+0x4a>
 800ffe8:	003a      	movs	r2, r7
 800ffea:	0021      	movs	r1, r4
 800ffec:	9801      	ldr	r0, [sp, #4]
 800ffee:	f7ff fc0f 	bl	800f810 <memcpy>
 800fff2:	0021      	movs	r1, r4
 800fff4:	0030      	movs	r0, r6
 800fff6:	f7fd fd55 	bl	800daa4 <_free_r>
 800fffa:	9c01      	ldr	r4, [sp, #4]
 800fffc:	e7da      	b.n	800ffb4 <_realloc_r+0x14>

0800fffe <__ascii_wctomb>:
 800fffe:	0003      	movs	r3, r0
 8010000:	1e08      	subs	r0, r1, #0
 8010002:	d005      	beq.n	8010010 <__ascii_wctomb+0x12>
 8010004:	2aff      	cmp	r2, #255	@ 0xff
 8010006:	d904      	bls.n	8010012 <__ascii_wctomb+0x14>
 8010008:	228a      	movs	r2, #138	@ 0x8a
 801000a:	2001      	movs	r0, #1
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	4240      	negs	r0, r0
 8010010:	4770      	bx	lr
 8010012:	2001      	movs	r0, #1
 8010014:	700a      	strb	r2, [r1, #0]
 8010016:	e7fb      	b.n	8010010 <__ascii_wctomb+0x12>

08010018 <fiprintf>:
 8010018:	b40e      	push	{r1, r2, r3}
 801001a:	b517      	push	{r0, r1, r2, r4, lr}
 801001c:	4c05      	ldr	r4, [pc, #20]	@ (8010034 <fiprintf+0x1c>)
 801001e:	ab05      	add	r3, sp, #20
 8010020:	cb04      	ldmia	r3!, {r2}
 8010022:	0001      	movs	r1, r0
 8010024:	6820      	ldr	r0, [r4, #0]
 8010026:	9301      	str	r3, [sp, #4]
 8010028:	f000 f83c 	bl	80100a4 <_vfiprintf_r>
 801002c:	bc1e      	pop	{r1, r2, r3, r4}
 801002e:	bc08      	pop	{r3}
 8010030:	b003      	add	sp, #12
 8010032:	4718      	bx	r3
 8010034:	2000003c 	.word	0x2000003c

08010038 <abort>:
 8010038:	2006      	movs	r0, #6
 801003a:	b510      	push	{r4, lr}
 801003c:	f000 fa18 	bl	8010470 <raise>
 8010040:	2001      	movs	r0, #1
 8010042:	f7f6 fb4f 	bl	80066e4 <_exit>

08010046 <_malloc_usable_size_r>:
 8010046:	1f0b      	subs	r3, r1, #4
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	1f18      	subs	r0, r3, #4
 801004c:	2b00      	cmp	r3, #0
 801004e:	da01      	bge.n	8010054 <_malloc_usable_size_r+0xe>
 8010050:	580b      	ldr	r3, [r1, r0]
 8010052:	18c0      	adds	r0, r0, r3
 8010054:	4770      	bx	lr

08010056 <__sfputc_r>:
 8010056:	6893      	ldr	r3, [r2, #8]
 8010058:	b510      	push	{r4, lr}
 801005a:	3b01      	subs	r3, #1
 801005c:	6093      	str	r3, [r2, #8]
 801005e:	2b00      	cmp	r3, #0
 8010060:	da04      	bge.n	801006c <__sfputc_r+0x16>
 8010062:	6994      	ldr	r4, [r2, #24]
 8010064:	42a3      	cmp	r3, r4
 8010066:	db07      	blt.n	8010078 <__sfputc_r+0x22>
 8010068:	290a      	cmp	r1, #10
 801006a:	d005      	beq.n	8010078 <__sfputc_r+0x22>
 801006c:	6813      	ldr	r3, [r2, #0]
 801006e:	1c58      	adds	r0, r3, #1
 8010070:	6010      	str	r0, [r2, #0]
 8010072:	7019      	strb	r1, [r3, #0]
 8010074:	0008      	movs	r0, r1
 8010076:	bd10      	pop	{r4, pc}
 8010078:	f000 f930 	bl	80102dc <__swbuf_r>
 801007c:	0001      	movs	r1, r0
 801007e:	e7f9      	b.n	8010074 <__sfputc_r+0x1e>

08010080 <__sfputs_r>:
 8010080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010082:	0006      	movs	r6, r0
 8010084:	000f      	movs	r7, r1
 8010086:	0014      	movs	r4, r2
 8010088:	18d5      	adds	r5, r2, r3
 801008a:	42ac      	cmp	r4, r5
 801008c:	d101      	bne.n	8010092 <__sfputs_r+0x12>
 801008e:	2000      	movs	r0, #0
 8010090:	e007      	b.n	80100a2 <__sfputs_r+0x22>
 8010092:	7821      	ldrb	r1, [r4, #0]
 8010094:	003a      	movs	r2, r7
 8010096:	0030      	movs	r0, r6
 8010098:	f7ff ffdd 	bl	8010056 <__sfputc_r>
 801009c:	3401      	adds	r4, #1
 801009e:	1c43      	adds	r3, r0, #1
 80100a0:	d1f3      	bne.n	801008a <__sfputs_r+0xa>
 80100a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100a4 <_vfiprintf_r>:
 80100a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a6:	b0a1      	sub	sp, #132	@ 0x84
 80100a8:	000f      	movs	r7, r1
 80100aa:	0015      	movs	r5, r2
 80100ac:	001e      	movs	r6, r3
 80100ae:	9003      	str	r0, [sp, #12]
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d004      	beq.n	80100be <_vfiprintf_r+0x1a>
 80100b4:	6a03      	ldr	r3, [r0, #32]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d101      	bne.n	80100be <_vfiprintf_r+0x1a>
 80100ba:	f7fc fd3b 	bl	800cb34 <__sinit>
 80100be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100c0:	07db      	lsls	r3, r3, #31
 80100c2:	d405      	bmi.n	80100d0 <_vfiprintf_r+0x2c>
 80100c4:	89bb      	ldrh	r3, [r7, #12]
 80100c6:	059b      	lsls	r3, r3, #22
 80100c8:	d402      	bmi.n	80100d0 <_vfiprintf_r+0x2c>
 80100ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80100cc:	f7fc fe57 	bl	800cd7e <__retarget_lock_acquire_recursive>
 80100d0:	89bb      	ldrh	r3, [r7, #12]
 80100d2:	071b      	lsls	r3, r3, #28
 80100d4:	d502      	bpl.n	80100dc <_vfiprintf_r+0x38>
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d113      	bne.n	8010104 <_vfiprintf_r+0x60>
 80100dc:	0039      	movs	r1, r7
 80100de:	9803      	ldr	r0, [sp, #12]
 80100e0:	f000 f93e 	bl	8010360 <__swsetup_r>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d00d      	beq.n	8010104 <_vfiprintf_r+0x60>
 80100e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100ea:	07db      	lsls	r3, r3, #31
 80100ec:	d503      	bpl.n	80100f6 <_vfiprintf_r+0x52>
 80100ee:	2001      	movs	r0, #1
 80100f0:	4240      	negs	r0, r0
 80100f2:	b021      	add	sp, #132	@ 0x84
 80100f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f6:	89bb      	ldrh	r3, [r7, #12]
 80100f8:	059b      	lsls	r3, r3, #22
 80100fa:	d4f8      	bmi.n	80100ee <_vfiprintf_r+0x4a>
 80100fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80100fe:	f7fc fe3f 	bl	800cd80 <__retarget_lock_release_recursive>
 8010102:	e7f4      	b.n	80100ee <_vfiprintf_r+0x4a>
 8010104:	2300      	movs	r3, #0
 8010106:	ac08      	add	r4, sp, #32
 8010108:	6163      	str	r3, [r4, #20]
 801010a:	3320      	adds	r3, #32
 801010c:	7663      	strb	r3, [r4, #25]
 801010e:	3310      	adds	r3, #16
 8010110:	76a3      	strb	r3, [r4, #26]
 8010112:	9607      	str	r6, [sp, #28]
 8010114:	002e      	movs	r6, r5
 8010116:	7833      	ldrb	r3, [r6, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d001      	beq.n	8010120 <_vfiprintf_r+0x7c>
 801011c:	2b25      	cmp	r3, #37	@ 0x25
 801011e:	d148      	bne.n	80101b2 <_vfiprintf_r+0x10e>
 8010120:	1b73      	subs	r3, r6, r5
 8010122:	9305      	str	r3, [sp, #20]
 8010124:	42ae      	cmp	r6, r5
 8010126:	d00b      	beq.n	8010140 <_vfiprintf_r+0x9c>
 8010128:	002a      	movs	r2, r5
 801012a:	0039      	movs	r1, r7
 801012c:	9803      	ldr	r0, [sp, #12]
 801012e:	f7ff ffa7 	bl	8010080 <__sfputs_r>
 8010132:	3001      	adds	r0, #1
 8010134:	d100      	bne.n	8010138 <_vfiprintf_r+0x94>
 8010136:	e0ae      	b.n	8010296 <_vfiprintf_r+0x1f2>
 8010138:	6963      	ldr	r3, [r4, #20]
 801013a:	9a05      	ldr	r2, [sp, #20]
 801013c:	189b      	adds	r3, r3, r2
 801013e:	6163      	str	r3, [r4, #20]
 8010140:	7833      	ldrb	r3, [r6, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d100      	bne.n	8010148 <_vfiprintf_r+0xa4>
 8010146:	e0a6      	b.n	8010296 <_vfiprintf_r+0x1f2>
 8010148:	2201      	movs	r2, #1
 801014a:	2300      	movs	r3, #0
 801014c:	4252      	negs	r2, r2
 801014e:	6062      	str	r2, [r4, #4]
 8010150:	a904      	add	r1, sp, #16
 8010152:	3254      	adds	r2, #84	@ 0x54
 8010154:	1852      	adds	r2, r2, r1
 8010156:	1c75      	adds	r5, r6, #1
 8010158:	6023      	str	r3, [r4, #0]
 801015a:	60e3      	str	r3, [r4, #12]
 801015c:	60a3      	str	r3, [r4, #8]
 801015e:	7013      	strb	r3, [r2, #0]
 8010160:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010162:	4b59      	ldr	r3, [pc, #356]	@ (80102c8 <_vfiprintf_r+0x224>)
 8010164:	2205      	movs	r2, #5
 8010166:	0018      	movs	r0, r3
 8010168:	7829      	ldrb	r1, [r5, #0]
 801016a:	9305      	str	r3, [sp, #20]
 801016c:	f7fc fe09 	bl	800cd82 <memchr>
 8010170:	1c6e      	adds	r6, r5, #1
 8010172:	2800      	cmp	r0, #0
 8010174:	d11f      	bne.n	80101b6 <_vfiprintf_r+0x112>
 8010176:	6822      	ldr	r2, [r4, #0]
 8010178:	06d3      	lsls	r3, r2, #27
 801017a:	d504      	bpl.n	8010186 <_vfiprintf_r+0xe2>
 801017c:	2353      	movs	r3, #83	@ 0x53
 801017e:	a904      	add	r1, sp, #16
 8010180:	185b      	adds	r3, r3, r1
 8010182:	2120      	movs	r1, #32
 8010184:	7019      	strb	r1, [r3, #0]
 8010186:	0713      	lsls	r3, r2, #28
 8010188:	d504      	bpl.n	8010194 <_vfiprintf_r+0xf0>
 801018a:	2353      	movs	r3, #83	@ 0x53
 801018c:	a904      	add	r1, sp, #16
 801018e:	185b      	adds	r3, r3, r1
 8010190:	212b      	movs	r1, #43	@ 0x2b
 8010192:	7019      	strb	r1, [r3, #0]
 8010194:	782b      	ldrb	r3, [r5, #0]
 8010196:	2b2a      	cmp	r3, #42	@ 0x2a
 8010198:	d016      	beq.n	80101c8 <_vfiprintf_r+0x124>
 801019a:	002e      	movs	r6, r5
 801019c:	2100      	movs	r1, #0
 801019e:	200a      	movs	r0, #10
 80101a0:	68e3      	ldr	r3, [r4, #12]
 80101a2:	7832      	ldrb	r2, [r6, #0]
 80101a4:	1c75      	adds	r5, r6, #1
 80101a6:	3a30      	subs	r2, #48	@ 0x30
 80101a8:	2a09      	cmp	r2, #9
 80101aa:	d950      	bls.n	801024e <_vfiprintf_r+0x1aa>
 80101ac:	2900      	cmp	r1, #0
 80101ae:	d111      	bne.n	80101d4 <_vfiprintf_r+0x130>
 80101b0:	e017      	b.n	80101e2 <_vfiprintf_r+0x13e>
 80101b2:	3601      	adds	r6, #1
 80101b4:	e7af      	b.n	8010116 <_vfiprintf_r+0x72>
 80101b6:	9b05      	ldr	r3, [sp, #20]
 80101b8:	6822      	ldr	r2, [r4, #0]
 80101ba:	1ac0      	subs	r0, r0, r3
 80101bc:	2301      	movs	r3, #1
 80101be:	4083      	lsls	r3, r0
 80101c0:	4313      	orrs	r3, r2
 80101c2:	0035      	movs	r5, r6
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	e7cc      	b.n	8010162 <_vfiprintf_r+0xbe>
 80101c8:	9b07      	ldr	r3, [sp, #28]
 80101ca:	1d19      	adds	r1, r3, #4
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	9107      	str	r1, [sp, #28]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	db01      	blt.n	80101d8 <_vfiprintf_r+0x134>
 80101d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101d6:	e004      	b.n	80101e2 <_vfiprintf_r+0x13e>
 80101d8:	425b      	negs	r3, r3
 80101da:	60e3      	str	r3, [r4, #12]
 80101dc:	2302      	movs	r3, #2
 80101de:	4313      	orrs	r3, r2
 80101e0:	6023      	str	r3, [r4, #0]
 80101e2:	7833      	ldrb	r3, [r6, #0]
 80101e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80101e6:	d10c      	bne.n	8010202 <_vfiprintf_r+0x15e>
 80101e8:	7873      	ldrb	r3, [r6, #1]
 80101ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80101ec:	d134      	bne.n	8010258 <_vfiprintf_r+0x1b4>
 80101ee:	9b07      	ldr	r3, [sp, #28]
 80101f0:	3602      	adds	r6, #2
 80101f2:	1d1a      	adds	r2, r3, #4
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	9207      	str	r2, [sp, #28]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	da01      	bge.n	8010200 <_vfiprintf_r+0x15c>
 80101fc:	2301      	movs	r3, #1
 80101fe:	425b      	negs	r3, r3
 8010200:	9309      	str	r3, [sp, #36]	@ 0x24
 8010202:	4d32      	ldr	r5, [pc, #200]	@ (80102cc <_vfiprintf_r+0x228>)
 8010204:	2203      	movs	r2, #3
 8010206:	0028      	movs	r0, r5
 8010208:	7831      	ldrb	r1, [r6, #0]
 801020a:	f7fc fdba 	bl	800cd82 <memchr>
 801020e:	2800      	cmp	r0, #0
 8010210:	d006      	beq.n	8010220 <_vfiprintf_r+0x17c>
 8010212:	2340      	movs	r3, #64	@ 0x40
 8010214:	1b40      	subs	r0, r0, r5
 8010216:	4083      	lsls	r3, r0
 8010218:	6822      	ldr	r2, [r4, #0]
 801021a:	3601      	adds	r6, #1
 801021c:	4313      	orrs	r3, r2
 801021e:	6023      	str	r3, [r4, #0]
 8010220:	7831      	ldrb	r1, [r6, #0]
 8010222:	2206      	movs	r2, #6
 8010224:	482a      	ldr	r0, [pc, #168]	@ (80102d0 <_vfiprintf_r+0x22c>)
 8010226:	1c75      	adds	r5, r6, #1
 8010228:	7621      	strb	r1, [r4, #24]
 801022a:	f7fc fdaa 	bl	800cd82 <memchr>
 801022e:	2800      	cmp	r0, #0
 8010230:	d040      	beq.n	80102b4 <_vfiprintf_r+0x210>
 8010232:	4b28      	ldr	r3, [pc, #160]	@ (80102d4 <_vfiprintf_r+0x230>)
 8010234:	2b00      	cmp	r3, #0
 8010236:	d122      	bne.n	801027e <_vfiprintf_r+0x1da>
 8010238:	2207      	movs	r2, #7
 801023a:	9b07      	ldr	r3, [sp, #28]
 801023c:	3307      	adds	r3, #7
 801023e:	4393      	bics	r3, r2
 8010240:	3308      	adds	r3, #8
 8010242:	9307      	str	r3, [sp, #28]
 8010244:	6963      	ldr	r3, [r4, #20]
 8010246:	9a04      	ldr	r2, [sp, #16]
 8010248:	189b      	adds	r3, r3, r2
 801024a:	6163      	str	r3, [r4, #20]
 801024c:	e762      	b.n	8010114 <_vfiprintf_r+0x70>
 801024e:	4343      	muls	r3, r0
 8010250:	002e      	movs	r6, r5
 8010252:	2101      	movs	r1, #1
 8010254:	189b      	adds	r3, r3, r2
 8010256:	e7a4      	b.n	80101a2 <_vfiprintf_r+0xfe>
 8010258:	2300      	movs	r3, #0
 801025a:	200a      	movs	r0, #10
 801025c:	0019      	movs	r1, r3
 801025e:	3601      	adds	r6, #1
 8010260:	6063      	str	r3, [r4, #4]
 8010262:	7832      	ldrb	r2, [r6, #0]
 8010264:	1c75      	adds	r5, r6, #1
 8010266:	3a30      	subs	r2, #48	@ 0x30
 8010268:	2a09      	cmp	r2, #9
 801026a:	d903      	bls.n	8010274 <_vfiprintf_r+0x1d0>
 801026c:	2b00      	cmp	r3, #0
 801026e:	d0c8      	beq.n	8010202 <_vfiprintf_r+0x15e>
 8010270:	9109      	str	r1, [sp, #36]	@ 0x24
 8010272:	e7c6      	b.n	8010202 <_vfiprintf_r+0x15e>
 8010274:	4341      	muls	r1, r0
 8010276:	002e      	movs	r6, r5
 8010278:	2301      	movs	r3, #1
 801027a:	1889      	adds	r1, r1, r2
 801027c:	e7f1      	b.n	8010262 <_vfiprintf_r+0x1be>
 801027e:	aa07      	add	r2, sp, #28
 8010280:	9200      	str	r2, [sp, #0]
 8010282:	0021      	movs	r1, r4
 8010284:	003a      	movs	r2, r7
 8010286:	4b14      	ldr	r3, [pc, #80]	@ (80102d8 <_vfiprintf_r+0x234>)
 8010288:	9803      	ldr	r0, [sp, #12]
 801028a:	f7fb fdf9 	bl	800be80 <_printf_float>
 801028e:	9004      	str	r0, [sp, #16]
 8010290:	9b04      	ldr	r3, [sp, #16]
 8010292:	3301      	adds	r3, #1
 8010294:	d1d6      	bne.n	8010244 <_vfiprintf_r+0x1a0>
 8010296:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010298:	07db      	lsls	r3, r3, #31
 801029a:	d405      	bmi.n	80102a8 <_vfiprintf_r+0x204>
 801029c:	89bb      	ldrh	r3, [r7, #12]
 801029e:	059b      	lsls	r3, r3, #22
 80102a0:	d402      	bmi.n	80102a8 <_vfiprintf_r+0x204>
 80102a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80102a4:	f7fc fd6c 	bl	800cd80 <__retarget_lock_release_recursive>
 80102a8:	89bb      	ldrh	r3, [r7, #12]
 80102aa:	065b      	lsls	r3, r3, #25
 80102ac:	d500      	bpl.n	80102b0 <_vfiprintf_r+0x20c>
 80102ae:	e71e      	b.n	80100ee <_vfiprintf_r+0x4a>
 80102b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80102b2:	e71e      	b.n	80100f2 <_vfiprintf_r+0x4e>
 80102b4:	aa07      	add	r2, sp, #28
 80102b6:	9200      	str	r2, [sp, #0]
 80102b8:	0021      	movs	r1, r4
 80102ba:	003a      	movs	r2, r7
 80102bc:	4b06      	ldr	r3, [pc, #24]	@ (80102d8 <_vfiprintf_r+0x234>)
 80102be:	9803      	ldr	r0, [sp, #12]
 80102c0:	f7fc f88c 	bl	800c3dc <_printf_i>
 80102c4:	e7e3      	b.n	801028e <_vfiprintf_r+0x1ea>
 80102c6:	46c0      	nop			@ (mov r8, r8)
 80102c8:	08011181 	.word	0x08011181
 80102cc:	08011187 	.word	0x08011187
 80102d0:	0801118b 	.word	0x0801118b
 80102d4:	0800be81 	.word	0x0800be81
 80102d8:	08010081 	.word	0x08010081

080102dc <__swbuf_r>:
 80102dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102de:	0006      	movs	r6, r0
 80102e0:	000d      	movs	r5, r1
 80102e2:	0014      	movs	r4, r2
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d004      	beq.n	80102f2 <__swbuf_r+0x16>
 80102e8:	6a03      	ldr	r3, [r0, #32]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d101      	bne.n	80102f2 <__swbuf_r+0x16>
 80102ee:	f7fc fc21 	bl	800cb34 <__sinit>
 80102f2:	69a3      	ldr	r3, [r4, #24]
 80102f4:	60a3      	str	r3, [r4, #8]
 80102f6:	89a3      	ldrh	r3, [r4, #12]
 80102f8:	071b      	lsls	r3, r3, #28
 80102fa:	d502      	bpl.n	8010302 <__swbuf_r+0x26>
 80102fc:	6923      	ldr	r3, [r4, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d109      	bne.n	8010316 <__swbuf_r+0x3a>
 8010302:	0021      	movs	r1, r4
 8010304:	0030      	movs	r0, r6
 8010306:	f000 f82b 	bl	8010360 <__swsetup_r>
 801030a:	2800      	cmp	r0, #0
 801030c:	d003      	beq.n	8010316 <__swbuf_r+0x3a>
 801030e:	2501      	movs	r5, #1
 8010310:	426d      	negs	r5, r5
 8010312:	0028      	movs	r0, r5
 8010314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010316:	6923      	ldr	r3, [r4, #16]
 8010318:	6820      	ldr	r0, [r4, #0]
 801031a:	b2ef      	uxtb	r7, r5
 801031c:	1ac0      	subs	r0, r0, r3
 801031e:	6963      	ldr	r3, [r4, #20]
 8010320:	b2ed      	uxtb	r5, r5
 8010322:	4283      	cmp	r3, r0
 8010324:	dc05      	bgt.n	8010332 <__swbuf_r+0x56>
 8010326:	0021      	movs	r1, r4
 8010328:	0030      	movs	r0, r6
 801032a:	f7ff fa0f 	bl	800f74c <_fflush_r>
 801032e:	2800      	cmp	r0, #0
 8010330:	d1ed      	bne.n	801030e <__swbuf_r+0x32>
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	3001      	adds	r0, #1
 8010336:	3b01      	subs	r3, #1
 8010338:	60a3      	str	r3, [r4, #8]
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	6022      	str	r2, [r4, #0]
 8010340:	701f      	strb	r7, [r3, #0]
 8010342:	6963      	ldr	r3, [r4, #20]
 8010344:	4283      	cmp	r3, r0
 8010346:	d004      	beq.n	8010352 <__swbuf_r+0x76>
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	07db      	lsls	r3, r3, #31
 801034c:	d5e1      	bpl.n	8010312 <__swbuf_r+0x36>
 801034e:	2d0a      	cmp	r5, #10
 8010350:	d1df      	bne.n	8010312 <__swbuf_r+0x36>
 8010352:	0021      	movs	r1, r4
 8010354:	0030      	movs	r0, r6
 8010356:	f7ff f9f9 	bl	800f74c <_fflush_r>
 801035a:	2800      	cmp	r0, #0
 801035c:	d0d9      	beq.n	8010312 <__swbuf_r+0x36>
 801035e:	e7d6      	b.n	801030e <__swbuf_r+0x32>

08010360 <__swsetup_r>:
 8010360:	4b2d      	ldr	r3, [pc, #180]	@ (8010418 <__swsetup_r+0xb8>)
 8010362:	b570      	push	{r4, r5, r6, lr}
 8010364:	0005      	movs	r5, r0
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	000c      	movs	r4, r1
 801036a:	2800      	cmp	r0, #0
 801036c:	d004      	beq.n	8010378 <__swsetup_r+0x18>
 801036e:	6a03      	ldr	r3, [r0, #32]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d101      	bne.n	8010378 <__swsetup_r+0x18>
 8010374:	f7fc fbde 	bl	800cb34 <__sinit>
 8010378:	230c      	movs	r3, #12
 801037a:	5ee2      	ldrsh	r2, [r4, r3]
 801037c:	0713      	lsls	r3, r2, #28
 801037e:	d423      	bmi.n	80103c8 <__swsetup_r+0x68>
 8010380:	06d3      	lsls	r3, r2, #27
 8010382:	d407      	bmi.n	8010394 <__swsetup_r+0x34>
 8010384:	2309      	movs	r3, #9
 8010386:	602b      	str	r3, [r5, #0]
 8010388:	2340      	movs	r3, #64	@ 0x40
 801038a:	2001      	movs	r0, #1
 801038c:	4313      	orrs	r3, r2
 801038e:	81a3      	strh	r3, [r4, #12]
 8010390:	4240      	negs	r0, r0
 8010392:	e03a      	b.n	801040a <__swsetup_r+0xaa>
 8010394:	0752      	lsls	r2, r2, #29
 8010396:	d513      	bpl.n	80103c0 <__swsetup_r+0x60>
 8010398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801039a:	2900      	cmp	r1, #0
 801039c:	d008      	beq.n	80103b0 <__swsetup_r+0x50>
 801039e:	0023      	movs	r3, r4
 80103a0:	3344      	adds	r3, #68	@ 0x44
 80103a2:	4299      	cmp	r1, r3
 80103a4:	d002      	beq.n	80103ac <__swsetup_r+0x4c>
 80103a6:	0028      	movs	r0, r5
 80103a8:	f7fd fb7c 	bl	800daa4 <_free_r>
 80103ac:	2300      	movs	r3, #0
 80103ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80103b0:	2224      	movs	r2, #36	@ 0x24
 80103b2:	89a3      	ldrh	r3, [r4, #12]
 80103b4:	4393      	bics	r3, r2
 80103b6:	81a3      	strh	r3, [r4, #12]
 80103b8:	2300      	movs	r3, #0
 80103ba:	6063      	str	r3, [r4, #4]
 80103bc:	6923      	ldr	r3, [r4, #16]
 80103be:	6023      	str	r3, [r4, #0]
 80103c0:	2308      	movs	r3, #8
 80103c2:	89a2      	ldrh	r2, [r4, #12]
 80103c4:	4313      	orrs	r3, r2
 80103c6:	81a3      	strh	r3, [r4, #12]
 80103c8:	6923      	ldr	r3, [r4, #16]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d10b      	bne.n	80103e6 <__swsetup_r+0x86>
 80103ce:	21a0      	movs	r1, #160	@ 0xa0
 80103d0:	2280      	movs	r2, #128	@ 0x80
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	0089      	lsls	r1, r1, #2
 80103d6:	0092      	lsls	r2, r2, #2
 80103d8:	400b      	ands	r3, r1
 80103da:	4293      	cmp	r3, r2
 80103dc:	d003      	beq.n	80103e6 <__swsetup_r+0x86>
 80103de:	0021      	movs	r1, r4
 80103e0:	0028      	movs	r0, r5
 80103e2:	f000 f88f 	bl	8010504 <__smakebuf_r>
 80103e6:	230c      	movs	r3, #12
 80103e8:	5ee2      	ldrsh	r2, [r4, r3]
 80103ea:	2101      	movs	r1, #1
 80103ec:	0013      	movs	r3, r2
 80103ee:	400b      	ands	r3, r1
 80103f0:	420a      	tst	r2, r1
 80103f2:	d00b      	beq.n	801040c <__swsetup_r+0xac>
 80103f4:	2300      	movs	r3, #0
 80103f6:	60a3      	str	r3, [r4, #8]
 80103f8:	6963      	ldr	r3, [r4, #20]
 80103fa:	425b      	negs	r3, r3
 80103fc:	61a3      	str	r3, [r4, #24]
 80103fe:	2000      	movs	r0, #0
 8010400:	6923      	ldr	r3, [r4, #16]
 8010402:	4283      	cmp	r3, r0
 8010404:	d101      	bne.n	801040a <__swsetup_r+0xaa>
 8010406:	0613      	lsls	r3, r2, #24
 8010408:	d4be      	bmi.n	8010388 <__swsetup_r+0x28>
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	0791      	lsls	r1, r2, #30
 801040e:	d400      	bmi.n	8010412 <__swsetup_r+0xb2>
 8010410:	6963      	ldr	r3, [r4, #20]
 8010412:	60a3      	str	r3, [r4, #8]
 8010414:	e7f3      	b.n	80103fe <__swsetup_r+0x9e>
 8010416:	46c0      	nop			@ (mov r8, r8)
 8010418:	2000003c 	.word	0x2000003c

0801041c <_raise_r>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	0004      	movs	r4, r0
 8010420:	000d      	movs	r5, r1
 8010422:	291f      	cmp	r1, #31
 8010424:	d904      	bls.n	8010430 <_raise_r+0x14>
 8010426:	2316      	movs	r3, #22
 8010428:	6003      	str	r3, [r0, #0]
 801042a:	2001      	movs	r0, #1
 801042c:	4240      	negs	r0, r0
 801042e:	bd70      	pop	{r4, r5, r6, pc}
 8010430:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010432:	2b00      	cmp	r3, #0
 8010434:	d004      	beq.n	8010440 <_raise_r+0x24>
 8010436:	008a      	lsls	r2, r1, #2
 8010438:	189b      	adds	r3, r3, r2
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	2a00      	cmp	r2, #0
 801043e:	d108      	bne.n	8010452 <_raise_r+0x36>
 8010440:	0020      	movs	r0, r4
 8010442:	f000 f831 	bl	80104a8 <_getpid_r>
 8010446:	002a      	movs	r2, r5
 8010448:	0001      	movs	r1, r0
 801044a:	0020      	movs	r0, r4
 801044c:	f000 f81a 	bl	8010484 <_kill_r>
 8010450:	e7ed      	b.n	801042e <_raise_r+0x12>
 8010452:	2a01      	cmp	r2, #1
 8010454:	d009      	beq.n	801046a <_raise_r+0x4e>
 8010456:	1c51      	adds	r1, r2, #1
 8010458:	d103      	bne.n	8010462 <_raise_r+0x46>
 801045a:	2316      	movs	r3, #22
 801045c:	6003      	str	r3, [r0, #0]
 801045e:	2001      	movs	r0, #1
 8010460:	e7e5      	b.n	801042e <_raise_r+0x12>
 8010462:	2100      	movs	r1, #0
 8010464:	0028      	movs	r0, r5
 8010466:	6019      	str	r1, [r3, #0]
 8010468:	4790      	blx	r2
 801046a:	2000      	movs	r0, #0
 801046c:	e7df      	b.n	801042e <_raise_r+0x12>
	...

08010470 <raise>:
 8010470:	b510      	push	{r4, lr}
 8010472:	4b03      	ldr	r3, [pc, #12]	@ (8010480 <raise+0x10>)
 8010474:	0001      	movs	r1, r0
 8010476:	6818      	ldr	r0, [r3, #0]
 8010478:	f7ff ffd0 	bl	801041c <_raise_r>
 801047c:	bd10      	pop	{r4, pc}
 801047e:	46c0      	nop			@ (mov r8, r8)
 8010480:	2000003c 	.word	0x2000003c

08010484 <_kill_r>:
 8010484:	2300      	movs	r3, #0
 8010486:	b570      	push	{r4, r5, r6, lr}
 8010488:	4d06      	ldr	r5, [pc, #24]	@ (80104a4 <_kill_r+0x20>)
 801048a:	0004      	movs	r4, r0
 801048c:	0008      	movs	r0, r1
 801048e:	0011      	movs	r1, r2
 8010490:	602b      	str	r3, [r5, #0]
 8010492:	f7f6 f917 	bl	80066c4 <_kill>
 8010496:	1c43      	adds	r3, r0, #1
 8010498:	d103      	bne.n	80104a2 <_kill_r+0x1e>
 801049a:	682b      	ldr	r3, [r5, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d000      	beq.n	80104a2 <_kill_r+0x1e>
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	bd70      	pop	{r4, r5, r6, pc}
 80104a4:	200007dc 	.word	0x200007dc

080104a8 <_getpid_r>:
 80104a8:	b510      	push	{r4, lr}
 80104aa:	f7f6 f905 	bl	80066b8 <_getpid>
 80104ae:	bd10      	pop	{r4, pc}

080104b0 <__swhatbuf_r>:
 80104b0:	b570      	push	{r4, r5, r6, lr}
 80104b2:	000e      	movs	r6, r1
 80104b4:	001d      	movs	r5, r3
 80104b6:	230e      	movs	r3, #14
 80104b8:	5ec9      	ldrsh	r1, [r1, r3]
 80104ba:	0014      	movs	r4, r2
 80104bc:	b096      	sub	sp, #88	@ 0x58
 80104be:	2900      	cmp	r1, #0
 80104c0:	da0c      	bge.n	80104dc <__swhatbuf_r+0x2c>
 80104c2:	89b2      	ldrh	r2, [r6, #12]
 80104c4:	2380      	movs	r3, #128	@ 0x80
 80104c6:	0011      	movs	r1, r2
 80104c8:	4019      	ands	r1, r3
 80104ca:	421a      	tst	r2, r3
 80104cc:	d114      	bne.n	80104f8 <__swhatbuf_r+0x48>
 80104ce:	2380      	movs	r3, #128	@ 0x80
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	2000      	movs	r0, #0
 80104d4:	6029      	str	r1, [r5, #0]
 80104d6:	6023      	str	r3, [r4, #0]
 80104d8:	b016      	add	sp, #88	@ 0x58
 80104da:	bd70      	pop	{r4, r5, r6, pc}
 80104dc:	466a      	mov	r2, sp
 80104de:	f000 f853 	bl	8010588 <_fstat_r>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	dbed      	blt.n	80104c2 <__swhatbuf_r+0x12>
 80104e6:	23f0      	movs	r3, #240	@ 0xf0
 80104e8:	9901      	ldr	r1, [sp, #4]
 80104ea:	021b      	lsls	r3, r3, #8
 80104ec:	4019      	ands	r1, r3
 80104ee:	4b04      	ldr	r3, [pc, #16]	@ (8010500 <__swhatbuf_r+0x50>)
 80104f0:	18c9      	adds	r1, r1, r3
 80104f2:	424b      	negs	r3, r1
 80104f4:	4159      	adcs	r1, r3
 80104f6:	e7ea      	b.n	80104ce <__swhatbuf_r+0x1e>
 80104f8:	2100      	movs	r1, #0
 80104fa:	2340      	movs	r3, #64	@ 0x40
 80104fc:	e7e9      	b.n	80104d2 <__swhatbuf_r+0x22>
 80104fe:	46c0      	nop			@ (mov r8, r8)
 8010500:	ffffe000 	.word	0xffffe000

08010504 <__smakebuf_r>:
 8010504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010506:	2602      	movs	r6, #2
 8010508:	898b      	ldrh	r3, [r1, #12]
 801050a:	0005      	movs	r5, r0
 801050c:	000c      	movs	r4, r1
 801050e:	b085      	sub	sp, #20
 8010510:	4233      	tst	r3, r6
 8010512:	d007      	beq.n	8010524 <__smakebuf_r+0x20>
 8010514:	0023      	movs	r3, r4
 8010516:	3347      	adds	r3, #71	@ 0x47
 8010518:	6023      	str	r3, [r4, #0]
 801051a:	6123      	str	r3, [r4, #16]
 801051c:	2301      	movs	r3, #1
 801051e:	6163      	str	r3, [r4, #20]
 8010520:	b005      	add	sp, #20
 8010522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010524:	ab03      	add	r3, sp, #12
 8010526:	aa02      	add	r2, sp, #8
 8010528:	f7ff ffc2 	bl	80104b0 <__swhatbuf_r>
 801052c:	9f02      	ldr	r7, [sp, #8]
 801052e:	9001      	str	r0, [sp, #4]
 8010530:	0039      	movs	r1, r7
 8010532:	0028      	movs	r0, r5
 8010534:	f7fd fb2c 	bl	800db90 <_malloc_r>
 8010538:	2800      	cmp	r0, #0
 801053a:	d108      	bne.n	801054e <__smakebuf_r+0x4a>
 801053c:	220c      	movs	r2, #12
 801053e:	5ea3      	ldrsh	r3, [r4, r2]
 8010540:	059a      	lsls	r2, r3, #22
 8010542:	d4ed      	bmi.n	8010520 <__smakebuf_r+0x1c>
 8010544:	2203      	movs	r2, #3
 8010546:	4393      	bics	r3, r2
 8010548:	431e      	orrs	r6, r3
 801054a:	81a6      	strh	r6, [r4, #12]
 801054c:	e7e2      	b.n	8010514 <__smakebuf_r+0x10>
 801054e:	2380      	movs	r3, #128	@ 0x80
 8010550:	89a2      	ldrh	r2, [r4, #12]
 8010552:	6020      	str	r0, [r4, #0]
 8010554:	4313      	orrs	r3, r2
 8010556:	81a3      	strh	r3, [r4, #12]
 8010558:	9b03      	ldr	r3, [sp, #12]
 801055a:	6120      	str	r0, [r4, #16]
 801055c:	6167      	str	r7, [r4, #20]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00c      	beq.n	801057c <__smakebuf_r+0x78>
 8010562:	0028      	movs	r0, r5
 8010564:	230e      	movs	r3, #14
 8010566:	5ee1      	ldrsh	r1, [r4, r3]
 8010568:	f000 f820 	bl	80105ac <_isatty_r>
 801056c:	2800      	cmp	r0, #0
 801056e:	d005      	beq.n	801057c <__smakebuf_r+0x78>
 8010570:	2303      	movs	r3, #3
 8010572:	89a2      	ldrh	r2, [r4, #12]
 8010574:	439a      	bics	r2, r3
 8010576:	3b02      	subs	r3, #2
 8010578:	4313      	orrs	r3, r2
 801057a:	81a3      	strh	r3, [r4, #12]
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	9a01      	ldr	r2, [sp, #4]
 8010580:	4313      	orrs	r3, r2
 8010582:	81a3      	strh	r3, [r4, #12]
 8010584:	e7cc      	b.n	8010520 <__smakebuf_r+0x1c>
	...

08010588 <_fstat_r>:
 8010588:	2300      	movs	r3, #0
 801058a:	b570      	push	{r4, r5, r6, lr}
 801058c:	4d06      	ldr	r5, [pc, #24]	@ (80105a8 <_fstat_r+0x20>)
 801058e:	0004      	movs	r4, r0
 8010590:	0008      	movs	r0, r1
 8010592:	0011      	movs	r1, r2
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	f7f6 f8f5 	bl	8006784 <_fstat>
 801059a:	1c43      	adds	r3, r0, #1
 801059c:	d103      	bne.n	80105a6 <_fstat_r+0x1e>
 801059e:	682b      	ldr	r3, [r5, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d000      	beq.n	80105a6 <_fstat_r+0x1e>
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	bd70      	pop	{r4, r5, r6, pc}
 80105a8:	200007dc 	.word	0x200007dc

080105ac <_isatty_r>:
 80105ac:	2300      	movs	r3, #0
 80105ae:	b570      	push	{r4, r5, r6, lr}
 80105b0:	4d06      	ldr	r5, [pc, #24]	@ (80105cc <_isatty_r+0x20>)
 80105b2:	0004      	movs	r4, r0
 80105b4:	0008      	movs	r0, r1
 80105b6:	602b      	str	r3, [r5, #0]
 80105b8:	f7f6 f8f2 	bl	80067a0 <_isatty>
 80105bc:	1c43      	adds	r3, r0, #1
 80105be:	d103      	bne.n	80105c8 <_isatty_r+0x1c>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d000      	beq.n	80105c8 <_isatty_r+0x1c>
 80105c6:	6023      	str	r3, [r4, #0]
 80105c8:	bd70      	pop	{r4, r5, r6, pc}
 80105ca:	46c0      	nop			@ (mov r8, r8)
 80105cc:	200007dc 	.word	0x200007dc

080105d0 <asinf>:
 80105d0:	b570      	push	{r4, r5, r6, lr}
 80105d2:	1c05      	adds	r5, r0, #0
 80105d4:	f000 f8b8 	bl	8010748 <__ieee754_asinf>
 80105d8:	1c29      	adds	r1, r5, #0
 80105da:	1c04      	adds	r4, r0, #0
 80105dc:	1c28      	adds	r0, r5, #0
 80105de:	f7f0 fe75 	bl	80012cc <__aeabi_fcmpun>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d110      	bne.n	8010608 <asinf+0x38>
 80105e6:	1c28      	adds	r0, r5, #0
 80105e8:	f000 f832 	bl	8010650 <fabsf>
 80105ec:	21fe      	movs	r1, #254	@ 0xfe
 80105ee:	0589      	lsls	r1, r1, #22
 80105f0:	f7ef ff80 	bl	80004f4 <__aeabi_fcmpgt>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d007      	beq.n	8010608 <asinf+0x38>
 80105f8:	f7fc fb96 	bl	800cd28 <__errno>
 80105fc:	2321      	movs	r3, #33	@ 0x21
 80105fe:	6003      	str	r3, [r0, #0]
 8010600:	4802      	ldr	r0, [pc, #8]	@ (801060c <asinf+0x3c>)
 8010602:	f7fc fbc9 	bl	800cd98 <nanf>
 8010606:	1c04      	adds	r4, r0, #0
 8010608:	1c20      	adds	r0, r4, #0
 801060a:	bd70      	pop	{r4, r5, r6, pc}
 801060c:	080111d5 	.word	0x080111d5

08010610 <atan2f>:
 8010610:	b510      	push	{r4, lr}
 8010612:	f000 f9e1 	bl	80109d8 <__ieee754_atan2f>
 8010616:	bd10      	pop	{r4, pc}

08010618 <sqrtf>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	1c05      	adds	r5, r0, #0
 801061c:	f000 f81c 	bl	8010658 <__ieee754_sqrtf>
 8010620:	1c29      	adds	r1, r5, #0
 8010622:	1c04      	adds	r4, r0, #0
 8010624:	1c28      	adds	r0, r5, #0
 8010626:	f7f0 fe51 	bl	80012cc <__aeabi_fcmpun>
 801062a:	2800      	cmp	r0, #0
 801062c:	d10e      	bne.n	801064c <sqrtf+0x34>
 801062e:	2100      	movs	r1, #0
 8010630:	1c28      	adds	r0, r5, #0
 8010632:	f7ef ff4b 	bl	80004cc <__aeabi_fcmplt>
 8010636:	2800      	cmp	r0, #0
 8010638:	d008      	beq.n	801064c <sqrtf+0x34>
 801063a:	f7fc fb75 	bl	800cd28 <__errno>
 801063e:	2321      	movs	r3, #33	@ 0x21
 8010640:	2100      	movs	r1, #0
 8010642:	6003      	str	r3, [r0, #0]
 8010644:	1c08      	adds	r0, r1, #0
 8010646:	f7f0 f979 	bl	800093c <__aeabi_fdiv>
 801064a:	1c04      	adds	r4, r0, #0
 801064c:	1c20      	adds	r0, r4, #0
 801064e:	bd70      	pop	{r4, r5, r6, pc}

08010650 <fabsf>:
 8010650:	0040      	lsls	r0, r0, #1
 8010652:	0840      	lsrs	r0, r0, #1
 8010654:	4770      	bx	lr
	...

08010658 <__ieee754_sqrtf>:
 8010658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801065a:	0003      	movs	r3, r0
 801065c:	0042      	lsls	r2, r0, #1
 801065e:	1c04      	adds	r4, r0, #0
 8010660:	20ff      	movs	r0, #255	@ 0xff
 8010662:	0852      	lsrs	r2, r2, #1
 8010664:	05c0      	lsls	r0, r0, #23
 8010666:	4282      	cmp	r2, r0
 8010668:	d30a      	bcc.n	8010680 <__ieee754_sqrtf+0x28>
 801066a:	1c21      	adds	r1, r4, #0
 801066c:	1c20      	adds	r0, r4, #0
 801066e:	f7f0 fb4b 	bl	8000d08 <__aeabi_fmul>
 8010672:	1c01      	adds	r1, r0, #0
 8010674:	1c20      	adds	r0, r4, #0
 8010676:	f7ef ffd7 	bl	8000628 <__aeabi_fadd>
 801067a:	1c04      	adds	r4, r0, #0
 801067c:	1c20      	adds	r0, r4, #0
 801067e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010680:	2a00      	cmp	r2, #0
 8010682:	d0fb      	beq.n	801067c <__ieee754_sqrtf+0x24>
 8010684:	2c00      	cmp	r4, #0
 8010686:	da07      	bge.n	8010698 <__ieee754_sqrtf+0x40>
 8010688:	1c21      	adds	r1, r4, #0
 801068a:	1c20      	adds	r0, r4, #0
 801068c:	f7f0 fc7a 	bl	8000f84 <__aeabi_fsub>
 8010690:	1c01      	adds	r1, r0, #0
 8010692:	f7f0 f953 	bl	800093c <__aeabi_fdiv>
 8010696:	e7f0      	b.n	801067a <__ieee754_sqrtf+0x22>
 8010698:	0022      	movs	r2, r4
 801069a:	15e1      	asrs	r1, r4, #23
 801069c:	4002      	ands	r2, r0
 801069e:	4204      	tst	r4, r0
 80106a0:	d046      	beq.n	8010730 <__ieee754_sqrtf+0xd8>
 80106a2:	2280      	movs	r2, #128	@ 0x80
 80106a4:	000f      	movs	r7, r1
 80106a6:	025b      	lsls	r3, r3, #9
 80106a8:	0a5b      	lsrs	r3, r3, #9
 80106aa:	0412      	lsls	r2, r2, #16
 80106ac:	3f7f      	subs	r7, #127	@ 0x7f
 80106ae:	4313      	orrs	r3, r2
 80106b0:	07c9      	lsls	r1, r1, #31
 80106b2:	d400      	bmi.n	80106b6 <__ieee754_sqrtf+0x5e>
 80106b4:	005b      	lsls	r3, r3, #1
 80106b6:	2400      	movs	r4, #0
 80106b8:	2180      	movs	r1, #128	@ 0x80
 80106ba:	2019      	movs	r0, #25
 80106bc:	0026      	movs	r6, r4
 80106be:	107f      	asrs	r7, r7, #1
 80106c0:	005b      	lsls	r3, r3, #1
 80106c2:	0449      	lsls	r1, r1, #17
 80106c4:	1875      	adds	r5, r6, r1
 80106c6:	001a      	movs	r2, r3
 80106c8:	429d      	cmp	r5, r3
 80106ca:	dc02      	bgt.n	80106d2 <__ieee754_sqrtf+0x7a>
 80106cc:	186e      	adds	r6, r5, r1
 80106ce:	1b5a      	subs	r2, r3, r5
 80106d0:	1864      	adds	r4, r4, r1
 80106d2:	3801      	subs	r0, #1
 80106d4:	0053      	lsls	r3, r2, #1
 80106d6:	0849      	lsrs	r1, r1, #1
 80106d8:	2800      	cmp	r0, #0
 80106da:	d1f3      	bne.n	80106c4 <__ieee754_sqrtf+0x6c>
 80106dc:	2a00      	cmp	r2, #0
 80106de:	d019      	beq.n	8010714 <__ieee754_sqrtf+0xbc>
 80106e0:	4d17      	ldr	r5, [pc, #92]	@ (8010740 <__ieee754_sqrtf+0xe8>)
 80106e2:	4e18      	ldr	r6, [pc, #96]	@ (8010744 <__ieee754_sqrtf+0xec>)
 80106e4:	6828      	ldr	r0, [r5, #0]
 80106e6:	6831      	ldr	r1, [r6, #0]
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	9301      	str	r3, [sp, #4]
 80106ec:	f7f0 fc4a 	bl	8000f84 <__aeabi_fsub>
 80106f0:	1c01      	adds	r1, r0, #0
 80106f2:	9801      	ldr	r0, [sp, #4]
 80106f4:	f7ef fef4 	bl	80004e0 <__aeabi_fcmple>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d00b      	beq.n	8010714 <__ieee754_sqrtf+0xbc>
 80106fc:	6828      	ldr	r0, [r5, #0]
 80106fe:	6831      	ldr	r1, [r6, #0]
 8010700:	f7ef ff92 	bl	8000628 <__aeabi_fadd>
 8010704:	682d      	ldr	r5, [r5, #0]
 8010706:	1c01      	adds	r1, r0, #0
 8010708:	1c28      	adds	r0, r5, #0
 801070a:	f7ef fedf 	bl	80004cc <__aeabi_fcmplt>
 801070e:	2800      	cmp	r0, #0
 8010710:	d011      	beq.n	8010736 <__ieee754_sqrtf+0xde>
 8010712:	3402      	adds	r4, #2
 8010714:	23fc      	movs	r3, #252	@ 0xfc
 8010716:	1064      	asrs	r4, r4, #1
 8010718:	059b      	lsls	r3, r3, #22
 801071a:	18e3      	adds	r3, r4, r3
 801071c:	05fc      	lsls	r4, r7, #23
 801071e:	18e4      	adds	r4, r4, r3
 8010720:	e7ac      	b.n	801067c <__ieee754_sqrtf+0x24>
 8010722:	005b      	lsls	r3, r3, #1
 8010724:	3201      	adds	r2, #1
 8010726:	4203      	tst	r3, r0
 8010728:	d0fb      	beq.n	8010722 <__ieee754_sqrtf+0xca>
 801072a:	3a01      	subs	r2, #1
 801072c:	1a89      	subs	r1, r1, r2
 801072e:	e7b8      	b.n	80106a2 <__ieee754_sqrtf+0x4a>
 8010730:	2080      	movs	r0, #128	@ 0x80
 8010732:	0400      	lsls	r0, r0, #16
 8010734:	e7f7      	b.n	8010726 <__ieee754_sqrtf+0xce>
 8010736:	2301      	movs	r3, #1
 8010738:	3401      	adds	r4, #1
 801073a:	439c      	bics	r4, r3
 801073c:	e7ea      	b.n	8010714 <__ieee754_sqrtf+0xbc>
 801073e:	46c0      	nop			@ (mov r8, r8)
 8010740:	200001fc 	.word	0x200001fc
 8010744:	200001f8 	.word	0x200001f8

08010748 <__ieee754_asinf>:
 8010748:	23fe      	movs	r3, #254	@ 0xfe
 801074a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801074c:	0046      	lsls	r6, r0, #1
 801074e:	b085      	sub	sp, #20
 8010750:	1c04      	adds	r4, r0, #0
 8010752:	9002      	str	r0, [sp, #8]
 8010754:	0876      	lsrs	r6, r6, #1
 8010756:	059b      	lsls	r3, r3, #22
 8010758:	429e      	cmp	r6, r3
 801075a:	d10c      	bne.n	8010776 <__ieee754_asinf+0x2e>
 801075c:	498e      	ldr	r1, [pc, #568]	@ (8010998 <__ieee754_asinf+0x250>)
 801075e:	f7f0 fad3 	bl	8000d08 <__aeabi_fmul>
 8010762:	498e      	ldr	r1, [pc, #568]	@ (801099c <__ieee754_asinf+0x254>)
 8010764:	1c05      	adds	r5, r0, #0
 8010766:	1c20      	adds	r0, r4, #0
 8010768:	f7f0 face 	bl	8000d08 <__aeabi_fmul>
 801076c:	1c01      	adds	r1, r0, #0
 801076e:	1c28      	adds	r0, r5, #0
 8010770:	f7ef ff5a 	bl	8000628 <__aeabi_fadd>
 8010774:	e007      	b.n	8010786 <__ieee754_asinf+0x3e>
 8010776:	429e      	cmp	r6, r3
 8010778:	d909      	bls.n	801078e <__ieee754_asinf+0x46>
 801077a:	1c01      	adds	r1, r0, #0
 801077c:	f7f0 fc02 	bl	8000f84 <__aeabi_fsub>
 8010780:	1c01      	adds	r1, r0, #0
 8010782:	f7f0 f8db 	bl	800093c <__aeabi_fdiv>
 8010786:	1c04      	adds	r4, r0, #0
 8010788:	1c20      	adds	r0, r4, #0
 801078a:	b005      	add	sp, #20
 801078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801078e:	23fc      	movs	r3, #252	@ 0xfc
 8010790:	059b      	lsls	r3, r3, #22
 8010792:	429e      	cmp	r6, r3
 8010794:	d20c      	bcs.n	80107b0 <__ieee754_asinf+0x68>
 8010796:	23c8      	movs	r3, #200	@ 0xc8
 8010798:	059b      	lsls	r3, r3, #22
 801079a:	429e      	cmp	r6, r3
 801079c:	d276      	bcs.n	801088c <__ieee754_asinf+0x144>
 801079e:	4980      	ldr	r1, [pc, #512]	@ (80109a0 <__ieee754_asinf+0x258>)
 80107a0:	f7ef ff42 	bl	8000628 <__aeabi_fadd>
 80107a4:	21fe      	movs	r1, #254	@ 0xfe
 80107a6:	0589      	lsls	r1, r1, #22
 80107a8:	f7ef fea4 	bl	80004f4 <__aeabi_fcmpgt>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d1eb      	bne.n	8010788 <__ieee754_asinf+0x40>
 80107b0:	1c20      	adds	r0, r4, #0
 80107b2:	f7ff ff4d 	bl	8010650 <fabsf>
 80107b6:	1c01      	adds	r1, r0, #0
 80107b8:	20fe      	movs	r0, #254	@ 0xfe
 80107ba:	0580      	lsls	r0, r0, #22
 80107bc:	f7f0 fbe2 	bl	8000f84 <__aeabi_fsub>
 80107c0:	21fc      	movs	r1, #252	@ 0xfc
 80107c2:	0589      	lsls	r1, r1, #22
 80107c4:	f7f0 faa0 	bl	8000d08 <__aeabi_fmul>
 80107c8:	4976      	ldr	r1, [pc, #472]	@ (80109a4 <__ieee754_asinf+0x25c>)
 80107ca:	1c04      	adds	r4, r0, #0
 80107cc:	f7f0 fa9c 	bl	8000d08 <__aeabi_fmul>
 80107d0:	4975      	ldr	r1, [pc, #468]	@ (80109a8 <__ieee754_asinf+0x260>)
 80107d2:	f7ef ff29 	bl	8000628 <__aeabi_fadd>
 80107d6:	1c21      	adds	r1, r4, #0
 80107d8:	f7f0 fa96 	bl	8000d08 <__aeabi_fmul>
 80107dc:	4973      	ldr	r1, [pc, #460]	@ (80109ac <__ieee754_asinf+0x264>)
 80107de:	f7f0 fbd1 	bl	8000f84 <__aeabi_fsub>
 80107e2:	1c21      	adds	r1, r4, #0
 80107e4:	f7f0 fa90 	bl	8000d08 <__aeabi_fmul>
 80107e8:	4971      	ldr	r1, [pc, #452]	@ (80109b0 <__ieee754_asinf+0x268>)
 80107ea:	f7ef ff1d 	bl	8000628 <__aeabi_fadd>
 80107ee:	1c21      	adds	r1, r4, #0
 80107f0:	f7f0 fa8a 	bl	8000d08 <__aeabi_fmul>
 80107f4:	496f      	ldr	r1, [pc, #444]	@ (80109b4 <__ieee754_asinf+0x26c>)
 80107f6:	f7f0 fbc5 	bl	8000f84 <__aeabi_fsub>
 80107fa:	1c21      	adds	r1, r4, #0
 80107fc:	f7f0 fa84 	bl	8000d08 <__aeabi_fmul>
 8010800:	496d      	ldr	r1, [pc, #436]	@ (80109b8 <__ieee754_asinf+0x270>)
 8010802:	f7ef ff11 	bl	8000628 <__aeabi_fadd>
 8010806:	1c21      	adds	r1, r4, #0
 8010808:	f7f0 fa7e 	bl	8000d08 <__aeabi_fmul>
 801080c:	496b      	ldr	r1, [pc, #428]	@ (80109bc <__ieee754_asinf+0x274>)
 801080e:	9001      	str	r0, [sp, #4]
 8010810:	1c20      	adds	r0, r4, #0
 8010812:	f7f0 fa79 	bl	8000d08 <__aeabi_fmul>
 8010816:	496a      	ldr	r1, [pc, #424]	@ (80109c0 <__ieee754_asinf+0x278>)
 8010818:	f7f0 fbb4 	bl	8000f84 <__aeabi_fsub>
 801081c:	1c21      	adds	r1, r4, #0
 801081e:	f7f0 fa73 	bl	8000d08 <__aeabi_fmul>
 8010822:	4968      	ldr	r1, [pc, #416]	@ (80109c4 <__ieee754_asinf+0x27c>)
 8010824:	f7ef ff00 	bl	8000628 <__aeabi_fadd>
 8010828:	1c21      	adds	r1, r4, #0
 801082a:	f7f0 fa6d 	bl	8000d08 <__aeabi_fmul>
 801082e:	4966      	ldr	r1, [pc, #408]	@ (80109c8 <__ieee754_asinf+0x280>)
 8010830:	f7f0 fba8 	bl	8000f84 <__aeabi_fsub>
 8010834:	1c21      	adds	r1, r4, #0
 8010836:	f7f0 fa67 	bl	8000d08 <__aeabi_fmul>
 801083a:	21fe      	movs	r1, #254	@ 0xfe
 801083c:	0589      	lsls	r1, r1, #22
 801083e:	f7ef fef3 	bl	8000628 <__aeabi_fadd>
 8010842:	1c07      	adds	r7, r0, #0
 8010844:	1c20      	adds	r0, r4, #0
 8010846:	f7ff ff07 	bl	8010658 <__ieee754_sqrtf>
 801084a:	4b60      	ldr	r3, [pc, #384]	@ (80109cc <__ieee754_asinf+0x284>)
 801084c:	1c05      	adds	r5, r0, #0
 801084e:	429e      	cmp	r6, r3
 8010850:	d966      	bls.n	8010920 <__ieee754_asinf+0x1d8>
 8010852:	1c39      	adds	r1, r7, #0
 8010854:	9801      	ldr	r0, [sp, #4]
 8010856:	f7f0 f871 	bl	800093c <__aeabi_fdiv>
 801085a:	1c29      	adds	r1, r5, #0
 801085c:	f7f0 fa54 	bl	8000d08 <__aeabi_fmul>
 8010860:	1c29      	adds	r1, r5, #0
 8010862:	f7ef fee1 	bl	8000628 <__aeabi_fadd>
 8010866:	1c01      	adds	r1, r0, #0
 8010868:	f7ef fede 	bl	8000628 <__aeabi_fadd>
 801086c:	4958      	ldr	r1, [pc, #352]	@ (80109d0 <__ieee754_asinf+0x288>)
 801086e:	f7ef fedb 	bl	8000628 <__aeabi_fadd>
 8010872:	1c01      	adds	r1, r0, #0
 8010874:	4848      	ldr	r0, [pc, #288]	@ (8010998 <__ieee754_asinf+0x250>)
 8010876:	f7f0 fb85 	bl	8000f84 <__aeabi_fsub>
 801087a:	9b02      	ldr	r3, [sp, #8]
 801087c:	1c04      	adds	r4, r0, #0
 801087e:	2b00      	cmp	r3, #0
 8010880:	dd00      	ble.n	8010884 <__ieee754_asinf+0x13c>
 8010882:	e781      	b.n	8010788 <__ieee754_asinf+0x40>
 8010884:	2380      	movs	r3, #128	@ 0x80
 8010886:	061b      	lsls	r3, r3, #24
 8010888:	18c4      	adds	r4, r0, r3
 801088a:	e77d      	b.n	8010788 <__ieee754_asinf+0x40>
 801088c:	1c01      	adds	r1, r0, #0
 801088e:	f7f0 fa3b 	bl	8000d08 <__aeabi_fmul>
 8010892:	4944      	ldr	r1, [pc, #272]	@ (80109a4 <__ieee754_asinf+0x25c>)
 8010894:	1c05      	adds	r5, r0, #0
 8010896:	f7f0 fa37 	bl	8000d08 <__aeabi_fmul>
 801089a:	4943      	ldr	r1, [pc, #268]	@ (80109a8 <__ieee754_asinf+0x260>)
 801089c:	f7ef fec4 	bl	8000628 <__aeabi_fadd>
 80108a0:	1c29      	adds	r1, r5, #0
 80108a2:	f7f0 fa31 	bl	8000d08 <__aeabi_fmul>
 80108a6:	4941      	ldr	r1, [pc, #260]	@ (80109ac <__ieee754_asinf+0x264>)
 80108a8:	f7f0 fb6c 	bl	8000f84 <__aeabi_fsub>
 80108ac:	1c29      	adds	r1, r5, #0
 80108ae:	f7f0 fa2b 	bl	8000d08 <__aeabi_fmul>
 80108b2:	493f      	ldr	r1, [pc, #252]	@ (80109b0 <__ieee754_asinf+0x268>)
 80108b4:	f7ef feb8 	bl	8000628 <__aeabi_fadd>
 80108b8:	1c29      	adds	r1, r5, #0
 80108ba:	f7f0 fa25 	bl	8000d08 <__aeabi_fmul>
 80108be:	493d      	ldr	r1, [pc, #244]	@ (80109b4 <__ieee754_asinf+0x26c>)
 80108c0:	f7f0 fb60 	bl	8000f84 <__aeabi_fsub>
 80108c4:	1c29      	adds	r1, r5, #0
 80108c6:	f7f0 fa1f 	bl	8000d08 <__aeabi_fmul>
 80108ca:	493b      	ldr	r1, [pc, #236]	@ (80109b8 <__ieee754_asinf+0x270>)
 80108cc:	f7ef feac 	bl	8000628 <__aeabi_fadd>
 80108d0:	1c29      	adds	r1, r5, #0
 80108d2:	f7f0 fa19 	bl	8000d08 <__aeabi_fmul>
 80108d6:	4939      	ldr	r1, [pc, #228]	@ (80109bc <__ieee754_asinf+0x274>)
 80108d8:	1c06      	adds	r6, r0, #0
 80108da:	1c28      	adds	r0, r5, #0
 80108dc:	f7f0 fa14 	bl	8000d08 <__aeabi_fmul>
 80108e0:	4937      	ldr	r1, [pc, #220]	@ (80109c0 <__ieee754_asinf+0x278>)
 80108e2:	f7f0 fb4f 	bl	8000f84 <__aeabi_fsub>
 80108e6:	1c29      	adds	r1, r5, #0
 80108e8:	f7f0 fa0e 	bl	8000d08 <__aeabi_fmul>
 80108ec:	4935      	ldr	r1, [pc, #212]	@ (80109c4 <__ieee754_asinf+0x27c>)
 80108ee:	f7ef fe9b 	bl	8000628 <__aeabi_fadd>
 80108f2:	1c29      	adds	r1, r5, #0
 80108f4:	f7f0 fa08 	bl	8000d08 <__aeabi_fmul>
 80108f8:	4933      	ldr	r1, [pc, #204]	@ (80109c8 <__ieee754_asinf+0x280>)
 80108fa:	f7f0 fb43 	bl	8000f84 <__aeabi_fsub>
 80108fe:	1c29      	adds	r1, r5, #0
 8010900:	f7f0 fa02 	bl	8000d08 <__aeabi_fmul>
 8010904:	21fe      	movs	r1, #254	@ 0xfe
 8010906:	0589      	lsls	r1, r1, #22
 8010908:	f7ef fe8e 	bl	8000628 <__aeabi_fadd>
 801090c:	1c01      	adds	r1, r0, #0
 801090e:	1c30      	adds	r0, r6, #0
 8010910:	f7f0 f814 	bl	800093c <__aeabi_fdiv>
 8010914:	1c21      	adds	r1, r4, #0
 8010916:	f7f0 f9f7 	bl	8000d08 <__aeabi_fmul>
 801091a:	1c01      	adds	r1, r0, #0
 801091c:	1c20      	adds	r0, r4, #0
 801091e:	e727      	b.n	8010770 <__ieee754_asinf+0x28>
 8010920:	1c01      	adds	r1, r0, #0
 8010922:	0b06      	lsrs	r6, r0, #12
 8010924:	f7ef fe80 	bl	8000628 <__aeabi_fadd>
 8010928:	1c39      	adds	r1, r7, #0
 801092a:	9003      	str	r0, [sp, #12]
 801092c:	9801      	ldr	r0, [sp, #4]
 801092e:	f7f0 f805 	bl	800093c <__aeabi_fdiv>
 8010932:	1c01      	adds	r1, r0, #0
 8010934:	9803      	ldr	r0, [sp, #12]
 8010936:	f7f0 f9e7 	bl	8000d08 <__aeabi_fmul>
 801093a:	0336      	lsls	r6, r6, #12
 801093c:	1c07      	adds	r7, r0, #0
 801093e:	1c31      	adds	r1, r6, #0
 8010940:	1c30      	adds	r0, r6, #0
 8010942:	f7f0 f9e1 	bl	8000d08 <__aeabi_fmul>
 8010946:	1c01      	adds	r1, r0, #0
 8010948:	1c20      	adds	r0, r4, #0
 801094a:	f7f0 fb1b 	bl	8000f84 <__aeabi_fsub>
 801094e:	1c31      	adds	r1, r6, #0
 8010950:	1c04      	adds	r4, r0, #0
 8010952:	1c28      	adds	r0, r5, #0
 8010954:	f7ef fe68 	bl	8000628 <__aeabi_fadd>
 8010958:	1c01      	adds	r1, r0, #0
 801095a:	1c20      	adds	r0, r4, #0
 801095c:	f7ef ffee 	bl	800093c <__aeabi_fdiv>
 8010960:	1c01      	adds	r1, r0, #0
 8010962:	f7ef fe61 	bl	8000628 <__aeabi_fadd>
 8010966:	1c01      	adds	r1, r0, #0
 8010968:	480c      	ldr	r0, [pc, #48]	@ (801099c <__ieee754_asinf+0x254>)
 801096a:	f7f0 fb0b 	bl	8000f84 <__aeabi_fsub>
 801096e:	1c01      	adds	r1, r0, #0
 8010970:	1c38      	adds	r0, r7, #0
 8010972:	f7f0 fb07 	bl	8000f84 <__aeabi_fsub>
 8010976:	1c31      	adds	r1, r6, #0
 8010978:	1c04      	adds	r4, r0, #0
 801097a:	1c30      	adds	r0, r6, #0
 801097c:	f7ef fe54 	bl	8000628 <__aeabi_fadd>
 8010980:	1c01      	adds	r1, r0, #0
 8010982:	4814      	ldr	r0, [pc, #80]	@ (80109d4 <__ieee754_asinf+0x28c>)
 8010984:	f7f0 fafe 	bl	8000f84 <__aeabi_fsub>
 8010988:	1c01      	adds	r1, r0, #0
 801098a:	1c20      	adds	r0, r4, #0
 801098c:	f7f0 fafa 	bl	8000f84 <__aeabi_fsub>
 8010990:	1c01      	adds	r1, r0, #0
 8010992:	4810      	ldr	r0, [pc, #64]	@ (80109d4 <__ieee754_asinf+0x28c>)
 8010994:	e76f      	b.n	8010876 <__ieee754_asinf+0x12e>
 8010996:	46c0      	nop			@ (mov r8, r8)
 8010998:	3fc90fdb 	.word	0x3fc90fdb
 801099c:	b33bbd2e 	.word	0xb33bbd2e
 80109a0:	7149f2ca 	.word	0x7149f2ca
 80109a4:	3811ef08 	.word	0x3811ef08
 80109a8:	3a4f7f04 	.word	0x3a4f7f04
 80109ac:	3d241146 	.word	0x3d241146
 80109b0:	3e4e0aa8 	.word	0x3e4e0aa8
 80109b4:	3ea6b090 	.word	0x3ea6b090
 80109b8:	3e2aaaab 	.word	0x3e2aaaab
 80109bc:	3d9dc62e 	.word	0x3d9dc62e
 80109c0:	3f303361 	.word	0x3f303361
 80109c4:	4001572d 	.word	0x4001572d
 80109c8:	4019d139 	.word	0x4019d139
 80109cc:	3f799999 	.word	0x3f799999
 80109d0:	333bbd2e 	.word	0x333bbd2e
 80109d4:	3f490fdb 	.word	0x3f490fdb

080109d8 <__ieee754_atan2f>:
 80109d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109da:	25ff      	movs	r5, #255	@ 0xff
 80109dc:	004a      	lsls	r2, r1, #1
 80109de:	9101      	str	r1, [sp, #4]
 80109e0:	0852      	lsrs	r2, r2, #1
 80109e2:	05ed      	lsls	r5, r5, #23
 80109e4:	42aa      	cmp	r2, r5
 80109e6:	d804      	bhi.n	80109f2 <__ieee754_atan2f+0x1a>
 80109e8:	0043      	lsls	r3, r0, #1
 80109ea:	0007      	movs	r7, r0
 80109ec:	085b      	lsrs	r3, r3, #1
 80109ee:	42ab      	cmp	r3, r5
 80109f0:	d902      	bls.n	80109f8 <__ieee754_atan2f+0x20>
 80109f2:	f7ef fe19 	bl	8000628 <__aeabi_fadd>
 80109f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80109f8:	24fe      	movs	r4, #254	@ 0xfe
 80109fa:	05a4      	lsls	r4, r4, #22
 80109fc:	42a1      	cmp	r1, r4
 80109fe:	d102      	bne.n	8010a06 <__ieee754_atan2f+0x2e>
 8010a00:	f000 f864 	bl	8010acc <atanf>
 8010a04:	e7f7      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a06:	2602      	movs	r6, #2
 8010a08:	178c      	asrs	r4, r1, #30
 8010a0a:	4034      	ands	r4, r6
 8010a0c:	0fc6      	lsrs	r6, r0, #31
 8010a0e:	4334      	orrs	r4, r6
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d105      	bne.n	8010a20 <__ieee754_atan2f+0x48>
 8010a14:	2c02      	cmp	r4, #2
 8010a16:	d045      	beq.n	8010aa4 <__ieee754_atan2f+0xcc>
 8010a18:	2c03      	cmp	r4, #3
 8010a1a:	d1ec      	bne.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a1c:	4823      	ldr	r0, [pc, #140]	@ (8010aac <__ieee754_atan2f+0xd4>)
 8010a1e:	e7ea      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	d103      	bne.n	8010a2c <__ieee754_atan2f+0x54>
 8010a24:	2f00      	cmp	r7, #0
 8010a26:	da3f      	bge.n	8010aa8 <__ieee754_atan2f+0xd0>
 8010a28:	4821      	ldr	r0, [pc, #132]	@ (8010ab0 <__ieee754_atan2f+0xd8>)
 8010a2a:	e7e4      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a2c:	42aa      	cmp	r2, r5
 8010a2e:	d10e      	bne.n	8010a4e <__ieee754_atan2f+0x76>
 8010a30:	3c01      	subs	r4, #1
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d104      	bne.n	8010a40 <__ieee754_atan2f+0x68>
 8010a36:	4b1f      	ldr	r3, [pc, #124]	@ (8010ab4 <__ieee754_atan2f+0xdc>)
 8010a38:	2c02      	cmp	r4, #2
 8010a3a:	d905      	bls.n	8010a48 <__ieee754_atan2f+0x70>
 8010a3c:	481e      	ldr	r0, [pc, #120]	@ (8010ab8 <__ieee754_atan2f+0xe0>)
 8010a3e:	e7da      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a40:	2000      	movs	r0, #0
 8010a42:	2c02      	cmp	r4, #2
 8010a44:	d8d7      	bhi.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a46:	4b1d      	ldr	r3, [pc, #116]	@ (8010abc <__ieee754_atan2f+0xe4>)
 8010a48:	00a4      	lsls	r4, r4, #2
 8010a4a:	58e0      	ldr	r0, [r4, r3]
 8010a4c:	e7d3      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a4e:	42ab      	cmp	r3, r5
 8010a50:	d0e8      	beq.n	8010a24 <__ieee754_atan2f+0x4c>
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	15db      	asrs	r3, r3, #23
 8010a56:	2b3c      	cmp	r3, #60	@ 0x3c
 8010a58:	dc14      	bgt.n	8010a84 <__ieee754_atan2f+0xac>
 8010a5a:	2900      	cmp	r1, #0
 8010a5c:	da01      	bge.n	8010a62 <__ieee754_atan2f+0x8a>
 8010a5e:	333c      	adds	r3, #60	@ 0x3c
 8010a60:	db12      	blt.n	8010a88 <__ieee754_atan2f+0xb0>
 8010a62:	f7ef ff6b 	bl	800093c <__aeabi_fdiv>
 8010a66:	f7ff fdf3 	bl	8010650 <fabsf>
 8010a6a:	f000 f82f 	bl	8010acc <atanf>
 8010a6e:	2c01      	cmp	r4, #1
 8010a70:	d00c      	beq.n	8010a8c <__ieee754_atan2f+0xb4>
 8010a72:	2c02      	cmp	r4, #2
 8010a74:	d00e      	beq.n	8010a94 <__ieee754_atan2f+0xbc>
 8010a76:	2c00      	cmp	r4, #0
 8010a78:	d0bd      	beq.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a7a:	4911      	ldr	r1, [pc, #68]	@ (8010ac0 <__ieee754_atan2f+0xe8>)
 8010a7c:	f7ef fdd4 	bl	8000628 <__aeabi_fadd>
 8010a80:	4910      	ldr	r1, [pc, #64]	@ (8010ac4 <__ieee754_atan2f+0xec>)
 8010a82:	e00c      	b.n	8010a9e <__ieee754_atan2f+0xc6>
 8010a84:	4810      	ldr	r0, [pc, #64]	@ (8010ac8 <__ieee754_atan2f+0xf0>)
 8010a86:	e7f2      	b.n	8010a6e <__ieee754_atan2f+0x96>
 8010a88:	2000      	movs	r0, #0
 8010a8a:	e7f0      	b.n	8010a6e <__ieee754_atan2f+0x96>
 8010a8c:	2380      	movs	r3, #128	@ 0x80
 8010a8e:	061b      	lsls	r3, r3, #24
 8010a90:	18c0      	adds	r0, r0, r3
 8010a92:	e7b0      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010a94:	490a      	ldr	r1, [pc, #40]	@ (8010ac0 <__ieee754_atan2f+0xe8>)
 8010a96:	f7ef fdc7 	bl	8000628 <__aeabi_fadd>
 8010a9a:	1c01      	adds	r1, r0, #0
 8010a9c:	4809      	ldr	r0, [pc, #36]	@ (8010ac4 <__ieee754_atan2f+0xec>)
 8010a9e:	f7f0 fa71 	bl	8000f84 <__aeabi_fsub>
 8010aa2:	e7a8      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010aa4:	4807      	ldr	r0, [pc, #28]	@ (8010ac4 <__ieee754_atan2f+0xec>)
 8010aa6:	e7a6      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010aa8:	4807      	ldr	r0, [pc, #28]	@ (8010ac8 <__ieee754_atan2f+0xf0>)
 8010aaa:	e7a4      	b.n	80109f6 <__ieee754_atan2f+0x1e>
 8010aac:	c0490fdb 	.word	0xc0490fdb
 8010ab0:	bfc90fdb 	.word	0xbfc90fdb
 8010ab4:	08011244 	.word	0x08011244
 8010ab8:	3f490fdb 	.word	0x3f490fdb
 8010abc:	08011238 	.word	0x08011238
 8010ac0:	33bbbd2e 	.word	0x33bbbd2e
 8010ac4:	40490fdb 	.word	0x40490fdb
 8010ac8:	3fc90fdb 	.word	0x3fc90fdb

08010acc <atanf>:
 8010acc:	23a1      	movs	r3, #161	@ 0xa1
 8010ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ad0:	0045      	lsls	r5, r0, #1
 8010ad2:	1c04      	adds	r4, r0, #0
 8010ad4:	9001      	str	r0, [sp, #4]
 8010ad6:	086d      	lsrs	r5, r5, #1
 8010ad8:	05db      	lsls	r3, r3, #23
 8010ada:	429d      	cmp	r5, r3
 8010adc:	d30f      	bcc.n	8010afe <atanf+0x32>
 8010ade:	23ff      	movs	r3, #255	@ 0xff
 8010ae0:	05db      	lsls	r3, r3, #23
 8010ae2:	429d      	cmp	r5, r3
 8010ae4:	d904      	bls.n	8010af0 <atanf+0x24>
 8010ae6:	1c01      	adds	r1, r0, #0
 8010ae8:	f7ef fd9e 	bl	8000628 <__aeabi_fadd>
 8010aec:	1c04      	adds	r4, r0, #0
 8010aee:	e004      	b.n	8010afa <atanf+0x2e>
 8010af0:	9b01      	ldr	r3, [sp, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	dc00      	bgt.n	8010af8 <atanf+0x2c>
 8010af6:	e0cc      	b.n	8010c92 <atanf+0x1c6>
 8010af8:	4c67      	ldr	r4, [pc, #412]	@ (8010c98 <atanf+0x1cc>)
 8010afa:	1c20      	adds	r0, r4, #0
 8010afc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010afe:	4b67      	ldr	r3, [pc, #412]	@ (8010c9c <atanf+0x1d0>)
 8010b00:	429d      	cmp	r5, r3
 8010b02:	d80f      	bhi.n	8010b24 <atanf+0x58>
 8010b04:	23c4      	movs	r3, #196	@ 0xc4
 8010b06:	059b      	lsls	r3, r3, #22
 8010b08:	429d      	cmp	r5, r3
 8010b0a:	d208      	bcs.n	8010b1e <atanf+0x52>
 8010b0c:	4964      	ldr	r1, [pc, #400]	@ (8010ca0 <atanf+0x1d4>)
 8010b0e:	f7ef fd8b 	bl	8000628 <__aeabi_fadd>
 8010b12:	21fe      	movs	r1, #254	@ 0xfe
 8010b14:	0589      	lsls	r1, r1, #22
 8010b16:	f7ef fced 	bl	80004f4 <__aeabi_fcmpgt>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d1ed      	bne.n	8010afa <atanf+0x2e>
 8010b1e:	2601      	movs	r6, #1
 8010b20:	4276      	negs	r6, r6
 8010b22:	e01b      	b.n	8010b5c <atanf+0x90>
 8010b24:	f7ff fd94 	bl	8010650 <fabsf>
 8010b28:	4b5e      	ldr	r3, [pc, #376]	@ (8010ca4 <atanf+0x1d8>)
 8010b2a:	1c04      	adds	r4, r0, #0
 8010b2c:	429d      	cmp	r5, r3
 8010b2e:	d87b      	bhi.n	8010c28 <atanf+0x15c>
 8010b30:	4b5d      	ldr	r3, [pc, #372]	@ (8010ca8 <atanf+0x1dc>)
 8010b32:	429d      	cmp	r5, r3
 8010b34:	d867      	bhi.n	8010c06 <atanf+0x13a>
 8010b36:	1c01      	adds	r1, r0, #0
 8010b38:	f7ef fd76 	bl	8000628 <__aeabi_fadd>
 8010b3c:	21fe      	movs	r1, #254	@ 0xfe
 8010b3e:	0589      	lsls	r1, r1, #22
 8010b40:	f7f0 fa20 	bl	8000f84 <__aeabi_fsub>
 8010b44:	2180      	movs	r1, #128	@ 0x80
 8010b46:	1c05      	adds	r5, r0, #0
 8010b48:	05c9      	lsls	r1, r1, #23
 8010b4a:	1c20      	adds	r0, r4, #0
 8010b4c:	f7ef fd6c 	bl	8000628 <__aeabi_fadd>
 8010b50:	1c01      	adds	r1, r0, #0
 8010b52:	1c28      	adds	r0, r5, #0
 8010b54:	f7ef fef2 	bl	800093c <__aeabi_fdiv>
 8010b58:	2600      	movs	r6, #0
 8010b5a:	1c04      	adds	r4, r0, #0
 8010b5c:	1c21      	adds	r1, r4, #0
 8010b5e:	1c20      	adds	r0, r4, #0
 8010b60:	f7f0 f8d2 	bl	8000d08 <__aeabi_fmul>
 8010b64:	1c01      	adds	r1, r0, #0
 8010b66:	1c07      	adds	r7, r0, #0
 8010b68:	f7f0 f8ce 	bl	8000d08 <__aeabi_fmul>
 8010b6c:	494f      	ldr	r1, [pc, #316]	@ (8010cac <atanf+0x1e0>)
 8010b6e:	1c05      	adds	r5, r0, #0
 8010b70:	f7f0 f8ca 	bl	8000d08 <__aeabi_fmul>
 8010b74:	494e      	ldr	r1, [pc, #312]	@ (8010cb0 <atanf+0x1e4>)
 8010b76:	f7ef fd57 	bl	8000628 <__aeabi_fadd>
 8010b7a:	1c29      	adds	r1, r5, #0
 8010b7c:	f7f0 f8c4 	bl	8000d08 <__aeabi_fmul>
 8010b80:	494c      	ldr	r1, [pc, #304]	@ (8010cb4 <atanf+0x1e8>)
 8010b82:	f7ef fd51 	bl	8000628 <__aeabi_fadd>
 8010b86:	1c29      	adds	r1, r5, #0
 8010b88:	f7f0 f8be 	bl	8000d08 <__aeabi_fmul>
 8010b8c:	494a      	ldr	r1, [pc, #296]	@ (8010cb8 <atanf+0x1ec>)
 8010b8e:	f7ef fd4b 	bl	8000628 <__aeabi_fadd>
 8010b92:	1c29      	adds	r1, r5, #0
 8010b94:	f7f0 f8b8 	bl	8000d08 <__aeabi_fmul>
 8010b98:	4948      	ldr	r1, [pc, #288]	@ (8010cbc <atanf+0x1f0>)
 8010b9a:	f7ef fd45 	bl	8000628 <__aeabi_fadd>
 8010b9e:	1c29      	adds	r1, r5, #0
 8010ba0:	f7f0 f8b2 	bl	8000d08 <__aeabi_fmul>
 8010ba4:	4946      	ldr	r1, [pc, #280]	@ (8010cc0 <atanf+0x1f4>)
 8010ba6:	f7ef fd3f 	bl	8000628 <__aeabi_fadd>
 8010baa:	1c39      	adds	r1, r7, #0
 8010bac:	f7f0 f8ac 	bl	8000d08 <__aeabi_fmul>
 8010bb0:	4944      	ldr	r1, [pc, #272]	@ (8010cc4 <atanf+0x1f8>)
 8010bb2:	1c07      	adds	r7, r0, #0
 8010bb4:	1c28      	adds	r0, r5, #0
 8010bb6:	f7f0 f8a7 	bl	8000d08 <__aeabi_fmul>
 8010bba:	4943      	ldr	r1, [pc, #268]	@ (8010cc8 <atanf+0x1fc>)
 8010bbc:	f7f0 f9e2 	bl	8000f84 <__aeabi_fsub>
 8010bc0:	1c29      	adds	r1, r5, #0
 8010bc2:	f7f0 f8a1 	bl	8000d08 <__aeabi_fmul>
 8010bc6:	4941      	ldr	r1, [pc, #260]	@ (8010ccc <atanf+0x200>)
 8010bc8:	f7f0 f9dc 	bl	8000f84 <__aeabi_fsub>
 8010bcc:	1c29      	adds	r1, r5, #0
 8010bce:	f7f0 f89b 	bl	8000d08 <__aeabi_fmul>
 8010bd2:	493f      	ldr	r1, [pc, #252]	@ (8010cd0 <atanf+0x204>)
 8010bd4:	f7f0 f9d6 	bl	8000f84 <__aeabi_fsub>
 8010bd8:	1c29      	adds	r1, r5, #0
 8010bda:	f7f0 f895 	bl	8000d08 <__aeabi_fmul>
 8010bde:	493d      	ldr	r1, [pc, #244]	@ (8010cd4 <atanf+0x208>)
 8010be0:	f7f0 f9d0 	bl	8000f84 <__aeabi_fsub>
 8010be4:	1c29      	adds	r1, r5, #0
 8010be6:	f7f0 f88f 	bl	8000d08 <__aeabi_fmul>
 8010bea:	1c01      	adds	r1, r0, #0
 8010bec:	1c38      	adds	r0, r7, #0
 8010bee:	f7ef fd1b 	bl	8000628 <__aeabi_fadd>
 8010bf2:	1c21      	adds	r1, r4, #0
 8010bf4:	f7f0 f888 	bl	8000d08 <__aeabi_fmul>
 8010bf8:	1c73      	adds	r3, r6, #1
 8010bfa:	d134      	bne.n	8010c66 <atanf+0x19a>
 8010bfc:	1c01      	adds	r1, r0, #0
 8010bfe:	1c20      	adds	r0, r4, #0
 8010c00:	f7f0 f9c0 	bl	8000f84 <__aeabi_fsub>
 8010c04:	e772      	b.n	8010aec <atanf+0x20>
 8010c06:	21fe      	movs	r1, #254	@ 0xfe
 8010c08:	0589      	lsls	r1, r1, #22
 8010c0a:	f7f0 f9bb 	bl	8000f84 <__aeabi_fsub>
 8010c0e:	21fe      	movs	r1, #254	@ 0xfe
 8010c10:	1c05      	adds	r5, r0, #0
 8010c12:	0589      	lsls	r1, r1, #22
 8010c14:	1c20      	adds	r0, r4, #0
 8010c16:	f7ef fd07 	bl	8000628 <__aeabi_fadd>
 8010c1a:	1c01      	adds	r1, r0, #0
 8010c1c:	1c28      	adds	r0, r5, #0
 8010c1e:	f7ef fe8d 	bl	800093c <__aeabi_fdiv>
 8010c22:	2601      	movs	r6, #1
 8010c24:	1c04      	adds	r4, r0, #0
 8010c26:	e799      	b.n	8010b5c <atanf+0x90>
 8010c28:	4b2b      	ldr	r3, [pc, #172]	@ (8010cd8 <atanf+0x20c>)
 8010c2a:	429d      	cmp	r5, r3
 8010c2c:	d814      	bhi.n	8010c58 <atanf+0x18c>
 8010c2e:	21ff      	movs	r1, #255	@ 0xff
 8010c30:	0589      	lsls	r1, r1, #22
 8010c32:	f7f0 f9a7 	bl	8000f84 <__aeabi_fsub>
 8010c36:	21ff      	movs	r1, #255	@ 0xff
 8010c38:	1c05      	adds	r5, r0, #0
 8010c3a:	0589      	lsls	r1, r1, #22
 8010c3c:	1c20      	adds	r0, r4, #0
 8010c3e:	f7f0 f863 	bl	8000d08 <__aeabi_fmul>
 8010c42:	21fe      	movs	r1, #254	@ 0xfe
 8010c44:	0589      	lsls	r1, r1, #22
 8010c46:	f7ef fcef 	bl	8000628 <__aeabi_fadd>
 8010c4a:	1c01      	adds	r1, r0, #0
 8010c4c:	1c28      	adds	r0, r5, #0
 8010c4e:	f7ef fe75 	bl	800093c <__aeabi_fdiv>
 8010c52:	2602      	movs	r6, #2
 8010c54:	1c04      	adds	r4, r0, #0
 8010c56:	e781      	b.n	8010b5c <atanf+0x90>
 8010c58:	1c01      	adds	r1, r0, #0
 8010c5a:	4820      	ldr	r0, [pc, #128]	@ (8010cdc <atanf+0x210>)
 8010c5c:	f7ef fe6e 	bl	800093c <__aeabi_fdiv>
 8010c60:	2603      	movs	r6, #3
 8010c62:	1c04      	adds	r4, r0, #0
 8010c64:	e77a      	b.n	8010b5c <atanf+0x90>
 8010c66:	4b1e      	ldr	r3, [pc, #120]	@ (8010ce0 <atanf+0x214>)
 8010c68:	00b6      	lsls	r6, r6, #2
 8010c6a:	58f1      	ldr	r1, [r6, r3]
 8010c6c:	f7f0 f98a 	bl	8000f84 <__aeabi_fsub>
 8010c70:	1c21      	adds	r1, r4, #0
 8010c72:	f7f0 f987 	bl	8000f84 <__aeabi_fsub>
 8010c76:	4d1b      	ldr	r5, [pc, #108]	@ (8010ce4 <atanf+0x218>)
 8010c78:	1c01      	adds	r1, r0, #0
 8010c7a:	5970      	ldr	r0, [r6, r5]
 8010c7c:	f7f0 f982 	bl	8000f84 <__aeabi_fsub>
 8010c80:	9b01      	ldr	r3, [sp, #4]
 8010c82:	1c04      	adds	r4, r0, #0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	db00      	blt.n	8010c8a <atanf+0x1be>
 8010c88:	e737      	b.n	8010afa <atanf+0x2e>
 8010c8a:	2380      	movs	r3, #128	@ 0x80
 8010c8c:	061b      	lsls	r3, r3, #24
 8010c8e:	18c4      	adds	r4, r0, r3
 8010c90:	e733      	b.n	8010afa <atanf+0x2e>
 8010c92:	4c15      	ldr	r4, [pc, #84]	@ (8010ce8 <atanf+0x21c>)
 8010c94:	e731      	b.n	8010afa <atanf+0x2e>
 8010c96:	46c0      	nop			@ (mov r8, r8)
 8010c98:	3fc90fdb 	.word	0x3fc90fdb
 8010c9c:	3edfffff 	.word	0x3edfffff
 8010ca0:	7149f2ca 	.word	0x7149f2ca
 8010ca4:	3f97ffff 	.word	0x3f97ffff
 8010ca8:	3f2fffff 	.word	0x3f2fffff
 8010cac:	3c8569d7 	.word	0x3c8569d7
 8010cb0:	3d4bda59 	.word	0x3d4bda59
 8010cb4:	3d886b35 	.word	0x3d886b35
 8010cb8:	3dba2e6e 	.word	0x3dba2e6e
 8010cbc:	3e124925 	.word	0x3e124925
 8010cc0:	3eaaaaab 	.word	0x3eaaaaab
 8010cc4:	bd15a221 	.word	0xbd15a221
 8010cc8:	3d6ef16b 	.word	0x3d6ef16b
 8010ccc:	3d9d8795 	.word	0x3d9d8795
 8010cd0:	3de38e38 	.word	0x3de38e38
 8010cd4:	3e4ccccd 	.word	0x3e4ccccd
 8010cd8:	401bffff 	.word	0x401bffff
 8010cdc:	bf800000 	.word	0xbf800000
 8010ce0:	08011250 	.word	0x08011250
 8010ce4:	08011260 	.word	0x08011260
 8010ce8:	bfc90fdb 	.word	0xbfc90fdb

08010cec <_init>:
 8010cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cee:	46c0      	nop			@ (mov r8, r8)
 8010cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cf2:	bc08      	pop	{r3}
 8010cf4:	469e      	mov	lr, r3
 8010cf6:	4770      	bx	lr

08010cf8 <_fini>:
 8010cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfa:	46c0      	nop			@ (mov r8, r8)
 8010cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cfe:	bc08      	pop	{r3}
 8010d00:	469e      	mov	lr, r3
 8010d02:	4770      	bx	lr
